[
    {
        "table_id": "0",
        "table_info": {
            "table_caption": "Table 1: Semantic parsing accuracies (id = in domain test set; ood = out of domain test set).",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] DM id F",
                "[BOLD] DM ood F",
                "[BOLD] PAS id F",
                "[BOLD] PAS ood F",
                "[BOLD] PSD id F",
                "[BOLD] PSD ood F",
                "[BOLD] EDS Smatch F",
                "[BOLD] EDS EDM",
                "[BOLD] AMR 2015 Smatch F",
                "[BOLD] AMR 2017 Smatch F"
            ],
            "table_content_values": [
                [
                    "Groschwitz et al. ( 2018 )",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "70.2",
                    "71.0"
                ],
                [
                    "Lyu and Titov ( 2018 )",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "73.7",
                    "74.4 ±0.16"
                ],
                [
                    "Zhang et al. ( 2019 )",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "[BOLD] 76.3 ±0.1"
                ],
                [
                    "Peng et al. ( 2017 ) Basic",
                    "89.4",
                    "84.5",
                    "92.2",
                    "88.3",
                    "77.6",
                    "75.3",
                    "-",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "Dozat and Manning ( 2018 )",
                    "93.7",
                    "88.9",
                    "94.0",
                    "90.8",
                    "81.0",
                    "79.4",
                    "-",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "Buys and Blunsom ( 2017 )",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "85.5",
                    "85.9",
                    "60.1",
                    "-"
                ],
                [
                    "Chen et al. ( 2018 )",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "[BOLD] 90.9,",
                    "[BOLD] 90.41",
                    "-",
                    "-"
                ],
                [
                    "This paper (GloVe)",
                    "90.4 ±0.2",
                    "84.3 ±0.2",
                    "91.4 ±0.1",
                    "86.6 ±0.1",
                    "78.1 ±0.2",
                    "74.5 ±0.2",
                    "87.6 ±0.1",
                    "82.5 ±0.1",
                    "69.2 ±0.4",
                    "70.7 ±0.2"
                ],
                [
                    "This paper (BERT)",
                    "[BOLD] 93.9 ±0.1",
                    "[BOLD] 90.3 ±0.1",
                    "[BOLD] 94.5 ±0.1",
                    "[BOLD] 92.5 ±0.1",
                    "[BOLD] 82.0 ±0.1",
                    "[BOLD] 81.5 ±0.3",
                    "90.1 ±0.1",
                    "84.9 ±0.1",
                    "[BOLD] 74.3 ±0.2",
                    "75.3 ±0.2"
                ],
                [
                    "Peng et al. ( 2017 ) Freda1",
                    "90.0",
                    "84.9",
                    "92.3",
                    "88.3",
                    "78.1",
                    "75.8",
                    "-",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "Peng et al. ( 2017 ) Freda3",
                    "90.4",
                    "85.3",
                    "92.7",
                    "89.0",
                    "78.5",
                    "76.4",
                    "-",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "This paper, MTL (GloVe)",
                    "91.2 ±0.1",
                    "85.7 ±0.0",
                    "92.2 ±0.2",
                    "88.0 ±0.3",
                    "78.9 ±0.3",
                    "76.2 ±0.4",
                    "88.2 ±0.1",
                    "83.3 ±0.1",
                    "(70.4) ±0.2",
                    "71.2 ±0.2"
                ],
                [
                    "This paper, MTL (BERT)",
                    "[BOLD] 94.1 ±0.1",
                    "[BOLD] 90.5 ±0.1",
                    "[BOLD] 94.7 ±0.1",
                    "[BOLD] 92.8 ±0.1",
                    "[BOLD] 82.1 ±0.2",
                    "[BOLD] 81.6 ±0.1",
                    "90.4 ±0.1",
                    "85.2 ±0.1",
                    "(74.5)3 ±0.1",
                    "75.3 ±0.1"
                ]
            ]
        },
        "gold_description": "table 1 ( upper part ) shows the results of our basic semantic parser ( with glove embeddings ) on all six graphbanks our results are competitive across the board , and set a new state of the art for eds smatch scores ( cai and knight , 2013 ) among eds parsers which are not trained on gold syntax information . our edm score ( dridan and oepen , 2011 ) on eds is lower , the use of bert embeddings is highly effective across the board . we set a new state of the art ( without gold syntax ) on all graphbanks except amr 2017 ; the improvement is particularly pronounced in the out - of - domain evaluations , illustrating bert ' s ability to transfer across domains . the results on the test dataset are shown in table 1 ( bottom ) . with glove , multi - task learning led to substantial improvements ; with bert the improvements are smaller but still noticeable .",
        "generated_description": "our system outperforms the previous state - of - the - art system peng et al . our system obtains the best performance on the id and ood tagging task , and is competitive on the psd and eds tagging tasks . the improvement on the dm and pas tagging tasks is relatively smaller than on the eds and amr tasks , possibly due to the smaller size of the training set for the dm task ."
    },
    {
        "table_id": "1",
        "table_info": {
            "table_caption": "Table 4: All experiment results of transfer learning and abbreviation expansion (top-2 scores marked as bold). MedNLI (expanded) denotes MedNLI with abbreviation expansion.",
            "table_column_names": [
                "[BOLD] Dataset",
                "[BOLD] BERT dev",
                "[BOLD] BERT test",
                "[BOLD] BioBERT dev",
                "[BOLD] BioBERT test"
            ],
            "table_content_values": [
                [
                    "MedNLI",
                    "79.56",
                    "77.49",
                    "82.15",
                    "79.04"
                ],
                [
                    "MNLI (M)",
                    "83.52",
                    "-",
                    "81.23",
                    "-"
                ],
                [
                    "SNLI (S)",
                    "90.39",
                    "-",
                    "89.10",
                    "-"
                ],
                [
                    "M → MedNLI",
                    "80.14",
                    "[BOLD] 78.62",
                    "82.72",
                    "80.80"
                ],
                [
                    "S → MedNLI",
                    "80.28",
                    "78.19",
                    "83.29",
                    "81.29"
                ],
                [
                    "M → S → MedNLI",
                    "80.43",
                    "78.12",
                    "83.29",
                    "80.30"
                ],
                [
                    "S → M → MedNLI",
                    "[BOLD] 81.72",
                    "77.98",
                    "[BOLD] 83.51",
                    "[BOLD] 82.63"
                ],
                [
                    "MedNLI (expanded)",
                    "79.13",
                    "77.07",
                    "[BOLD] 83.87",
                    "79.95"
                ],
                [
                    "S → M → MedNLI (expanded)",
                    "[BOLD] 82.15",
                    "[BOLD] 79.95",
                    "83.08",
                    "[BOLD] 81.85"
                ]
            ]
        },
        "gold_description": "we conduct transfer learning on four different combinations of mednli , snli , and mnli as it shown in the table 4 ( line 4 to 7 ) and also add the results of general domain tasks ( mnli , snli ) for comparison . bert performs better on tasks in the general domain while biobert performs better on mednli which is in the clinical domain . positive transfer occurs on mednli . even though biobert is finetuned on general domain tasks before mednli , transfer learning shows better results than that fine - tuned on mednli directly . the domain specific language representations from biobert are maintained while fine - tuning on general domain tasks by showing that the transfer learning results of mednli on biobert have better performance than the results on bert ( line 4 to 7 ) . the accuracy of mnli and snli on biobert is lower than the accuracy on bert . the best combination is snli → mnli → mednli on biobert . mednli ( expanded ) shows better performance than mednli on biobert while mednli works better on bert ( see table 4 ) . the performance of mednli ( expanded ) with transfer learning is higher on bert and lower on biobert than the performance of mednli with transfer learning .",
        "generated_description": "the mnli ( m ) and snli ( s ) datasets are taken from the penn treebank ( ptb ) and the multinli ( mnli ) datasets , respectively . for the mednli dataset , we use the original bert model and the biobert model that was pre - trained on the mednli training set . the snli dataset is taken from wmt ’ 14 nlpcc ’ s shared task , which is a subset of the snli corpus . we follow the same procedure as in the mnli datasets , except that we do not fine - tune the word embeddings of the bert models , as we found that fine - tuning bert on the original mnli dataset did not improve the performance of the model . we also follow wmt ’ 14 snli and mnli with the same hyperparameter settings as in their original papers . for all of the tasks , we follow the settings in the original papers and follow the procedure of lin et al ."
    },
    {
        "table_id": "2",
        "table_info": {
            "table_caption": "Table 2: Average performance (across 100 seeds) of ELMo on the SST2 task. We show performance on A-but-B sentences (“but”), negations (“neg”).",
            "table_column_names": [
                "Model no-distill",
                "Model no-project",
                "Test 85.98",
                "[ITALIC] but 78.69",
                "[ITALIC] but or  [ITALIC] neg 80.13"
            ],
            "table_content_values": [
                [
                    "no-distill",
                    "project",
                    "86.54",
                    "83.40",
                    "-"
                ],
                [
                    "distill",
                    "no-project",
                    "86.11",
                    "79.04",
                    "-"
                ],
                [
                    "distill",
                    "project",
                    "86.62",
                    "83.32",
                    "-"
                ],
                [
                    "ELMo",
                    "no-project",
                    "88.89",
                    "86.51",
                    "87.24"
                ],
                [
                    "ELMo",
                    "project",
                    "88.96",
                    "87.20",
                    "-"
                ]
            ]
        },
        "gold_description": "switching to elmo word embeddings improves performance by 2 . 9 percentage points on an average , corresponding to about 53 test sentences . of these , about 32 sentences ( 60 % of the improvement ) correspond to a - but - b and negation style sentences , as further evidence that elmo helps on these specific constructions , the non - elmo baseline model ( no - project , no - distill ) gets 255 sentences wrong in the test corpus on average , only 89 ( 34 . 8 % ) of which are a - but - b style or negations .",
        "generated_description": "we see that the distillation model slightly outperforms the no - project model on the but and negation tasks , and that the elmo model with the project objective performs slightly better than without distillation on the a - but - b sentences . however , the difference is not statistically significant . we hypothesize that this is due to the fact that the sst2 dataset is constructed in such a way that distillation is less useful for negation ."
    },
    {
        "table_id": "3",
        "table_info": {
            "table_caption": "Table 3: Number of sentences in the crowdsourced study (447 sentences) which got marked as neutral and which got the opposite of their labels in the SST2 dataset, using various thresholds. Inter-annotator agreement is computed using Fleiss’ Kappa. Average accuracies of the baseline and ELMo (over 100 seeds) on non-neutral sentences are also shown.",
            "table_column_names": [
                "Threshold",
                "0.50",
                "0.66",
                "0.75",
                "0.90"
            ],
            "table_content_values": [
                [
                    "Neutral Sentiment",
                    "10",
                    "70",
                    "95",
                    "234"
                ],
                [
                    "Flipped Sentiment",
                    "15",
                    "4",
                    "2",
                    "0"
                ],
                [
                    "Fleiss’ Kappa ( [ITALIC] κ)",
                    "0.38",
                    "0.42",
                    "0.44",
                    "0.58"
                ],
                [
                    "no-distill, no-project",
                    "81.32",
                    "83.54",
                    "84.54",
                    "87.55"
                ],
                [
                    "ELMo, no-project",
                    "87.56",
                    "90.00",
                    "91.31",
                    "93.14"
                ]
            ]
        },
        "gold_description": "we present statistics of our dataset10 in table 3 . as expected , inter - annotator agreement is higher for higher thresholds ( less ambiguous sentences ) . according to landis and koch ( 1977 ) , κ ∈ ( 0 . 2 , 0 . 4 ] corresponds to \" fair agreement \" , whereas κ ∈ ( 0 . 4 , 0 . 6 ] corresponds to \" moderate agreement \" . we next compute the accuracy of our model for each threshold by removing the corresponding neutral sentences . higher thresholds correspond to sets of less ambiguous sentences . table 3 shows that elmo ' s performance gains in table 2 extends across all thresholds .",
        "generated_description": "for the sst2 dataset , elmo outperforms the baseline model on the majority of the sentences ( 87 . 56 % vs . 81 . 32 % ) and on the sentences which got the opposite labels ( 84 . 54 % vs 87 . 55 % ) . the elmo model outperforms both the baseline and the no - distill , no - project model on non - neutral sentences , with 93 . 14 % versus 91 . 31 % accuracy for elmo ."
    },
    {
        "table_id": "4",
        "table_info": {
            "table_caption": "Table 1: Tuning Data Results AVG_COS_SIM. Top F per Concept Input Type in Bold.",
            "table_column_names": [
                "[BOLD] Concept Input →  [BOLD] Embeddings",
                "[BOLD] Concept Input →  [BOLD] TF",
                "[BOLD] Concept Input →  [BOLD] IDF",
                "[BOLD] Label  [BOLD] T",
                "[BOLD] Label  [BOLD] P",
                "[BOLD] Label  [BOLD] R",
                "[BOLD] Label  [BOLD] F",
                "[BOLD] Description  [BOLD] T",
                "[BOLD] Description  [BOLD] P",
                "[BOLD] Description  [BOLD] R",
                "[BOLD] Description  [BOLD] F",
                "[BOLD] Both  [BOLD] T",
                "[BOLD] Both  [BOLD] P",
                "[BOLD] Both  [BOLD] R",
                "[BOLD] Both  [BOLD] F"
            ],
            "table_content_values": [
                [
                    "[BOLD] GloVe",
                    "[BOLD] -",
                    "[BOLD] -",
                    ".635",
                    ".750",
                    ".818",
                    ".783",
                    ".720",
                    ".754",
                    ".891",
                    ".817",
                    ".735",
                    ".765",
                    ".945",
                    ".846"
                ],
                [
                    "[BOLD] GloVe",
                    "[BOLD] +",
                    "[BOLD] -",
                    ".640",
                    ".891",
                    ".745",
                    ".812",
                    ".700",
                    ".831",
                    ".891",
                    ".860",
                    ".690",
                    ".813",
                    ".945",
                    ".874"
                ],
                [
                    "[BOLD] GloVe",
                    "[BOLD] -",
                    "[BOLD] +",
                    ".600",
                    ".738",
                    ".873",
                    ".800",
                    ".670",
                    ".746",
                    ".909",
                    ".820",
                    ".755",
                    ".865",
                    ".818",
                    ".841"
                ],
                [
                    "[BOLD] GloVe",
                    "[BOLD] +",
                    "[BOLD] +",
                    ".605",
                    ".904",
                    ".855",
                    ".879",
                    ".665",
                    ".857",
                    ".873",
                    ".865",
                    ".715",
                    ".923",
                    ".873",
                    ".897"
                ],
                [
                    "[BOLD] Google",
                    "[BOLD] -",
                    "[BOLD] -",
                    ".440",
                    ".813",
                    ".945",
                    ".874",
                    ".515",
                    ".701",
                    ".982",
                    ".818",
                    ".635",
                    ".920",
                    ".836",
                    ".876"
                ],
                [
                    "[BOLD] Google",
                    "[BOLD] +",
                    "[BOLD] -",
                    ".445",
                    ".943",
                    ".909",
                    "[BOLD] .926",
                    ".540",
                    ".873",
                    ".873",
                    ".873",
                    ".565",
                    ".927",
                    ".927",
                    ".927"
                ],
                [
                    "[BOLD] Google",
                    "[BOLD] -",
                    "[BOLD] +",
                    ".435",
                    ".839",
                    ".945",
                    ".889",
                    ".520",
                    ".732",
                    ".945",
                    ".825",
                    ".590",
                    ".877",
                    ".909",
                    ".893"
                ],
                [
                    "[BOLD] Google",
                    "[BOLD] +",
                    "[BOLD] +",
                    ".430",
                    ".943",
                    ".909",
                    "[BOLD] .926",
                    ".530",
                    ".889",
                    ".873",
                    "[BOLD] .881",
                    ".545",
                    ".945",
                    ".945",
                    "[BOLD] .945"
                ],
                [
                    "[BOLD] fastText",
                    "[BOLD] -",
                    "[BOLD] -",
                    ".440",
                    ".781",
                    ".909",
                    ".840",
                    ".555",
                    ".708",
                    ".927",
                    ".803",
                    ".615",
                    ".778",
                    ".891",
                    ".831"
                ],
                [
                    "[BOLD] fastText",
                    "[BOLD] +",
                    "[BOLD] -",
                    ".435",
                    ".850",
                    ".927",
                    ".887",
                    ".520",
                    ".781",
                    ".909",
                    ".840",
                    ".530",
                    ".803",
                    ".964",
                    ".876"
                ],
                [
                    "[BOLD] fastText",
                    "[BOLD] -",
                    "[BOLD] +",
                    ".435",
                    ".850",
                    ".927",
                    ".887",
                    ".525",
                    ".722",
                    ".945",
                    ".819",
                    ".600",
                    ".820",
                    ".909",
                    ".862"
                ],
                [
                    "[BOLD] fastText",
                    "[BOLD] +",
                    "[BOLD] +",
                    ".420",
                    ".895",
                    ".927",
                    ".911",
                    ".505",
                    ".803",
                    ".891",
                    ".845",
                    ".520",
                    ".833",
                    ".909",
                    ".870"
                ]
            ]
        },
        "gold_description": "the top tuning data scores for avg cos sim ( table 1 ) show that the google embeddings with tf * idf weighting yield the top f score for all three concept input types ( . 881 - . 945 ) . somewhat expectedly , the best overall f score ( . 945 ) is produced in the setting both , which provides the most information . actually , this is true for all four weighting schemes for both glove and google , while fasttext consistently yields its top f scores ( . 840 - . 911 ) in the label setting , which provides the least information .",
        "generated_description": "in order to evaluate the performance of the proposed embeddings , we compare them with the baseline glove model trained on the training set of conceptnet . we report the precision ( p ) , recall ( r ) and f - measure ( f ) scores for the entity - concept pairs that were not seen during the training phase . we also report the performance for the concept pairs that did not see any training data . we can see that the addition of the tf - idf - embeddings consistently improves the performance , especially for the ‘ both ’ category , which is the most challenging one ."
    },
    {
        "table_id": "5",
        "table_info": {
            "table_caption": "Table 2: Tuning Data Results TOP_n_COS_SIM_AVG. Top F per Concept Input Type in Bold.",
            "table_column_names": [
                "[BOLD] Concept Input →  [BOLD] Embeddings",
                "[BOLD] Concept Input →  [BOLD] TF",
                "[BOLD] Concept Input →  [BOLD] IDF",
                "[BOLD] Label  [BOLD] T/n",
                "[BOLD] Label  [BOLD] P",
                "[BOLD] Label  [BOLD] R",
                "[BOLD] Label  [BOLD] F",
                "[BOLD] Description  [BOLD] T/n",
                "[BOLD] Description  [BOLD] P",
                "[BOLD] Description  [BOLD] R",
                "[BOLD] Description  [BOLD] F",
                "[BOLD] Both  [BOLD] T/n",
                "[BOLD] Both  [BOLD] P",
                "[BOLD] Both  [BOLD] R",
                "[BOLD] Both  [BOLD] F"
            ],
            "table_content_values": [
                [
                    "[BOLD] GloVe",
                    "[BOLD] +",
                    "[BOLD] -",
                    ".365/6",
                    ".797",
                    ".927",
                    ".857",
                    ".690/14",
                    ".915",
                    ".782",
                    ".843",
                    ".675/16",
                    ".836",
                    ".927",
                    ".879"
                ],
                [
                    "[BOLD] GloVe",
                    "[BOLD] -",
                    "[BOLD] +",
                    ".300/30",
                    ".929",
                    ".236",
                    ".377",
                    ".300/30",
                    ".806",
                    ".455",
                    ".581",
                    ".300/30",
                    ".778",
                    ".636",
                    ".700"
                ],
                [
                    "[BOLD] GloVe",
                    "[BOLD] +",
                    "[BOLD] +",
                    ".330/6",
                    ".879",
                    ".927",
                    ".903",
                    ".345/6",
                    ".881",
                    ".945",
                    "[BOLD] .912",
                    ".345/6",
                    ".895",
                    ".927",
                    ".911"
                ],
                [
                    "[BOLD] Google",
                    "[BOLD] +",
                    "[BOLD] -",
                    ".345/22",
                    ".981",
                    ".927",
                    "[BOLD] .953",
                    ".480/16",
                    ".895",
                    ".927",
                    ".911",
                    ".520/16",
                    ".912",
                    ".945",
                    ".929"
                ],
                [
                    "[BOLD] Google",
                    "[BOLD] -",
                    "[BOLD] +",
                    ".300/30",
                    "1.00",
                    ".345",
                    ".514",
                    ".300/8",
                    "1.00",
                    ".345",
                    ".514",
                    ".300/30",
                    "1.00",
                    ".600",
                    ".750"
                ],
                [
                    "[BOLD] Google",
                    "[BOLD] +",
                    "[BOLD] +",
                    ".300/10",
                    "1.00",
                    ".509",
                    ".675",
                    ".300/14",
                    ".972",
                    ".636",
                    ".769",
                    ".350/22",
                    "1.00",
                    ".836",
                    ".911"
                ],
                [
                    "[BOLD] fastText",
                    "[BOLD] +",
                    "[BOLD] -",
                    ".415/22",
                    ".980",
                    ".873",
                    ".923",
                    ".525/14",
                    ".887",
                    ".855",
                    ".870",
                    ".535/20",
                    ".869",
                    ".964",
                    ".914"
                ],
                [
                    "[BOLD] fastText",
                    "[BOLD] -",
                    "[BOLD] +",
                    ".350/24",
                    "1.00",
                    ".309",
                    ".472",
                    ".300/30",
                    "1.00",
                    ".382",
                    ".553",
                    ".300/28",
                    "1.00",
                    ".673",
                    ".804"
                ],
                [
                    "[BOLD] fastText",
                    "[BOLD] +",
                    "[BOLD] +",
                    ".300/20",
                    "1.00",
                    ".800",
                    ".889",
                    ".300/10",
                    ".953",
                    ".745",
                    ".837",
                    ".310/14",
                    ".963",
                    ".945",
                    "[BOLD] .954"
                ]
            ]
        },
        "gold_description": "for top n cos sim avg , the tuning data results ( table 2 ) are somewhat more varied : first , there is no single best performing set of embeddings : google yields the best f score for the label setting ( . 953 ) , while glove ( though only barely ) leads in the description setting ( . 912 ) . this time , it is fasttext which produces the best f score in the both setting , which is also the best overall tuning data f score for top n cos sim avg ( . 954 ) .",
        "generated_description": "in order to evaluate the performance of the proposed embeddings , we compare them with the baseline glove model trained on the same corpus with the same training procedure . the results show that the proposed approach significantly outperforms the baseline in terms of the precision , recall and f - measure for both types of concepts . the proposed approach achieves the best performance for the ‘ t / n ’ type of concepts , while the baseline performs the best for ‘ both ’ types ."
    },
    {
        "table_id": "6",
        "table_info": {
            "table_caption": "Table 3: Test Data Results",
            "table_column_names": [
                "Gong et al.  [BOLD] ( 2018  [BOLD] )",
                "topic_science",
                "topic_science",
                "topic_science",
                "topic_science",
                "topic_science",
                "[BOLD] P .758",
                "[BOLD] P ±.012",
                "[BOLD] R .885",
                "[BOLD] R ±.071",
                "[BOLD] F .818",
                "[BOLD] F ±.028"
            ],
            "table_content_values": [
                [
                    "Gong et al.  [BOLD] ( 2018  [BOLD] )",
                    "topic_wiki",
                    "topic_wiki",
                    "topic_wiki",
                    "topic_wiki",
                    "topic_wiki",
                    ".750",
                    "±.009",
                    ".842",
                    "±.010",
                    ".791",
                    "±.007"
                ],
                [
                    "[BOLD] Method",
                    "[BOLD] Embeddings",
                    "[BOLD] Settings",
                    "[BOLD] Settings",
                    "[BOLD] T/n",
                    "[BOLD] Conc. Input",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "[BOLD] AVG_COS_SIM",
                    "Google",
                    "+TF",
                    "+IDF",
                    ".515",
                    "Label",
                    ".939",
                    "±.043",
                    ".839",
                    "±.067",
                    ".884",
                    "±.038"
                ],
                [
                    "[BOLD] AVG_COS_SIM",
                    "Google",
                    "+TF",
                    "+IDF",
                    ".520",
                    "Description",
                    ".870",
                    "±.068",
                    ".834",
                    "±.048",
                    ".849",
                    "±.038"
                ],
                [
                    "[BOLD] AVG_COS_SIM",
                    "Google",
                    "+TF",
                    "+IDF",
                    ".545",
                    "Both",
                    ".915",
                    "±.040",
                    ".938",
                    "±.047",
                    "[BOLD] .926",
                    "±.038"
                ],
                [
                    "[BOLD] TOP_n_COS_SIM_AVG",
                    "Google",
                    "+TF",
                    "-IDF",
                    ".345/22",
                    "Label",
                    ".854",
                    "±.077",
                    ".861",
                    "±.044",
                    ".856",
                    "±.054"
                ],
                [
                    "[BOLD] TOP_n_COS_SIM_AVG",
                    "GloVe",
                    "+TF",
                    "+IDF",
                    ".345/6",
                    "Description",
                    ".799",
                    "±.063",
                    ".766",
                    "±.094",
                    ".780",
                    "±.068"
                ],
                [
                    "[BOLD] TOP_n_COS_SIM_AVG",
                    "fastText",
                    "+TF",
                    "+IDF",
                    ".310/14",
                    "Both",
                    ".850",
                    "±.059",
                    ".918",
                    "±.049",
                    "[BOLD] .881",
                    "±.037"
                ]
            ]
        },
        "gold_description": "the results can be found in table 3 . for comparison , the two top rows provide the best results of gong et al . ( 2018 ) . the first interesting finding is that the avg cos sim measure again performs very well : in all three settings , it beats both the system based on general - purpose embeddings ( topic wiki ) and the one that is adapted to the science domain ( topic science ) , with again the both setting yielding the best overall result ( . 926 ) . note that our both setting is probably the one most similar to the concept input used by gong et al . ( 2018 ) .",
        "generated_description": "we observe that the concatenation of the embeddings from both the google and topic - wiki corpora gives the best overall results , outperforming the previous state - of - the - art by a substantial margin . we also observe that adding the idf - based similarity measure improves the f1 - score slightly , but not as much as using the tf - idf weighting scheme ."
    },
    {
        "table_id": "7",
        "table_info": {
            "table_caption": "Table 1: Best results after re-ranking using different re-ranker, and different values for k-best hypotheses extracted from the baseline output (%). In addition, to evaluate our re-ranker with MRR we fixed k CNNk=8 LSTMk=4",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] CNN  [ITALIC] full",
                "[BOLD] CNN  [ITALIC] dict",
                "[BOLD] CNN  [ITALIC] list",
                "[BOLD] CNN  [ITALIC] k",
                "[BOLD] CNN MRR",
                "[BOLD] LSTM  [ITALIC] full",
                "[BOLD] LSTM  [ITALIC] list",
                "[BOLD] LSTM k",
                "[BOLD] LSTM MRR"
            ],
            "table_content_values": [
                [
                    "Baseline (BL)",
                    "[BOLD] full: 19.7 dict: 56.0",
                    "[BOLD] full: 19.7 dict: 56.0",
                    "[BOLD] full: 19.7 dict: 56.0",
                    "[BOLD] full: 19.7 dict: 56.0",
                    "[BOLD] full: 19.7 dict: 56.0",
                    "[BOLD] full: 17.9",
                    "[BOLD] full: 17.9",
                    "[BOLD] full: 17.9",
                    "[BOLD] full: 17.9"
                ],
                [
                    "BL+ Glove (Jeffrey:14)",
                    "22.0",
                    "62.5",
                    "75.8",
                    "7",
                    "44.5",
                    "19.1",
                    "75.3",
                    "4",
                    "78.8"
                ],
                [
                    "BL+C-LSTM (Chunting:15)",
                    "21.4",
                    "61.0",
                    "71.3",
                    "8",
                    "45.6",
                    "18.9",
                    "74.7",
                    "4",
                    "80.7"
                ],
                [
                    "BL+CNN-RNN (Xingyou:16)",
                    "21.7",
                    "61.8",
                    "73.3",
                    "8",
                    "44.5",
                    "19.5",
                    "77.1",
                    "4",
                    "80.9"
                ],
                [
                    "BL+MVCNN (Wenpeng:16)",
                    "21.3",
                    "60.6",
                    "71.9",
                    "8",
                    "44.2",
                    "19.2",
                    "75.8",
                    "4",
                    "78.8"
                ],
                [
                    "BL+Attentive LSTM (Ming:16)",
                    "21.9",
                    "62.4",
                    "74.0",
                    "8",
                    "45.7",
                    "19.1",
                    "71.4",
                    "5",
                    "80.2"
                ],
                [
                    "BL+fasttext (Armand:17)",
                    "21.9",
                    "62.2",
                    "75.4",
                    "7",
                    "44.6",
                    "19.4",
                    "76.1",
                    "4",
                    "80.3"
                ],
                [
                    "BL+InferSent (Alexis:17)",
                    "22.0",
                    "62.5",
                    "75.8",
                    "7",
                    "44.5",
                    "19.4",
                    "76.7",
                    "4",
                    "79.7"
                ],
                [
                    "BL+USE-T (Daniel:18)",
                    "22.0",
                    "62.5",
                    "[BOLD] 78.3",
                    "6",
                    "44.7",
                    "19.2",
                    "75.8",
                    "4",
                    "79.5"
                ],
                [
                    "BL+TWE (Ahmed:18)",
                    "22.2",
                    "63.0",
                    "76.3",
                    "7",
                    "44.7",
                    "19.5",
                    "76.7",
                    "4",
                    "80.2"
                ],
                [
                    "BL+FDCLSTM (ours)",
                    "22.3",
                    "63.3",
                    "75.1",
                    "8",
                    "45.0",
                    "[BOLD] 20.2",
                    "67.9",
                    "9",
                    "79.8"
                ],
                [
                    "BL+FDCLSTM [ITALIC] AT (ours)",
                    "[BOLD] 22.4",
                    "63.7",
                    "75.5",
                    "8",
                    "[BOLD] 45.9",
                    "20.1",
                    "67.6",
                    "9",
                    "[BOLD] 81.8"
                ],
                [
                    "BL+FDCLSTM [ITALIC] lexicon (ours)",
                    "22.6",
                    "64.3",
                    "76.3",
                    "8",
                    "45.1",
                    "19.4",
                    "76.4",
                    "4",
                    "78.8"
                ],
                [
                    "BL+FDCLSTM [ITALIC] AT+ [ITALIC] lexicon (ours)",
                    "22.6",
                    "64.3",
                    "76.3",
                    "8",
                    "45.1",
                    "19.7",
                    "[BOLD] 77.8",
                    "4",
                    "80.4"
                ]
            ]
        },
        "gold_description": "we use two pre - trained deep models : a cnn ( jaderberg et al . , 2016 ) and an lstm ( ghosh et al . , 2017 ) as baselines ( bl ) to extract the initial list of word hypotheses . we experimented extracting kbest hypotheses for k = 1 . . . 10 . table 1 presents four different accuracy metrics for this case : 1 ) full columns correspond to the accuracy on the whole dataset . 2 ) dict columns correspond to the accuracy over the cases where the target word is among the 90k words of the cnn dictionary ( which correspond to 43 . 3 % of the whole dataset . 3 ) list columns report the accuracy over the cases where the right word was among the k - best produced by the baseline . 4 ) mrr mean reciprocal rank ( mrr ) , we compare the results of our encoder with several stateof - the - art sentence encoders , tuned or trained on the same dataset . table 1 are trained in the same conditions that our model with glove initialization with dual - channel overlapping non - static pre - trained embedding on the same dataset . our model fdclstm without attention achieves a better result in the case of the second baseline lstm that full of false - positives and short words . we also compare our result with current state - of - the - art word embeddings trained on a large general text using glove and fasttext . the word model used only object and place information , and ignored the caption . our proposed models achieve better performance than our twe previous model ( sabir et al . , 2018 ) , that trained a word embedding ( mikolov et al . , 2013 ) from scratch on the same task . as seen in table 1 , the introduction of this unigram lexicon produces the best results .",
        "generated_description": "we observe that the lstm models perform better than the cnn and the cnn + c - lstm baselines for both the full and partial datasets . for the cnn full dataset , the best performing model is a combination of the bl + glove and bl + svm models , while for the cnn partial dataset the best performance is achieved by combining the glove and bl models . we also observe that combining the bl and glove models results in a significant improvement for the list and list - to - dict models ."
    },
    {
        "table_id": "8",
        "table_info": {
            "table_caption": "Table 1: Controlled experiments comparing SynST to a baseline Transformer, SAT, and LT on four different datasets (two language pairs) demonstrate speed and BLEU improvements. Wall-clock speedup is measured on a single Nvidia TitanX Pascal by computing the average time taken to decode a single sentence in the dev/test set, averaged over five runs. When beam width b is not specified, we perform greedy decoding (i.e., b=1). Note that the LT results are reported by latentTransformer and not from our own implementation; as such, they are not directly comparable to the other results.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] WMT En-De BLEU",
                "[BOLD] WMT En-De Speedup",
                "[BOLD] WMT De-En BLEU",
                "[BOLD] WMT De-En Speedup",
                "[BOLD] IWSLT En-De BLEU",
                "[BOLD] IWSLT En-De Speedup",
                "[BOLD] WMT En-Fr BLEU",
                "[BOLD] WMT En-Fr Speedup"
            ],
            "table_content_values": [
                [
                    "Baseline ( [ITALIC] b=1)",
                    "25.82",
                    "1.15×",
                    "29.83",
                    "1.14×",
                    "28.66",
                    "1.16×",
                    "39.41",
                    "1.18×"
                ],
                [
                    "Baseline ( [ITALIC] b=4)",
                    "26.87",
                    "1.00×",
                    "30.73",
                    "1.00×",
                    "30.00",
                    "1.00×",
                    "40.22",
                    "1.00×"
                ],
                [
                    "SAT ( [ITALIC] k=2)",
                    "22.81",
                    "2.05×",
                    "26.78",
                    "2.04×",
                    "25.48",
                    "2.03×",
                    "36.62",
                    "2.14×"
                ],
                [
                    "SAT ( [ITALIC] k=4)",
                    "16.44",
                    "3.61×",
                    "21.27",
                    "3.58×",
                    "20.25",
                    "3.45×",
                    "28.07",
                    "3.34×"
                ],
                [
                    "SAT ( [ITALIC] k=6)",
                    "12.55",
                    "4.86×",
                    "15.23",
                    "4.27×",
                    "14.02",
                    "4.39×",
                    "24.63",
                    "4.77×"
                ],
                [
                    "LT*",
                    "19.8",
                    "3.89×",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "SynST( [ITALIC] k=6)",
                    "20.74",
                    "4.86×",
                    "25.50",
                    "5.06×",
                    "23.82",
                    "3.78×",
                    "33.47",
                    "5.32×"
                ]
            ]
        },
        "gold_description": "table 1 contains the results on all four datasets . synst achieves speedups of ∼ 4 − 5 × that of the vanilla transformer , which is larger than nearly all of the sat configurations . quality - wise , synst again significantly outperforms the sat configurations at comparable speedups on all datasets . on wmt en - de , synst improves by 1 bleu over lt ( 20 . 74 vs lt ' s 19 . 8 without reranking ) .",
        "generated_description": "we can see that the sat model with k = 2 or k = 4 outperforms the baseline model with b = 1 and b = 4 by a large margin , which demonstrates the effectiveness of the proposed sat method . moreover , the performance of our model increases as the number of clusters k increases . the reason is that as k increases , the size of the clusters becomes larger , which results in a higher probability of interference from the source to the target sequence , leading to a decrease in the model ’ s performance . however , the speedup of our method is still higher than that of the baseline , which shows that our method can still maintain the quality of the source - target sequence ."
    },
    {
        "table_id": "9",
        "table_info": {
            "table_caption": "Table 2: Movie review Dev results of S-LSTM",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Time (s)",
                "[BOLD] Acc",
                "[BOLD] # Param"
            ],
            "table_content_values": [
                [
                    "+0 dummy node",
                    "56",
                    "81.76",
                    "7,216K"
                ],
                [
                    "+1 dummy node",
                    "65",
                    "82.64",
                    "8,768K"
                ],
                [
                    "+2 dummy node",
                    "76",
                    "82.24",
                    "10,321K"
                ],
                [
                    "Hidden size 100",
                    "42",
                    "81.75",
                    "4,891K"
                ],
                [
                    "Hidden size 200",
                    "54",
                    "82.04",
                    "6,002K"
                ],
                [
                    "Hidden size 300",
                    "65",
                    "82.64",
                    "8,768K"
                ],
                [
                    "Hidden size 600",
                    "175",
                    "81.84",
                    "17,648K"
                ],
                [
                    "Hidden size 900",
                    "235",
                    "81.66",
                    "33,942K"
                ],
                [
                    "Without ⟨s⟩, ⟨/s⟩",
                    "63",
                    "82.36",
                    "8,768K"
                ],
                [
                    "With ⟨s⟩, ⟨/s⟩",
                    "65",
                    "82.64",
                    "8,768K"
                ]
            ]
        },
        "gold_description": "table 2 shows the development results of various s - lstm settings , adding one additional sentence - level node does not lead to accuracy improvements , although the number of parameters and decoding time increase accordingly . the accuracies of s - lstm increases as the hidden layer size for each node increases from 100 to 300 , but does not further increase when the size increases beyond 300 . we fix the hidden size to 300 accordingly . without using ( cid : 104 ) s ( cid : 105 ) and ( cid : 104 ) / s ( cid : 105 ) , the performance of s - lstm drops from 82 . 64 % to 82 . 36 % , showing the effectiveness of having these additional nodes .",
        "generated_description": "s - lstm with different sizes of hidden nodes . we can see that with the increase of dummy nodes , the time and accuracy of the model increases , but the number of parameters also increases . the model with a hidden size of 200 has the best performance , which is slightly better than the model without dummy nodes . however , the model with the smallest hidden size 900 has the worst performance . the reason is that the model is too large to fit on the gpu card ."
    },
    {
        "table_id": "10",
        "table_info": {
            "table_caption": "Table 3: Movie review development results",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Time (s)",
                "[BOLD] Acc",
                "[BOLD] # Param"
            ],
            "table_content_values": [
                [
                    "LSTM",
                    "67",
                    "80.72",
                    "5,977K"
                ],
                [
                    "BiLSTM",
                    "106",
                    "81.73",
                    "7,059K"
                ],
                [
                    "2 stacked BiLSTM",
                    "207",
                    "81.97",
                    "9,221K"
                ],
                [
                    "3 stacked BiLSTM",
                    "310",
                    "81.53",
                    "11,383K"
                ],
                [
                    "4 stacked BiLSTM",
                    "411",
                    "81.37",
                    "13,546K"
                ],
                [
                    "S-LSTM",
                    "65",
                    "82.64*",
                    "8,768K"
                ],
                [
                    "CNN",
                    "34",
                    "80.35",
                    "5,637K"
                ],
                [
                    "2 stacked CNN",
                    "40",
                    "80.97",
                    "5,717K"
                ],
                [
                    "3 stacked CNN",
                    "47",
                    "81.46",
                    "5,808K"
                ],
                [
                    "4 stacked CNN",
                    "51",
                    "81.39",
                    "5,855K"
                ],
                [
                    "Transformer (N=6)",
                    "138",
                    "81.03",
                    "7,234K"
                ],
                [
                    "Transformer (N=8)",
                    "174",
                    "81.86",
                    "7,615K"
                ],
                [
                    "Transformer (N=10)",
                    "214",
                    "81.63",
                    "8,004K"
                ],
                [
                    "BiLSTM+Attention",
                    "126",
                    "82.37",
                    "7,419K"
                ],
                [
                    "S-LSTM+Attention",
                    "87",
                    "83.07*",
                    "8,858K"
                ]
            ]
        },
        "gold_description": "as shown in table 3 , bilstm gives significantly better accuracies compared to uni - directional lstm2 , with the training time per epoch growing from 67 seconds to 106 seconds . stacking 2 layers of bilstm gives further improvements to development results , with a larger time of 207 seconds . 3 layers of stacked bilstm does not further improve the results . in contrast , s - lstm gives a development result of 82 . 64 % , which is significantly better compared to 2 - layer stacked bilstm , with a smaller number of model parameters and a shorter time of 65 seconds . we additionally make comparisons with stacked cnns and hierarchical attention ( vaswani et al . , 2017 ) , shown in table 3 ( the cnn and transformer rows ) , cnn is the most efficient among all models compared , with the smallest model size . on the other hand , a 3 - layer stacked cnn gives an accuracy of 81 . 46 % , which is also the lowest compared with bilstm , hierarchical attention and s - lstm . the best performance of hierarchical attention is between single - layer and two - layer bilstms in terms of both accuracy and efficiency . s - lstm gives significantly better accuracies compared with both cnn and hierarchical attention . table 3 additionally shows the results of bilstm and s - lstm when external attention is used attention leads to improved accuracies for both bilstm and s - lstm in classification , with s - lstm still outperforming bilstm significantly .",
        "generated_description": "all models were trained on a geforce gtx 1080ti gpu with a batch size of 64 . we used the adam optimizer with an initial learning rate of 0 . 001 and dropped the learning rate by a factor of 10 at epochs 50 , 75 and 90 . the learning rate was decayed to 0 . 0001 after epochs 100 , 200 and 200 . we did not use dropout in our models . the number of epochs was set to 20 , 000 , and the number of heads per layer is set to 128 . the word embeddings were initialized with glove pennington et al . all models are implemented in pytorch and trained on an intel i7 - 4790k cpu @ 3 . 40ghz with 8gb memory . the models are evaluated on a nvidia titan xp gpu ."
    },
    {
        "table_id": "11",
        "table_info": {
            "table_caption": "Table 4: Test set results on movie review dataset (* denotes significance in all tables).",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Accuracy",
                "[BOLD] Train (s)",
                "[BOLD] Test (s)"
            ],
            "table_content_values": [
                [
                    "socher2011semi",
                    "77.70",
                    "–",
                    "–"
                ],
                [
                    "socher2012semantic",
                    "79.00",
                    "–",
                    "–"
                ],
                [
                    "kim2014convolutional",
                    "81.50",
                    "–",
                    "–"
                ],
                [
                    "qian2016linguistically",
                    "81.50",
                    "–",
                    "–"
                ],
                [
                    "BiLSTM",
                    "81.61",
                    "51",
                    "1.62"
                ],
                [
                    "2 stacked BiLSTM",
                    "81.94",
                    "98",
                    "3.18"
                ],
                [
                    "3 stacked BiLSTM",
                    "81.71",
                    "137",
                    "4.67"
                ],
                [
                    "3 stacked CNN",
                    "81.59",
                    "31",
                    "1.04"
                ],
                [
                    "Transformer (N=8)",
                    "81.97",
                    "89",
                    "2.75"
                ],
                [
                    "S-LSTM",
                    "[BOLD] 82.45*",
                    "41",
                    "1.53"
                ]
            ]
        },
        "gold_description": "the final results on the movie review and rich text classification datasets are shown in tables 4 and 5 , respectively . as shown in table 4 , s - lstm outperforms bilstm significantly , with a faster speed . s - lstm also gives highly competitive results when compared with existing methods in the literature .",
        "generated_description": "our proposed s - lstm model achieves the best test set accuracy of 82 . 45 % , outperforming the previous state - of - the - art by a significant margin of 1 . 53 % . the transformer ( n = 8 ) model also performs well on this dataset , but is outperformed by our proposed model ."
    },
    {
        "table_id": "12",
        "table_info": {
            "table_caption": "Table 5: Results on the 16 datasets of Liu et al. (2017). Time format: train (test)",
            "table_column_names": [
                "[BOLD] Dataset Camera",
                "[BOLD] SLSTM  [BOLD] 90.02*",
                "[BOLD] Time (s) 50 (2.85)",
                "[BOLD] BiLSTM 87.05",
                "[BOLD] Time (s) 115 (8.37)",
                "[BOLD] 2 BiLSTM 88.07",
                "[BOLD] Time (s) 221 (16.1)"
            ],
            "table_content_values": [
                [
                    "Video",
                    "[BOLD] 86.75*",
                    "55 (3.95)",
                    "84.73",
                    "140 (12.59)",
                    "85.23",
                    "268 (25.86)"
                ],
                [
                    "Health",
                    "[BOLD] 86.5",
                    "37 (2.17)",
                    "85.52",
                    "118 (6.38)",
                    "85.89",
                    "227 (11.16)"
                ],
                [
                    "Music",
                    "[BOLD] 82.04*",
                    "52 (3.44)",
                    "78.74",
                    "185 (12.27)",
                    "80.45",
                    "268 (23.46)"
                ],
                [
                    "Kitchen",
                    "[BOLD] 84.54*",
                    "40 (2.50)",
                    "82.22",
                    "118 (10.18)",
                    "83.77",
                    "225 (19.77)"
                ],
                [
                    "DVD",
                    "[BOLD] 85.52*",
                    "63 (5.29)",
                    "83.71",
                    "166 (15.42)",
                    "84.77",
                    "217 (28.31)"
                ],
                [
                    "Toys",
                    "85.25",
                    "39 (2.42)",
                    "85.72",
                    "119 (7.58)",
                    "[BOLD] 85.82",
                    "231 (14.83)"
                ],
                [
                    "Baby",
                    "[BOLD] 86.25*",
                    "40 (2.63)",
                    "84.51",
                    "125 (8.50)",
                    "85.45",
                    "238 (17.73)"
                ],
                [
                    "Books",
                    "[BOLD] 83.44*",
                    "64 (3.64)",
                    "82.12",
                    "240 (13.59)",
                    "82.77",
                    "458 (28.82)"
                ],
                [
                    "IMDB",
                    "[BOLD] 87.15*",
                    "67 (3.69)",
                    "86.02",
                    "248 (13.33)",
                    "86.55",
                    "486 (26.22)"
                ],
                [
                    "MR",
                    "[BOLD] 76.2",
                    "27 (1.25)",
                    "75.73",
                    "39 (2.27)",
                    "75.98",
                    "72 (4.63)"
                ],
                [
                    "Appeal",
                    "85.75",
                    "35 (2.83)",
                    "86.05",
                    "119 (11.98)",
                    "[BOLD] 86.35*",
                    "229 (22.76)"
                ],
                [
                    "Magazines",
                    "[BOLD] 93.75*",
                    "51 (2.93)",
                    "92.52",
                    "214 (11.06)",
                    "92.89",
                    "417 (22.77)"
                ],
                [
                    "Electronics",
                    "[BOLD] 83.25*",
                    "47 (2.55)",
                    "82.51",
                    "195 (10.14)",
                    "82.33",
                    "356 (19.77)"
                ],
                [
                    "Sports",
                    "[BOLD] 85.75*",
                    "44 (2.64)",
                    "84.04",
                    "172 (8.64)",
                    "84.78",
                    "328 (16.34)"
                ],
                [
                    "Software",
                    "[BOLD] 87.75*",
                    "54 (2.98)",
                    "86.73",
                    "245 (12.38)",
                    "86.97",
                    "459 (24.68)"
                ],
                [
                    "[BOLD] Average",
                    "[BOLD] 85.38*",
                    "47.30 (2.98)",
                    "84.01",
                    "153.48 (10.29)",
                    "84.64",
                    "282.24 (20.2)"
                ]
            ]
        },
        "gold_description": "the final results on the movie review and rich text classification datasets are shown in tables 4 and 5 , respectively . as shown in table 5 , among the 16 datasets s - lstm gives the best results on 12 , compared with bilstm and 2 layered bilstm models . the average accuracy of s - lstm is 85 . 6 % , significantly higher compared with 84 . 9 % by 2 - layer stacked bilstm . 3 - layer stacked bilstm gives an average accuracy of 84 . 57 % , which is lower compared to a 2 - layer stacked bilstm , with a training time per epoch of 423 . 6 seconds .",
        "generated_description": "the slstm and bilstm models outperform the other models in most of the cases , except for the health and kitchen datasets , where the 2 - layer lstm model is slightly better than the single layer model . however , the time complexity of the 2 layer model is significantly lower than that of the single layered model in all the cases ."
    },
    {
        "table_id": "13",
        "table_info": {
            "table_caption": "Table 6: Results on PTB (POS tagging)",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Accuracy",
                "[BOLD] Train (s)",
                "[BOLD] Test (s)"
            ],
            "table_content_values": [
                [
                    "manning2011part",
                    "97.28",
                    "–",
                    "–"
                ],
                [
                    "collobert2011natural",
                    "97.29",
                    "–",
                    "–"
                ],
                [
                    "sun2014structure",
                    "97.36",
                    "–",
                    "–"
                ],
                [
                    "sogaard2011semisupervised",
                    "97.50",
                    "–",
                    "–"
                ],
                [
                    "huang2015bidirectional",
                    "[BOLD] 97.55",
                    "–",
                    "–"
                ],
                [
                    "ma2016end",
                    "[BOLD] 97.55",
                    "–",
                    "–"
                ],
                [
                    "yang2017transfer",
                    "[BOLD] 97.55",
                    "–",
                    "–"
                ],
                [
                    "BiLSTM",
                    "97.35",
                    "254",
                    "22.50"
                ],
                [
                    "2 stacked BiLSTM",
                    "97.41",
                    "501",
                    "43.99"
                ],
                [
                    "3 stacked BiLSTM",
                    "97.40",
                    "746",
                    "64.96"
                ],
                [
                    "S-LSTM",
                    "[BOLD] 97.55",
                    "237",
                    "22.16"
                ]
            ]
        },
        "gold_description": "as can be seen in table 6 , s - lstm gives significantly better results compared with bilstm on the wsj dataset . it also gives competitive accuracies as compared with existing methods in the literature . stacking two layers of bilstms leads to improved results compared to one - layer bilstm , but the accuracy does not further improve with three layers of stacked lstms .",
        "generated_description": "we see that the s - lstm outperforms all the previous models and achieves the new state - of - the - art result for pos tagging with an accuracy of 97 . 55 % ."
    },
    {
        "table_id": "14",
        "table_info": {
            "table_caption": "Table 7: Results on CoNLL03 (NER)",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] F1",
                "[BOLD] Train (s)",
                "[BOLD] Test (s)"
            ],
            "table_content_values": [
                [
                    "collobert2011natural",
                    "89.59",
                    "–",
                    "–"
                ],
                [
                    "passos2014lexicon",
                    "90.90",
                    "–",
                    "–"
                ],
                [
                    "luo2015joint",
                    "91.20",
                    "–",
                    "–"
                ],
                [
                    "huang2015bidirectional",
                    "90.10",
                    "–",
                    "–"
                ],
                [
                    "lample2016neural",
                    "90.94",
                    "–",
                    "–"
                ],
                [
                    "ma2016end",
                    "91.21",
                    "–",
                    "–"
                ],
                [
                    "yang2017transfer",
                    "91.26",
                    "–",
                    "–"
                ],
                [
                    "rei:2017:Long",
                    "86.26",
                    "–",
                    "–"
                ],
                [
                    "peters2017semi",
                    "[BOLD] 91.93",
                    "–",
                    "–"
                ],
                [
                    "BiLSTM",
                    "90.96",
                    "82",
                    "9.89"
                ],
                [
                    "2 stacked BiLSTM",
                    "91.02",
                    "159",
                    "18.88"
                ],
                [
                    "3 stacked BiLSTM",
                    "91.06",
                    "235",
                    "30.97"
                ],
                [
                    "S-LSTM",
                    "[BOLD] 91.57*",
                    "79",
                    "9.78"
                ]
            ]
        },
        "gold_description": "for ner ( table 7 ) , s - lstm gives an f1 - score of 91 . 57 % on the conll test set , which is significantly better compared with bilstms . stacking more layers of bilstms leads to slightly better f1 - scores compared with a single - layer bilstm . our bilstm results are comparable to the results reported by ma and hovy ( 2016 ) and lample et al . ( 2016 ) , in contrast , s - lstm gives the best reported results under the same settings . in the second section of table 7 , yang et al . ( 2017 ) obtain an fscore of 91 . 26 %",
        "generated_description": "our best model , s - lstm , obtains a new state - of - the - art f1 score of 91 . 57 on the conll - 2005 test set , outperforming the previous state of the art by more than 2 f1 points . our model also outperforms the model of \\ newcitelample2016neural , which achieves 90 . 94 f1 on the same dataset . on the other hand , our model does not outperform \\ newciteyang2017transfer , which uses a much larger model ."
    },
    {
        "table_id": "15",
        "table_info": {
            "table_caption": "Table 2: E2E test set results. Own results correspond to avg±SD of ten runs and single result of best models on the development set.",
            "table_column_names": [
                "system",
                "BLEU",
                "ROUGE-L"
            ],
            "table_content_values": [
                [
                    "challenge",
                    "challenge",
                    "challenge"
                ],
                [
                    "baseline",
                    "65.9",
                    "68.5"
                ],
                [
                    "Thomson Reuters (np 3)",
                    "[BOLD] 68.1",
                    "69.3"
                ],
                [
                    "Thomson Reuters (np 4)",
                    "67.4",
                    "69.8"
                ],
                [
                    "HarvardNLP & H. Elder",
                    "67.4",
                    "[BOLD] 70.8"
                ],
                [
                    "own",
                    "own",
                    "own"
                ],
                [
                    "word",
                    "67.8±0.8",
                    "70.4±0.6"
                ],
                [
                    "character",
                    "64.6±6.0",
                    "67.9±4.7"
                ],
                [
                    "word (best on dev.)",
                    "67.8",
                    "70.2"
                ],
                [
                    "char. (best on dev.)",
                    "67.6",
                    "70.4"
                ]
            ]
        },
        "gold_description": "table 2 and 3 display the results on the e2e and webnlg test sets for models of the respective challenges and our own models on the e2e test set , our single best word - and character - based models reach comparable results to the best challenge submissions . the word - based models achieve significantly higher bleu and rouge - l scores than the character - based models .",
        "generated_description": "for the e2e dataset , we use the standard train / dev split provided by the task organizer . the baseline is a pointer - generator sequence - to - sequence model trained on the training set of the conll - 2012 challenge . the character - based model outperforms the word - based system by 0 . 8 bleu and 0 . 5 rouge - l points on the challenge set . the best results on the dev set are achieved by the character model , which is also better than the baseline , but not as good as the best model on the original dev set . on the other hand , the char - based approach outperforms both the word and character models on our own test set ."
    },
    {
        "table_id": "16",
        "table_info": {
            "table_caption": "Table 3: WebNLG test set results. Own results correspond to single best model on development set and avg±SD of ten runs.",
            "table_column_names": [
                "system",
                "BLEU",
                "ROUGE-L"
            ],
            "table_content_values": [
                [
                    "challenge",
                    "challenge",
                    "challenge"
                ],
                [
                    "baseline",
                    "32.1",
                    "43.3"
                ],
                [
                    "Melbourne",
                    "43.4",
                    "[BOLD] 61.0"
                ],
                [
                    "Tilburg-SMT",
                    "43.1",
                    "58.0"
                ],
                [
                    "UPF-FORGe",
                    "37.5",
                    "58.8"
                ],
                [
                    "own",
                    "own",
                    "own"
                ],
                [
                    "word (best on dev.)",
                    "[BOLD] 44.2",
                    "60.9"
                ],
                [
                    "char. (best on dev.)",
                    "41.3",
                    "58.4"
                ],
                [
                    "word",
                    "37.0±3.8",
                    "56.3±2.6"
                ],
                [
                    "character",
                    "39.7±1.7",
                    "58.4±0.7"
                ]
            ]
        },
        "gold_description": "on the webnlg test set , the bleu score of our best word - based model outperforms the best challenge submission by a small margin . the character - based model achieves a significantly higher rouge - l score than the wordbased model , whereas the bleu score difference is not significant .",
        "generated_description": "melbourne and tilburg smt systems were trained on the original webnlg training set , while upf - forge was trained on a subset of the dev set . our best results correspond to the single best model on development set and avg ± sd of ten runs . our character - based model outperforms the word - based one by 0 . 8 bleu and 0 . 7 rouge - l ."
    },
    {
        "table_id": "17",
        "table_info": {
            "table_caption": "Table 4: Increasing the number of layers in SynST’s parse decoder significantly lowers the speedup while marginally impacting BLEU. Randomly sampling k from {1…6} during training boosts BLEU significantly with minimal impact on speedup.",
            "table_column_names": [
                "# Layers",
                "Max Chunk Size",
                "Speedup",
                "BLEU"
            ],
            "table_content_values": [
                [
                    "1",
                    "[ITALIC] k=6",
                    "3.8×",
                    "23.82"
                ],
                [
                    "2",
                    "[ITALIC] k=6",
                    "2.8×",
                    "23.98"
                ],
                [
                    "3",
                    "[ITALIC] k=6",
                    "2.2×",
                    "24.54"
                ],
                [
                    "4",
                    "[ITALIC] k=6",
                    "1.8×",
                    "24.04"
                ],
                [
                    "5",
                    "[ITALIC] k=6",
                    "1.4×",
                    "24.34"
                ],
                [
                    "1",
                    "[ITALIC] k∈{1…6}",
                    "3.1×",
                    "25.31"
                ]
            ]
        },
        "gold_description": "table 4 shows that increasing the number of layers from 1 to 5 results in a bleu increase of only 0 . 5 , while the speedup drops from 3 . 8 × to 1 . 4 × . the final row of table 4 shows that exposing the parse decoder to multiple possible chunkings of the same sentence during training allows it to choose a sequence of chunks that has a higher likelihood at test time , improving bleu by 1 . 5 while decreasing the speedup from 3 . 8 × to 3 . 1 × ;",
        "generated_description": "increasing the number of layers in synst ’ s parse decoder significantly improves the speedup while marginally impacting bleu . randomly sampling k from { 1 … 6 } during training gives the best performance with minimal impact on speedup . increasing the maximum chunk size from 2 . 8 × to 4 × the size of the original parse tree yields little improvement over the baseline ."
    },
    {
        "table_id": "18",
        "table_info": {
            "table_caption": "Table 4: E2E and WebNLG development set results in the format avg±SD. Human results are averaged over using each human reference as prediction once.",
            "table_column_names": [
                "metric",
                "human",
                "word",
                "char."
            ],
            "table_content_values": [
                [
                    "E2E",
                    "E2E",
                    "E2E",
                    "E2E"
                ],
                [
                    "BLEU",
                    "55.5±0.7",
                    "68.2±1.4",
                    "65.8±2.6"
                ],
                [
                    "ROUGE-L",
                    "62.0±0.4",
                    "72.1±0.7",
                    "69.8±2.6"
                ],
                [
                    "WebNLG",
                    "WebNLG",
                    "WebNLG",
                    "WebNLG"
                ],
                [
                    "BLEU",
                    "48.3±0.7",
                    "40.6±4.2",
                    "43.7±2.4"
                ],
                [
                    "ROUGE-L",
                    "62.4±0.3",
                    "58.5±3.0",
                    "63.1±0.8"
                ]
            ]
        },
        "gold_description": "table 4 shows the bleu and rouge - l development set scores when treating each human reference as prediction once and evaluating it against the remaining references , compared to the scores of the word - based and character - based models strikingly , on the e2e development set , both model variants significantly outperform human texts by far with respect to both automatic evaluation measures . while the human bleu score is significantly higher than those of both systems on the webnlg development set , there is no statistical difference between human and system rouge - l scores .",
        "generated_description": "the results are averaged over using each human reference as prediction once . webnlg results are worse than those of e2e on both bleu and rouge - l . however , the difference is not statistically significant . we hypothesize that this is due to the difference in the size of the training data , which makes it difficult to find a strong baseline ."
    },
    {
        "table_id": "19",
        "table_info": {
            "table_caption": "Table 5: Percentage of affected instances in manual error analysis of 15 randomly selected development set instances for each input length.",
            "table_column_names": [
                "[EMPTY]",
                "E2E word",
                "E2E char.",
                "WebNLG word",
                "WebNLG char."
            ],
            "table_content_values": [
                [
                    "content errors",
                    "content errors",
                    "content errors",
                    "content errors",
                    "content errors"
                ],
                [
                    "info. dropped",
                    "40.0",
                    "30.0",
                    "42.9",
                    "66.7"
                ],
                [
                    "info. added",
                    "0.0",
                    "0.0",
                    "6.7",
                    "1.9"
                ],
                [
                    "info. modified",
                    "4.4",
                    "0.0",
                    "19.0",
                    "1.9"
                ],
                [
                    "info. repeated",
                    "0.0",
                    "0.0",
                    "15.2",
                    "28.6"
                ],
                [
                    "linguistic errors",
                    "linguistic errors",
                    "linguistic errors",
                    "linguistic errors",
                    "linguistic errors"
                ],
                [
                    "punctuation errors",
                    "5.6",
                    "5.6",
                    "8.6",
                    "3.8"
                ],
                [
                    "grammatical errors",
                    "13.3",
                    "14.4",
                    "15.2",
                    "12.4"
                ],
                [
                    "spelling mistakes",
                    "0.0",
                    "0.0",
                    "9.5",
                    "5.7"
                ],
                [
                    "overall correctness",
                    "overall correctness",
                    "overall correctness",
                    "overall correctness",
                    "overall correctness"
                ],
                [
                    "content correct",
                    "55.6",
                    "70.0",
                    "46.7",
                    "31.4"
                ],
                [
                    "language correct",
                    "83.3",
                    "81.1",
                    "69.5",
                    "79.0"
                ],
                [
                    "all correct",
                    "48.9",
                    "61.1",
                    "33.3",
                    "26.7"
                ]
            ]
        },
        "gold_description": "one annotator ( one of the authors of this paper ) manually assessed the outputs of the models that obtained the best development set bleu score as summarized in table 56 . as we can see from the bottom part of the table , all models struggle more with getting the content right than with producing linguistically correct texts ; 70 - 80 % of the texts generated by all models are completely correct linguistically . comparing the two datasets , we again observe that the webnlg dataset is much more challenging than the e2e dataset , especially with respect to correctly verbalizing the content . moreover , spelling mistakes only appeared in webnlg texts , mainly concerning omissions of accents or umlauts . the most frequent content error in both datasets concerns omission of information . information addition and repetition only occur in the webnlg dataset . the latter is an especially frequent problem of the character - based model , affecting more than a quarter of all texts . in comparison , character - based models reproduce the content more faithfully on the e2e dataset while offering the same level of linguistic quality as word - based models , leading to more correct outputs overall . on the webnlg dataset , the word - based model is more faithful to the inputs , probably because of the effective delexicalization strategy , whereas the character - based model errs less on the linguistic side . overall , the word - based model yields more correct texts , stressing the importance of delexicalization and data normalization in low resource settings .",
        "generated_description": "the results show that the content correctness of the webnlg system is slightly better than that of the e2e system in terms of content correctness , with the only exception of the grammatical errors in the info . dropped category , which is caused by the content errors that occur in the content of the webpages . the only exception is in the spelling errors category , where the difference is not statistically significant . the results for the other categories are similar to those for the content correct system ."
    },
    {
        "table_id": "20",
        "table_info": {
            "table_caption": "Table 6: Linguistic diversity of development set references and generated texts as avg±SD. ‘% new’ denotes the share of generated texts or sentences that do not appear in training references. Higher indicates more diversity for all measures.",
            "table_column_names": [
                "[EMPTY]",
                "E2E human",
                "E2E word",
                "E2E character",
                "WebNLG human",
                "WebNLG word",
                "WebNLG character"
            ],
            "table_content_values": [
                [
                    "unique sents.",
                    "866.3±16.5",
                    "203.5±30.6",
                    "366.8±60.0",
                    "1,185.0±12.6",
                    "603.7±144.3",
                    "875.4±30.2"
                ],
                [
                    "unique words",
                    "419.7±16.7",
                    "64.4±2.3",
                    "73.1±7.2",
                    "1447.3±7.4",
                    "620.3±35.5",
                    "881.5±26.0"
                ],
                [
                    "word E",
                    "6.5±0.0",
                    "5.1±0.0",
                    "5.5±0.0",
                    "7.1±0.0",
                    "6.3±0.0",
                    "6.6±0.0"
                ],
                [
                    "1-3-grams E",
                    "10.4±0.0",
                    "7.7±0.1",
                    "8.2±0.1",
                    "11.6±0.0",
                    "10.1±0.1",
                    "10.5±0.1"
                ],
                [
                    "% new texts",
                    "99.7±0.2",
                    "98.2±0.3",
                    "98.8±0.2",
                    "91.1±0.3",
                    "69.8±4.8",
                    "87.5±0.6"
                ],
                [
                    "% new sents.",
                    "85.1±1.1",
                    "61.8±6.4",
                    "71.4±4.7",
                    "87.4±0.4",
                    "57.2±5.8",
                    "82.1±1.2"
                ]
            ]
        },
        "gold_description": "table 6 shows automatically computed statistics on the diversity of the generated texts of both models and human texts and on the overlap of the ( generated ) texts with the training set . on both datasets , our systems produce significantly less varied outputs and reproduce more texts and sentences from the training data than the human texts . interestingly , however , the characterbased models generate significantly more unique sentences and copy significantly less from the training data than the word - based models , which copy about 40 % of their generated sentences from the training data .",
        "generated_description": "for the e2e and webnlg datasets , we report the number of unique words , unique sentences , and 1 - 3 - grams , as well as the percentage of new texts . we observe that the character - level model outperforms the word - based model by a large margin in terms of both unique words and new texts , with the exception of the sentence “ i don ’ t know ” , which is the only sentence with a unique word in the training data . we also observe a similar trend for the character model when compared to the word model ."
    },
    {
        "table_id": "21",
        "table_info": {
            "table_caption": "Table 7: Manual evaluation of generated texts for 10 random test instances of a word-based model trained with synthetic training data from two templates. c@n: avg. number of correct texts (with respect to content and language) among the top n hypotheses.",
            "table_column_names": [
                "[EMPTY]",
                "c@1",
                "c@2",
                "c@5",
                "c@30"
            ],
            "table_content_values": [
                [
                    "template 1",
                    "0.8",
                    "0.8",
                    "0.9",
                    "1.7"
                ],
                [
                    "template 2",
                    "1.0",
                    "1.2",
                    "1.3",
                    "1.9"
                ],
                [
                    "template 1+2",
                    "0.9",
                    "1.6",
                    "2.2",
                    "3.3"
                ],
                [
                    "+ reranker",
                    "0.9",
                    "1.9",
                    "2.7",
                    "3.3"
                ]
            ]
        },
        "gold_description": "table 7 shows our manual evaluation of the top 30 hypotheses for 10 random e2e test inputs generated by models trained with data synthesized from the two templates . as is evident from the first two rows , all models learned to generalize from the training data to produce correct texts for novel inputs consisting of unseen combinations of input attributes . yet , the picture is a bit different for the model trained on data generated by both templates . while the top two hypotheses are equally distributed between adhering to template 1 and template 2 , more than 5 % among the lower - ranked hypotheses constitute a template combination such as the example shown in the bottom part of figure 2 . as can be seen in the final row of table 7 , this simple reranker successfully places correct hypotheses higher up in the ranking , improving the practical usability of the generation model by now offering almost three correct variants for each input among the top five hypotheses on average .",
        "generated_description": "in order to evaluate the quality of the generated texts , we randomly sample 10 test instances from the test set and ask the annotators to rank the top n hypotheses ( with respect to content and language ) among the top 30 hypotheses generated by the word - based model . for template 1 + 2 , we add a reranker to the output of the lstm - based encoder . we observe that template 1 performs slightly better than template 2 in terms of c @ n . however , the difference is not statistically significant . we hypothesize that this is due to the fact that template 2 is more similar to the training set than template 1 , and therefore the reranking process has less effect on the text quality ."
    },
    {
        "table_id": "22",
        "table_info": {
            "table_caption": "Table 1: Experimental results of abstractive summarization on Gigaword test set with ROUGE metric. The top section is prefix baselines, the second section is recent unsupervised methods and ours, the third section is state-of-the-art supervised method along with our implementation of a seq-to-seq model with attention, and the bottom section is our model’s oracle performance. Wang and Lee (2018) is by author correspondence (scores differ because of evaluation setup). For another unsupervised work Fevry and Phang (2018), we attempted to replicate on our test set, but were unable to obtain results better than the baselines.",
            "table_column_names": [
                "Model",
                "R1",
                "R2",
                "RL"
            ],
            "table_content_values": [
                [
                    "Lead-75C",
                    "23.69",
                    "7.93",
                    "21.5"
                ],
                [
                    "Lead-8",
                    "21.30",
                    "7.34",
                    "19.94"
                ],
                [
                    "Schumann ( 2018 )",
                    "22.19",
                    "4.56",
                    "19.88"
                ],
                [
                    "Wang and Lee ( 2018 )",
                    "27.09",
                    "9.86",
                    "24.97"
                ],
                [
                    "Contextual Match",
                    "26.48",
                    "10.05",
                    "24.41"
                ],
                [
                    "Cao et al. ( 2018 )",
                    "37.04",
                    "19.03",
                    "34.46"
                ],
                [
                    "seq2seq",
                    "33.50",
                    "15.85",
                    "31.44"
                ],
                [
                    "Contextual Oracle",
                    "37.03",
                    "15.46",
                    "33.23"
                ]
            ]
        },
        "gold_description": "the automatic evaluation scores are presented in table 1 and table 2 . our method outperforms commonly used prefix baselines for this task which take the first 75 characters or 8 words of the source as a summary . our system achieves comparable results to wang and lee ( 2018 ) a system based on both gans and reinforcement training . in table 1 , we also list scores of the stateof - the - art supervised model , an attention based seq - to - seq model of our own implementation , as well as the oracle scores of our method obtained by choosing the best summary among all finished hypothesis from beam search . the oracle scores are much higher , indicating that our unsupervised method does allow summaries of better quality ,",
        "generated_description": "our model ’ s oracle performance is competitive with the state - of - the - art supervised method cao et al . our model also outperforms the seq2seq baseline , demonstrating the effectiveness of our model on the gigaword dataset ."
    },
    {
        "table_id": "23",
        "table_info": {
            "table_caption": "Table 2: Experimental results of extractive summarization on Google data set. F1 is the token overlapping score, and CR is the compression rate. F&A is an unsupervised baseline used in Filippova and Altun (2013), and the middle section is supervised results.",
            "table_column_names": [
                "Model",
                "F1",
                "CR"
            ],
            "table_content_values": [
                [
                    "F&A Unsupervised",
                    "52.3",
                    "-"
                ],
                [
                    "Contextual Match",
                    "60.90",
                    "0.38"
                ],
                [
                    "Filippova et al. ( 2015 )",
                    "82.0",
                    "0.38"
                ],
                [
                    "Zhao et al. ( 2018 )",
                    "85.1",
                    "0.39"
                ],
                [
                    "Contextual Oracle",
                    "82.1",
                    "0.39"
                ]
            ]
        },
        "gold_description": "for extractive sentence summarization , our method achieves good compression rate and significantly raises a previous unsupervised baseline on token level f1 score .",
        "generated_description": "the contextual match model achieves a token overlapping score of 60 . 90 and a compression rate of 0 . 38 compared to filippova et al . the contextual oracle model achieves the best f1 score of 82 . 1 and the compression rate is 0 . 39 compared to the supervised results . the performance of the unsupervised baseline is 52 . 3 % in f1 and 60 . 9 % in cr , which is much lower than the supervised f & a baseline ."
    },
    {
        "table_id": "24",
        "table_info": {
            "table_caption": "Table 3: Comparison of different model choices. The top section evaluates the effects of contextual representation in the matching model, and the bottom section evaluates the effects of different smoothing methods in the fluency model.",
            "table_column_names": [
                "Models",
                "abstractive R1",
                "abstractive R2",
                "abstractive RL",
                "extractive F1",
                "extractive CR"
            ],
            "table_content_values": [
                [
                    "CS + cat",
                    "26.48",
                    "10.05",
                    "24.41",
                    "60.90",
                    "0.38"
                ],
                [
                    "CS + avg",
                    "26.34",
                    "9.79",
                    "24.23",
                    "60.09",
                    "0.38"
                ],
                [
                    "CS + top",
                    "26.21",
                    "9.69",
                    "24.14",
                    "62.18",
                    "0.34"
                ],
                [
                    "CS + mid",
                    "25.46",
                    "9.39",
                    "23.34",
                    "59.32",
                    "0.40"
                ],
                [
                    "CS + bot",
                    "15.29",
                    "3.95",
                    "14.06",
                    "21.14",
                    "0.23"
                ],
                [
                    "TEMP5 + cat",
                    "26.31",
                    "9.38",
                    "23.60",
                    "52.10",
                    "0.43"
                ],
                [
                    "TEMP10 + cat",
                    "25.63",
                    "8.82",
                    "22.86",
                    "42.33",
                    "0.47"
                ],
                [
                    "NA + cat",
                    "24.81",
                    "8.89",
                    "22.87",
                    "49.80",
                    "0.32"
                ]
            ]
        },
        "gold_description": "table 3 considers analysis of different aspects of the model . first , we look at the fluency model and compare the cluster smoothing ( cs ) approach with softmax temperature ( tempx with x being the temperature ) commonly used for generation in lm - integrated models ( chorowski and jaitly , 2016 ) as well as no adjustment ( na ) . second , we vary the 3 - layer representation out of elmo forward language model to do contextual matching ( bot / mid / top : bottom / middle / top layer only , avg : average of 3 layers , cat : concatenation of all layers ) . results show the effectiveness of our cluster smoothing method for the vocabulary adaptive language model pfm , although temperature smoothing is an option for abstractive datasets . when using word embeddings ( bottom layer only from elmo language model ) in our contextual matching model pcm , the summarization performance drops significantly to below simple baselines as demonstrated by score decrease .",
        "generated_description": "we also evaluate the impact of the contextual representation in the matching model . we compare the performance of our model with the following variants : ( 1 ) “ cs + cat ” , where we concatenate all the features from our matching model and feed them into a linear svm ; ( 2 ) cs + avg , which concatenates the average features from all the matching models and then feeds them into an mlp ; ( 3 ) our top - level representation ( cs + top ) , which is concatenated with the average of all the contextual features ; ( 4 ) our mid - level features from the cs model ; ( 5 ) our bot features , which are fed into the mlp and then fed into a feed - forward neural network ; ( 6 ) temp5 + cat , which is our temp10 model with cat features ; and ( 7 ) na + cat . we observe that the concatenation of the top and middle features leads to the best performance . we also observe that adding the bot features does not improve the performance significantly . we hypothesize that this is due to the fact that bot features do not provide enough context for the model to be able to infer the bot ’ s true intent from the context ."
    },
    {
        "table_id": "25",
        "table_info": {
            "table_caption": "Table 3: Official evaluation results of the submitted runs on the test set.",
            "table_column_names": [
                "[BOLD] Sub-task",
                "[BOLD] 1 Ext.",
                "[BOLD] 1 Class.",
                "[BOLD] 2 Ext.",
                "[BOLD] 2 Class.",
                "[ITALIC]  [BOLD] mv Ext.",
                "[ITALIC]  [BOLD] mv Class."
            ],
            "table_content_values": [
                [
                    "1.1",
                    "-",
                    "72.1",
                    "-",
                    "74.7",
                    "-",
                    "[BOLD] 76.7"
                ],
                [
                    "1.2",
                    "-",
                    "[BOLD] 83.2",
                    "-",
                    "82.9",
                    "-",
                    "80.1"
                ],
                [
                    "2",
                    "[BOLD] 37.4",
                    "[BOLD] 33.6",
                    "36.5",
                    "28.8",
                    "35.6",
                    "28.3"
                ]
            ]
        },
        "gold_description": "we select the 1st and 2nd best performing models on the development datasets as well as the majority vote ( mv ) of 5 models for the final submission . the final results are shown in table 3 .",
        "generated_description": "the final official evaluation results of the submitted systems are summarised in table 3 . our final submission ( subtask 1 . 1 ) achieved an f1 - score of 72 . 1 % and 83 . 2 % for the ext . class and the motion - viz . sub - task 1 respectively . for the class . case , our system slightly outperformed the baseline system ( row 1 . 2 ) by 1 . 8 % and 1 . 7 % for class 1 and 2 respectively ."
    },
    {
        "table_id": "26",
        "table_info": {
            "table_caption": "Table 3: F1 and exact match comparisons of predicted chunk sequences (from the parse decoder), ground-truth chunk sequences (from an external parser in the target language), and chunk sequences obtained after parsing the translation produced by the token decoder. First two columns show the improvement obtained by jointly training the two decoders. The third column shows that when the token decoder deviates from the predicted chunk sequence, it usually results in a translation that is closer to the ground-truth target syntax, while the fourth column shows that the token decoder closely follows the predicted chunk sequence.",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD]  Predicted parse vs. Gold parse (separate) ",
                "[BOLD]  Predicted parse vs. Gold parse (joint) ",
                "[BOLD]  Parsed prediction vs. Gold parse ",
                "[BOLD]  Parsed prediction vs. Predicted parse "
            ],
            "table_content_values": [
                [
                    "F1",
                    "65.48",
                    "69.64",
                    "79.16",
                    "89.90"
                ],
                [
                    "Exact match",
                    "4.23%",
                    "5.24%",
                    "5.94%",
                    "43.10%"
                ]
            ]
        },
        "gold_description": "we evaluate two configurations of the parse decoder , one in which it is trained separately from the token decoder ( first column of table 3 ) , and the other where both decoders are trained jointly ( second column of ta ble 3 ) . we observe that joint training boosts the chunk f1 from 65 . 4 to 69 . 6 , although , in both cases the f1 scores are relatively low , which matches our intuition as most source sentences can be translated into multiple target syntactic forms . to measure how often the token decoder follows the predicted chunk sequence , we parse the generated translation and compute the f1 between the resulting chunk sequence and the parse decoder ' s prediction ( fourth column of table 3 ) . strong results of 89 . 9 f1 and 43 . 1 % exact match indicate that the token decoder is heavily reliant on the generated chunk sequences . the resulting f1 is indeed almost 10 points higher ( third column of table 3 ) , indicating that the token decoder does have the ability to correct mistakes . in section 5 . 3 ( see the final row of table 3 ) we consider the effect of randomly sampling the max chunk size k during training . this provides a considerable boost to bleu with a minimal impact to speedup .",
        "generated_description": "we also compared the f1 scores of the predicted chunk sequences obtained by the parse decoder with ground - truth chunk sequences from an external parser in the target language . we can see that when the parser deviates from its predicted chunk sequence , it usually results in a translation that is closer to the ground truth target syntax , while the translation produced by the token decoder closely follows the predicted sequence . the improvement obtained by jointly training the two decoders is 89 . 9 % in f1 - score ."
    },
    {
        "table_id": "27",
        "table_info": {
            "table_caption": "Table 1: The models here all have a bi-directional GRU as the encoder (dimensionality 300 in each direction). The default way of producing the representation is a concatenation of outputs from a global mean-pooling and a global max-pooling, while “⋅-MaxOnly” refers to the model with only global max-pooling. Bold numbers are the best results among all presented models. We found that 1) inputting correct words to an autoregressive decoder is not necessary; 2) predict-all-words decoders work roughly the same as autoregressive decoders; 3) mean+max pooling provides stronger transferability than the max-pooling alone does. The table supports our choice of the predict-all-words CNN decoder and the way of producing vector representations from the bi-directional RNN encoder.",
            "table_column_names": [
                "[BOLD] Decoder",
                "[BOLD] SICK-R",
                "[BOLD] SICK-E",
                "[BOLD] STS14",
                "[BOLD] MSRP (Acc/F1)",
                "[BOLD] SST",
                "[BOLD] TREC"
            ],
            "table_content_values": [
                [
                    "[BOLD] auto-regressive RNN as decoder",
                    "[BOLD] auto-regressive RNN as decoder",
                    "[BOLD] auto-regressive RNN as decoder",
                    "[BOLD] auto-regressive RNN as decoder",
                    "[BOLD] auto-regressive RNN as decoder",
                    "[BOLD] auto-regressive RNN as decoder",
                    "[BOLD] auto-regressive RNN as decoder"
                ],
                [
                    "Teacher-Forcing",
                    "0.8530",
                    "82.6",
                    "0.51/0.50",
                    "74.1 / 81.7",
                    "82.5",
                    "88.2"
                ],
                [
                    "Always Sampling",
                    "0.8576",
                    "83.2",
                    "0.55/0.53",
                    "74.7 / 81.3",
                    "80.6",
                    "87.0"
                ],
                [
                    "Uniform Sampling",
                    "0.8559",
                    "82.9",
                    "0.54/0.53",
                    "74.0 / 81.8",
                    "81.0",
                    "87.4"
                ],
                [
                    "[BOLD] auto-regressive CNN as decoder",
                    "[BOLD] auto-regressive CNN as decoder",
                    "[BOLD] auto-regressive CNN as decoder",
                    "[BOLD] auto-regressive CNN as decoder",
                    "[BOLD] auto-regressive CNN as decoder",
                    "[BOLD] auto-regressive CNN as decoder",
                    "[BOLD] auto-regressive CNN as decoder"
                ],
                [
                    "Teacher-Forcing",
                    "0.8510",
                    "82.8",
                    "0.49/0.48",
                    "74.7 / 82.8",
                    "81.4",
                    "82.6"
                ],
                [
                    "Always Sampling",
                    "0.8535",
                    "83.3",
                    "0.53/0.52",
                    "75.0 / 81.7",
                    "81.4",
                    "87.6"
                ],
                [
                    "Uniform Sampling",
                    "0.8568",
                    "83.4",
                    "0.56/0.54",
                    "74.7 / 81.4",
                    "83.0",
                    "88.4"
                ],
                [
                    "[BOLD] predict-all-words RNN as decoder",
                    "[BOLD] predict-all-words RNN as decoder",
                    "[BOLD] predict-all-words RNN as decoder",
                    "[BOLD] predict-all-words RNN as decoder",
                    "[BOLD] predict-all-words RNN as decoder",
                    "[BOLD] predict-all-words RNN as decoder",
                    "[BOLD] predict-all-words RNN as decoder"
                ],
                [
                    "RNN",
                    "0.8508",
                    "82.8",
                    "0.58/0.55",
                    "74.2 / 82.8",
                    "81.6",
                    "88.8"
                ],
                [
                    "[BOLD] predict-all-words CNN as decoder",
                    "[BOLD] predict-all-words CNN as decoder",
                    "[BOLD] predict-all-words CNN as decoder",
                    "[BOLD] predict-all-words CNN as decoder",
                    "[BOLD] predict-all-words CNN as decoder",
                    "[BOLD] predict-all-words CNN as decoder",
                    "[BOLD] predict-all-words CNN as decoder"
                ],
                [
                    "CNN",
                    "0.8530",
                    "82.6",
                    "[BOLD] 0.58/ [BOLD] 0.56",
                    "[BOLD] 75.6 / 82.9",
                    "82.8",
                    "89.2"
                ],
                [
                    "CNN-MaxOnly",
                    "0.8465",
                    "82.6",
                    "0.50/0.47",
                    "73.3 / 81.5",
                    "79.1",
                    "82.2"
                ],
                [
                    "Double-sized RNN Encoder",
                    "Double-sized RNN Encoder",
                    "Double-sized RNN Encoder",
                    "Double-sized RNN Encoder",
                    "Double-sized RNN Encoder",
                    "Double-sized RNN Encoder",
                    "Double-sized RNN Encoder"
                ],
                [
                    "CNN",
                    "[BOLD] 0.8631",
                    "[BOLD] 83.9",
                    "[BOLD] 0.58/0.55",
                    "74.7 /  [BOLD] 83.1",
                    "[BOLD] 83.4",
                    "[BOLD] 90.2"
                ],
                [
                    "CNN-MaxOnly",
                    "0.8485",
                    "83.2",
                    "0.47/0.44",
                    "72.9 / 80.8",
                    "82.2",
                    "86.6"
                ]
            ]
        },
        "gold_description": "the results are presented in table 1 ( top two subparts ) . as we can see , the three decoding settings do not differ significantly in terms of the performance on selected downstream tasks , with rnn or cnn as the decoder . the results are also presented in table 1 ( 3rd and 4th subparts ) . the performance of the predict - allwords rnn decoder does not significantly differ from that of any one of the autoregressive rnn de coders , and the same situation can be also observed in cnn decoders . in our proposed rnn - cnn model , we empirically show that the mean + max pooling provides stronger transferability than the max pooling alone does , and the results are presented in the last two sections of table 1 .",
        "generated_description": "the results show that using an auto - regressive rnn as the decoder and a cnn as the encoder leads to the best performance on all the tasks . this is consistent with the results of our ablation experiments where the autoencoder and decoder have the same architecture and the only difference between them is the number of parameters . the results also indicate that using a pre - trained , pre - training , and fine - tuned auto - encoder is better than using a randomly initialized , un - pretrained , and randomly initialized decoder in most of the cases ."
    },
    {
        "table_id": "28",
        "table_info": {
            "table_caption": "Table 4: Architecture Comparison. As shown in the table, our designed asymmetric RNN-CNN model (row 1,9, and 12) works better than other asymmetric models (CNN-LSTM, row 11), and models with symmetric structure (RNN-RNN, row 5 and 10).",
            "table_column_names": [
                "[BOLD] Encoder type",
                "[BOLD] Encoder dim",
                "[BOLD] Decoder type",
                "[BOLD] Decoder dim",
                "[BOLD] Hrs",
                "[BOLD] SICK-R",
                "[BOLD] SICK-E",
                "[BOLD] STS14",
                "[BOLD] MSRP (Acc/F1)",
                "[BOLD] SST",
                "[BOLD] TREC"
            ],
            "table_content_values": [
                [
                    "[BOLD] Dimension of Sentence Representation: 1200",
                    "[BOLD] Dimension of Sentence Representation: 1200",
                    "[BOLD] Dimension of Sentence Representation: 1200",
                    "[BOLD] Dimension of Sentence Representation: 1200",
                    "[BOLD] Dimension of Sentence Representation: 1200",
                    "[BOLD] Dimension of Sentence Representation: 1200",
                    "[BOLD] Dimension of Sentence Representation: 1200",
                    "[BOLD] Dimension of Sentence Representation: 1200",
                    "[BOLD] Dimension of Sentence Representation: 1200",
                    "[BOLD] Dimension of Sentence Representation: 1200",
                    "[BOLD] Dimension of Sentence Representation: 1200"
                ],
                [
                    "RNN",
                    "2x300",
                    "CNN",
                    "600-1200-300",
                    "20",
                    "0.8530",
                    "82.6",
                    "0.58/0.56",
                    "[BOLD] 75.6/ [BOLD] 82.9",
                    "82.8",
                    "[BOLD] 89.2"
                ],
                [
                    "RNN",
                    "2x300",
                    "CNN†",
                    "600-1200-300",
                    "21",
                    "0.8515",
                    "82.7",
                    "0.58/0.56",
                    "75.3/82.5",
                    "[BOLD] 82.9",
                    "85.2"
                ],
                [
                    "RNN",
                    "2x300",
                    "CNN(10)",
                    "600-1200-300",
                    "11",
                    "0.8474",
                    "82.9",
                    "0.57/0.55",
                    "74.2/81.6",
                    "82.8",
                    "88.0"
                ],
                [
                    "RNN",
                    "2x300",
                    "CNN(50)",
                    "600-1200-300",
                    "27",
                    "0.8533",
                    "82.5",
                    "0.57/0.55",
                    "74.7/82.2",
                    "81.5",
                    "86.2"
                ],
                [
                    "RNN",
                    "2x300",
                    "RNN",
                    "600",
                    "26",
                    "0.8530",
                    "82.6",
                    "0.51/0.50",
                    "74.1/81.7",
                    "81.0",
                    "89.0"
                ],
                [
                    "CNN",
                    "4x300 \\lx @ [ITALIC] sectionsign",
                    "CNN",
                    "600-1200-300",
                    "8",
                    "0.8117",
                    "80.5",
                    "0.44/0.42",
                    "72.7/80.7",
                    "78.4",
                    "85.0"
                ],
                [
                    "RNN",
                    "2x300",
                    "CNN",
                    "600-1200-2400-300",
                    "28",
                    "[BOLD] 0.8570",
                    "[BOLD] 84.0",
                    "0.58/0.56",
                    "74.3/81.5",
                    "82.8",
                    "88.2"
                ],
                [
                    "RNN",
                    "2x300",
                    "CNN",
                    "1200-2400-300",
                    "27",
                    "0.8541",
                    "83.0",
                    "[BOLD] 0.59/ [BOLD] 0.57",
                    "74.3/82.2",
                    "[BOLD] 82.9",
                    "89.0"
                ],
                [
                    "[BOLD] Dimension of Sentence Representation: 2400",
                    "[BOLD] Dimension of Sentence Representation: 2400",
                    "[BOLD] Dimension of Sentence Representation: 2400",
                    "[BOLD] Dimension of Sentence Representation: 2400",
                    "[BOLD] Dimension of Sentence Representation: 2400",
                    "[BOLD] Dimension of Sentence Representation: 2400",
                    "[BOLD] Dimension of Sentence Representation: 2400",
                    "[BOLD] Dimension of Sentence Representation: 2400",
                    "[BOLD] Dimension of Sentence Representation: 2400",
                    "[BOLD] Dimension of Sentence Representation: 2400",
                    "[BOLD] Dimension of Sentence Representation: 2400"
                ],
                [
                    "RNN",
                    "2x600",
                    "CNN",
                    "600-1200-300",
                    "25",
                    "0.8631",
                    "83.9",
                    "[BOLD] 0.58/ [BOLD] 0.55",
                    "[BOLD] 74.7/ [BOLD] 83.1",
                    "83.4",
                    "[BOLD] 90.2"
                ],
                [
                    "RNN",
                    "2x600",
                    "RNN",
                    "600",
                    "32",
                    "[BOLD] 0.8647",
                    "[BOLD] 84.2",
                    "0.52/0.51",
                    "74.0/81.2",
                    "[BOLD] 84.2",
                    "87.6"
                ],
                [
                    "CNN",
                    "3x800‡",
                    "RNN",
                    "600",
                    "8",
                    "0.8132",
                    "-",
                    "-",
                    "71.9/81.9",
                    "-",
                    "86.6"
                ],
                [
                    "[BOLD] Dimension of Sentence Representation: 4800",
                    "[BOLD] Dimension of Sentence Representation: 4800",
                    "[BOLD] Dimension of Sentence Representation: 4800",
                    "[BOLD] Dimension of Sentence Representation: 4800",
                    "[BOLD] Dimension of Sentence Representation: 4800",
                    "[BOLD] Dimension of Sentence Representation: 4800",
                    "[BOLD] Dimension of Sentence Representation: 4800",
                    "[BOLD] Dimension of Sentence Representation: 4800",
                    "[BOLD] Dimension of Sentence Representation: 4800",
                    "[BOLD] Dimension of Sentence Representation: 4800",
                    "[BOLD] Dimension of Sentence Representation: 4800"
                ],
                [
                    "RNN",
                    "2x1200",
                    "CNN",
                    "600-1200-300",
                    "34",
                    "[BOLD] 0.8698",
                    "[BOLD] 85.2",
                    "[BOLD] 0.59/ [BOLD] 0.57",
                    "[BOLD] 75.1/ [BOLD] 83.2",
                    "[BOLD] 84.1",
                    "[BOLD] 92.2"
                ],
                [
                    "Skip-thought (Kiros et al.,  2015 )",
                    "Skip-thought (Kiros et al.,  2015 )",
                    "Skip-thought (Kiros et al.,  2015 )",
                    "Skip-thought (Kiros et al.,  2015 )",
                    "336",
                    "0.8584",
                    "82.3",
                    "0.29/0.35",
                    "73.0/82.0",
                    "82.0",
                    "[BOLD] 92.2"
                ],
                [
                    "Skip-thought+LN (Ba et al.,  2016 )",
                    "Skip-thought+LN (Ba et al.,  2016 )",
                    "Skip-thought+LN (Ba et al.,  2016 )",
                    "Skip-thought+LN (Ba et al.,  2016 )",
                    "720",
                    "0.8580",
                    "79.5",
                    "0.44/0.45",
                    "-",
                    "82.9",
                    "88.4"
                ]
            ]
        },
        "gold_description": "we present the table 4 in the supplementary material and we summarise it as follows : 1 . decoding the next sentence performed similarly to decoding the subsequent contiguous words . 2 . decoding the subsequent 30 words , which was adopted from the skip - thought training code3 , gave reasonably good performance . more words for decoding didn ' t give us a significant performance gain , and took longer to train . 3 . adding more layers into the decoder and enlarging the dimension of the convolutional layers indeed sightly improved the performance on the three downstream tasks , but as training efficiency is one of our main concerns , it wasn ' t worth sacrificing training efficiency for the minor performance gain . 4 . increasing the dimensionality of the rnn encoder improved the model performance , and the additional training time required was less than needed for increasing the complexity in the cnn decoder . we report results from both smallest and largest models in table 2 . as the transferability of the models trained in both cases perform similarly on the evaluation tasks ( see rows 1 and 2 in table 4 ) , we focus on the simpler predictall - words cnn decoder that learns to reconstruct the next window of contiguous words . as stated in rows 1 , 3 , and 4 in table 4 , decoding short target sequences results in a slightly lower pearson score on sick , and decoding longer target sequences lead to a longer training time . we tweaked the cnn encoder , including different kernel size and activation function , and we report the best results of cnncnn model at row 6 in table 4 . the future predictor in ( gan et al . , 2017 ) also applies a cnn as the encoder , but the decoder is still an rnn , listed at row 11 in table 4 . compared to our designed cnn - cnn model , their cnn - lstm model contains more parameters than our model does , but they have similar performance on the evaluation",
        "generated_description": "for the sentence encoder and the decoder , we experimented with both cnn and rnn with different dimensionality of the embeddings . we found that the best results are achieved with a cnn encoder with 600 - 1200 - 300 dimensions and a cnn decoder with 20 dimensions . for the rnn encoder , the best performance is achieved by using a 2x2 lstm as the encoder . this is consistent with our findings in the previous section where we found that increasing the dimension of the word embedding matrix improves the performance of rnns ."
    },
    {
        "table_id": "29",
        "table_info": {
            "table_caption": "Table 2: BLEU scores for training NMT models with full word and byte pair encoded vocabularies. Full word models limit vocabulary size to 50K. All models are trained with annealing Adam and scores are averaged over 3 optimizer runs.",
            "table_column_names": [
                "[EMPTY]",
                "WMT DE-EN",
                "WMT EN-FI",
                "WMT RO-EN",
                "IWSLT EN-FR",
                "IWSLT CS-EN"
            ],
            "table_content_values": [
                [
                    "Words 50K",
                    "31.6",
                    "12.6",
                    "27.1",
                    "33.6",
                    "21.0"
                ],
                [
                    "BPE 32K",
                    "[BOLD] 33.5",
                    "[BOLD] 14.7",
                    "[BOLD] 27.8",
                    "34.5",
                    "22.6"
                ],
                [
                    "BPE 16K",
                    "33.1",
                    "[BOLD] 14.7",
                    "[BOLD] 27.8",
                    "[BOLD] 34.8",
                    "[BOLD] 23.0"
                ]
            ]
        },
        "gold_description": "as shown in table 2 , sub - word systems outperform full - word systems across the board , despite having fewer total parameters . systems built on larger data generally benefit from larger vocabularies while smaller systems perform better with smaller vocabularies .",
        "generated_description": "the byte - pair encoded model outperforms the word - only model on all language pairs except for german - english on the wmt dataset . on the iwslt dataset , bpe 16k performs slightly better than bpe 32k , but the gains are not as large ."
    },
    {
        "table_id": "30",
        "table_info": {
            "table_caption": "Table 1: Pre-selection results. PPL stands for test set perplexity, all models have ≈5M parameters.",
            "table_column_names": [
                "Model LSTM-Word",
                "PPL 88.0",
                "Model Char-CNN",
                "PPL 92.3"
            ],
            "table_content_values": [
                [
                    "Syl-LSTM",
                    "88.7",
                    "Syl-Avg",
                    "88.5"
                ],
                [
                    "Syl-CNN-2",
                    "86.6",
                    "Syl-Avg-A",
                    "91.4"
                ],
                [
                    "Syl-CNN-3",
                    "[BOLD] 84.6",
                    "Syl-Avg-B",
                    "88.5"
                ],
                [
                    "Syl-CNN-4",
                    "86.8",
                    "Syl-Concat",
                    "[BOLD] 83.7"
                ],
                [
                    "Syl-Sum",
                    "[BOLD] 84.6",
                    "[EMPTY]",
                    "[EMPTY]"
                ]
            ]
        },
        "gold_description": "the results of the pre - selection are reported in table 1 . all syllable - aware models comfortably outperform the char - cnn when the budget is limited to 5m parameters . surprisingly , a pure word - level model , 6 lstm - word , also beats the character - aware one under such budget . the three best configurations are syl - concat , syl - sum , and syl - cnn -",
        "generated_description": "all models have ≈ 5 millions of parameters . char - cnn performs better than lstm - word on test set perplexity , but is outperformed by syl - lstm and syl - avg by a large margin . we hypothesize that this is due to the fact that character - level cnns are better at capturing long term dependencies than word level cnns . syl - concat outperforms all other models by a wide margin ."
    },
    {
        "table_id": "31",
        "table_info": {
            "table_caption": "Table 3: Evaluation of the syllable-aware models against Char-CNN. In each case the smallest model, Syl-Concat, has 18%–33% less parameters than Char-CNN and is trained 1.2–2.2 times faster (Appendix C).",
            "table_column_names": [
                "Model",
                "EN",
                "FR",
                "ES",
                "DE",
                "CS",
                "RU",
                "[EMPTY]"
            ],
            "table_content_values": [
                [
                    "Char-CNN",
                    "[BOLD] 78.9",
                    "[BOLD] 184",
                    "[BOLD] 165",
                    "[BOLD] 239",
                    "[BOLD] 371",
                    "[BOLD] 261",
                    "DATA-S"
                ],
                [
                    "Syl-CNN",
                    "80.5",
                    "191",
                    "172",
                    "239",
                    "374",
                    "269",
                    "DATA-S"
                ],
                [
                    "Syl-Sum",
                    "80.3",
                    "193",
                    "170",
                    "243",
                    "389",
                    "273",
                    "DATA-S"
                ],
                [
                    "Syl-Concat",
                    "79.4",
                    "188",
                    "168",
                    "244",
                    "383",
                    "265",
                    "DATA-S"
                ],
                [
                    "Char-CNN",
                    "[BOLD] 160",
                    "[BOLD] 124",
                    "[BOLD] 118",
                    "[BOLD] 198",
                    "[BOLD] 392",
                    "[BOLD] 190",
                    "DATA-L"
                ],
                [
                    "Syl-CNN",
                    "–",
                    "–",
                    "–",
                    "–",
                    "–",
                    "–",
                    "DATA-L"
                ],
                [
                    "Syl-Sum",
                    "170",
                    "141",
                    "129",
                    "212",
                    "451",
                    "233",
                    "DATA-L"
                ],
                [
                    "Syl-Concat",
                    "176",
                    "139",
                    "129",
                    "225",
                    "449",
                    "225",
                    "DATA-L"
                ]
            ]
        },
        "gold_description": "the results of evaluating these three models on small ( 1m tokens ) and medium - sized ( 17m – 57m tokens ) data sets against char - cnn for different languages are provided in table 3 . the models demonstrate similar performance on small data , but char - cnn scales significantly better on medium - sized data . from the three syllable - aware models , syl - concat looks the most advantageous as it demonstrates stable results and has the least number of parameters . therefore in what follows we will make a more detailed comparison of sylconcat with char - cnn .",
        "generated_description": "we can see that the syl - cnn and syl - sum models perform better than the original char - cnn model in all languages except for czech ( czech ) and russian ( ru ) , where the difference is not statistically significant . the syl - concat model performs the worst in almost all cases , which is consistent with the results reported in the original papers . the main reason for the poor performance is that the data in czech and russian are much smaller than those in the other languages , which makes it more difficult for the network to learn a good representation for them ."
    },
    {
        "table_id": "32",
        "table_info": {
            "table_caption": "Table 5: Replacing LSTM with Variational RHN.",
            "table_column_names": [
                "Model",
                "depth",
                "[ITALIC] dLM",
                "Size",
                "PPL"
            ],
            "table_content_values": [
                [
                    "RHN-Char-CNN",
                    "8",
                    "650",
                    "20M",
                    "67.6"
                ],
                [
                    "RHN-Syl-Concat",
                    "8",
                    "439",
                    "13M",
                    "72.0"
                ],
                [
                    "RHN-Syl-Concat",
                    "8",
                    "650",
                    "20M",
                    "69.4"
                ]
            ]
        },
        "gold_description": "to find out whether this was the case we replaced the lstm by a variational rhn ( zilly et al . , 2017 ) , and that resulted in a significant reduction of perplexities on ptb for both char - cnn and syl - concat ( table 5 ) . moreover , increasing dlm from 439 to 650 did result in better performance for syl - concat .",
        "generated_description": "variational rhn . in this experiment , we replace the character cnn with a recurrent neural network ( rhn ) and compare its performance with different variants . we use the same hyper - parameters as described in the previous experiments , i . e . , the depth and the depth of the lstm layers , the number of hidden units in the first and second convolutional layers , and the size of the fully connected layers . we can see that rhn - syl - concat achieves slightly better performance than the original rhn with the same depth and dlm , but the model size is reduced to 13m instead of 20m ."
    },
    {
        "table_id": "33",
        "table_info": {
            "table_caption": "Table 1: Effect of adding titles to premises.",
            "table_column_names": [
                "Problem",
                "Support Accuracy",
                "Support Kappa",
                "Claim Accuracy",
                "Claim Kappa"
            ],
            "table_content_values": [
                [
                    "ESIM on FEVER One",
                    ".760",
                    ".260",
                    ".517",
                    ".297"
                ],
                [
                    "ESIM on FEVER Title One",
                    ".846",
                    ".394",
                    ".639",
                    ".433"
                ],
                [
                    "Transformer on FEVER Title One",
                    ".958",
                    ".660",
                    ".823",
                    ".622"
                ]
            ]
        },
        "gold_description": "on a support basis , we find a 52 % increase in kappa by adding the titles . cohen ' s kappa is 68 % higher than that for esim .",
        "generated_description": "we observe that adding titles to premises improves both the support accuracy and the claim accuracy for both esim and transformer on fever . however , the gain is smaller for the transformer compared to esim . we hypothesise that this is due to the fact that esim is not able to exploit the additional information contained in the titles , as it does not have access to them ."
    },
    {
        "table_id": "34",
        "table_info": {
            "table_caption": "Table 2: Concatenating evidence or not.",
            "table_column_names": [
                "Problem",
                "Support Accuracy",
                "Support Kappa",
                "Claim Accuracy",
                "Claim Kappa"
            ],
            "table_content_values": [
                [
                    "ESIM on FEVER Title Five Oracle",
                    "[EMPTY]",
                    "[EMPTY]",
                    ".591",
                    ".388"
                ],
                [
                    "ESIM on FEVER Title Five",
                    "[EMPTY]",
                    "[EMPTY]",
                    ".573",
                    ".110"
                ],
                [
                    "ESIM on FEVER Title One",
                    ".846",
                    ".394",
                    ".639",
                    ".433"
                ],
                [
                    "Transformer on FEVER Title Five Oracle",
                    "[EMPTY]",
                    "[EMPTY]",
                    ".673",
                    ".511"
                ],
                [
                    "Transformer on FEVER Title Five",
                    "[EMPTY]",
                    "[EMPTY]",
                    ".801",
                    ".609"
                ],
                [
                    "Transformer on FEVER Title One",
                    ".958",
                    ".660",
                    ".823",
                    ".622"
                ]
            ]
        },
        "gold_description": "makes the fever title five oracle performance better than fever title five . the transformer model is accurate enough that oracle guessing does not help .",
        "generated_description": "we can see that the esim and transformer with the oracle argument outperform the baseline in terms of both the support accuracy and the claim kappa . we can also see that there is no significant difference in the claim accuracy when we concatenate the evidence from the two arguments ."
    },
    {
        "table_id": "35",
        "table_info": {
            "table_caption": "Table 3: Percentage of evidence retrieved from first half of development set. Single-evidence claims only.",
            "table_column_names": [
                "System",
                "Retrieval"
            ],
            "table_content_values": [
                [
                    "FEVER Baseline (TFIDF)",
                    "66.1%"
                ],
                [
                    "+ Titles in TFIDF",
                    "68.3%"
                ],
                [
                    "+ Titles + NE",
                    "80.8%"
                ],
                [
                    "+ Titles + NE + Film",
                    "81.2%"
                ],
                [
                    "Entire Articles + NE + Film",
                    "90.1%"
                ]
            ]
        },
        "gold_description": "the named entity retrieval strategy boosts the evidence retrieval rate to 80 . 8 % , the film retrievals raise evidence retrieval to 81 . 2 % .",
        "generated_description": "we observe that the fever baseline ( tfidf ) is not able to provide supporting evidence for a majority of the claims , resulting in only 66 . 1 % of the retrieved evidence . the fever system with titles in tfidf improves this to 68 . 3 % by adding in the ne and film category , and 80 . 8 % by including the entire titles in the system . the final system with all the evidence retrieved ( titles + ne + film ) is able to improve this to 81 . 2 % with the help of the ne category ."
    },
    {
        "table_id": "36",
        "table_info": {
            "table_caption": "Table 4: FEVER Score of various systems. All use NE+Film retrieval.",
            "table_column_names": [
                "System",
                "Development",
                "Test"
            ],
            "table_content_values": [
                [
                    "FEVER Title Five Oracle",
                    ".5289",
                    "—"
                ],
                [
                    "FEVER Title Five",
                    ".5553",
                    "—"
                ],
                [
                    "FEVER Title One",
                    ".5617",
                    ".5539"
                ],
                [
                    "FEVER Title One (Narrow Evidence)",
                    ".5550",
                    "—"
                ],
                [
                    "FEVER Title One (Entire Articles)",
                    ".5844",
                    ".5736"
                ]
            ]
        },
        "gold_description": "limiting evidence in this way when only five statements are retrieved ( \" narrow evidence \" in table 4 ) pushes fever score down very little , to . 5550 from . 5617 on the development set , indeed , when the system reviews the extra evidence , fever score goes up to . 5844 on the development set .",
        "generated_description": "we see that the oracle fever score is much higher than the fever score of . 5289 achieved by using the full document as the evidence set . using only the title or the first five paragraphs of the document results in a lower score of . 5553 . using the entire article as evidence results in an improvement of . 5736 , but using only the first few paragraphs results in the highest score , . 5844 . the fact that the system is able to achieve this score with just the title of the first paragraph is surprising , as it suggests that it might be possible to use the entire document as evidence to improve fever . the system that only uses the title as evidence does not perform as well ."
    },
    {
        "table_id": "37",
        "table_info": {
            "table_caption": "Table 2: Projection accuracy for the isolated example experiment mapping from 2000 → 2001.",
            "table_column_names": [
                "Pairs (size)",
                "@1",
                "@5",
                "@10"
            ],
            "table_content_values": [
                [
                    "All (38)",
                    "44.7",
                    "73.7",
                    "84.2"
                ],
                [
                    "New (7)",
                    "14.3",
                    "28.6",
                    "42.9"
                ]
            ]
        },
        "gold_description": "then , this projection is applied to the second model embeddings of the 47 locations , which are subject to armed conflicts in the year 2001 ( 38 after skipping pairs with outof - vocabulary elements ) . table 2 demonstrates the resulting performance ( reflecting how close the predicted vectors are to the actual armed groups active in this or that location ) . note that out of 38 pairs from 2001 , 31 were already present in the previous data set ( ongoing conflicts ) . this explains why the evaluation on all the pairs gives high results . however , even for the new conflicts , the projection performance is encouraging .",
        "generated_description": "we see that the overall accuracy is relatively high for the all pairs ( 44 . 7 % ) and the new pairs ( 14 . 3 % ) . however , we see a significant drop in the accuracy for the new pairs , which is likely due to the fact that they are more difficult to disambiguate compared to the all pairs ."
    },
    {
        "table_id": "38",
        "table_info": {
            "table_caption": "Table 3: Average accuracies of predicting next-year insurgents on the basis of locations, using projections trained on the conflicts from all the preceding years (up-to-now) or the preceding year only (previous). Results for 3 baselines are shown along with the proposed incremental dynamic approach.",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] Only in-vocabulary pairs  [BOLD] up-to-now",
                "[BOLD] Only in-vocabulary pairs  [BOLD] up-to-now",
                "[BOLD] Only in-vocabulary pairs  [BOLD] up-to-now",
                "[BOLD] Only in-vocabulary pairs  [BOLD] previous",
                "[BOLD] Only in-vocabulary pairs  [BOLD] previous",
                "[BOLD] Only in-vocabulary pairs  [BOLD] previous",
                "[BOLD] All pairs, including OOV  [BOLD] up-to-now",
                "[BOLD] All pairs, including OOV  [BOLD] up-to-now",
                "[BOLD] All pairs, including OOV  [BOLD] up-to-now",
                "[BOLD] All pairs, including OOV  [BOLD] previous",
                "[BOLD] All pairs, including OOV  [BOLD] previous",
                "[BOLD] All pairs, including OOV  [BOLD] previous"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "@1",
                    "@5",
                    "@10",
                    "@1",
                    "@5",
                    "@10",
                    "@1",
                    "@5",
                    "@10",
                    "@1",
                    "@5",
                    "@10"
                ],
                [
                    "[BOLD] Separate",
                    "0.0",
                    "0.7",
                    "2.1",
                    "0.5",
                    "1.1",
                    "2.4",
                    "0.0",
                    "0.5",
                    "1.6",
                    "0.4",
                    "0.8",
                    "1.8"
                ],
                [
                    "[BOLD] Cumulative",
                    "1.7",
                    "8.3",
                    "13.8",
                    "2.9",
                    "9.6",
                    "15.2",
                    "1.5",
                    "7.4",
                    "12.2",
                    "2.5",
                    "8.5",
                    "13.4"
                ],
                [
                    "[BOLD] Incr. static",
                    "54.9",
                    "82.8",
                    "90.1",
                    "60.4",
                    "79.6",
                    "84.8",
                    "20.8",
                    "31.5",
                    "34.2",
                    "23.0",
                    "30.3",
                    "32.2"
                ],
                [
                    "[BOLD] Incr. dynamic",
                    "32.5",
                    "64.5",
                    "72.2",
                    "42.6",
                    "64.8",
                    "71.5",
                    "28.1",
                    "56.1",
                    "[BOLD] 62.9",
                    "[BOLD] 37.3",
                    "[BOLD] 56.7",
                    "62.6"
                ]
            ]
        },
        "gold_description": "table 3 presents the results for these experiments , as well as baselines ( averaged across 15 years ) . for the proposed incr . dynamic approach , the performance of the previous projections is comparable to that of the up - to - now projections on the accuracies @ 5 and @ 10 , and is even higher on the accuracy @ 1 ( statistically significant with t - test , p < 0 . 01 ) . thus , the single - year projections are somewhat more ' focused ' , while taking much less time to learn , because of less training pairs . the fact that our models were incrementally updated , not trained from scratch , is crucial . the results of the separate baseline look more like random jitter . the cumulative baseline results are slightly better , probably simply because they are trained on more data . however , they still perform much worse than the models trained using incremental updates . this is because the former models are not connected to each other , and thus are initialized with a different layout of words in the vector space . this gives rise to formally different directions of semantic relations in each yearly model ( the relations themselves are still there , but they are rotated and scaled differently ) . the results for the incr . static baseline , when tested only on the words present in the test model vocabulary ( the left part of the table ) , seem better than those of the proposed incr . dynamic approach . this stems from the fact that incremental updating with static vocabulary means that we never add new words to the models ; thus , they contain only the vocabulary learned from the 1994 texts . the result is that at test time we skip many more pairs than with the other approaches ( about 62 % in average ) . subsequently , the projections are tested only on a minor part of the test sets . of course , skipping large parts of the data would be a major drawback for any realistic application , so the incr . static baseline is not really plausible .",
        "generated_description": "the results show that the up - to - now system performs better than the separate system for both in - vocabulary pairs and oov pairs , including oovs . however , the best performance is obtained for both systems for the in - word pairs and for the oov - pairs . this indicates that there is a trade - off between the quality of the word embeddings and the size of the training data ."
    },
    {
        "table_id": "39",
        "table_info": {
            "table_caption": "Table 4: Evaluation of relative time-lines for each model and loss function, where L∗ indicates the (unweighted) sum of Lτ, Lτce, and Lτh.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] TE3‡  [BOLD] P",
                "[BOLD] TE3‡  [BOLD] R",
                "[BOLD] TE3‡  [BOLD] F",
                "[BOLD] TD‡  [BOLD] P",
                "[BOLD] TD‡  [BOLD] R",
                "[BOLD] TD‡  [BOLD] F"
            ],
            "table_content_values": [
                [
                    "[ITALIC] Indirect:  [ITALIC] O( [ITALIC] n2)",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "TL2RTL ( [ITALIC] Lτ)",
                    "53.5",
                    "51.1",
                    "52.3",
                    "59.1",
                    "61.2",
                    "60.1"
                ],
                [
                    "TL2RTL ( [ITALIC] Lτce)",
                    "53.9",
                    "51.7",
                    "[BOLD] 52.8",
                    "61.2",
                    "60.7",
                    "60.9"
                ],
                [
                    "TL2RTL ( [ITALIC] Lτh)",
                    "52.8",
                    "51.1",
                    "51.9",
                    "57.9",
                    "60.6",
                    "59.2"
                ],
                [
                    "TL2RTL ( [ITALIC] L∗)",
                    "52.6",
                    "52.0",
                    "52.3",
                    "62.3",
                    "62.3",
                    "[BOLD] 62.3"
                ],
                [
                    "[ITALIC] Direct:  [ITALIC] O( [ITALIC] n)",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "S-TLM ( [ITALIC] Lτ)",
                    "50.1",
                    "50.4",
                    "50.2",
                    "57.8",
                    "59.5",
                    "[BOLD] 58.6"
                ],
                [
                    "S-TLM ( [ITALIC] Lτce)",
                    "50.1",
                    "50.0",
                    "50.1",
                    "53.4",
                    "53.5",
                    "53.5"
                ],
                [
                    "S-TLM ( [ITALIC] Lτh)",
                    "51.5",
                    "51.7",
                    "[BOLD] 51.6",
                    "55.1",
                    "56.4",
                    "55.7"
                ],
                [
                    "S-TLM ( [ITALIC] L∗)",
                    "50.9",
                    "51.0",
                    "51.0",
                    "56.5",
                    "55.3",
                    "55.9"
                ],
                [
                    "C-TLM ( [ITALIC] Lτ)",
                    "56.2",
                    "56.1",
                    "[BOLD] 56.1",
                    "57.1",
                    "59.7",
                    "[BOLD] 58.4"
                ],
                [
                    "C-TLM ( [ITALIC] Lτce)",
                    "54.4",
                    "55.4",
                    "54.9",
                    "52.4",
                    "57.3",
                    "54.7"
                ],
                [
                    "C-TLM ( [ITALIC] Lτh)",
                    "55.7",
                    "55.5",
                    "55.6",
                    "55.3",
                    "54.9",
                    "55.1"
                ],
                [
                    "C-TLM ( [ITALIC] L∗)",
                    "54.0",
                    "54.3",
                    "54.1",
                    "54.6",
                    "53.5",
                    "54.1"
                ]
            ]
        },
        "gold_description": "we compared our three proposed models for the three loss functions lτ , lτ ce , and lτ h , and their linear ( unweighted ) combination l ∗ , on te3 ‡ and td ‡ , for which the results are shown in table 4 . a trend that can be observed is that overall performance on td ‡ is higher than that of te3 ‡ if we compare loss functions lτ , lτ ce , and lτh , and combination l ∗ , it can be noticed that , although all loss functions seem to give fairly similar performance , lτ gives the most robust results ( never lowest ) , especially noticeable for the smaller dataset td ‡ . the combination of losses l ∗ shows mixed results , and has lower performance for s - tlm and c - tlm , but better performance for tl2rtl . moreover , we can clearly see that on te3 ‡ , ctlm performs better than the indirect models , across all loss functions . on td ‡ , the indirect models seem to perform slightly better . the difference between c - tlm and s - tlm is small on the smaller td ‡ on te3 ‡ , the larger dataset , c - tlm clearly outperforms s - tlm across all loss functions ,",
        "generated_description": "we observe that tl2rtl ( lτ ) achieves the best f - measure for both the indirect and direct cases , with lτce slightly outperforming lτh and l ∗ for the te3 and td datasets , but not for the indirect case . the difference in performance between lτ and lτc is smaller for the td dataset , which we hypothesize is due to the fact that there are fewer direct cases in this dataset ."
    },
    {
        "table_id": "40",
        "table_info": {
            "table_caption": "Table 1: Jensen-Shannon divergence between word distribution in all Onion drug sites, Legal and Illegal Onion drug sites, and eBay sites. Each domain was also split in half for within-domain comparison.",
            "table_column_names": [
                "[EMPTY]",
                "[EMPTY]",
                "All Onion all",
                "All Onion half 1",
                "All Onion half 2",
                "eBay all",
                "eBay half 1",
                "eBay half 2",
                "Illegal Onion all",
                "Illegal Onion half 1",
                "Illegal Onion half 2",
                "Legal Onion all",
                "Legal Onion half 1",
                "Legal Onion half 2"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "all",
                    "[EMPTY]",
                    "0.23",
                    "0.25",
                    "0.60",
                    "0.61",
                    "0.61",
                    "0.33",
                    "0.39",
                    "0.41",
                    "0.35",
                    "0.41",
                    "0.42"
                ],
                [
                    "All Onion",
                    "half 1",
                    "0.23",
                    "[EMPTY]",
                    "0.43",
                    "0.60",
                    "0.62",
                    "0.62",
                    "0.37",
                    "0.33",
                    "0.50",
                    "0.40",
                    "0.36",
                    "0.52"
                ],
                [
                    "[EMPTY]",
                    "half 2",
                    "0.25",
                    "0.43",
                    "[EMPTY]",
                    "0.61",
                    "0.62",
                    "0.62",
                    "0.39",
                    "0.50",
                    "0.35",
                    "0.39",
                    "0.51",
                    "0.35"
                ],
                [
                    "[EMPTY]",
                    "all",
                    "0.60",
                    "0.60",
                    "0.61",
                    "[EMPTY]",
                    "0.23",
                    "0.25",
                    "0.59",
                    "0.60",
                    "0.60",
                    "0.66",
                    "0.67",
                    "0.67"
                ],
                [
                    "eBay",
                    "half 1",
                    "0.61",
                    "0.62",
                    "0.62",
                    "0.23",
                    "[EMPTY]",
                    "0.43",
                    "0.60",
                    "0.61",
                    "0.61",
                    "0.67",
                    "0.67",
                    "0.68"
                ],
                [
                    "[EMPTY]",
                    "half 2",
                    "0.61",
                    "0.62",
                    "0.62",
                    "0.25",
                    "0.43",
                    "[EMPTY]",
                    "0.60",
                    "0.61",
                    "0.61",
                    "0.67",
                    "0.68",
                    "0.68"
                ],
                [
                    "[EMPTY]",
                    "all",
                    "0.33",
                    "0.37",
                    "0.39",
                    "0.59",
                    "0.60",
                    "0.60",
                    "[EMPTY]",
                    "0.23",
                    "0.27",
                    "0.61",
                    "0.62",
                    "0.62"
                ],
                [
                    "Illegal Onion",
                    "half 1",
                    "0.39",
                    "0.33",
                    "0.50",
                    "0.60",
                    "0.61",
                    "0.61",
                    "0.23",
                    "[EMPTY]",
                    "0.45",
                    "0.62",
                    "0.63",
                    "0.62"
                ],
                [
                    "[EMPTY]",
                    "half 2",
                    "0.41",
                    "0.50",
                    "0.35",
                    "0.60",
                    "0.61",
                    "0.61",
                    "0.27",
                    "0.45",
                    "[EMPTY]",
                    "0.62",
                    "0.63",
                    "0.63"
                ],
                [
                    "[EMPTY]",
                    "all",
                    "0.35",
                    "0.40",
                    "0.39",
                    "0.66",
                    "0.67",
                    "0.67",
                    "0.61",
                    "0.62",
                    "0.62",
                    "[EMPTY]",
                    "0.26",
                    "0.26"
                ],
                [
                    "Legal onion",
                    "half 1",
                    "0.41",
                    "0.36",
                    "0.51",
                    "0.67",
                    "0.67",
                    "0.68",
                    "0.62",
                    "0.63",
                    "0.63",
                    "0.26",
                    "[EMPTY]",
                    "0.47"
                ],
                [
                    "[EMPTY]",
                    "half 2",
                    "0.42",
                    "0.52",
                    "0.35",
                    "0.67",
                    "0.68",
                    "0.68",
                    "0.62",
                    "0.62",
                    "0.63",
                    "0.26",
                    "0.47",
                    "[EMPTY]"
                ]
            ]
        },
        "gold_description": "table 1 presents our results . the self - distance f the ebay , legal onion and illegal onion corpora lies between 0 . 40 to 0 . 45 by the jensenshannon divergence , but the distance between each pair is 0 . 60 to 0 . 65 , with the three approximately forming an equilateral triangle in the space of word distributions . similar results are obtained using variational distance , and are omitted for brevity .",
        "generated_description": "for the second experiment , we compare the performance of the proposed method with the state - of - the - art clustering algorithm on the dataset containing only one slice of each legal and illegal slice of a particular flavor . the clustering results on this dataset are shown in table label : fig : legal vs . illegal vs . all . as can be seen from the table , the clustering result on the illegal slice is better than the one on the all - onion slice , but worse than that on the legitimate slice . the reason for this is that the illegal one is more difficult to cluster than the normal one , and the algorithm is not able to distinguish it from the other slices in the dataset ."
    },
    {
        "table_id": "41",
        "table_info": {
            "table_caption": "Table 2: Average percentage of wikifiable named entities in a website per domain, with standard error.",
            "table_column_names": [
                "[EMPTY]",
                "% Wikifiable"
            ],
            "table_content_values": [
                [
                    "eBay",
                    "38.6±2.00"
                ],
                [
                    "Illegal Onion",
                    "32.5±1.35"
                ],
                [
                    "Legal Onion",
                    "50.8±2.31"
                ]
            ]
        },
        "gold_description": "each average . according to our results ( table 2 ) , the wikification success ratios of ebay and illegal onion named entities is comparable and relatively low . however , sites selling legal drugs on onion have a much higher wikification percentage .",
        "generated_description": "the average percentage of wikifiable named entities in a website is 38 . 6 % for ebay , 32 . 5 % for illegal onion , and 50 . 8 % for the legal onion . we observe that the number of entities that are wikifiable is higher for the illegal onion than for the legal onion , likely due to the fact that the site ’ s authors claim that many of the “ illegal ” accounts are not real accounts , but are fake accounts ."
    },
    {
        "table_id": "42",
        "table_info": {
            "table_caption": "Table 1: F1 results for knowledge-based systems on the Raganato et al. (2017a) dataset. Top rows show conflicting results for UKB. † for results reported in Raganato et al. (2017a), ‡ for results reported in Chaplot and Sakajhutdinov (2018). Best results in bold. S2 stands for Senseval-2, S3 for Senseval-3, S07 for Semeval-2007, S13 for Semeval-2013 and S15 for Semeval-2015.",
            "table_column_names": [
                "[EMPTY]",
                "All",
                "S2",
                "S3",
                "S07",
                "S13",
                "S15"
            ],
            "table_content_values": [
                [
                    "UKB (this work)",
                    "[BOLD] 67.3",
                    "68.8",
                    "66.1",
                    "53.0",
                    "[BOLD] 68.8",
                    "[BOLD] 70.3"
                ],
                [
                    "UKB (elsewhere)†‡",
                    "57.5",
                    "60.6",
                    "54.1",
                    "42.0",
                    "59.0",
                    "61.2"
                ],
                [
                    "Chaplot and Sakajhutdinov ( 2018 ) ‡",
                    "66.9",
                    "[BOLD] 69.0",
                    "[BOLD] 66.9",
                    "55.6",
                    "65.3",
                    "69.6"
                ],
                [
                    "Babelfy Moro et al. ( 2014 )†",
                    "65.5",
                    "67.0",
                    "63.5",
                    "51.6",
                    "66.4",
                    "70.3"
                ],
                [
                    "MFS",
                    "65.2",
                    "66.8",
                    "66.2",
                    "55.2",
                    "63.0",
                    "67.8"
                ],
                [
                    "Basile et al. ( 2014 )†",
                    "63.7",
                    "63.0",
                    "63.7",
                    "[BOLD] 56.7",
                    "66.2",
                    "64.6"
                ],
                [
                    "Banerjee and Pedersen ( 2003 )†",
                    "48.7",
                    "50.6",
                    "44.5",
                    "32.0",
                    "53.6",
                    "51.0"
                ]
            ]
        },
        "gold_description": "the two top rows in table 1 show conflicting results for ukb . as the results show , that paper reports a suboptimal use of ukb . the table also reports the best performing knowledge - based systems on this dataset . also report we ( chaplot and sakajhutdinov , 2018 ) , the latest work on this area , as well as the most frequent sense as given by wordnet counts the table shows that ukb yields the best overall result .",
        "generated_description": "our proposed method ukb outperforms the previous state - of - the - art methods by a significant margin on all test sets , with an overall f1 score of 70 . 3 % and an average of 68 . 8 % across all the test sets ."
    },
    {
        "table_id": "43",
        "table_info": {
            "table_caption": "Table 2: F1 results for supervised systems on the Raganato et al. (2017a) dataset. † for results reported in Raganato et al. (2017a). Best results in bold. Note that Raganato et al. (2017b) used S07 for development.",
            "table_column_names": [
                "[EMPTY]",
                "All",
                "S2",
                "S3",
                "S07",
                "S13",
                "S15"
            ],
            "table_content_values": [
                [
                    "Yuan et al. ( 2016 )",
                    "[BOLD] 71.5",
                    "[BOLD] 73.8",
                    "[BOLD] 71.8",
                    "63.5",
                    "[BOLD] 69.5",
                    "[BOLD] 72.6"
                ],
                [
                    "Raganato et al. ( 2017b )",
                    "69.9",
                    "72.0",
                    "69.1",
                    "[BOLD] 64.8",
                    "66.9",
                    "71.5"
                ],
                [
                    "Iacobacci et al. ( 2016 )†",
                    "69.7",
                    "73.3",
                    "69.6",
                    "61.1",
                    "66.7",
                    "70.4"
                ],
                [
                    "Melamud et al. ( 2016 )†",
                    "69.4",
                    "72.3",
                    "68.2",
                    "61.5",
                    "67.2",
                    "71.7"
                ],
                [
                    "IMS Zhong and Ng ( 2010 )†",
                    "68.8",
                    "72.8",
                    "69.2",
                    "60.0",
                    "65.0",
                    "69.3"
                ]
            ]
        },
        "gold_description": "table 2 reports the results of supervised systems on the same dataset , taken from the two works that use the dataset as expected , supervised systems outperform knowledge - based systems , by a small margin in some of the cases .",
        "generated_description": "as can be seen , our system outperforms the previous state - of - the - art results on all test sets , except for s13 and s15 , where ims zhong and ng ’ s system obtains the best result . our system also achieves the best results on s2 , s3 , s07 , and s13 , but lags behind on s15 ."
    },
    {
        "table_id": "44",
        "table_info": {
            "table_caption": "Table 3: Additional results on other settings of UKB. nf subscript stands for “no sense frequency”. Top rows use a single sentence as context, while the bottom rows correspond to extended context (cf. Sect. 3). Best results in bold.",
            "table_column_names": [
                "[EMPTY]",
                "All",
                "S2",
                "S3",
                "S07",
                "S13",
                "S15"
            ],
            "table_content_values": [
                [
                    "Single context sentence",
                    "Single context sentence",
                    "Single context sentence",
                    "Single context sentence",
                    "Single context sentence",
                    "Single context sentence",
                    "Single context sentence"
                ],
                [
                    "ppr_w2w",
                    "66.9",
                    "[BOLD] 69.0",
                    "65.7",
                    "53.9",
                    "67.1",
                    "69.9"
                ],
                [
                    "dfs_ppr",
                    "65.2",
                    "67.5",
                    "65.6",
                    "53.6",
                    "62.7",
                    "68.2"
                ],
                [
                    "ppr",
                    "65.5",
                    "67.5",
                    "[BOLD] 66.5",
                    "[BOLD] 54.7",
                    "63.3",
                    "67.4"
                ],
                [
                    "ppr_w2wnf",
                    "60.2",
                    "63.7",
                    "55.1",
                    "42.2",
                    "63.5",
                    "63.8"
                ],
                [
                    "pprnf",
                    "57.1",
                    "60.5",
                    "53.8",
                    "41.3",
                    "58.0",
                    "61.4"
                ],
                [
                    "dfsnf",
                    "58.7",
                    "63.3",
                    "52.8",
                    "40.4",
                    "61.6",
                    "62.5"
                ],
                [
                    "One or more context sentences (# [ITALIC] words≥20)",
                    "One or more context sentences (# [ITALIC] words≥20)",
                    "One or more context sentences (# [ITALIC] words≥20)",
                    "One or more context sentences (# [ITALIC] words≥20)",
                    "One or more context sentences (# [ITALIC] words≥20)",
                    "One or more context sentences (# [ITALIC] words≥20)",
                    "One or more context sentences (# [ITALIC] words≥20)"
                ],
                [
                    "ppr_w2w",
                    "[BOLD] 67.3",
                    "68.8",
                    "66.1",
                    "53.0",
                    "[BOLD] 68.8",
                    "[BOLD] 70.3"
                ],
                [
                    "ppr",
                    "65.6",
                    "67.5",
                    "66.4",
                    "54.1",
                    "64.0",
                    "67.8"
                ],
                [
                    "dfs",
                    "65.7",
                    "67.9",
                    "65.9",
                    "54.5",
                    "64.2",
                    "68.1"
                ],
                [
                    "ppr_w2wnf",
                    "60.4",
                    "64.2",
                    "54.8",
                    "40.0",
                    "64.5",
                    "64.5"
                ],
                [
                    "pprnf",
                    "58.6",
                    "61.3",
                    "54.9",
                    "42.2",
                    "60.9",
                    "62.9"
                ],
                [
                    "dfsnf",
                    "59.1",
                    "62.7",
                    "54.4",
                    "39.3",
                    "62.8",
                    "62.2"
                ]
            ]
        },
        "gold_description": "ta the table shows that the key factor is the use of sense frequencies , and systems that do not use them ( those with a nf subscript ) suffer a loss between 7 and 8 percentage points in f1 . the table also shows that extending the context is mildly effective . regarding the algorithm , the table confirms that the best method is ppr w2w , followed by the subgraph approach ( dfs ) and ppr .",
        "generated_description": "we can see that our proposed models outperform the baselines in most of the cases . the only exception is that ppr_w2wnf does not perform as well as ppr and dfs_ppr on s13 and s15 . we suspect that this is due to the fact that this dataset is much smaller than the others so that the dependency parser is less likely to be able to leverage the power of word2vec ."
    },
    {
        "table_id": "45",
        "table_info": {
            "table_caption": "Table 2: Accuracy (in %) of our model and other text classification models on both versions of SWBD.",
            "table_column_names": [
                "[BOLD] Models",
                "[BOLD] SWBD",
                "[BOLD] SWBD2"
            ],
            "table_content_values": [
                [
                    "BoW + Logsitic",
                    "78.95",
                    "87.76"
                ],
                [
                    "BoW + SVM",
                    "73.68",
                    "[BOLD] 90.82"
                ],
                [
                    "Bigram + SVM",
                    "52.63",
                    "79.59"
                ],
                [
                    "BoW + TF-IDF + Logistic",
                    "52.63",
                    "81.63"
                ],
                [
                    "nGram + Logistic",
                    "52.63",
                    "78.57"
                ],
                [
                    "nGram + TF-IDF + Logistic",
                    "57.89",
                    "87.76"
                ],
                [
                    "Bag of Means + Logistic",
                    "78.95",
                    "87.76"
                ],
                [
                    "Avg. Skipgram + Logistic",
                    "26.32",
                    "59.18"
                ],
                [
                    "Doc2Vec + SVM",
                    "73.68",
                    "86.73"
                ],
                [
                    "HN",
                    "31.58",
                    "54.08"
                ],
                [
                    "HN-ATT Yang et al. ( 2016 )",
                    "73.68",
                    "85.71"
                ],
                [
                    "CNN Kim ( 2014 )",
                    "84.21",
                    "93.87"
                ],
                [
                    "HN-SA (our model)",
                    "[BOLD] 89.47",
                    "[BOLD] 95.92"
                ]
            ]
        },
        "gold_description": "we compare the performance of our model ( table 2 ) with traditional bag of words ( bow ) , tf - idf , and n - grams features based classifiers . we also compare against averaged skip - gram ( mikolov et al . , 2013 ) , doc2vec ( le and mikolov , 2014 ) , cnn ( kim , 2014 ) , hierarchical attention ( hn - att ) ( yang et al . , 2016 ) and hierarchical network ( hn ) models .",
        "generated_description": "we can see that our model outperforms all the baselines on both swbd and swbd2 datasets . on swbd dataset , our model achieves 89 . 47 % and 95 . 92 % accuracy , which are the new state - of - the - art results on this dataset . we also compare our model with hn - att yang et al . our model also outperforms cnn and hn by a large margin . on the other hand , hn does not perform as well as cnn , which we attribute to the fact that it does not utilize any hand - crafted features and relies solely on word embeddings as features ."
    },
    {
        "table_id": "46",
        "table_info": {
            "table_caption": "Table 1: Exact matching accuracy on SQL queries.",
            "table_column_names": [
                "[BOLD] Approach",
                "[BOLD] Dev",
                "[BOLD] Test"
            ],
            "table_content_values": [
                [
                    "Seq2Seq",
                    "1.9%",
                    "3.7%"
                ],
                [
                    "Seq2Seq + Attention",
                    "1.8%",
                    "4.8%"
                ],
                [
                    "Seq2Seq + Copying",
                    "4.1%",
                    "5.3%"
                ],
                [
                    "TypeSQL",
                    "8.0%",
                    "8.2%"
                ],
                [
                    "SQLNet",
                    "10.9%",
                    "12.4%"
                ],
                [
                    "SyntaxSQLNet",
                    "18.9%",
                    "19.7%"
                ],
                [
                    "SyntaxSQLNet(augment)",
                    "24.8%",
                    "27.2%"
                ],
                [
                    "[BOLD] IRNet",
                    "[BOLD] 53.2%",
                    "[BOLD] 46.7%"
                ],
                [
                    "[BOLD] BERT",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "SyntaxSQLNet(BERT)",
                    "25.0%",
                    "25.4%"
                ],
                [
                    "[BOLD] IRNet(BERT)",
                    "[BOLD] 61.9%",
                    "[BOLD] 54.7%"
                ]
            ]
        },
        "gold_description": "table 1 presents the exact matching accuracy of irnet and various baselines on the development set and the test set . irnet clearly outperforms all the baselines by a substantial margin . it obtains 27 . 0 % absolute improvement over syntaxsqlit also obtains 19 . 5 % absolute net on test set . improvement over syntaxsqlnet ( augment ) that performs large - scale data augmentation . when incorporating bert , the performance of both syntaxsqlnet and irnet is substantially improved and the accuracy gap between them on both the development set and the test set is widened .",
        "generated_description": "we can see that the seq2seq model only achieves 1 . 9 % accuracy on the test set , which is far lower than the performance of the state - of - the - art approach , typesql , which achieves 8 . 0 % . we can also see that syntactic embeddings can improve the accuracy to 18 . 9 % , which is more than 10 % improvement over the baseline sqlnet , and more than 20 % over the syntactic augmented version of syntaxsqlnet . our irnet model achieves the best performance on both the dev and test sets , outperforming bert by a large margin , with 61 . 9 % ."
    },
    {
        "table_id": "47",
        "table_info": {
            "table_caption": "Table 2: Exact matching accuracy of SyntaxSQLNet, SyntaxSQLNet(BERT), IRNet and IRNet(BERT) on test set by hardness level.",
            "table_column_names": [
                "[BOLD] Approach",
                "[BOLD] Easy",
                "[BOLD] Medium",
                "[BOLD] Hard",
                "[BOLD] Extra"
            ],
            "table_content_values": [
                [
                    "[BOLD] Approach",
                    "[BOLD] Easy",
                    "[BOLD] Medium",
                    "[BOLD] Hard",
                    "[BOLD] Hard"
                ],
                [
                    "SyntaxSQLNet",
                    "38.6%",
                    "17.6%",
                    "16.3%",
                    "4.9%"
                ],
                [
                    "SyntaxSQLNet",
                    "42.9%",
                    "24.9%",
                    "21.9%",
                    "8.6%"
                ],
                [
                    "(BERT)",
                    "42.9%",
                    "24.9%",
                    "21.9%",
                    "8.6%"
                ],
                [
                    "[BOLD] IRNet",
                    "[BOLD] 70.1%",
                    "[BOLD] 49.2%",
                    "[BOLD] 39.5%",
                    "[BOLD] 19.1%"
                ],
                [
                    "[BOLD] IRNet(BERT)",
                    "[BOLD] 77.2%",
                    "[BOLD] 58.7%",
                    "[BOLD] 48.1%",
                    "[BOLD] 25.3%"
                ]
            ]
        },
        "gold_description": "as shown in table 2 , irnet significantly outperforms syntaxsqlnet in all four hardness levels with or without bert . for example , compared with syntaxsqlnet , irnet obtains 23 . 3 % absolute improvement in hard level .",
        "generated_description": "we further divide the questions into three categories based on the hardness level : easy , medium and extra . the results show that irnet ( bert ) achieves the best performance on the easy and extra difficulty level , while syntaxsqlnet is the best on the medium difficulty level . the reason is that bert is a strong baseline for sql matching , which is used to pre - train the word embeddings of the question and candidate sql query . however , bert does not perform well for the task of sql matching . on the other hand , irnet achieves a better performance than bert on all the three categories ."
    },
    {
        "table_id": "48",
        "table_info": {
            "table_caption": "Table 3: Exact matching accuracy on development set. The header ‘SQL’ means that the approaches are learned to generate SQL, while the header ‘SemQL’ indicates that they are learned to generate SemQL queries.",
            "table_column_names": [
                "[BOLD] Approach",
                "[BOLD] SQL",
                "[BOLD] SemQL"
            ],
            "table_content_values": [
                [
                    "Seq2Seq",
                    "1.9%",
                    "11.4%( [BOLD] +9.5)"
                ],
                [
                    "Seq2Seq + Attention",
                    "1.8%",
                    "14.7%( [BOLD] +12.9)"
                ],
                [
                    "Seq2Seq + Copying",
                    "4.1%",
                    "18.5%( [BOLD] +14.1)"
                ],
                [
                    "TypeSQL",
                    "8.0%",
                    "14.4%( [BOLD] +6.4)"
                ],
                [
                    "SQLNet",
                    "10.9%",
                    "17.5%( [BOLD] +6.6)"
                ],
                [
                    "SyntaxSQLNet",
                    "18.9%",
                    "27.5%( [BOLD] +8.6)"
                ],
                [
                    "[BOLD] BERT",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "SyntaxSQLNet(BERT)",
                    "25.0%",
                    "35.8%( [BOLD] +10.8)"
                ]
            ]
        },
        "gold_description": "as shown in table 3 , there are at least 6 . 6 % and up to 14 . 4 % absolute improvements on accuracy of exact matching on the development set . for example , when syntaxsqlnet is learned to generate semql queries instead of sql queries , it registers 8 . 6 % absolute improvement and even outperforms syntaxsqlnet ( augment ) which performs largescale data augmentation . table 4 presents the ablation study results . it is clear that our base model significantly outperforms syntaxsqlnet , syntaxsqlnet ( augment ) and syntaxsqlnet ( bert ) . performing schema linking ( ' + sl ' ) brings about 8 . 5 % and 6 . 4 % absolute improvement on irnet and irnet ( bert ) . the f1 score on the where clause increases by 12 . 5 % when irnet performs schema linking . the number of examples suffering from this problem decreases by 70 % , when using the memory augmented pointer network .",
        "generated_description": "as we can see , all the sql - based approaches can achieve better performance than the vanilla seq2seq model by a large margin ( 1 . 9 % and 4 . 1 % improvement on sql and semql , respectively ) , while the syntactic approaches achieve a much smaller gap ( 10 . 8 % on sql vs . 25 . 0 % on semql ) . the main reason is that sqlnet and syntaxsqlnet are pre - trained on sql dataset , while bert is trained on the semql dataset . as a result , bert has a better performance on sql compared with sqlnet . however , the improvements of syntactic and bert based approaches are not as large as that of bert , which may be caused by bert ’ s ability to overfit to the training set ."
    },
    {
        "table_id": "49",
        "table_info": {
            "table_caption": "Table 3: Classifiers’ accuracy on the Supports and Refutes cases from the FEVER Dev set and on the Generated pairs for the Symmetric Test Set in the setting of without (base) and with (r.w) re-weight.",
            "table_column_names": [
                "Model",
                "FEVER Dev base",
                "FEVER Dev r.w",
                "Generated base",
                "Generated r.w"
            ],
            "table_content_values": [
                [
                    "NSMN",
                    "81.8",
                    "-",
                    "58.7",
                    "-"
                ],
                [
                    "ESIM",
                    "80.8",
                    "76.0",
                    "55.9",
                    "59.3"
                ],
                [
                    "BERT",
                    "[BOLD] 86.2",
                    "84.6",
                    "58.3",
                    "[BOLD] 61.6"
                ]
            ]
        },
        "gold_description": "table 3 summarizes the performance of the three models on the supports and refutes pairs from the fever dev set and on the created symmetric test set pairs . all models perform relatively well on fever dev but achieve less than 60 % accuracy on the synthetic ones . the re - weighting method increases the accuracy of the esim and bert models by an absolute 3 . 4 % and 3 . 3 % respectively . one can notice that this improvement comes at a cost in the accuracy over the fever dev pairs . applying the regularization method , using the same training data , helps to train a more robust model that performs better on our test set , where verification in context is a key requirement .",
        "generated_description": "s4ss3sss0px2 symmetric test set . we evaluate the performance of the classifiers on the supports and refutes cases from the fever dataset and on the generated pairs for the symmetric test set in the setting without ( base ) and with ( r . w ) re - weighting . we observe that bert outperforms esim and nsmn on both fever development and the generated pairs , and that the performance on the support and refes cases is similar to that of esim ."
    },
    {
        "table_id": "50",
        "table_info": {
            "table_caption": "Table 7: Top 10 LMI-ranked bigrams in the train set of FEVER for Support.",
            "table_column_names": [
                "[BOLD] Bigram",
                "[BOLD] Train  [BOLD] LMI ⋅10−6",
                "[BOLD] Train  [ITALIC] p( [ITALIC] l| [ITALIC] w)",
                "[BOLD] Development  [BOLD] LMI ⋅10−6",
                "[BOLD] Development  [ITALIC] p( [ITALIC] l| [ITALIC] w)"
            ],
            "table_content_values": [
                [
                    "united states",
                    "271",
                    "0.64",
                    "268",
                    "0.44"
                ],
                [
                    "least one",
                    "269",
                    "0.90",
                    "267",
                    "0.77"
                ],
                [
                    "at least",
                    "256",
                    "0.72",
                    "163",
                    "0.48"
                ],
                [
                    "person who",
                    "162",
                    "0.90",
                    "135",
                    "0.61"
                ],
                [
                    "stars actor",
                    "143",
                    "0.86",
                    "111",
                    "0.71"
                ],
                [
                    "won award",
                    "133",
                    "0.80",
                    "50",
                    "0.56"
                ],
                [
                    "american actor",
                    "126",
                    "0.79",
                    "55",
                    "0.45"
                ],
                [
                    "starred movie",
                    "100",
                    "0.88",
                    "34",
                    "0.80"
                ],
                [
                    "from united",
                    "100",
                    "0.82",
                    "108",
                    "0.67"
                ],
                [
                    "from america",
                    "96",
                    "0.89",
                    "108",
                    "0.74"
                ]
            ]
        },
        "gold_description": "table 7 and table 8 summarize the top 10 bigrams for support and not enough info . the correlation between the biased phrases in the two dataset splits is not as strong as in the refute label , presented in the paper . however , one can notice that some of the biased bigrams in the training set , such as \" least one \" and \" starred movie \" , translate to cues that can help in predictions over the development set .",
        "generated_description": "we can see that the most frequent bigram in the training data is “ at least one ” , followed by “ united states ” and “ at least one of the presidents ” . the other bigrams are similar to those in the development data , with the exception of “ later ” being more frequent in the train data . for example , the development lmi for the word “ chosen ” ranges from 0 . 44 to 0 . 77 , whereas the training lmi ranges from a 0 . 48 to an ⋅ 10 − 6 . this suggests that the model is sensitive to the choice of bigram ."
    },
    {
        "table_id": "51",
        "table_info": {
            "table_caption": "Table 3: NewsQA to SQuAD. Exact match (EM) and span F1 results on SQuAD development set of a NewsQA BIDAF model baseline vs. one finetuned on SQuAD using the data generated by a 2-stage SynNet (Snet).",
            "table_column_names": [
                "System",
                "EM",
                "F1"
            ],
            "table_content_values": [
                [
                    "[ITALIC] Mnewsqa",
                    "46.3",
                    "60.8"
                ],
                [
                    "[ITALIC] Mnewsqa +  [ITALIC] Snet",
                    "47.9",
                    "61.5"
                ]
            ]
        },
        "gold_description": "report brief results on squad ( table 3 ) , we also evaluate the synnet on the newsqato - squad direction . we directly apply the best setting from the other direction and report the result in table 3 . the synnet improves over the baseline by 1 . 6 % in em and 0 . 7 % in f1 . limited by space , we leave out ablation studies in this direction .",
        "generated_description": "we compare the performance of a newsqa bidaf model baseline vs . one finetuned on squad using the data generated by a 2 - stage synnet ( snet ) model . we find that the snet model improves over the baseline by 1 . 4 % in terms of exact match ( em ) and 0 . 8 % in span f1 . we also observe that the addition of syntactic data from snet further improves the performance by 0 . 7 % in em and 1 . 2 % in f1 , which shows that syntactic information generated by snet can be used to further improve the model ’ s performance ."
    },
    {
        "table_id": "52",
        "table_info": {
            "table_caption": "Table 3: Performance on two datasets against the user simulator and human.",
            "table_column_names": [
                "Model",
                "Dataset 1  [ITALIC] vs. Simulator",
                "Dataset 1  [ITALIC] vs. Simulator",
                "Dataset 1  [ITALIC] vs. Human",
                "Dataset 1  [ITALIC] vs. Human",
                "Dataset 2  [ITALIC] vs. Simulator",
                "Dataset 2  [ITALIC] vs. Simulator",
                "Dataset 2  [ITALIC] vs. Human",
                "Dataset 2  [ITALIC] vs. Human"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "% Achieved",
                    "# Turns",
                    "% Achieved",
                    "# Turns",
                    "% Achieved",
                    "# Turns",
                    "% Achieved",
                    "# Turns"
                ],
                [
                    "Seq2Seq(goal)",
                    "76.00",
                    "4.74",
                    "67.74",
                    "7.87",
                    "67.10",
                    "7.38",
                    "54.1",
                    "7.56"
                ],
                [
                    "Seq2Seq(goal+state)",
                    "79.41",
                    "4.74",
                    "70.97",
                    "6.35",
                    "67.37",
                    "7.42",
                    "58.1",
                    "8.04"
                ],
                [
                    "Seq2Seq(goal+look)",
                    "80.64",
                    "6.54",
                    "74.19",
                    "5.41",
                    "83.54",
                    "[BOLD] 5.82",
                    "60.3",
                    "[BOLD] 6.94"
                ],
                [
                    "Seq2Seq(goal+look+state)",
                    "[BOLD] 85.07",
                    "[BOLD] 4.10",
                    "[BOLD] 77.42",
                    "[BOLD] 5.02",
                    "[BOLD] 83.58",
                    "6.36",
                    "[BOLD] 61.2",
                    "7.30"
                ]
            ]
        },
        "gold_description": "table 3 shows the performance of baselines against user simulator and human on the two datasets . equation ( 11 ) ) is also proven effective in deliver ing more achievement , which can be seen from the second and last rows of table 3 . the results are consistent with those in table 3 .",
        "generated_description": "in this section , we compare the performance of our model with the baseline seq2seq model on both datasets . for each dataset , we report the percentage of goals achieved by the model and the number of turns for which the model was able to complete the task within the allowed number of allowed turns . we can see that our model outperforms the baseline model in all the cases , which indicates that our goal encoder is able to guide the model to achieve the goal more precisely . moreover , we can also see that the difference between the goal - only and goal + state - only models is larger than that between the model with access to the state and the goal , which implies that the state information is more important than the state - only information for the task ."
    },
    {
        "table_id": "53",
        "table_info": {
            "table_caption": "Table 2: Correlation between Attribution word importance with POS tags, Fertility, and Syntactic Depth. Fertility can be categorized into 4 types: one-to-many (“≥2”), one-to-one (“1”), many-to-one (“(0,1)”), and null-aligned (“0”). Syntactic depth shows the depth of a word in the dependency tree. A lower tree depth indicates closer to the root node in the dependency tree, which might indicate a more important word.",
            "table_column_names": [
                "[BOLD] Type  [BOLD] POS Tags",
                "[BOLD] Type Noun",
                "[BOLD] Zh⇒En  [BOLD] 21.0%",
                "[BOLD] En⇒Fr 1.9%",
                "[BOLD] En⇒Ja 0.7%"
            ],
            "table_content_values": [
                [
                    "[BOLD] POS Tags",
                    "Verb",
                    "0.3%",
                    "[BOLD] 25.0%",
                    "0.3%"
                ],
                [
                    "[BOLD] POS Tags",
                    "Adj.",
                    "0.4%",
                    "9.3%",
                    "0.7%"
                ],
                [
                    "[BOLD] POS Tags",
                    "Prep.",
                    "1.3%",
                    "4.5%",
                    "[BOLD] 26.7%"
                ],
                [
                    "[BOLD] POS Tags",
                    "Dete.",
                    "3.0%",
                    "5.7%",
                    "2.1%"
                ],
                [
                    "[BOLD] POS Tags",
                    "Punc.",
                    "3.5%",
                    "[BOLD] 18.3%",
                    "[BOLD] 30.5%"
                ],
                [
                    "[BOLD] POS Tags",
                    "Others",
                    "0.5%",
                    "1.2%",
                    "4.7%"
                ],
                [
                    "[BOLD] Fertility",
                    "≥2",
                    "[BOLD] 50.2%",
                    "[BOLD] 21.4%",
                    "[BOLD] 21.7%"
                ],
                [
                    "[BOLD] Fertility",
                    "1",
                    "[BOLD] 15.4%",
                    "7.0%",
                    "3.1%"
                ],
                [
                    "[BOLD] Fertility",
                    "(0,1)",
                    "2.5%",
                    "0.4%",
                    "3.0%"
                ],
                [
                    "[BOLD] Fertility",
                    "0",
                    "0.0%",
                    "1.9%",
                    "3.8%"
                ],
                [
                    "[BOLD] Syntactic",
                    "Low",
                    "1.6%",
                    "2.5%",
                    "1.2%"
                ],
                [
                    "[BOLD] Syntactic",
                    "Middle",
                    "0.3%",
                    "0.8%",
                    "1.4%"
                ],
                [
                    "[BOLD] Syntactic",
                    "High",
                    "0.0%",
                    "0.1%",
                    "0.1%"
                ]
            ]
        },
        "gold_description": "table 2 : correlation between attribution word importance with pos tags , fertility , and syntactic depth . fertility can be categorized into 4 types : one - to - many ( \" ≥ 2 \" ) , one - to - one ( \" 1 \" ) , many - to - one ( \" ( 0 , 1 ) \" ) , and null - aligned ( \" 0 \" ) . syntactic depth shows the depth of a word in the dependency tree . a lower tree depth indicates closer to the root node in the dependency tree , which might indicate a more important word .",
        "generated_description": "the pos tags include nouns , verbs , adjectives , adverbs , prepositional phrases , determiners , pronouns , and contingencies . for each language pair , we also report the percentage of pos tags that possess a specific morphology ( e . g . , noun , verb , adjective , subject , gerund ) . in both languages , the most frequent pos tags are nouns ( 25 % in zh ⇒ en and 1 . 9 % in en ⇇ � fr ) , followed by verbs ( 0 . 3 % in both languages ) , determiners ( 3 . 0 % and 5 . 7 % , respectively ) and punctuations ( 2 . 1 % and 2 . 7 % ) . the least frequent tags are adjectives ( 1 . 3 % , 4 . 5 % , and 3 . 5 % in the two languages ) , punctuation ( 1 % , 2 . 1 % , and 4 . 7 % ) , and verbs ( 2 % , 3 . 0 % , and 6 . 5 % ) . the most frequent tag type in the english - to - chinese translation task is procurbing ( i . e . , gerund ) , which accounts for a significant portion of the cross - lingual pos tags ( 18 . 3 % ) . in the case of the japanese - english translation task , this pos tag type accounts for more than a third of all the pos tags , while in the chinese - english task , it accounts for less than one fourth ."
    },
    {
        "table_id": "54",
        "table_info": {
            "table_caption": "Table 1: Average accuracies and Macro-F1 scores over five runs with random initialization along with their standard deviations. Bold: best results or within std of them. ∗ indicates that the method’s result is significantly better than all baseline methods, † indicates that the method’s result is significantly better than all baselines methods that use the aspect-based data only, with p<0.05 according to a one-tailed unpaired t-test. The data annotations S, N and A indicate training with Sentence-level, Noisy sentence-level and Aspect-level data respectively. Numbers for TDLSTM+Att,ATAE-LSTM,MM,RAM and LSTM+SynATT+TarRep are from He et al. (2018a). Numbers for Semisupervised are from He et al. (2018b).",
            "table_column_names": [
                "Data",
                "Method",
                "SemEval-15 Acc.",
                "SemEval-15 Macro-F1",
                "SemEval-16 Acc.",
                "SemEval-16 Macro-F1"
            ],
            "table_content_values": [
                [
                    "A",
                    "TDLSTM+ATT Tang et al. ( 2016a )",
                    "77.10",
                    "59.46",
                    "83.11",
                    "57.53"
                ],
                [
                    "A",
                    "ATAE-LSTM Wang et al. ( 2016 )",
                    "78.48",
                    "62.84",
                    "83.77",
                    "61.71"
                ],
                [
                    "A",
                    "MM Tang et al. ( 2016b )",
                    "77.89",
                    "59.52",
                    "83.04",
                    "57.91"
                ],
                [
                    "A",
                    "RAM Chen et al. ( 2017 )",
                    "79.98",
                    "60.57",
                    "83.88",
                    "62.14"
                ],
                [
                    "A",
                    "LSTM+SynATT+TarRep He et al. ( 2018a )",
                    "81.67",
                    "66.05",
                    "84.61",
                    "67.45"
                ],
                [
                    "S+A",
                    "Semisupervised He et al. ( 2018b )",
                    "81.30",
                    "[BOLD] 68.74",
                    "85.58",
                    "69.76"
                ],
                [
                    "S",
                    "BiLSTM-104 Sentence Training",
                    "80.24 ± 1.64",
                    "61.89 ± 0.94",
                    "80.89 ± 2.79",
                    "61.40 ± 2.49"
                ],
                [
                    "S+A",
                    "BiLSTM-104 Sentence Training →Aspect Based Finetuning",
                    "77.75 ± 2.09",
                    "60.83 ± 4.53",
                    "84.87± 0.31",
                    "61.87 ± 5.44"
                ],
                [
                    "N",
                    "BiLSTM-XR-Dev Estimation",
                    "[BOLD] 83.31∗± 0.62",
                    "62.24 ± 0.66",
                    "[BOLD] 87.68∗± 0.47",
                    "63.23 ± 1.81"
                ],
                [
                    "N",
                    "BiLSTM-XR",
                    "[BOLD] 83.31∗± 0.77",
                    "64.42 ± 2.78",
                    "[BOLD] 88.12∗± 0.24",
                    "68.60 ± 1.79"
                ],
                [
                    "N+A",
                    "BiLSTM-XR →Aspect Based Finetuning",
                    "[BOLD] 83.44∗± 0.74",
                    "[BOLD] 67.23 ± 1.42",
                    "[BOLD] 87.66∗± 0.28",
                    "[BOLD] 71.19†± 1.40"
                ]
            ]
        },
        "gold_description": "table 1 : average accuracies and macro - f1 scores over five runs with random initialization along with their standard deviations . bold : best results or within std of them . ∗ indicates that the method ' s result is significantly better than all baseline methods , † indicates that the method ' s result is significantly better than all baselines methods that use the aspect - based data only , with p < 0 . 05 according to a one - tailed unpaired t - test . the data annotations s , and a indicate training with sentence - level , noisy sentence - level and aspect - level data respectively . numbers for tdlstm + att , atae - lstm , mm , ram and lstm + synatt + tarrep are from ( he et al . , 2018a ) . numbers for semisupervised are from ( he et al . , 2018b ) .",
        "generated_description": "on the semeval - 15 dataset , our model with bilstm - 104 sentence training outperforms the previous state - of - the - art method by 1 . 24 % in accuracy and 1 . 64 % in macro - f1 score on the development set . our model also achieves the best performance when the training set is the same as the test set , i . e . , it outperforms previous sentence - level and paragraph - level sentence embedding methods by 0 . 52 % and 0 . 61 % in terms of accuracy and macro - f1 respectively . the results show that our model can also be applied to other nlp tasks , e . g . , sentiment analysis ."
    },
    {
        "table_id": "55",
        "table_info": {
            "table_caption": "Table 4: Ablation Studies. Exact match (EM) and span F1 results on NewsQA test set of a BIDAF model finetuned with a 2-stage SynNet. In study A, we vary k, the number of mini-batches from SQuAD for every batch in NewsQA. In study B, we set k=0, and vary the answer type and how much of the paragraph we use for question synthesis. 2−sent refers to using two sentences before answer span, while all refers to using the entire paragraph. Aner refers to using an NER system and Aor refers to using the human-annotated answers to generate questions.",
            "table_column_names": [
                "[BOLD] A)",
                "EM",
                "F1",
                "[BOLD] B)",
                "EM",
                "F1"
            ],
            "table_content_values": [
                [
                    "k=0",
                    "27.2",
                    "40.5",
                    "2s +  [ITALIC] Aner",
                    "22.8",
                    "36.1"
                ],
                [
                    "k=2",
                    "29.8",
                    "43.9",
                    "all +  [ITALIC] Aner",
                    "27.2",
                    "40.5"
                ],
                [
                    "k=4",
                    "30.4",
                    "44.3",
                    "2s +  [ITALIC] Aoracle",
                    "31.3",
                    "45.2"
                ],
                [
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "all +  [ITALIC] Aoracle",
                    "32.5",
                    "46.8"
                ]
            ]
        },
        "gold_description": "conduct ablation studies ( table 4 ) , to better understand how various components in our training procedure and model impact overall performance we conduct several ablation studies , as summarized in table 4 . results in table 4 ( a ) show that using human - annotated answers to generate questions leads to a significant performance boost over using answers from an answer generation module . this supports the hypothesis that the answers humans choose to generate questions for provide important linguistic cues for finetuning the machine comprehension model . to see how copying impacts performance , we explore using the entire paragraph to generate the question vs . only the two sentences before and one sentence after the answer span and report results in table 4 ( b ) .",
        "generated_description": "ablation studies . we perform ablation studies to study the effect of different components of our model . we vary k , the number of mini - batches used for question synthesis in squad , and vary the answer type and how much of the paragraph we use to question synthesis . the span f1 and em scores are measured on the test set of a bidaf model finetuned with a 2 - stage synnet . we find that using an ner system or the human - annotated answers to generate questions is better than using the entire paragraph . we also find that including the span of the first two sentences in the paragraph is the most effective way to generate question synthesis , while the third and fourth sentences provide the most significant boost ."
    },
    {
        "table_id": "56",
        "table_info": {
            "table_caption": "Table 2: Validation BLEU for English-Spanish models with transfer learning. We use the final three models in our submission.",
            "table_column_names": [
                "[BOLD] Transfer learning schedule",
                "[BOLD] es2en  [BOLD] Khresmoi",
                "[BOLD] es2en  [BOLD] Health",
                "[BOLD] es2en  [BOLD] Bio",
                "[BOLD] en2es  [BOLD] Khresmoi",
                "[BOLD] en2es  [BOLD] Health",
                "[BOLD] en2es  [BOLD] Bio"
            ],
            "table_content_values": [
                [
                    "Health",
                    "45.1",
                    "35.7",
                    "34.0",
                    "41.2",
                    "34.7",
                    "36.1"
                ],
                [
                    "All-biomed",
                    "49.8",
                    "35.4",
                    "35.7",
                    "43.4",
                    "33.9",
                    "37.5"
                ],
                [
                    "All-biomed → Health",
                    "48.9",
                    "36.4",
                    "35.9",
                    "43.0",
                    "35.2",
                    "38.0"
                ],
                [
                    "All-biomed → Bio",
                    "48.0",
                    "34.6",
                    "37.2",
                    "43.2",
                    "34.1",
                    "40.5"
                ],
                [
                    "Health → All-biomed",
                    "[BOLD] 52.1",
                    "36.7",
                    "37.0",
                    "44.2",
                    "35.0",
                    "39.0"
                ],
                [
                    "Health → All-biomed → Health",
                    "51.1",
                    "[BOLD] 37.0",
                    "37.2",
                    "44.0",
                    "[BOLD] 36.3",
                    "39.5"
                ],
                [
                    "Health → All-biomed → Bio",
                    "50.6",
                    "36.0",
                    "[BOLD] 38.0",
                    "[BOLD] 45.2",
                    "35.3",
                    "[BOLD] 41.3"
                ]
            ]
        },
        "gold_description": "table 2 gives single model validation scores for es2en and en2es models with standard and iterative transfer learning . we find that the all - biomed domain gains 1 - 2 bleu points from transfer learning .",
        "generated_description": "the health → all - biomed schedule improves over the health schedule for es2en and en2es , but not for en2en bio . we hypothesize that this is due to the fact that the bio domain is more similar to the health domain than the other two domains , and thus the health curriculum is less useful for the bio dataset ."
    },
    {
        "table_id": "57",
        "table_info": {
            "table_caption": "Table 3: Validation and test BLEU for models used in English-Spanish language pair submissions.",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] es2en  [BOLD] Khresmoi",
                "[BOLD] es2en  [BOLD] Health",
                "[BOLD] es2en  [BOLD] Bio",
                "[BOLD] es2en  [BOLD] Test",
                "[BOLD] en2es  [BOLD] Khresmoi",
                "[BOLD] en2es  [BOLD] Health",
                "[BOLD] en2es  [BOLD] Bio",
                "[BOLD] en2es  [BOLD] Test"
            ],
            "table_content_values": [
                [
                    "Health → All-biomed",
                    "52.1",
                    "36.7",
                    "37.0",
                    "42.4",
                    "44.2",
                    "35.0",
                    "39.0",
                    "44.9"
                ],
                [
                    "Health → All-biomed → Health",
                    "51.1",
                    "37.0",
                    "37.2",
                    "-",
                    "44.0",
                    "36.3",
                    "39.5",
                    "-"
                ],
                [
                    "Health → All-biomed → Bio",
                    "50.6",
                    "36.0",
                    "38.0",
                    "-",
                    "45.2",
                    "35.3",
                    "41.3",
                    "-"
                ],
                [
                    "Uniform ensemble",
                    "[BOLD] 52.2",
                    "36.9",
                    "37.9",
                    "[BOLD] 43.0",
                    "[BOLD] 45.1",
                    "35.6",
                    "40.2",
                    "45.4"
                ],
                [
                    "BI ensemble ( [ITALIC] α=0.5)",
                    "52.1",
                    "[BOLD] 37.0",
                    "[BOLD] 38.1",
                    "42.9",
                    "44.5",
                    "[BOLD] 35.7",
                    "[BOLD] 41.2",
                    "[BOLD] 45.6"
                ]
            ]
        },
        "gold_description": "for de2en and es2en , uniform ensembling performs similarly to the oracles , and performs similarly to bi . we submitted three runs to the wmt19 biomedical task for each language pair : the best single all - biomed model , a uniform ensemble of models on two en - de and three es - en domains , and an ensemble with bayesian interpolation . tables 3 and 4 give validation and test scores . that a uniform multi - domain ensemble performs well , giving 0 . 5 - 1 . 2 bleu improvement on the test set over strong single models . we see small gains from using bi with ensembles on most validation sets , but only on en2es test . we noted that , in general , we could predict bi ( α = 0 . 5 ) performance by comparing the uniform ensemble with the oracle model performing best on each validation domain . for en2es uniform ensembling underperforms the health and bio oracle models on their validation sets , and the uniform ensemble slightly underperforms bi on the test data .",
        "generated_description": "for es2en , the health → all - biomed model outperforms the health baseline by 2 . 8 bleu points in the health domain and 1 . 7 in the bio domain . for en2es , the all - bio model performs slightly better than the uniform ensemble model , but still lags behind the health model by 1 . 2 bleus ."
    },
    {
        "table_id": "58",
        "table_info": {
            "table_caption": "Table 4: Validation and test BLEU for models used in English-German language pair submissions.",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] de2en  [BOLD] Khresmoi",
                "[BOLD] de2en  [BOLD] Cochrane",
                "[BOLD] de2en  [BOLD] Test",
                "[BOLD] en2de  [BOLD] Khresmoi",
                "[BOLD] en2de  [BOLD] Cochrane",
                "[BOLD] en2de  [BOLD] Test"
            ],
            "table_content_values": [
                [
                    "News",
                    "43.8",
                    "46.8",
                    "-",
                    "30.4",
                    "40.7",
                    "-"
                ],
                [
                    "News → All-biomed",
                    "44.5",
                    "47.6",
                    "27.4",
                    "31.1",
                    "39.5",
                    "26.5"
                ],
                [
                    "Uniform ensemble",
                    "45.3",
                    "48.4",
                    "[BOLD] 28.6",
                    "[BOLD] 32.6",
                    "42.9",
                    "[BOLD] 27.2"
                ],
                [
                    "BI ensemble ( [ITALIC] α=0.5)",
                    "[BOLD] 45.4",
                    "[BOLD] 48.8",
                    "28.5",
                    "32.4",
                    "[BOLD] 43.1",
                    "26.4"
                ]
            ]
        },
        "gold_description": "we see small gains from using bi with ensembles on most validation sets , but only on en2es test . for en2de , by contrast , uniform ensembling is consistently better than oracles on the dev sets , and outperforms bi on the test data .",
        "generated_description": "for de2en , the uniform ensemble model outperforms the news → all - biomed submission by a substantial margin of 1 . 8 bleu on the khresmoi test set and 1 . 7 bleus on the en2de test set . the bi ensemble model performs slightly worse than the uniform model , but still outperforms all submissions by a significant margin of 2 . 0 and 2 . 3 bleu on the de2ens and en2degrees respectively ."
    },
    {
        "table_id": "59",
        "table_info": {
            "table_caption": "Table 5: Comparing uniform ensembles and BI with varying smoothing factor on the WMT19 test data. Small deviations from official test scores on submitted runs are due to tokenization differences. α=0.5 was chosen for submission based on results on available development data.",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] es2en",
                "[BOLD] en2es",
                "[BOLD] de2en",
                "[BOLD] en2de"
            ],
            "table_content_values": [
                [
                    "Uniform",
                    "[BOLD] 43.2",
                    "45.3",
                    "28.3",
                    "25.9"
                ],
                [
                    "BI ( [ITALIC] α=0.5)",
                    "43.0",
                    "[BOLD] 45.5",
                    "28.2",
                    "25.2"
                ],
                [
                    "BI ( [ITALIC] α=0.1)",
                    "[BOLD] 43.2",
                    "[BOLD] 45.5",
                    "[BOLD] 28.5",
                    "[BOLD] 26.0"
                ]
            ]
        },
        "gold_description": "consequently in table 5 we experiment with bi ( α = 0 . 1 ) . in this case bi matches or out - performs the uniform ensemble . notably , for en2es , where bi ( α = 0 . 5 ) performed well , taking α = 0 . 1 does not harm performance .",
        "generated_description": "we observe that bi with a smoothing factor of α = 0 . 1 outperforms uniform ensembles for es2en , en2es , de2en and en2de , but not for en2en . small deviations from the official test scores on submitted runs are due to differences in tokenization differences ."
    },
    {
        "table_id": "60",
        "table_info": {
            "table_caption": "Table 1: BLEU Scores of Data Sets",
            "table_column_names": [
                "dev",
                "train",
                "eScape"
            ],
            "table_content_values": [
                [
                    "77.15",
                    "77.42",
                    "37.68"
                ]
            ]
        },
        "gold_description": "we then tested the bleu scores between machine translation results and corresponding gold standard post - editing results on the original development set , the training set and the synthetic data as shown in table 1 . table 1 shows that there is a significant gap between the synthetic escape data set ( negri et al . , 2018 ) and the real - life data sets ( the development set and the original training set from posteditors ) ,",
        "generated_description": "in this section , we compare the bleu scores of our proposed method with the state - of - the - art methods on two image captioning datasets . the first one is named escape , which is extracted from flickr30k images . the second one is imagenet v1 . 1 , which was extracted from ms - coco . we randomly select 10 , 000 images from the imagenet validation set for training and the rest for testing . the results show that our method outperforms the existing methods by a large margin ."
    },
    {
        "table_id": "61",
        "table_info": {
            "table_caption": "Table 3: Results on the Test Set",
            "table_column_names": [
                "Models",
                "TER",
                "BLEU"
            ],
            "table_content_values": [
                [
                    "MT as PE",
                    "16.84",
                    "74.73"
                ],
                [
                    "Gaussian",
                    "16.79",
                    "75.03"
                ],
                [
                    "Uniform",
                    "16.80",
                    "75.03"
                ],
                [
                    "Ensemble x5",
                    "16.77",
                    "75.03"
                ]
            ]
        },
        "gold_description": "even the ensemble of 5 models did not result in significant differences especially in bleu scores .",
        "generated_description": "we can see that the gaussian and uniform models perform slightly better than the mt as pe model . the ensemble model performs slightly worse than the uniform model , but is still competitive compared to the other models ."
    },
    {
        "table_id": "62",
        "table_info": {
            "table_caption": "Table 2: BLEU Scores on the Development Set",
            "table_column_names": [
                "Models",
                "BLEU"
            ],
            "table_content_values": [
                [
                    "MT as PE",
                    "76.76"
                ],
                [
                    "Processed MT",
                    "76.61"
                ],
                [
                    "Base",
                    "76.91 ∼ 77.13"
                ],
                [
                    "Gaussian",
                    "76.94 ∼ 77.08"
                ],
                [
                    "Uniform",
                    "77.01 ∼ 77.10"
                ],
                [
                    "Ensemble x5",
                    "[BOLD] 77.22"
                ]
            ]
        },
        "gold_description": "table 2 shows that the performance got slightly hurt ( comparing \" processed mt \" with \" mt as pe \" ) with pre - processing and post - processing procedures which are normally applied in training seq2seq models for reducing vocabulary size . the multi - source transformer ( base ) model achieved the highest single model bleu score without joint training with the de - noising encoder task . even with the ensembled model , our ape approach does not significantly improve machine translation outputs measured in bleu ( + 0 . 46 ) .",
        "generated_description": "we can see that the processed mt baseline achieves 76 . 61 bleu score , which is lower than the base and gaussian baselines . the gaussian baseline performs slightly better than the mt as pe baseline , but not as good as the processed mt baseline . the uniform baseline achieves 77 . 01 ∼ 77 . 10 . the ensemble of five gaussian and uniform models achieves the best result , 77 . 22 , which outperforms the base model and the gaussian model by 0 . 01 and 0 . 05 bleus , respectively ."
    },
    {
        "table_id": "63",
        "table_info": {
            "table_caption": "Table 1: Variation across conditions for a range of metrics (defined in § 3.4). Bold indicates a statistically significant difference compared to the baseline at the 0.05 level, and a † indicates significance at the 0.01 level, both after applying the Holm–-Bonferroni method across each row Holm (1979).",
            "table_column_names": [
                "Condition",
                "Accuracy (%) Corr",
                "Accuracy (%) Gram",
                "Time (s)",
                "Diversity Distinct",
                "Diversity PINC"
            ],
            "table_content_values": [
                [
                    "Baseline",
                    "74",
                    "97",
                    "36",
                    "99",
                    "68"
                ],
                [
                    "Lexical Examples",
                    "[BOLD] 90†",
                    "98",
                    "[BOLD] 27",
                    "[BOLD] 93",
                    "[BOLD] 55†"
                ],
                [
                    "Mixed Examples",
                    "[BOLD] 89†",
                    "96",
                    "36",
                    "[BOLD] 87†",
                    "[BOLD] 58†"
                ],
                [
                    "No Examples",
                    "84",
                    "96",
                    "30",
                    "95",
                    "63"
                ],
                [
                    "Novelty Bonus",
                    "72",
                    "96",
                    "30",
                    "99",
                    "69"
                ],
                [
                    "No Bonus",
                    "78",
                    "94",
                    "28",
                    "99",
                    "66"
                ],
                [
                    "One Paraphrase",
                    "82",
                    "[BOLD] 89",
                    "38",
                    "96",
                    "65"
                ],
                [
                    "Chain",
                    "68",
                    "94",
                    "[BOLD] 25",
                    "98",
                    "[BOLD] 74"
                ],
                [
                    "Answers",
                    "80",
                    "94",
                    "[BOLD] 29",
                    "96",
                    "65"
                ],
                [
                    "advising",
                    "78",
                    "94",
                    "31",
                    "97",
                    "70"
                ],
                [
                    "geoquery",
                    "77",
                    "[BOLD] 85†",
                    "[BOLD] 25†",
                    "[BOLD] 94",
                    "[BOLD] 63"
                ],
                [
                    "wsj",
                    "68",
                    "[BOLD] 90",
                    "[BOLD] 61†",
                    "[BOLD] 94†",
                    "[BOLD] 38†"
                ],
                [
                    "ubuntu",
                    "[BOLD] 56†",
                    "92",
                    "44",
                    "97",
                    "67"
                ]
            ]
        },
        "gold_description": "we consider variations in instructions , incentives , data domains , and workflows . we manually analyzed paraphrases for correctness , grammaticality , and linguistic diversity . our observations provide new insight into the trade - offs between accuracy and diversity in crowd responses that arise as a result of task design , our analysis shows that the most important factor is how workers are primed for a task , with the choice of examples and the prompt sentence affecting diversity and correctness significantly . there was relatively little variation in grammaticality or time across the conditions . priming had a major impact , with the shift to lexical examples leading to a significant improvement in correctness , but much lower diversity . the surprising increase in correctness when providing no examples changing the incentives by providing either a bonus for novelty , or no bonus at all , did not substantially impact any of the metrics . changing the number of paraphrases written by each worker did not significantly impact diversity ( we worried that collecting more than one may lead to a decrease ) . the one paraphrase condition did have lower grammaticality , changing the source of the prompt sentence to create a chain of paraphrases led to a significant increase in diversity . showing the answer to the question being para phrased did not significantly affect correctness or diversity ,",
        "generated_description": "the values in bold represent the best result for each condition in terms of accuracy , grammaticality ( corr ) , grammar ( gram ) , and time ( s ) . we also report the values for diversity ( distinct ) and pinc ( pinc ) . we find that the best results are achieved with the lexical examples condition , which is the only condition in which there is a significant difference in accuracy between the baseline and the proposed method . the second best condition is the chain condition , in which the accuracy is slightly lower than the baseline , but the grammar is significantly better , and the diversity is significantly higher than the other conditions . we also find that there is an improvement in the gram accuracy when using the hybrid method , but it is not significant ."
    },
    {
        "table_id": "64",
        "table_info": {
            "table_caption": "Table 3: Frame evaluation results on the triples from the FrameNet 1.7 corpus Baker et al. (1998). The results are sorted by the descending order of the Frame F1-score. Best results are boldfaced.",
            "table_column_names": [
                "[BOLD] Method",
                "[BOLD] Verb  [BOLD] nmPU",
                "[BOLD] Verb  [BOLD] niPU",
                "[BOLD] Verb  [BOLD] F1",
                "[BOLD] Subject  [BOLD] nmPU",
                "[BOLD] Subject  [BOLD] niPU",
                "[BOLD] Subject  [BOLD] F1",
                "[BOLD] Object  [BOLD] nmPU",
                "[BOLD] Object  [BOLD] niPU",
                "[BOLD] Object  [BOLD] F1",
                "[BOLD] Frame  [BOLD] nmPU",
                "[BOLD] Frame  [BOLD] niPU",
                "[BOLD] Frame  [BOLD] F1"
            ],
            "table_content_values": [
                [
                    "Triframes Watset",
                    "42.84",
                    "88.35",
                    "[BOLD] 57.70",
                    "54.22",
                    "81.40",
                    "65.09",
                    "53.04",
                    "83.25",
                    "64.80",
                    "55.19",
                    "60.81",
                    "[BOLD] 57.87"
                ],
                [
                    "HOSG Cotterell et al. ( 2017 )",
                    "44.41",
                    "68.43",
                    "53.86",
                    "52.84",
                    "74.53",
                    "61.83",
                    "54.73",
                    "74.05",
                    "62.94",
                    "55.74",
                    "50.45",
                    "52.96"
                ],
                [
                    "NOAC Egurnov et al. ( 2017 )",
                    "20.73",
                    "88.38",
                    "33.58",
                    "57.00",
                    "80.11",
                    "[BOLD] 66.61",
                    "57.32",
                    "81.13",
                    "[BOLD] 67.18",
                    "44.01",
                    "63.21",
                    "51.89"
                ],
                [
                    "Triadic Spectral",
                    "49.62",
                    "24.90",
                    "33.15",
                    "50.07",
                    "41.07",
                    "45.13",
                    "50.50",
                    "41.82",
                    "45.75",
                    "52.05",
                    "28.60",
                    "36.91"
                ],
                [
                    "Triadic  [ITALIC] k-Means",
                    "[BOLD] 63.87",
                    "23.16",
                    "33.99",
                    "[BOLD] 63.15",
                    "38.20",
                    "47.60",
                    "[BOLD] 63.98",
                    "37.43",
                    "47.23",
                    "[BOLD] 63.64",
                    "24.11",
                    "34.97"
                ],
                [
                    "LDA-Frames Materna ( 2013 )",
                    "26.11",
                    "66.92",
                    "37.56",
                    "17.28",
                    "83.26",
                    "28.62",
                    "20.80",
                    "90.33",
                    "33.81",
                    "18.80",
                    "71.17",
                    "29.75"
                ],
                [
                    "Triframes CW",
                    "7.75",
                    "6.48",
                    "7.06",
                    "3.70",
                    "14.07",
                    "5.86",
                    "51.91",
                    "76.92",
                    "61.99",
                    "21.67",
                    "26.50",
                    "23.84"
                ],
                [
                    "Singletons",
                    "0.00",
                    "25.23",
                    "0.00",
                    "0.00",
                    "25.68",
                    "0.00",
                    "0.00",
                    "20.80",
                    "0.00",
                    "32.34",
                    "22.15",
                    "26.29"
                ],
                [
                    "Whole",
                    "3.62",
                    "[BOLD] 100.0",
                    "6.98",
                    "2.41",
                    "[BOLD] 98.41",
                    "4.70",
                    "2.38",
                    "[BOLD] 100.0",
                    "4.64",
                    "2.63",
                    "[BOLD] 99.55",
                    "5.12"
                ]
            ]
        },
        "gold_description": "in table 3 and figure 1 , the results of the experiment are presented . triframes based on watset clustering outperformed the other methods on both verb f1 and overall frame f1 . the use of the watset fuzzy clustering algorithm that splits the hubs by disambiguating them leads to the best results ( see table 3 ) .",
        "generated_description": "we can see that our method outperforms all the baselines in all the three categories . for the verb and frame categories , our method achieves the best results for both the nmpu and f1 - score . our method improves over the triframes watset and hosg baselines by a large margin . the improvement for the frame category is relatively small . this may be due to the fact that there are only two types of relations in this dataset : subject and frame . therefore , it is hard to find a strong baseline which can deal with both these types of relationships . on the other hand , for the verb category , our model performs better than all the baseline methods ."
    },
    {
        "table_id": "65",
        "table_info": {
            "table_caption": "Table 4: Evaluation results on the dataset of polysemous verb classes by Korhonen et al. (2003).",
            "table_column_names": [
                "[BOLD] Method",
                "[BOLD] nmPU",
                "[BOLD] niPU",
                "[BOLD] F1"
            ],
            "table_content_values": [
                [
                    "LDA-Frames",
                    "[BOLD] 52.60",
                    "45.84",
                    "[BOLD] 48.98"
                ],
                [
                    "Triframes Watset",
                    "40.05",
                    "62.09",
                    "48.69"
                ],
                [
                    "NOAC",
                    "37.19",
                    "64.09",
                    "47.07"
                ],
                [
                    "HOSG",
                    "38.22",
                    "43.76",
                    "40.80"
                ],
                [
                    "Triadic Spectral",
                    "35.76",
                    "38.96",
                    "36.86"
                ],
                [
                    "Triadic  [ITALIC] k-Means",
                    "52.22",
                    "27.43",
                    "35.96"
                ],
                [
                    "Triframes CW",
                    "18.05",
                    "12.72",
                    "14.92"
                ],
                [
                    "Whole",
                    "24.14",
                    "[BOLD] 79.09",
                    "36.99"
                ],
                [
                    "Singletons",
                    "0.00",
                    "27.21",
                    "0.00"
                ]
            ]
        },
        "gold_description": "table 4 presents results on the second dataset for the best models identified on the first dataset . the lda - frames yielded the best results with our approach performing comparably in terms of the f1 - score .",
        "generated_description": "the lda - frames method achieves the best results on the dataset of polysemous verb classes by korhonen et al . the triframes - based methods and the hosg method perform well on this dataset , but their performance is not as good as on the other datasets . the noac method performs better than all the other methods on the nipu metric , but its performance on the nmpu metric is much lower than that of the lda methods ."
    },
    {
        "table_id": "66",
        "table_info": {
            "table_caption": "Table 1: French-English Performance. Baseline indicates current state of the art performance.",
            "table_column_names": [
                "Method",
                "Max F1",
                "11-point IAP"
            ],
            "table_content_values": [
                [
                    "Baseline",
                    "54.92",
                    "50.99"
                ],
                [
                    "RR",
                    "62.94",
                    "59.62"
                ],
                [
                    "RR_FR_1step",
                    "68.35",
                    "64.42"
                ],
                [
                    "RR_FR_2step",
                    "69.72",
                    "67.29"
                ]
            ]
        },
        "gold_description": "table 1 shows these performance measures for french - english , using global structure greatly improves upon the state of the art baseline performance .",
        "generated_description": "we can see that both rr and rr_fr_1step outperform the baseline by a large margin , with the 1 - step rr being slightly better than the 2 - step version . moreover , the 2 step version of rr achieves the current state of the art performance in french - english ."
    },
    {
        "table_id": "67",
        "table_info": {
            "table_caption": "Table 4: French-English Performance (large data). Baseline indicates state of the art performance.",
            "table_column_names": [
                "Method",
                "Max F1",
                "11-point IAP"
            ],
            "table_content_values": [
                [
                    "Baseline",
                    "55.08",
                    "51.35"
                ],
                [
                    "RR",
                    "60.88",
                    "58.79"
                ],
                [
                    "RR_FR_1step",
                    "65.87",
                    "63.55"
                ],
                [
                    "RR_FR_2step",
                    "65.76",
                    "65.26"
                ]
            ]
        },
        "gold_description": "tables 4 through 6 show the summary metrics for the three language pairs for the large data experiments . we can see that the reverse rank and forward rank methods of taking into account the global structure of interactions among predictions is still helpful , providing large improvements in performance even in this challenging large data condition over strong state of the art baselines",
        "generated_description": "we can see that the proposed rr method improves the state - of - the - art performance by a large margin over the baseline . the best performance is achieved by the rr_fr_1step method with 1 - step and 2 - step repeats ."
    },
    {
        "table_id": "68",
        "table_info": {
            "table_caption": "Table 2: List of the target NER data sets and their specifications. Size is shown in number of tokens.",
            "table_column_names": [
                "[BOLD] Data set",
                "[BOLD] Size",
                "[BOLD] Entity Types",
                "[BOLD] Description"
            ],
            "table_content_values": [
                [
                    "CADEC",
                    "120,341",
                    "Adverse Drug Event, Disease, Drug, Finding, Symptom",
                    "Posts taken from AskaPatient, which is a forum where consumers can discuss their experiences with medications."
                ],
                [
                    "CoNLL2003",
                    "301,418",
                    "Person, Organization, Location, Miscellany",
                    "Newswire from the Reuters RCV1 corpus."
                ],
                [
                    "CRAFT",
                    "561,015",
                    "Cell, Chemical entity, Biological taxa, Protein, Biomacromolecular sequence, Entrez gene, Biological process and molecular function, Cellular component",
                    "Full-length, open-access journal articles about biology."
                ],
                [
                    "JNLPBA",
                    "593,590",
                    "Protein, DNA, RNA, Cell line and Cell type",
                    "Abstract of journal articles about biology."
                ],
                [
                    "ScienceIE",
                    "99,555",
                    "Process (including methods, equipment), Task and Material (including corpora, physical materials)",
                    "Journal articles about Computer Science, Material Sciences and Physics."
                ],
                [
                    "Wetlab",
                    "220,618",
                    "Action, 9 object-based (Amount, Concentration, Device, Location, Method, Reagent, Speed, Temperature, Time) entity types, 5 measure-based (Numerical, Generic-Measure, Size, pH, Measure-Type) and 3 other (Mention, Modifier, Seal) types",
                    "Protocols written by researchers about conducting biology and chemistry experiments."
                ]
            ]
        },
        "gold_description": "five source and six target ner data sets , each selected to provide a range of fields ( i . e . , biology , computer science , medications , local business ) and tenors ( i . e . , encyclopedia articles , journal articles , experimental protocols , online reviews ) . we use five data sets as source data , covering a range of fields ( i . e . , clinical , biomedical , local business and wiki with diverse fields ) and tenors ( i . e . , popular reporting , notes , scholarly publications , online reviews and encyclopedia ) . details of these target data are listed in table 2 .",
        "generated_description": "we use four real - world corpora to evaluate the performance of our approach : cadec , conll2003 , craft , jnlpba , and scienceie . these data sets come from the askapatient , which is a forum where consumers can discuss their experiences with medications . each data set is associated with a set of entity types that we use to represent different aspects of biology . for each data set , we randomly select 80 % of the data as training data and 20 % as test data . the rest 20 % is used as a validation set to tune the hyper - parameters of our model ."
    },
    {
        "table_id": "69",
        "table_info": {
            "table_caption": "Table 4: Correlation coefficients between similarity measures and the effectiveness of pretrained models. The coefficients vary between -1 (negative correlation) and 1 (positive correlation). Zero means no correlation.",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] Word vectors",
                "[BOLD] LMs"
            ],
            "table_content_values": [
                [
                    "TVC",
                    "00.454",
                    "00.666"
                ],
                [
                    "TVcC",
                    "00.469",
                    "00.739"
                ],
                [
                    "PPL",
                    "-0.398",
                    "-0.618"
                ],
                [
                    "WVV",
                    "-0.406",
                    "-0.747"
                ]
            ]
        },
        "gold_description": "the results in table 4 show that our proposed similarity measures are predictive of the effectiveness of the pretraining data . vccr is the most informative factor in predicting the effectiveness of pretrained word vectors given a target data set .",
        "generated_description": "we observe that there is a strong positive correlation between the word vectors and the effectiveness of pretrained language models ( tvc and tvcc ) and the similarity measures tvc , ppl , and wvv . however , there is no correlation between lms and the performance of pretraining . we hypothesize that this is due to the fact that the lms are trained to produce representations that are more similar to the original word vectors than to the pretrained word vectors ."
    },
    {
        "table_id": "70",
        "table_info": {
            "table_caption": "Table 5: Comparison between our best performance pretrained models and the publicly available ones, which are pretrained on much larger corpora.",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] Word vectors GloVe",
                "[BOLD] Word vectors Ours",
                "[BOLD] LMs ELMo",
                "[BOLD] LMs Ours"
            ],
            "table_content_values": [
                [
                    "CADEC",
                    "[BOLD] 70.30",
                    "70.27",
                    "[BOLD] 71.91",
                    "70.46"
                ],
                [
                    "CoNLL2003",
                    "[BOLD] 90.25",
                    "86.36",
                    "[BOLD] 91.34",
                    "89.78"
                ],
                [
                    "CRAFT",
                    "74.22",
                    "[BOLD] 75.45",
                    "[BOLD] 75.77",
                    "75.45"
                ],
                [
                    "JNLPBA",
                    "73.19",
                    "[BOLD] 73.24",
                    "73.65",
                    "[BOLD] 74.29"
                ],
                [
                    "ScienceIE",
                    "37.10",
                    "[BOLD] 37.91",
                    "41.15",
                    "[BOLD] 42.07"
                ],
                [
                    "WetLab",
                    "[BOLD] 79.15",
                    "78.93",
                    "79.57",
                    "[BOLD] 79.62"
                ]
            ]
        },
        "gold_description": "we find that word vectors and lms pretrained on small similar sources can achieve competitive or even better performance than the ones pretrained on larger sources ( table 5 ) . on jnlpba , scienceie and wetlab , lms pretrained on the small similar source perform better , while word vectors pretrained on the small similar source perform better on craft , jnlpba , and scienceie .",
        "generated_description": "in this section , we compare our best publicly available pretrained models with the publicly available ones , which are pretrained on much larger corpora . we use elmo peters et al . pretrained embeddings and glove pennington et al . , as our baselines . we observe that our word vectors perform better than elmo on all the corpora except for the scienceie dataset , where the difference is not statistically significant ."
    },
    {
        "table_id": "71",
        "table_info": {
            "table_caption": "Table 6: Impact of hyper-parameter setting on the effectiveness of pretrained word vectors. ‘Opt’ is hyper-parameter setting proposed in (Chiu et al., 2016), whereas ‘Def’ is the default setting in word2vec.",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] ScienceIE  [BOLD] Def",
                "[BOLD] ScienceIE  [BOLD] Opt",
                "[BOLD] WetLab  [BOLD] Def",
                "[BOLD] WetLab  [BOLD] Opt"
            ],
            "table_content_values": [
                [
                    "1BWB",
                    "34.40",
                    "34.57",
                    "78.66",
                    "79.12"
                ],
                [
                    "MIMIC",
                    "31.23",
                    "34.14",
                    "78.68",
                    "78.65"
                ],
                [
                    "PubMed",
                    "[BOLD] 37.91",
                    "[BOLD] 38.86",
                    "[BOLD] 78.93",
                    "[BOLD] 79.28"
                ],
                [
                    "Wiki",
                    "36.15",
                    "35.63",
                    "78.45",
                    "78.99"
                ],
                [
                    "Yelp",
                    "33.92",
                    "34.25",
                    "78.48",
                    "78.78"
                ]
            ]
        },
        "gold_description": "our results suggest that this hyper - parameter setting can overall ( except wiki - scienceie and mimic - wetlab pairs ) produce better performance compare to the default setting ( table 6 ) .",
        "generated_description": "in this section , we investigate the impact of hyper - parameter setting on the effectiveness of pretrained word vectors . we follow the setting proposed by \\ newcitechiu et al . specifically , we use the default setting in word2vec and pretrained word2vec - def to set the embedding size to d = 200 for scienceie , and d = 50 for wetlab . for all datasets , we observe that the model with pretrained vectors outperforms the one with randomly initialized embeddings on all datasets except for the pubmed dataset , where the model without pretraining is not able to outperform the pretrained model ."
    },
    {
        "table_id": "72",
        "table_info": {
            "table_caption": "Table 3: Types of discrepancy in context-agnostic translation caused by deixis (excluding anaphora)",
            "table_column_names": [
                "[BOLD] type of discrepancy",
                "[BOLD] frequency"
            ],
            "table_content_values": [
                [
                    "T-V distinction",
                    "67%"
                ],
                [
                    "speaker/addressee gender:",
                    "[EMPTY]"
                ],
                [
                    "same speaker",
                    "22%"
                ],
                [
                    "different speaker",
                    "09%"
                ],
                [
                    "other",
                    "02%"
                ]
            ]
        },
        "gold_description": "most errors in our annotated corpus are related to person deixis , specifically gender marking in the russian translation , and the t - v distinction between informal and formal you ( latin \" tu \" and \" vos \" ) . from table 3 , we see that the most frequent error category related to deixis in our annotated corpus is the inconsistency of t - v forms when translating second person pronouns .",
        "generated_description": "the most common type of discrepancy in context - agnostic translation caused by deixis ( excluding anaphora ) is caused by pronoun resolution discrepancy . other types of discrepancy include : t - v distinction , where the pronoun is either between the same or different speakers , gender : the same gender for both speakers , and other : whether the pronoun was originally intended for the same speaker or the opposite gender ."
    },
    {
        "table_id": "73",
        "table_info": {
            "table_caption": "Table 1: Evaluation on subsets of THYME Dev (in F-measure). The subsets of Event×Event (EE) and Timex3×Event (TE) relation pairs are of sizes 3.3k and 2.7k respectively. The intervals 0-100, 100-500 and 500+ are subsets reflecting average argument token frequency in the training data (of sizes 2.2k, 2.2k and 1.8k respectively).",
            "table_column_names": [
                "Model",
                "EE",
                "TE",
                "0-100",
                "100-500",
                "500+",
                "All"
            ],
            "table_content_values": [
                [
                    "RC (random initializations)",
                    "44.5",
                    "64.4",
                    "40.5",
                    "57.8",
                    "63.4",
                    "53.4"
                ],
                [
                    "RC (SG initializations)",
                    "49.5",
                    "68.6",
                    "44.1",
                    "62.5",
                    "67.0",
                    "57.3"
                ],
                [
                    "RC (SG fixed)",
                    "48.9",
                    "[BOLD] 68.7",
                    "44.1",
                    "62.7",
                    "67.3",
                    "57.6"
                ],
                [
                    "RC + SG",
                    "51.6",
                    "67.4",
                    "[BOLD] 46.4",
                    "62.5",
                    "66.8",
                    "58.2"
                ],
                [
                    "RC + SGLR",
                    "[BOLD] 51.7",
                    "68.5",
                    "45.3",
                    "[BOLD] 63.0",
                    "[BOLD] 68.1",
                    "[BOLD] 58.4"
                ]
            ]
        },
        "gold_description": "in table 1 we can see that also for our model , ee relations are harder to recognize than the te relations , as all models achieve higher scores for te compared to ee relations . what is interesting to see is that when training with the combined loss ( sg or sglr ) we obtain a clear improvement on the more difficult ee relations , and perform slightly worse on te relations compared to using pre - trained embeddings ( the three upper settings ) . what can be observed is that the rc + sg model performs best for low - frequency words , and rc + sglr performs best for the higher frequency ranges . when evaluating on the full dev set , both combined loss settings outperform the baselines consistently .",
        "generated_description": "we evaluate our models on the subset of the thyme dev that contains the most event - to - event ( ee ) and timex3 × event ( te ) relation pairs . we also include the 0 - 100 , 100 - 500 and 500 + subsets to reflect average argument token frequency in the training data ( of sizes 2 . 2k and 2 . 7k respectively ) . we observe that the sglr model consistently outperforms the rc models with random initializations across all subsets , with the exception of the 0 – 100 subset , where the sg initializations perform slightly better than the random ones . the overall overall performance is similar to that of the rc model with the sg model ."
    },
    {
        "table_id": "74",
        "table_info": {
            "table_caption": "Table 2: THYME test set results, reporting precision (P), recall (R) and F-measure (F), macro-averaged over three runs. The standard deviation for F is also given.",
            "table_column_names": [
                "Model",
                "P",
                "R",
                "F"
            ],
            "table_content_values": [
                [
                    "[ITALIC] With specialized resources:",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Best Clinical TempEval (2016)",
                    "58.8",
                    "55.9",
                    "57.3"
                ],
                [
                    "Lin et al. (2016)",
                    "66.9",
                    "53.4",
                    "59.4"
                ],
                [
                    "Leeuwenberg et al. (2017)",
                    "-",
                    "-",
                    "60.8"
                ],
                [
                    "Tourille et al. (2017)",
                    "65.7",
                    "57.5",
                    "61.3"
                ],
                [
                    "Lin et al. (2017)",
                    "66.2",
                    "58.5",
                    "62.1"
                ],
                [
                    "[ITALIC] No specialized resources:",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "RC (random initialization)",
                    "67.9",
                    "52.1",
                    "58.9±0.2"
                ],
                [
                    "RC (SG initialization)",
                    "[BOLD] 71.2",
                    "52.0",
                    "60.0±1.2"
                ],
                [
                    "RC (SG fixed)",
                    "68.9",
                    "54.6",
                    "60.9±0.8"
                ],
                [
                    "RC + SG",
                    "66.2",
                    "[BOLD] 59.7",
                    "[BOLD] 62.8±0.2"
                ],
                [
                    "RC + SGLR",
                    "68.7",
                    "57.5",
                    "62.5±0.3"
                ]
            ]
        },
        "gold_description": "table 2 shows that initializing the model with the pre - trained embeddings gives a significant 4 1 . 1 point increase in f - measure compared to random initialization , due to an increase in precision . fixing the embeddings gives slightly better performance than using them as initialization , an increase of 0 . 9 point in f - measure , mostly due to higher recall . when extending the loss with the sglr loss , we gain6 1 . 6 in f - measure compared to fixing the word embeddings , and also surpass the state of the art by 0 . 4 even without specialized resources . if we train our model using the sg loss extension we obtain the best results , and gain6 1 . 9 points in f - measure compared to using pre - trained fixed word embeddings . this setting also exceeds the state of the art ( lin et al . , 2017 ) by 0 . 7 points in f - measure , due to a gain of 1 . 2 points in recall , again without using any specialized clinical nlp tools for feature engineering , in contrast to all state - of - the - art baselines .",
        "generated_description": "we compare our model with the state - of - the - art results in terms of precision , recall , and f1 - score on the clinical tempeval dataset lin et al . we also include the best published results for comparison . our model significantly outperforms all previous models , including the best clinical tempeval results from the previous year . our best model outperforms the previous best published result by 1 . 8 % in terms f1 score . we note that our best model with no specialized resources , i . e . , rc ( random initialization ) and rc ( sg initialization ) , outperforms previous best results by 2 . 0 % and 1 . 6 % in f1 scores , respectively ."
    },
    {
        "table_id": "75",
        "table_info": {
            "table_caption": "Table 3: Error analysis on 50 FP and 50 FN (random from test) for different settings. Clause boundaries are: newlines and sub-clause or sentence boundaries. Error categories are not mutually exclusive.",
            "table_column_names": [
                "Error Type",
                "RC + SG",
                "RC (SG fixed)",
                "RC (SG init.)"
            ],
            "table_content_values": [
                [
                    "Cross-Clause Relations (CCR)",
                    "42",
                    "39",
                    "36"
                ],
                [
                    "Infrequent Arguments (<10)",
                    "11",
                    "15",
                    "26"
                ],
                [
                    "Frequent Arguments (>250)",
                    "37",
                    "50",
                    "40"
                ],
                [
                    "Mistake in Ground-Truth",
                    "10",
                    "8",
                    "5"
                ],
                [
                    "Other",
                    "21",
                    "15",
                    "28"
                ]
            ]
        },
        "gold_description": "from table 3 we can see that all models have difficulties with distant relations that cross sentence or clause boundaries ( ccr ) . furthermore , arguments that are frequent in the supervised data ( > 250 ) are a dominant error category . furthermore it can be noticed that rc + sg has less errors for infrequent arguments ( < 10 ) in the supervised data .",
        "generated_description": "we find that the most error types are “ cross - clause relations ” , “ infrequent arguments ” and “ frequent arguments . ” the model with scheduled sampling ( rc + sg ) performs slightly better than the model with no scheduled sampling , likely due to the fact that the model is less constrained by the sub - clause boundary and more flexible with respect to the length of the context . we also find that model performance on “ other ” error types is similar to that of rc + sg ."
    },
    {
        "table_id": "76",
        "table_info": {
            "table_caption": "Table 2: Results for all the models on the three datasets in our experiment. Marked with ∗ are the results which significantly improve over LING and LING+random (p<0.05, also for the following results); ⋄ indicates a significant improvement over LING+PV; † a significant improvement over LING+N2V.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Sentiment",
                "[BOLD] Stance",
                "[BOLD] Hate"
            ],
            "table_content_values": [
                [
                    "Frequency",
                    "0.332",
                    "0.397",
                    "0.057"
                ],
                [
                    "LING",
                    "0.676",
                    "0.569",
                    "0.624"
                ],
                [
                    "LING+random",
                    "0.657",
                    "0.571",
                    "0.600"
                ],
                [
                    "LING+PV",
                    "0.671",
                    "0.601∗",
                    "0.667∗"
                ],
                [
                    "LING+N2V",
                    "0.672",
                    "0.629∗⋄",
                    "0.656∗"
                ],
                [
                    "LING+GAT",
                    "0.666",
                    "0.640∗⋄†",
                    "0.674∗⋄†"
                ]
            ]
        },
        "gold_description": "in table 2 we report the results , that we compute as the average of ten runs with random parameter initialization . 9 we use the unpaired welch ' s t test to check for statistically significant difference between models . the results show that social information helps improve the performance on stance and hate speech detection , while it has no effect for sentiment analysis . ling + random never improves over ling : we find that both pv and n2v user representations lead to an improvement over ling . where ling + n2v outperforms ling + pv , while for hate speech the performance of the two models is comparable ( the difference between ling + pv and ling + n2v is not statistically significative due to the high variance of the ling + pv results - see extended results table in the supplementary material ) . our model outperforms any other model on both stance and hate speech detection .",
        "generated_description": "as can be seen , ling + n2v provides a significant improvement over ling on all three datasets ( p < 0 . 05 , also for the following results ) . the difference is even more significant for the stance dataset , where the difference is more than 20 percentage points . this is unsurprising , as it is the only dataset on which the ling model is not able to outperform the random baseline , which is the baseline which it was trained on ."
    },
    {
        "table_id": "77",
        "table_info": {
            "table_caption": "Table 1: Overview of annotated parallel sentences per language pair",
            "table_column_names": [
                "[BOLD] Languages  [BOLD] EN–BG",
                "[BOLD] # sents 306,380",
                "[BOLD] Languages  [BOLD] EN–IT",
                "[BOLD] # sents 1,297,635"
            ],
            "table_content_values": [
                [
                    "[BOLD] EN–CS",
                    "491,848",
                    "[BOLD] EN–LT",
                    "481,570"
                ],
                [
                    "[BOLD] EN–DA",
                    "1,421,197",
                    "[BOLD] EN–LV",
                    "487,287"
                ],
                [
                    "[BOLD] EN–DE",
                    "1,296,843",
                    "[BOLD] EN–NL",
                    "1,419,359"
                ],
                [
                    "[BOLD] EN–EL",
                    "921,540",
                    "[BOLD] EN–PL",
                    "478,008"
                ],
                [
                    "[BOLD] EN–ES",
                    "1,419,507",
                    "[BOLD] EN–PT",
                    "1,426,043"
                ],
                [
                    "[BOLD] EN–ET",
                    "494,645",
                    "[BOLD] EN–RO",
                    "303,396"
                ],
                [
                    "[BOLD] EN–FI",
                    "1,393,572",
                    "[BOLD] EN–SK",
                    "488,351"
                ],
                [
                    "[BOLD] EN–FR",
                    "1,440,620",
                    "[BOLD] EN–SL",
                    "479,313"
                ],
                [
                    "[BOLD] EN–HU",
                    "251,833",
                    "[BOLD] EN–SV",
                    "1,349,472"
                ]
            ]
        },
        "gold_description": "an overview of the language pairs as well as the amount of annotated parallel sentences per language pair is given in table 1 . overview of annotated parallel sentences per language pair",
        "generated_description": "the corpus is split into a training set , a development set and a test set . the training set is composed of 1 , 297 , 635 sentences , while the development set is used for evaluating the cross - lingual performance of the system . the test set is made up of the remaining 7 , 393 sentences , which is the union of the training and development sets . the number of sentences in the corpus is kept constant across all languages ."
    },
    {
        "table_id": "78",
        "table_info": {
            "table_caption": "Table 4: Types of discrepancy in context-agnostic translation caused by ellipsis",
            "table_column_names": [
                "[BOLD] type of discrepancy",
                "[BOLD] frequency"
            ],
            "table_content_values": [
                [
                    "wrong morphological form",
                    "66%"
                ],
                [
                    "wrong verb (VP-ellipsis)",
                    "20%"
                ],
                [
                    "other error",
                    "14%"
                ]
            ]
        },
        "gold_description": "we classified ellipsis examples which lead to errors in sentence - level translations by the type of error they cause . results are provided in table 4 . from table 4 , we see that the two most frequent types of ambiguity caused by the presence of an elliptical structure have different nature , hence we construct individual test sets for each of them .",
        "generated_description": "we further analyzed the errors in context - agnostic translation caused by ellipsis . we found that the most common type of discrepancy is caused by the wrong verb ( vp - ellipsis ) , which accounts for 20 % of all the errors . other error types account for 14 % of the overall errors , which is less than the other errors ."
    },
    {
        "table_id": "79",
        "table_info": {
            "table_caption": "Table 1: Results. Dev Acc. represents accuracy on SST-2 dev set. F - M represents difference between means of predicted positive class probabilities for sentences with female nouns and sentences with male nouns. ** denotes statistical significance with p<0.01 (after applying Bonferroni correction).",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Dev Acc.",
                "[BOLD] F - M"
            ],
            "table_content_values": [
                [
                    "[BOLD] M.1 (BoW+LogReg)",
                    "0.827",
                    "0.035**"
                ],
                [
                    "[BOLD] M.2 (BiLSTM)",
                    "0.841",
                    "0.077**"
                ],
                [
                    "[BOLD] M.3 (BERT)",
                    "0.930",
                    "-0.040**"
                ]
            ]
        },
        "gold_description": "the main results of our experiments are shown in table 1 . we notice that m . 1 ( bag - of - words + logistic regression ) and m . 2 ( bilstm ) show a statistically significant difference between the two genders , with higher predicted positive class probabilities for sentences with female nouns . on the contrary , m . 3 ( bert ) shows that sentences with male nouns have a statistically significant higher predicted positive class probability than sentences with female nouns .",
        "generated_description": "the models m . 1 ( bow + logreg ) and m . 2 ( bilstm ) perform better than m . 3 ( bert ) in terms of accuracy on sst - 2 dev set . however , the difference between the means of predicted class probabilities for female nouns and male nouns is statistically significant with p < 0 . 01 ( after bonferroni correction ) . this result suggests that the model is sensitive to the gender of the sentences ."
    },
    {
        "table_id": "80",
        "table_info": {
            "table_caption": "Table 1: Average cosine similarity score and Delta-E distance over 5 runs. A smaller Delta-E distance means a less significant difference between two colors. Bold: best performance. Hard: the hard ensemble model. WM18∗: the performance from WM18 paper. See Supplementary Material for example outputs and ensemble analysis.",
            "table_column_names": [
                "Test Condition",
                "[BOLD] Cosine Similarity ± SD  (↑)  [BOLD] RGB",
                "[BOLD] Cosine Similarity ± SD  (↑)  [BOLD] WM18",
                "[BOLD] Cosine Similarity ± SD  (↑)  [BOLD] HSV",
                "[BOLD] Cosine Similarity ± SD  (↑)  [BOLD] Ensemble",
                "[BOLD] Cosine Similarity ± SD  (↑)  [BOLD] WM18∗"
            ],
            "table_content_values": [
                [
                    "Seen Pairings",
                    "0.954±0.001",
                    "0.953±0.000",
                    "0.934±0.089",
                    "[BOLD] 0.954±0.0",
                    "0.68"
                ],
                [
                    "Unseen Pairings",
                    "0.799±0.044",
                    "0.771±0.032",
                    "[BOLD] 0.843±0.144",
                    "0.797±0.0",
                    "0.68"
                ],
                [
                    "Unseen Ref. Color",
                    "0.781±0.015",
                    "0.767±0.010",
                    "[BOLD] 0.945±0.019",
                    "0.804±0.0",
                    "0.40"
                ],
                [
                    "Unseen Modifiers",
                    "0.633±0.042",
                    "0.637±0.032",
                    "[BOLD] 0.724±0.131",
                    "0.629±0.0",
                    "0.41"
                ],
                [
                    "Fully Unseen",
                    "0.370±0.029",
                    "0.358±0.038",
                    "[BOLD] 0.919±0.026",
                    "0.445±0.0",
                    "-0.21"
                ],
                [
                    "Overall",
                    "0.858±0.006",
                    "0.856±0.003",
                    "[BOLD] 0.911±0.057",
                    "0.868±0.0",
                    "0.65"
                ],
                [
                    "[EMPTY]",
                    "[BOLD] Delta-E ± SD  (↓)",
                    "[BOLD] Delta-E ± SD  (↓)",
                    "[BOLD] Delta-E ± SD  (↓)",
                    "[BOLD] Delta-E ± SD  (↓)",
                    "[BOLD] Delta-E ± SD  (↓)"
                ],
                [
                    "Test Condition",
                    "RGB",
                    "WM18",
                    "HSV",
                    "Ensemble",
                    "WM18∗"
                ],
                [
                    "Seen Pairings",
                    "[BOLD] 3.121±0.027",
                    "3.188±0.062",
                    "5.380±4.846",
                    "4.093±0.1",
                    "6.1"
                ],
                [
                    "Unseen Pairings",
                    "6.454±0.233",
                    "6.825±0.093",
                    "11.701±3.358",
                    "[BOLD] 5.873±0.0",
                    "7.9"
                ],
                [
                    "Unseen Ref. Color",
                    "7.456±0.184",
                    "7.658±0.363",
                    "10.429±2.523",
                    "[BOLD] 7.171±0.0",
                    "11.4"
                ],
                [
                    "Unseen Modifiers",
                    "13.288±1.082",
                    "13.891±1.077",
                    "14.183±5.175",
                    "10.927±0.0",
                    "[BOLD] 10.5"
                ],
                [
                    "Fully Unseen",
                    "13.859±0.874",
                    "14.516±0.587",
                    "[BOLD] 12.432±2.170",
                    "13.448±0.0",
                    "15.9"
                ],
                [
                    "Overall",
                    "[BOLD] 5.412±0.169",
                    "5.595±0.128",
                    "7.487±3.940",
                    "5.777±0.0",
                    "6.8"
                ]
            ]
        },
        "gold_description": "because of the small size of the dataset , we report the average performance over 5 runs with different random seeds . table 1 shows the results . compared with wm18 , our rgb model outperforms under all conditions . according to the cosine similarity , the hsv model is superior for most test conditions ( confirming our hypothesis about simpler modifier behaviour in this space ) . however for delta - e , the rgb model and ensemble perform better . unlike cosine , delta - e is sensitive to differences in vector length , and we would argue it is the most appropriate metric because lengths are critical to measuring the extent of lightness and darkness of colors . accordingly the hsv model does worse under this metric , as it more directly models the direction of color modifiers , but as a consequence this leads to errors in its length predictions . over - all the ensemble does well according to both met rics , and has the best performance for several test conditions with delta - e .",
        "generated_description": "we evaluate the performance of the proposed approach on the test sets of the mnist dataset . the evaluation is performed by calculating cosine similarity between the predicted pairwise similarities between the ground truth pairwise similarity and the similarity of the pairwise embeddings obtained from each of the five different algorithms . for each algorithm , we report the mean and standard deviation of the cosine similarities for the seen pairings and unseen pairings conditions , as well as the standard deviation for the color and modality conditions . for the unseen modality test set , we also report the standard deviations for both the seen and unseen modalities test sets . for all algorithms , the ensemble approach outperforms the single - task approach for all of the test conditions , with the exception of the unseen color test set ."
    },
    {
        "table_id": "81",
        "table_info": {
            "table_caption": "Table 6: BLEU scores. CADec trained with p=0.5. Scores for CADec are not statistically different from the baseline (6m).",
            "table_column_names": [
                "[BOLD] model",
                "[BOLD] BLEU"
            ],
            "table_content_values": [
                [
                    "baseline (1.5m)",
                    "29.10"
                ],
                [
                    "baseline (6m)",
                    "[BOLD] 32.40"
                ],
                [
                    "concat",
                    "31.56"
                ],
                [
                    "s-hier-to-2.tied",
                    "26.68"
                ],
                [
                    "CADec",
                    "[BOLD] 32.38"
                ]
            ]
        },
        "gold_description": "bleu scores for our model and the baselines are given in table 6 . 5 for context - aware models , all sentences in a group were translated , and then only the current sentence is evaluated . we also report bleu for the context - agnostic baseline trained only on 1 . 5m dataset to show how the performance is influenced by the amount of data . we observe that our model is no worse in bleu than the baseline despite the second - pass model being trained only on a fraction of the data . in contrast , the concatenation baseline , trained on a mixture of data with and without context is about 1 bleu below the context - agnostic baseline and our model when using all 3 context sentences . cadec ' s performance remains the same independently from the number of context sentences ( 1 , 2 or 3 ) as measured with bleu . s - hier - to - 2 . tied performs worst in terms of bleu , but note that this is a shallow recurrent model , while others are transformer - based . it also suffers from the asymmetric data setting , like the concatenation baseline .",
        "generated_description": "the concatenation model concatenates the output of the concatenated representations of the encoder and the decoder , and the s - hier - to - 2 . tied model ties the outputs of the two encoders in a sigmoid fashion . the concat model performs slightly better than the baseline ( 1 . 5m ) model , but not as good as our cadec model , which we hypothesize is due to the small size of our training set ( 6m ) being too small to train a reasonable model ."
    },
    {
        "table_id": "82",
        "table_info": {
            "table_caption": "Table 2: F&C dataset size. All Labels represent the original dataset with all the labels. Subset Labels are the subset labels which are inferable by the resource.",
            "table_column_names": [
                "All Labels",
                "Orig F&C",
                "Train 587",
                "Dev 5,418",
                "Test 6,007",
                "All 12,012"
            ],
            "table_content_values": [
                [
                    "All Labels",
                    "No-Leak F&C",
                    "712",
                    "3,000",
                    "4,497",
                    "8,209"
                ],
                [
                    "Subset Labels",
                    "Orig F&C",
                    "361",
                    "3,311",
                    "3,650",
                    "7,322"
                ],
                [
                    "Subset Labels",
                    "Clean F&C",
                    "173",
                    "1,268",
                    "1,523",
                    "2,964"
                ]
            ]
        },
        "gold_description": "we reorganized the train / dev / test sets , forming new splits , which we refer to as no - leak f & c . the new split sizes can be found in table 2 . we re - ran the current models on no - leak f & c and , as expected , we observe a drop of 5 - 6 % in accuracy : from the original 76 % accuracy on the dev / test sets , to 70 % and 71 % accuracy , respectively .",
        "generated_description": "the f & c dataset contains a total of 12 , 012 unique characters ( no - leak and clean ) . the dataset is divided into two parts : ( i ) the original dataset with all the original labels and ( ii ) a subset of labels which are inferable by the resource . the original dataset contains 587 unique characters . subset labels are the subset of characters which are not present in the original data but are part of the clean dataset . the number of sub - labels is smaller than the total number of characters in the whole dataset because we removed stop words and punctuation marks ."
    },
    {
        "table_id": "83",
        "table_info": {
            "table_caption": "Table 4: Results on the noun comparison datasets.",
            "table_column_names": [
                "Model/Dataset",
                "F&C Clean Dev",
                "F&C Clean Test",
                "New Data Dev",
                "New Data Test"
            ],
            "table_content_values": [
                [
                    "Majority",
                    "0.54",
                    "0.57",
                    "0.51",
                    "0.50"
                ],
                [
                    "Yang et al. (PCE LSTM)",
                    "[BOLD] 0.86",
                    "[BOLD] 0.87",
                    "0.60",
                    "0.57"
                ],
                [
                    "DoQ",
                    "0.78",
                    "0.77",
                    "[BOLD] 0.62",
                    "[BOLD] 0.62"
                ],
                [
                    "DoQ + 10-distance",
                    "0.78",
                    "0.77",
                    "[BOLD] 0.62",
                    "[BOLD] 0.62"
                ],
                [
                    "DoQ + 3-distance",
                    "0.81",
                    "0.80",
                    "[BOLD] 0.62",
                    "0.61"
                ]
            ]
        },
        "gold_description": "the left column of table 4 presents results for the cleaned version of the forbes and choi ( 2017 ) dataset . results on the new objects comparison dataset we created are shown in the rightmost column of table 4 . we get better results than previous methods on this dataset : 63 % and 61 % accuracy on the dev / test sets compared to 60 % and 57 % . these relatively low results on this new dataset indicate that it is more challenging .",
        "generated_description": "our model outperforms the majority baseline by a large margin on both the f & c clean and new data sets . on the new data set , the doq model performs slightly worse than the model of yang et al . ( pce lstm ) on the clean data , but this difference is not statistically significant ."
    },
    {
        "table_id": "84",
        "table_info": {
            "table_caption": "Table 5: Results on the Relative dataset. Yang et al. (2018) result was achieved by running their model on their training set, and using it as a transfer method on Relative. Finally, we present our own predictions, with different thresholds, which surpass previous work.",
            "table_column_names": [
                "Model",
                "Accuracy"
            ],
            "table_content_values": [
                [
                    "Chance",
                    "0.5"
                ],
                [
                    "Bagherinezhad et al.",
                    "0.835"
                ],
                [
                    "Yang et al. (Transfer)",
                    "0.858"
                ],
                [
                    "DoQ",
                    "0.872"
                ],
                [
                    "DoQ + 10-distance",
                    "[BOLD] 0.877"
                ],
                [
                    "DoQ + 3-distance",
                    "0.858"
                ]
            ]
        },
        "gold_description": "noun comparatives is on relative ( bagherinezhad et al . , 2016 ) , presented in table 5 . we report the results of the original work , where the best score used a combination of visual and textual signals , achieving 83 . 5 % accuracy . we also tested the method by yang et al . ( 2018 ) on this dataset . the accuracy achieved by this method is 85 . 8 % , surpassing the previous method by more than 2 points . we evaluated our method on this dataset , achieving a new state - of - the - art result of 87 . 7 % accuracy with k = 10 as a filter method .",
        "generated_description": "yang et al . ( 2018 ) result was achieved by running their model on their training set , and using it as a transfer method on relative . our model , on the other hand , can directly apply to the relative dataset without any fine - tuning . our method outperforms the previous state - of - the - art by a large margin ."
    },
    {
        "table_id": "85",
        "table_info": {
            "table_caption": "Table 7: Intrinsic Evaluation. Accuracy of the number of objects which our proposed median fall into range of the object, given the dimension.",
            "table_column_names": [
                "Method/Data",
                "Mass",
                "Length",
                "Speed",
                "Currency",
                "All"
            ],
            "table_content_values": [
                [
                    "Indian Annotators",
                    "0.61",
                    "0.79",
                    "0.77",
                    "0.58",
                    "0.69"
                ],
                [
                    "US Annotators",
                    "-",
                    "-",
                    "-",
                    "0.76",
                    "-"
                ]
            ]
        },
        "gold_description": "the results of the intrinsic evaluation on a sample of doq are shown in table 7 . the total agreement is 69 % , while the specific agreements for mass , length , speed and currency are 61 % , 79 % , 77 % and 58 % respectively . we re - annotated the samples in the currency category with annotators from the u . s . and found a much higher agreement score : 76 % .",
        "generated_description": "intrinsic evaluation . to evaluate the quality of the annotations , we use our proposed methodology to measure the number of objects which fall into range of each annotator ’ s decision , given the dimensionality of the dataset . we observe that the indian annotators achieve an accuracy of 0 . 61 for mass , 0 . 77 for length , and 0 . 58 for speed . the us annotators , on the other hand , achieve a slightly lower accuracy ( 0 . 76 ) for speed and a slightly higher accuracy for length ."
    },
    {
        "table_id": "86",
        "table_info": {
            "table_caption": "Table 1: Significant components of our logistic regression model using the Coh-Metrix features. Variables are also separated by their association with either satire or fake news. Bold: the remaining features following the step-wise backward elimination. Note: *** p < 0.001, ** p < 0.01, * p < 0.05.",
            "table_column_names": [
                "Satire associated",
                "PCA Component  [BOLD] RC19",
                "Description First person singular pronoun incidence",
                "estimate 1.80",
                "std.error 0.41",
                "statistic 4.38",
                "***"
            ],
            "table_content_values": [
                [
                    "Satire associated",
                    "[BOLD] RC5",
                    "Sentence length, number of words",
                    "0.66",
                    "0.18",
                    "3.68",
                    "***"
                ],
                [
                    "Satire associated",
                    "[BOLD] RC15",
                    "Estimates of hypernymy for nouns",
                    "0.61",
                    "0.19",
                    "3.18",
                    "**"
                ],
                [
                    "Satire associated",
                    "[BOLD] RC49",
                    "Word Concreteness",
                    "0.54",
                    "0.17",
                    "3.18",
                    "**"
                ],
                [
                    "Satire associated",
                    "[BOLD] RC35",
                    "Ratio of casual particles to causal verbs",
                    "0.56",
                    "0.18",
                    "3.10",
                    "**"
                ],
                [
                    "Satire associated",
                    "[BOLD] RC91",
                    "Text Easability PC Referential cohesion",
                    "0.45",
                    "0.16",
                    "2.89",
                    "**"
                ],
                [
                    "Satire associated",
                    "[BOLD] RC20",
                    "Incidence score of gerunds",
                    "0.43",
                    "0.16",
                    "2.77",
                    "**"
                ],
                [
                    "Satire associated",
                    "RC32",
                    "Expanded temporal connectives incidence",
                    "0.44",
                    "0.16",
                    "2.75",
                    "**"
                ],
                [
                    "Satire associated",
                    "[BOLD] RC9",
                    "Third person singular pronoun incidence",
                    "0.44",
                    "0.16",
                    "2.67",
                    "**"
                ],
                [
                    "Satire associated",
                    "RC43",
                    "Word length, number of letters",
                    "0.45",
                    "0.20",
                    "2.27",
                    "*"
                ],
                [
                    "Satire associated",
                    "RC46",
                    "Verb phrase density",
                    "0.37",
                    "0.16",
                    "2.25",
                    "*"
                ],
                [
                    "Satire associated",
                    "[BOLD] RC97",
                    "Coh-Metrix L2 Readability",
                    "0.34",
                    "0.16",
                    "2.16",
                    "*"
                ],
                [
                    "Satire associated",
                    "[BOLD] RC61",
                    "Average word frequency for all words",
                    "0.50",
                    "0.24",
                    "2.13",
                    "*"
                ],
                [
                    "Satire associated",
                    "RC84",
                    "The average givenness of each sentence",
                    "0.37",
                    "0.18",
                    "2.11",
                    "*"
                ],
                [
                    "Satire associated",
                    "RC65",
                    "Text Easability PC Syntactic simplicity",
                    "0.38",
                    "0.18",
                    "2.08",
                    "*"
                ],
                [
                    "Satire associated",
                    "RC50",
                    "Lexical diversity",
                    "0.37",
                    "0.18",
                    "2.05",
                    "*"
                ],
                [
                    "Fake news associated",
                    "[BOLD] RC30",
                    "Agentless passive voice density",
                    "-1.05",
                    "0.21",
                    "-4.96",
                    "***"
                ],
                [
                    "Fake news associated",
                    "[BOLD] RC73",
                    "Average word frequency for content words",
                    "-0.72",
                    "0.20",
                    "-3.68",
                    "***"
                ],
                [
                    "Fake news associated",
                    "[BOLD] RC59",
                    "Adverb incidence",
                    "-0.62",
                    "0.18",
                    "-3.43",
                    "***"
                ],
                [
                    "Fake news associated",
                    "[BOLD] RC55",
                    "Number of sentences",
                    "-0.79",
                    "0.26",
                    "-3.09",
                    "**"
                ],
                [
                    "Fake news associated",
                    "RC62",
                    "Causal and intentional connectives",
                    "-0.42",
                    "0.15",
                    "-2.72",
                    "**"
                ],
                [
                    "Fake news associated",
                    "[BOLD] RC34",
                    "LSA overlap between verbs",
                    "-0.35",
                    "0.16",
                    "-2.22",
                    "*"
                ],
                [
                    "Fake news associated",
                    "[BOLD] RC44",
                    "LSA overlap, adjacent sentences",
                    "-0.36",
                    "0.16",
                    "-2.16",
                    "*"
                ],
                [
                    "Fake news associated",
                    "RC47",
                    "Sentence length, number of words",
                    "-0.36",
                    "0.18",
                    "-2.03",
                    "*"
                ],
                [
                    "Fake news associated",
                    "RC89",
                    "LSA overlap, all sentences in paragraph",
                    "-0.34",
                    "0.17",
                    "-1.97",
                    "*"
                ],
                [
                    "[EMPTY]",
                    "(Intercept)",
                    "[EMPTY]",
                    "-0.54",
                    "0.19",
                    "-2.91",
                    "[EMPTY]"
                ]
            ]
        },
        "gold_description": "as our dependent variable . significant features of the logistic regression model are shown in table 1 with the respective significance levels . we also run a step - wise backward elimination regression . those components that are also significant in the step - wise model appear in bold . observing the significant features , in bold in table 1 , we see a combination of surface level related features , such as sentence length and average word frequency , as well as semantic features including lsa ( latent semantic analysis ) overlaps between verbs and between adjacent sentences . semantic features which are associated with the gist representation of content are particularly interesting to see among the predictors since based on fuzzytrace theory ( reyna , 2012 ) , a well - known theory of decision making under risk , gist representation of content drives individual ' s decision to spread misinformation online . also among the significant features , we observe the causal connectives , that are proven to be important in text comprehension , and two indices related to the text easability and readability , both suggesting that satire articles are more sophisticated , or less easy to read , than fake news articles .",
        "generated_description": "in order to get a better understanding of what the pca component of each satire can be used to predict , we performed a set of pca analyses for each of the five different categories of satire associated with the comics rink et al . each pca analysis was performed on a subset of 1 , 000 randomly sampled sentences from the test set of the black - humor shared task . for each of these corpora , we used a random forest classifier trained on the training set to predict the classifier output . the classifier outputs were then compared with the output of the lstm - based classifier on the same subset of sentences that had been annotated as either black or white . pca components that were not included in the analysis are marked with * * in the table ."
    },
    {
        "table_id": "87",
        "table_info": {
            "table_caption": "Table 2: Results of classification between fake news and satire articles using BERT pre-trained models, based on the headline, body and full text. Bold: best performing model. P: Precision, and R: Recall",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] P",
                "[BOLD] R",
                "[BOLD] F1"
            ],
            "table_content_values": [
                [
                    "Headline only",
                    "0.46",
                    "0.89",
                    "0.61"
                ],
                [
                    "Text body only",
                    "0.78",
                    "0.52",
                    "0.62"
                ],
                [
                    "Headline + text body",
                    "[BOLD] 0.81",
                    "[BOLD] 0.75",
                    "[BOLD] 0.78"
                ]
            ]
        },
        "gold_description": "text of a story , and in combination . results are shown in table 2 . the models based on the headline and text body give a similar f1 score . however , while the headline model performs poorly on precision , perhaps due to the short text , the model based on the text body performs poorly on recall . the model based on the full text of headline and body gives the best performance .",
        "generated_description": "the bert pre - trained model achieved an f1 - score of 0 . 78 for the fake news class , which is an improvement of 2 . 1 % compared to the model that was trained on the news content only . the text body only model performed slightly better than the headline only model , but the text body model outperformed the head - only model by 3 . 1 % ."
    },
    {
        "table_id": "88",
        "table_info": {
            "table_caption": "Table 7: Accuracy for deixis and lexical cohesion.",
            "table_column_names": [
                "[EMPTY]",
                "total",
                "latest relevant context 1st",
                "latest relevant context 2nd",
                "latest relevant context 3rd"
            ],
            "table_content_values": [
                [
                    "[BOLD] deixis",
                    "[BOLD] deixis",
                    "[BOLD] deixis",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "baseline",
                    "50.0",
                    "50.0",
                    "50.0",
                    "50.0"
                ],
                [
                    "concat",
                    "[BOLD] 83.5",
                    "[BOLD] 88.8",
                    "[BOLD] 85.6",
                    "[BOLD] 76.4"
                ],
                [
                    "s-hier-to-2.tied",
                    "60.9",
                    "83.0",
                    "50.1",
                    "50.0"
                ],
                [
                    "CADec",
                    "81.6",
                    "84.6",
                    "84.4",
                    "75.9"
                ],
                [
                    "[BOLD] lexical cohesion",
                    "[BOLD] lexical cohesion",
                    "[BOLD] lexical cohesion",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "baseline",
                    "45.9",
                    "46.1",
                    "45.9",
                    "45.4"
                ],
                [
                    "concat",
                    "47.5",
                    "48.6",
                    "46.7",
                    "46.7"
                ],
                [
                    "s-hier-to-2.tied",
                    "48.9",
                    "53.0",
                    "46.1",
                    "45.4"
                ],
                [
                    "CADec",
                    "[BOLD] 58.1",
                    "[BOLD] 63.2",
                    "[BOLD] 52.0",
                    "[BOLD] 56.7"
                ]
            ]
        },
        "gold_description": "for all tasks , we observe a large improvement from using context . for deixis , the concatenation model ( concat ) and cadec improve over the baseline by 33 . 5 and 31 . 6 percentage points , respectively . on the lexical cohesion test set , cadec shows a large improvement over the context - agnostic baseline ( 12 . 2 percentage points ) , while concat performs similarly to the baseline . when looking only at the scores where the latest relevant context is in the model ' s context window ( column 2 in table 7 ) , s - hier - to - 2 . tied outperforms the concatenation baseline for lexical cohesion , but remains behind the performance of cadec .",
        "generated_description": "for deixis and lexical cohesion , the best system is the concatenated system , followed by the s - hier - to - 2 . tied system , the concat system , and the cadec system . the best system for the context - consistency task ( concat ) is better than the baseline system ( baseline ) in all cases , except for the case where the concated system is worse than the tied system . this is not surprising , as the context of the first context is very different from that of the second and third contexts , and it is more likely that the model is simply memorizing the context from the first and second context . the concat systems are significantly better in terms of all evaluation measures compared to the other systems ."
    },
    {
        "table_id": "89",
        "table_info": {
            "table_caption": "Table 3: Summary of results of classification between fake news and satire articles using the baseline Multinomial Naive Bayes method, the linguistic cues of text coherence and semantic representation with a pre-trained BERT model. Statistically significant differences with the baseline are marked with ’*’. Bold: best performing model. P: Precision, and R: Recall. For Coh-Metrix, we report the mean Precision, Recall, and F1 on the test set.",
            "table_column_names": [
                "[BOLD] Method",
                "[BOLD] P",
                "[BOLD] R",
                "[BOLD] F1"
            ],
            "table_content_values": [
                [
                    "Baseline",
                    "0.70",
                    "0.64",
                    "0.67"
                ],
                [
                    "Coh-Metrix",
                    "0.72",
                    "0.66",
                    "0.74*"
                ],
                [
                    "Pre-trained BERT",
                    "[BOLD] 0.81",
                    "[BOLD] 0.75",
                    "[BOLD] 0.78*"
                ]
            ]
        },
        "gold_description": "table 3 provides a summary of the results . we compare the results of our methods of the pre - trained bert , using both the headline and text body , and the coh - mertix approach , to the language - based baseline with multinomial naive bayes from ( golbeck et al . , 2018 ) 2 . both the semantic cues with bert and the linguistic cues with coh - metrix significantly outperform the baseline on the f1 score . the two - tailed paired t - test with a 0 . 05 significance level was used for testing statistical significance of performance differences . the best result is given by the bert model . overall , these results provide an answer to research question rq1 regarding the existence of semantic and linguistic difference between fake news and satire .",
        "generated_description": "the baseline multinomial naive bayes classifier achieves a precision of 0 . 70 and an f1 - score 0 . 67 . the pre - trained bert model improves the performance of the baseline to 0 . 81 in terms of precision , recall , and f1 . the results show that the linguistic cues of text coherence and semantic representation can be used to better distinguish fake news and satire articles ."
    },
    {
        "table_id": "90",
        "table_info": {
            "table_caption": "Table 1: F1 scores on AIDA-B (test set).",
            "table_column_names": [
                "Methods",
                "Aida-B"
            ],
            "table_content_values": [
                [
                    "Q15-1011",
                    "88.7"
                ],
                [
                    "guorobust",
                    "89.0"
                ],
                [
                    "P16-1059",
                    "91.0"
                ],
                [
                    "K16-1025",
                    "91.5"
                ],
                [
                    "D17-1276",
                    "92.22±0.14"
                ],
                [
                    "rel-norm",
                    "92.41±0.19"
                ],
                [
                    "ment-norm",
                    "[BOLD] 93.07±0.27"
                ],
                [
                    "ment-norm ( [ITALIC] K=1)",
                    "92.89±0.21"
                ],
                [
                    "ment-norm (no pad)",
                    "92.37±0.26"
                ]
            ]
        },
        "gold_description": "table 1 shows micro f1 scores on aida - b of the sota methods and ours , which all use wikipedia and yago mention - entity index . to our knowledge , ours are the only ( unsupervisedly ) inducing and employing more than one relations on this dataset . the others use only one relation , coreference , which is given by simple heuristics or supervised third - party resolvers . all four our models outperform any previous method , with ment - norm achieving the best results , 0 . 85 % higher than that of ganea and hofmann ( 2017 ) . the experimental results show that ment - norm outperforms rel - norm , and that mention padding plays an important role .",
        "generated_description": "we compare our method with the state - of - the - art systems on the aida - b dataset . our method outperforms the runner - up system ( d17 - 1276 ) by a large margin . the ment - norm model with k = 1 achieves the best f1 score of 93 . 07 , outperforming the second - best system ( p16 - 1059 ) by 3 . 1 points , and the best baseline ( q15 - 1011 ) by 2 . 0 points . our model outperforms all the other systems , including the re - weighting method of \\ newciteguorobust , which is based on the log - bilinear regression , by 1 . 4 points . we also compare our model with the baselines that use the same k as our model , namely , q15 - 1011 ( q with q - means ) and guorabust , p16 - 1059 ( p with logistic regression ) , as well as the k16 and d17 - 1276 systems that use word embeddings ."
    },
    {
        "table_id": "91",
        "table_info": {
            "table_caption": "Table 2: F1 scores on five out-domain test sets. Underlined scores show cases where the corresponding model outperforms the baseline.",
            "table_column_names": [
                "Methods",
                "MSNBC",
                "AQUAINT",
                "ACE2004",
                "CWEB",
                "WIKI",
                "Avg"
            ],
            "table_content_values": [
                [
                    "milne2008learning",
                    "78",
                    "85",
                    "81",
                    "64.1",
                    "81.7",
                    "77.96"
                ],
                [
                    "D11-1072",
                    "79",
                    "56",
                    "80",
                    "58.6",
                    "63",
                    "67.32"
                ],
                [
                    "P11-1138",
                    "75",
                    "83",
                    "82",
                    "56.2",
                    "67.2",
                    "72.68"
                ],
                [
                    "cheng-roth:2013:EMNLP",
                    "90",
                    "[BOLD] 90",
                    "86",
                    "67.5",
                    "73.4",
                    "81.38"
                ],
                [
                    "guorobust",
                    "92",
                    "87",
                    "88",
                    "77",
                    "[BOLD] 84.5",
                    "[BOLD] 85.7"
                ],
                [
                    "D17-1276",
                    "93.7 ± 0.1",
                    "88.5 ± 0.4",
                    "88.5 ± 0.3",
                    "[BOLD] 77.9 ± 0.1",
                    "77.5 ± 0.1",
                    "85.22"
                ],
                [
                    "rel-norm",
                    "92.2 ± 0.3",
                    "86.7 ± 0.7",
                    "87.9 ± 0.3",
                    "75.2 ± 0.5",
                    "76.4 ± 0.3",
                    "83.67"
                ],
                [
                    "ment-norm",
                    "[BOLD] 93.9 ± 0.2",
                    "88.3 ± 0.6",
                    "[BOLD] 89.9 ± 0.8",
                    "77.5 ± 0.1",
                    "78.0 ± 0.1",
                    "85.51"
                ],
                [
                    "ment-norm ( [ITALIC] K=1)",
                    "93.2 ± 0.3",
                    "88.4 ± 0.4",
                    "88.9 ± 1.0",
                    "77.0 ± 0.2",
                    "77.2 ± 0.1",
                    "84.94"
                ],
                [
                    "ment-norm (no pad)",
                    "93.6 ± 0.3",
                    "87.8 ± 0.5",
                    "[BOLD] 90.0 ± 0.3",
                    "77.0 ± 0.2",
                    "77.3 ± 0.3",
                    "85.13"
                ]
            ]
        },
        "gold_description": "table 2 shows micro f1 scores on 5 out - domain test sets . besides ours , only cheng and roth ( 2013 ) employs several mention relations . mentnorm achieves the highest f1 scores on msnbc and ace2004 . on average , ment - norm ' s f1 score is 0 . 3 % higher than that of ganea and hofmann ( 2017 ) , but 0 . 2 % lower than guo and barbosa ( 2016 ) ' s . it is worth noting that guo and barbosa ( 2016 ) performs exceptionally well on wiki , but substantially worse than ment - norm on all other datasets . our other three models , however , have lower average f1 scores compared to the best previous model . the experimental results show that ment - norm outperforms rel - norm , and that mention padding plays an important role .",
        "generated_description": "on average , guorobust achieved the best results on all the five datasets . our method outperformed the previous state - of - the - art methods on 4 out of 5 datasets and achieved the second best average score on the remaining 2 datasets . on the wiki dataset , our method achieved the third best score . on aquaint , ace2004 , and cweb , we outperformed all the previous methods . on msnbc , we did not perform as well , but our result is comparable to the best result reported by \\ newcitecheng - roth : 2013 : emnlp . on all the other five datasets , we performed better than the previous best results ."
    },
    {
        "table_id": "92",
        "table_info": {
            "table_caption": "Table 2: Performance of the proposed LSTM-based variants with the traditional cross-validation setup. Due to overlapping sub-dialogues in the train and test sets, the performance of the LSTM-based models achieve unrealistically high performance.",
            "table_column_names": [
                "[EMPTY]",
                "[ITALIC] UAR",
                "[ITALIC] κ",
                "[ITALIC] ρ",
                "[ITALIC] eA",
                "[ITALIC] Ep."
            ],
            "table_content_values": [
                [
                    "LSTM",
                    "0.78",
                    "0.85",
                    "0.91",
                    "[BOLD] 0.99",
                    "101"
                ],
                [
                    "BiLSTM",
                    "[BOLD] 0.78",
                    "[BOLD] 0.85",
                    "[BOLD] 0.92",
                    "[BOLD] 0.99",
                    "100"
                ],
                [
                    "LSTM+att",
                    "0.74",
                    "0.82",
                    "0.91",
                    "[BOLD] 0.99",
                    "101"
                ],
                [
                    "BiLSTM+att",
                    "0.75",
                    "0.83",
                    "0.91",
                    "[BOLD] 0.99",
                    "93"
                ],
                [
                    "Rach et al. ( 2017 )",
                    "0.55",
                    "0.68",
                    "0.83",
                    "0.94",
                    "-"
                ],
                [
                    "Ultes et al. ( 2015 )",
                    "0.55",
                    "-",
                    "-",
                    "0.89",
                    "-"
                ]
            ]
        },
        "gold_description": "the results are presented in table 2 . the results in table 2 show very high performance , which is likely to further increase with ongoing training .",
        "generated_description": "we compare the proposed lstm - based variants with the previous state - of - the - art methods proposed by rach et al . as can be seen from the table , the bilstm model achieves the best performance in terms of uar , κ , ρ , and ea , with a perfect overlap between the train and test sets . this is due to the fact that there are many overlapping sub - dialogues in the test and train sets , which results in unrealistically high performance . in order to further analyze the performance of the proposed models , we also report the results of the lstms + att model , in which we concatenate the word embeddings of the question and the answer in the question , and feed them into a bilstm layer . we can see that the attention mechanism is able to further improve the performance , suggesting that the question - document relationship between the two sentences is beneficial for the final classification of the utterance ."
    },
    {
        "table_id": "93",
        "table_info": {
            "table_caption": "Table 8: Accuracy on ellipsis test set.",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] ellipsis (infl.)",
                "[BOLD] ellipsis (VP)"
            ],
            "table_content_values": [
                [
                    "baseline",
                    "53.0",
                    "28.4"
                ],
                [
                    "concat",
                    "[BOLD] 76.2",
                    "76.6"
                ],
                [
                    "s-hier-to-2.tied",
                    "66.4",
                    "65.6"
                ],
                [
                    "CADec",
                    "72.2",
                    "[BOLD] 80.0"
                ]
            ]
        },
        "gold_description": "for ellipsis , both models improve substantially over the baseline ( by 19 - 51 percentage points ) , with concat stronger for inflection tasks and cadec stronger for vpellipsis .",
        "generated_description": "the concatenation model concatenates the output of the concatenated encoder and decoder , and the s - hier - to - 2 . tied model performs slightly better than concat on both ellipsis ( infl . ) and vice versa . cadec outperforms the other two models by a large margin , achieving 80 . 0 % accuracy on the vp ellipsoids , which is the new state of the art ."
    },
    {
        "table_id": "94",
        "table_info": {
            "table_caption": "Table 3: Performance of the proposed LSTM-based variants with the dialogue-wise cross-validation setup. The models by Rach et al. (2017) and Ultes et al. (2015) have been re-implemented. The BiLSTM with attention mechanism performs best in all evaluation metrics.",
            "table_column_names": [
                "[EMPTY]",
                "[ITALIC] UAR",
                "[ITALIC] κ",
                "[ITALIC] ρ",
                "[ITALIC] eA",
                "[ITALIC] Ep."
            ],
            "table_content_values": [
                [
                    "LSTM",
                    "0.51",
                    "0.63",
                    "0.78",
                    "0.93",
                    "8"
                ],
                [
                    "BiLSTM",
                    "0.53",
                    "0.63",
                    "0.78",
                    "0.93",
                    "8"
                ],
                [
                    "LSTM+att",
                    "0.52",
                    "0.63",
                    "0.79",
                    "0.92",
                    "40"
                ],
                [
                    "BiLSTM+att",
                    "[BOLD] 0.54",
                    "[BOLD] 0.65",
                    "[BOLD] 0.81",
                    "[BOLD] 0.94",
                    "40"
                ],
                [
                    "Rach et al. ( 2017 )",
                    "0.45",
                    "0.58",
                    "0.79",
                    "0.88",
                    "82"
                ],
                [
                    "Ultes et al. ( 2015 )",
                    "0.44",
                    "0.53",
                    "0.69",
                    "0.86",
                    "-"
                ]
            ]
        },
        "gold_description": "all results of these experiments are presented in table 3 with the absolute improvement of the two main measures uar and ea over the svm - based approach",
        "generated_description": "we can see that the bilstm with the attention mechanism achieves the best performance in all evaluation metrics , outperforming the baseline lstm by a significant margin ."
    },
    {
        "table_id": "95",
        "table_info": {
            "table_caption": "Table 1: Evaluation of our models for NER performance with our dataset. We report F1-measure results over the test portion of our dataset averaged over 10 replications of the training with the same hyper parameters.",
            "table_column_names": [
                "This work Model",
                "This work Mean F1-measure"
            ],
            "table_content_values": [
                [
                    "ner",
                    "81.07"
                ],
                [
                    "joint1",
                    "81.28"
                ],
                [
                    "joint2",
                    "81.84"
                ],
                [
                    "j_multi",
                    "[BOLD] 83.21"
                ],
                [
                    "Previous work",
                    "Previous work"
                ],
                [
                    "ext_m_feat",
                    "[BOLD] 83.47"
                ]
            ]
        },
        "gold_description": "the results are shown in table 1 . we see that the mean ner performance increases in joint models . as one can see from the table , it achieved the best results compared to our joint models . however , we cannot confirm the difference between ext m feat and j multi models as the calculated p is well above . 05 .",
        "generated_description": "for the ner task , we report f1 - measure results over the test portion of our dataset averaged over 10 replications of the training with the same hyperparameters . we observe that the j_multi and ext_m_feat models perform slightly better than the vanilla ner and joint1 baselines , and slightly worse than the joint2 model . we also observe that our best performing model ( j_multi ) outperforms the previous work by a significant margin ."
    },
    {
        "table_id": "96",
        "table_info": {
            "table_caption": "Table 2: Evaluation of our models for MD performance. As in the NER evaluation, we report accuracies over the test dataset averaged over 10 replications of the training.",
            "table_column_names": [
                "This work Model",
                "This work Mean Accuracy"
            ],
            "table_content_values": [
                [
                    "md",
                    "88.61"
                ],
                [
                    "joint1",
                    "88.17"
                ],
                [
                    "joint2",
                    "86.86"
                ],
                [
                    "j_multi",
                    "88.05"
                ],
                [
                    "Previous work",
                    "Previous work"
                ],
                [
                    "yuret2006decision_lists",
                    "89.55"
                ],
                [
                    "shen2016role",
                    "[BOLD] 91.03"
                ]
            ]
        },
        "gold_description": "as can be seen from table 2 , we are very close to the state of the art md performance even if we only trained with a low number of parameters as stated in the beginning of this section . we have to also note that in contrast with the ner task , the md task did not enjoy a performance increase from joint learning .",
        "generated_description": "as in the ner evaluation , we report the mean accuracy over the test dataset averaged over 10 replications of the training . the multi - task model ( j_multi ) improves over the previous state - of - the - art by about 0 . 4 percentage points . the joint1 and joint2 models perform slightly worse than the single task model md , with the j_multi model slightly outperforming the joint1 model ."
    },
    {
        "table_id": "97",
        "table_info": {
            "table_caption": "Table 1: Performance of our models (bottom four) along with the state-of-the-art baseline models (top four). Baseline results for fastText, GloVe are obtained from Romanov and Shivade (2018). Adding knowledge graph information to the base models showed an absolute improvement of 4.97% in case of fastText and 1.36% in case of GloVe. The baseline model utilizing BioELMo as base embeddings Jin et al. (2019) showed an accuracy of 78.2%. On adding knowledge graph information, we were able to improve these results to 78.76% and on further addition of sentiment information, the accuracy rose to 79.04%",
            "table_column_names": [
                "Model",
                "Accuracy"
            ],
            "table_content_values": [
                [
                    "fastText",
                    "68.7%"
                ],
                [
                    "GloVe",
                    "73.1%"
                ],
                [
                    "[ITALIC] BioELMo Jin et al. ( 2019 )",
                    "78.2%"
                ],
                [
                    "[ITALIC] ESIMw/ [ITALIC] K Lu et al. ( 2019 )",
                    "77.8%"
                ],
                [
                    "fastText w/ KG+Sentiment",
                    "73.67%"
                ],
                [
                    "GloVe w/ KG+Sentiment",
                    "74.46%"
                ],
                [
                    "BioELMo w/ KG",
                    "78.76%"
                ],
                [
                    "[BOLD] BioELMo w/ KG+Sentiment",
                    "[BOLD] 79.04%"
                ]
            ]
        },
        "gold_description": "we report accuracy as the performance metric . table 1 represents the performance comparison of our proposed models and the baselines , which shows that incorporation of knowledge graph embeddings helps to improve the model performance . all results are summarized in table 1 .",
        "generated_description": "as can be seen from the table , adding knowledge graph information to the base models showed an absolute improvement of 4 . 97 % in case of fasttext and 1 . 36 % of glove in the case of bioelmo . we were able to improve these results to 78 . 76 % and 79 . 04 % with kg + sentiment respectively . the baseline model utilizing bioelmo as base embeddings lu et al . however , adding kg and sentiment vectors did not improve the results compared to the baseline model ."
    },
    {
        "table_id": "98",
        "table_info": {
            "table_caption": "Table 9: Results for different probabilities of using corrupted reference at training time. BLEU for 3 context sentences. For ellipsis, we show inflection/VP scores.",
            "table_column_names": [
                "[ITALIC] p",
                "[BOLD] BLEU",
                "[BOLD] deixis",
                "[BOLD] lex. c.",
                "[BOLD] ellipsis"
            ],
            "table_content_values": [
                [
                    "[ITALIC] p=0",
                    "32.34",
                    "84.1",
                    "48.7",
                    "65 / 75"
                ],
                [
                    "[ITALIC] p=0.25",
                    "32.31",
                    "83.3",
                    "52.4",
                    "67 / 78"
                ],
                [
                    "[ITALIC] p=0.5",
                    "32.38",
                    "81.6",
                    "58.1",
                    "72 / 80"
                ],
                [
                    "[ITALIC] p=0.75",
                    "32.45",
                    "80.0",
                    "65.0",
                    "70 / 80"
                ]
            ]
        },
        "gold_description": "results for different values of p are given in table 9 . all models have about the same bleu , not statistically significantly different from the baseline , but they are quite different in terms of incorporating context . the denoising positively influences almost all tasks except for deixis , yielding the largest improvement on lexical cohesion .",
        "generated_description": "for deixis , lexical dependency and ellipsis , we show inflection / vp scores . we see that p = 0 . 25 leads to the best performance for all three context sentences . for lexicon dependency , we see that the score increases from 84 . 1 to 83 . 3 as p increases from 0 . 25 to 0 . 5 . for ellipsissis and inflection , the scores increase from 65 . 0 to 72 . 1 and 80 . 0 respectively as p rises from 72 to 80 . we show the inflection and vp scores for the 3 context sentences for which we have the corrupted reference at training time ."
    },
    {
        "table_id": "99",
        "table_info": {
            "table_caption": "Table 5: The accuracy of the traditional classifier in Phase 2 given documents from seen classes only.",
            "table_column_names": [
                "Dataset Input ∖ Unseen rate",
                "DBpedia 50%",
                "DBpedia 25%",
                "20news 50%",
                "20news 25%"
            ],
            "table_content_values": [
                [
                    "[ITALIC] vw",
                    "0.993",
                    "0.992",
                    "0.878",
                    "0.861"
                ]
            ]
        },
        "gold_description": "the purpose of table 5 is to show that the traditional cnn classifier in phase 2 was highly accurate .",
        "generated_description": "in phase 2 , we evaluate the performance of the traditional classifier given documents from seen classes only . to this end , we randomly sample 50 % and 25 % documents from the training set of 20news and dbpedia respectively from the seen classes and ask the classifier to predict the unseen classes based on their frequency in the training data . for dbpedia , we use 50 % of the whole training set as the test set and the remaining as the validation set . for 20news , we only use 25 % as the testing set due to the limited number of documents in the dataset . the results show that the model is able to generalize better to unseen classes than to seen classes by taking into account the distribution of words in the documents ."
    },
    {
        "table_id": "100",
        "table_info": {
            "table_caption": "Table 1: Macro-averaged P/R/F1 on the dev set for the entity typing task of Choi et al. (2018) comparing various systems. ELMo gives a substantial improvement over baselines. Over an ELMo-equipped model, data augmentation using the method of Choi et al. (2018) gives no benefit. However, our denoising technique allow us to effectively incorporate distant data, matching the results of a BERT model on this task Devlin et al. (2018).",
            "table_column_names": [
                "Model",
                "Total P",
                "Total R",
                "Total F1",
                "General P",
                "General R",
                "General F1",
                "Fine P",
                "Fine R",
                "Fine F1",
                "Ultra-Fine P",
                "Ultra-Fine R",
                "Ultra-Fine F1"
            ],
            "table_content_values": [
                [
                    "Ours + GloVe w/o augmentation",
                    "46.4",
                    "23.3",
                    "31.0",
                    "57.7",
                    "65.5",
                    "61.4",
                    "41.3",
                    "31.3",
                    "35.6",
                    "42.4",
                    "9.2",
                    "15.1"
                ],
                [
                    "Ours + ELMo w/o augmentation",
                    "[BOLD] 55.6",
                    "28.1",
                    "37.3",
                    "[BOLD] 69.3",
                    "77.3",
                    "73.0",
                    "[BOLD] 47.9",
                    "35.4",
                    "40.7",
                    "[BOLD] 48.9",
                    "12.6",
                    "20.0"
                ],
                [
                    "Ours + ELMo w augmentation",
                    "55.2",
                    "26.4",
                    "35.7",
                    "69.4",
                    "72.0",
                    "70.7",
                    "46.6",
                    "38.5",
                    "42.2",
                    "48.7",
                    "10.3",
                    "17.1"
                ],
                [
                    "Ours + ELMo w augmentation",
                    "50.7",
                    "[BOLD] 33.1",
                    "[BOLD] 40.1",
                    "66.9",
                    "[BOLD] 80.7",
                    "73.2",
                    "41.7",
                    "46.2",
                    "43.8",
                    "45.6",
                    "[BOLD] 17.4",
                    "[BOLD] 25.2"
                ],
                [
                    "+ filter & relabel",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "BERT-Base, Uncased",
                    "51.6",
                    "32.8",
                    "[BOLD] 40.1",
                    "67.4",
                    "80.6",
                    "[BOLD] 73.4",
                    "41.6",
                    "[BOLD] 54.7",
                    "[BOLD] 47.3",
                    "46.3",
                    "15.6",
                    "23.4"
                ],
                [
                    "Choi et al. ( 2018 ) w augmentation",
                    "48.1",
                    "23.2",
                    "31.3",
                    "60.3",
                    "61.6",
                    "61.0",
                    "40.4",
                    "38.4",
                    "39.4",
                    "42.8",
                    "8.8",
                    "14.6"
                ]
            ]
        },
        "gold_description": "table 1 compares the performance of these systems on the development set . our model with no augmentation already matches the system of choi et al . ( 2018 ) with augmentation , and incorporating elmo gives further gains on both precision and recall . on top of this model , adding the distantly - annotated data lowers the performance ; the loss function - based approach of ( choi et al . , 2018 ) does not sufficiently mitigate the noise in this data . however , denoising makes the distantlyannotated data useful , improving recall by a substantial margin especially in the general class . bert performs similarly to elmo with denoised distant data . as can be seen in the performance breakdown , bert gains from improvements in recall in the fine class .",
        "generated_description": "we evaluate the performance of our model with and without data augmentation on the conll - 2005 test set . we report precision , recall and f1 scores for the total , fine - grained , and even the ultra - fine class . we also report the performance for the general and the fine – grained classes . we observe that our model achieves the best performance for all the classes . in particular , our model outperforms the baseline model with elmo embeddings by a large margin for the fine and the ultra - fine classes . this shows that our enhanced elmo encoder can enhance the semantic representations learned by the pre - trained word embedding ."
    },
    {
        "table_id": "101",
        "table_info": {
            "table_caption": "Table 2: Macro-averaged P/R/F1 on the test set for the entity typing task of Choi et al. (2018). Our denoising approach gives substantial gains over naive augmentation and matches the performance of a BERT model.",
            "table_column_names": [
                "Model",
                "P",
                "R",
                "F1"
            ],
            "table_content_values": [
                [
                    "Ours + GloVe w/o augmentation",
                    "47.6",
                    "23.3",
                    "31.3"
                ],
                [
                    "Ours + ELMo w/o augmentation",
                    "[BOLD] 55.8",
                    "27.7",
                    "37.0"
                ],
                [
                    "Ours + ELMo w augmentation",
                    "55.5",
                    "26.3",
                    "35.7"
                ],
                [
                    "Ours + ELMo w augmentation",
                    "51.5",
                    "[BOLD] 33.0",
                    "[BOLD] 40.2"
                ],
                [
                    "+ filter & relabel",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "BERT-Base, Uncased",
                    "51.6",
                    "[BOLD] 33.0",
                    "[BOLD] 40.2"
                ],
                [
                    "Choi et al. ( 2018 ) w augmentation",
                    "47.1",
                    "24.2",
                    "32.0"
                ],
                [
                    "LabelGCN Xiong et al. ( 2019 )",
                    "50.3",
                    "29.2",
                    "36.9"
                ]
            ]
        },
        "gold_description": "table 2 shows the performance of all settings on the test set , with the same trend as the performance on the development set . our approach outperforms the concurrently - published xiong et al . ( 2019 ) ;",
        "generated_description": "our denoising approach gives substantial improvements over the baseline , and matches the performance of a bert model xiong et al . the bert - base model , which uses glove embeddings and elmo representations , achieves a f1 score of 33 . 0 on the test set , matching the best published performance of choi et al . , choi et al ."
    },
    {
        "table_id": "102",
        "table_info": {
            "table_caption": "Table 3: Macro-averaged P/R/F1 on the dev set for the entity typing task of Choi et al. (2018) with various types of augmentation added. The customized loss from Choi et al. (2018) actually causes a decrease in performance from adding any of the datasets. Heuristics can improve incorporation of this data: a relabeling heuristic (Pair) helps on HEAD and a filtering heuristic (Overlap) is helpful in both settings. However, our trainable filtering and relabeling models outperform both of these techniques.",
            "table_column_names": [
                "Type",
                "Denoising Method",
                "EL&HEAD P",
                "EL&HEAD R",
                "EL&HEAD F1",
                "EL P",
                "EL R",
                "EL F1",
                "HEAD P",
                "HEAD R",
                "HEAD F1"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "Raw Data",
                    "[BOLD] 55.2",
                    "26.4",
                    "35.7",
                    "52.3",
                    "26.1",
                    "34.8",
                    "[BOLD] 52.8",
                    "28.4",
                    "36.9"
                ],
                [
                    "Heuristic Baselines",
                    "Synonyms&Hypernyms",
                    "43.0",
                    "30.0",
                    "35.3",
                    "47.5",
                    "26.3",
                    "33.9",
                    "44.8",
                    "31.7",
                    "37.1"
                ],
                [
                    "[EMPTY]",
                    "Pair",
                    "50.2",
                    "29.0",
                    "36.8",
                    "49.6",
                    "27.0",
                    "35.0",
                    "50.6",
                    "31.2",
                    "38.6"
                ],
                [
                    "[EMPTY]",
                    "Overlap",
                    "50.0",
                    "32.3",
                    "39.2",
                    "49.5",
                    "[BOLD] 30.8",
                    "38.0",
                    "50.6",
                    "31.4",
                    "38.7"
                ],
                [
                    "Proposed Approach",
                    "Filter",
                    "53.1",
                    "28.2",
                    "36.8",
                    "51.9",
                    "26.5",
                    "35.1",
                    "51.2",
                    "31.2",
                    "38.7"
                ],
                [
                    "[EMPTY]",
                    "Relabel",
                    "52.1",
                    "32.2",
                    "39.8",
                    "50.2",
                    "31.4",
                    "38.6",
                    "50.2",
                    "31.8",
                    "38.9"
                ],
                [
                    "[EMPTY]",
                    "Filter&Relabel",
                    "50.7",
                    "[BOLD] 33.1",
                    "[BOLD] 40.1",
                    "[BOLD] 52.7",
                    "30.5",
                    "[BOLD] 38.7",
                    "50.7",
                    "[BOLD] 32.1",
                    "[BOLD] 39.3"
                ],
                [
                    "[EMPTY]",
                    "Choi et al. ( 2018 )",
                    "48.1",
                    "23.2",
                    "31.3",
                    "50.3",
                    "19.6",
                    "28.2",
                    "48.4",
                    "22.3",
                    "30.6"
                ]
            ]
        },
        "gold_description": "table 3 compares the results on the development set . on top of the baseline original , adding synonyms and hypernyms by consulting external knowledge does not improve the performance . the pair technique results in small gains over original . overlap is the most ef fective heuristic technique . this simple heuristic improves recall on el . filter , gives similar improvements to pair and overlap on the head setting , relabel and overlap both improve performance on both el and head while other methods do poorly on el . filter & relabel outperforms all the baselines .",
        "generated_description": "the results show that the best f1 - scores are achieved using the raw data for both el and head . the best performing heuristic method is the synonyms & hypernyms method , which achieves 35 . 3 % in terms of f1 for el and 34 . 8 % for head . for the other types of denoising methods , we find that the overlap method achieves the best performance for el , while the pair method performs the best for head , and the filter method obtains the best results for el & head . overall , the proposed method outperforms the other heuristic methods by a large margin ."
    },
    {
        "table_id": "103",
        "table_info": {
            "table_caption": "Table 4: Test results on OntoNotes. Denoising helps substantially even in this reduced setting. Using fewer distant examples, we nearly match the performance using the data from Choi et al. (2018) (see text).",
            "table_column_names": [
                "Model",
                "Acc.",
                "Ma-F1",
                "Mi-F1"
            ],
            "table_content_values": [
                [
                    "Ours + ELMo w/o augmentation",
                    "42.7",
                    "72.7",
                    "66.7"
                ],
                [
                    "Ours + ELMo w augmentation",
                    "59.3",
                    "76.5",
                    "70.7"
                ],
                [
                    "Ours + ELMo w augmentation",
                    "63.9",
                    "[BOLD] 84.5",
                    "78.9"
                ],
                [
                    "+ filter & relabel",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Ours + ELMo w augmentation",
                    "[BOLD] 64.9",
                    "[BOLD] 84.5",
                    "[BOLD] 79.2"
                ],
                [
                    "by Choi et al. ( 2018 )",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "BERT-Base, Uncased",
                    "51.8",
                    "76.6",
                    "69.1"
                ],
                [
                    "Shimaoka et al. ( 2017 )",
                    "51.7",
                    "70.9",
                    "64.9"
                ],
                [
                    "AFET Ren et al. ( 2016a )",
                    "55.1",
                    "71.1",
                    "64.7"
                ],
                [
                    "PLE Ren et al. ( 2016b )",
                    "57.2",
                    "71.5",
                    "66.1"
                ],
                [
                    "Choi et al. ( 2018 )",
                    "59.5",
                    "76.8",
                    "71.8"
                ],
                [
                    "LabelGCN Xiong et al. ( 2019 )",
                    "59.6",
                    "77.8",
                    "72.2"
                ]
            ]
        },
        "gold_description": "table 4 lists the results on the ontonotes test set following the adaptation setting of choi et al . ( 2018 ) . denoising significantly improves over naive incorporation of distant data , bert still performs well but not as well as our model with augmented training data .",
        "generated_description": "we compare our model with the current state - of - the - art results in terms of accuracy , macro - averaged f1 score , as well as the manually annotated mi - f1 score . our model with and without the elmo embeddings outperforms the previous state of the art by a large margin , achieving an accuracy of 64 . 9 % and an f1 of 84 . 5 % on the test set . we observe that the performance improves with the help of both the data augmentation and the pre - training of elmo ."
    },
    {
        "table_id": "104",
        "table_info": {
            "table_caption": "Table 5: The average number of types added or deleted by the relabeling function per example. The right-most column shows that the rate of examples discarded by the filtering function.",
            "table_column_names": [
                "Data",
                "General Add",
                "General Del",
                "Fine Add",
                "Fine Del",
                "Ultra-Fine Add",
                "Ultra-Fine Del",
                "Filter (%)"
            ],
            "table_content_values": [
                [
                    "EL",
                    "0.87",
                    "0.01",
                    "0.36",
                    "0.17",
                    "2.03",
                    "0.12",
                    "9.4"
                ],
                [
                    "HEAD",
                    "1.18",
                    "0.00",
                    "0.51",
                    "0.01",
                    "1.15",
                    "0.16",
                    "10.0"
                ]
            ]
        },
        "gold_description": "table 5 reports the average numbers of types added / deleted by the relabeling function and the ratio of examples discarded by the filtering function . the head examples have more general types added than the el examples since the noisy head labels are typically finer . fine - grained types are added to both el and head examples less frequently . ultra - fine examples are frequently added to both datasets , with more added to el ; the filtering function discards similar numbers of examples for the el and head data : 9 . 4 % and 10 % respectively .",
        "generated_description": "the relabeling function deletes the most types for both el and head , with the fine - grained examples being discarded more than 90 % of the time . however , the ratio of discarded types is higher for the ultra - fine examples , which is expected as the fine grained examples are more visually distinct from the original examples . the filtering function tends to delete more types for the el examples , but not the head ones ."
    },
    {
        "table_id": "105",
        "table_info": {
            "table_caption": "Table 1: Properties of the Ubuntu and Samsung QA dataset. The message and response are {context}, {response} in Ubuntu and {question}, {answer} in the Samsung QA dataset.",
            "table_column_names": [
                "[BOLD] Dataset",
                "[BOLD] # Samples Train",
                "[BOLD] # Samples Val.",
                "[BOLD] # Samples Test",
                "[BOLD] Message (Avg.) # tokens",
                "[BOLD] Message (Avg.) # groups",
                "[BOLD] Message (Avg.) # tokens /group",
                "[BOLD] Response (Avg.) # tokens",
                "[BOLD] Response (Avg.) # groups",
                "[BOLD] Response (Avg.) # tokens /group"
            ],
            "table_content_values": [
                [
                    "Ubuntu-v1",
                    "1M",
                    "35,609",
                    "35,517",
                    "162.47 ±132.47",
                    "8.43 ±6.32",
                    "20.14 ±18.41",
                    "14.44 ±13.93",
                    "1",
                    "-"
                ],
                [
                    "Ubuntu-v2",
                    "1M",
                    "19,560",
                    "18,920",
                    "85.92 ±74.71",
                    "4.95 ±2.98",
                    "20.73 ±20.19",
                    "17.01 ±16.41",
                    "1",
                    "-"
                ],
                [
                    "Samsung QA",
                    "163,616",
                    "10,000",
                    "10,000",
                    "12.84 ±6.42",
                    "1",
                    "-",
                    "173.48 ±192.12",
                    "6.09 ±5.58",
                    "29.28 ±31.91"
                ]
            ]
        },
        "gold_description": "we found that it still showed a limitation when we consider very large sequential length data such as 162 steps average in the ubuntu dialogue corpus dataset ( see table 1 ) . table 1 shows properties of the ubuntu dataset . we generated ( { question } , { answer } , flag ) triples ( see table 1 ) . the maximum time step for calculating gradient of the rnn is determined according to the input data statistics in table 1 .",
        "generated_description": "datasets . we use the ubuntu - v1 and samsung qa datasets to evaluate the performance of our model . the dataset contains 1m and 163k samples for training and validation , respectively . the size of the training set and the validation set are the same for both the models . the training set is used to tune the hyper - parameters of the model for the best performance on the validation and test sets . the model is trained on 1m training samples and tested on the remaining 1m samples . the response is composed by a set of tokens extracted from the context and the response of the question ."
    },
    {
        "table_id": "106",
        "table_info": {
            "table_caption": "Table 3: Model performance results for the Ubuntu-v1 dataset. Models [1-4] are from Lowe et al. (2015); Kadlec et al. (2015); Wang and Jiang (2016); Wang et al. (2017), respectively.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Ubuntu-v1 1 in 2R@1",
                "[BOLD] Ubuntu-v1 1 in 10R@1",
                "[BOLD] Ubuntu-v1 1 in 10R@2",
                "[BOLD] Ubuntu-v1 1 in 10R@5"
            ],
            "table_content_values": [
                [
                    "TF-IDF [1]",
                    "0.659",
                    "0.410",
                    "0.545",
                    "0.708"
                ],
                [
                    "CNN [2]",
                    "0.848",
                    "0.549",
                    "0.684",
                    "0.896"
                ],
                [
                    "LSTM [2]",
                    "0.901",
                    "0.638",
                    "0.784",
                    "0.949"
                ],
                [
                    "CompAgg [3]",
                    "0.884",
                    "0.631",
                    "0.753",
                    "0.927"
                ],
                [
                    "BiMPM [4]",
                    "0.897",
                    "0.665",
                    "0.786",
                    "0.938"
                ],
                [
                    "RDE",
                    "0.898 ±0.002",
                    "0.643 ±0.009",
                    "0.784 ±0.007",
                    "0.945 ±0.002"
                ],
                [
                    "RDE-LTC",
                    "0.903 ±0.001",
                    "0.656 ±0.003",
                    "0.794 ±0.003",
                    "0.948 ±0.001"
                ],
                [
                    "HRDE",
                    "0.915 ±0.001",
                    "0.681 ±0.001",
                    "0.820 ±0.001",
                    "0.959 ±0.001"
                ],
                [
                    "HRDE-LTC",
                    "[BOLD] 0.916 ±0.001",
                    "[BOLD] 0.684 ±0.001",
                    "[BOLD] 0.822 ±0.001",
                    "[BOLD] 0.960 ±0.001"
                ]
            ]
        },
        "gold_description": "as table 3 shows , our proposed hrde and hrde - ltc models achieve the best performance for the ubuntu - v1 dataset . we also find that the rde - ltc model shows improvements from the baseline model , rde .",
        "generated_description": "our proposed hrde model consistently outperforms all the baseline models on all the metrics , with significant improvements over the rde , rde - ltc , and hrde - dnn baselines on most of the datasets . hrde achieves the best results on the 2r @ 1 and 10r @ 5 metrics , and is comparable to the best performing baseline model compagg on the 1 in 1 in10r @ 2 metric . on the other hand , hrde outperforms compagg and bimpm by a large margin on all metrics . the performance of hrde is slightly worse than that of compagg , which may be due to the fact that compagg is trained with a large number of hand - crafted features ."
    },
    {
        "table_id": "107",
        "table_info": {
            "table_caption": "Table 4: Model performance results for the Ubuntu-v2 dataset. Models [1,3-6] are from Lowe et al. (2015); Wang and Jiang (2016); Wang et al. (2017); Baudiš et al. (2016); Tan et al. (2015), respectively.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Ubuntu-v2 1 in 2R@1",
                "[BOLD] Ubuntu-v2 1 in 10R@1",
                "[BOLD] Ubuntu-v2 1 in 10R@2",
                "[BOLD] Ubuntu-v2 1 in 10R@5"
            ],
            "table_content_values": [
                [
                    "LSTM [1]",
                    "0.869",
                    "0.552",
                    "0.721",
                    "0.924"
                ],
                [
                    "RNN [5]",
                    "0.907 ±0.002",
                    "0.664 ±0.004",
                    "0.799 ±0.004",
                    "0.951 ±0.001"
                ],
                [
                    "CNN [5]",
                    "0.863 ±0.003",
                    "0.587 ±0.004",
                    "0.721 ±0.005",
                    "0.907 ±0.003"
                ],
                [
                    "RNN-CNN [5]",
                    "0.911 ±0.001",
                    "[BOLD] 0.672 ±0.002",
                    "0.809 ±0.002",
                    "0.956 ±0.001"
                ],
                [
                    "Attention \\scriptsize{[6]}(RNN-CNN)",
                    "0.903 ±0.002",
                    "0.653 ±0.005",
                    "0.788 ±0.005",
                    "0.945 ±0.002"
                ],
                [
                    "CompAgg [3]",
                    "0.895",
                    "0.641",
                    "0.776",
                    "0.937"
                ],
                [
                    "BiMPM [4]",
                    "0.877",
                    "0.611",
                    "0.747",
                    "0.921"
                ],
                [
                    "RDE",
                    "0.894 ±0.002",
                    "0.610 ±0.008",
                    "0.776 ±0.006",
                    "0.947 ±0.002"
                ],
                [
                    "RDE-LTC",
                    "0.899 ±0.002",
                    "0.625 ±0.004",
                    "0.788 ±0.004",
                    "0.951 ±0.001"
                ],
                [
                    "HRDE",
                    "0.914 ±0.001",
                    "0.649 ±0.001",
                    "0.813 ±0.001",
                    "0.964 ±0.001"
                ],
                [
                    "HRDE-LTC",
                    "[BOLD] 0.915 ±0.002",
                    "0.652 ±0.003",
                    "[BOLD] 0.815 ±0.001",
                    "[BOLD] 0.966 ±0.001"
                ]
            ]
        },
        "gold_description": "table 4 reveals that the hrde - ltc model is best for three cases ( 1 in 2 r @ 1 , 1 in 10 r @ 2 and 1 in 10 r @ 5 ) . we see improvements from the rde model to the hrde model and additional improvements with the ltc module in all test cases ( the ubuntuv1 / v2 and the samsung qa ) .",
        "generated_description": "our model outperforms all the baseline models on 2r @ 1 and 10r @ 5 , and achieves comparable results on the rest of metrics . compagg [ 3 ] and compagg [ 4 ] are the best baseline models for 1 in and 2 in - dataset , respectively . on the other hand , lstm [ 1 ] , rnn [ 5 ] , cnn [ 5 ] and rnn - cnn [ 5 ] outperform compagg and our model on all the metrics . our attention based model ( attention \\ scriptsize { [ 6 ] } ( rnn - conv ) ) outperforms compagg by a large margin ."
    },
    {
        "table_id": "108",
        "table_info": {
            "table_caption": "Table 5: Model performance results for the Samsung QA dataset.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Samsung QA 1 in 2R@1",
                "[BOLD] Samsung QA 1 in 10R@1",
                "[BOLD] Samsung QA 1 in 10R@2",
                "[BOLD] Samsung QA 1 in 10R@5"
            ],
            "table_content_values": [
                [
                    "TF-IDF",
                    "0.939",
                    "0.834",
                    "0.897",
                    "0.953"
                ],
                [
                    "RDE",
                    "0.978 ±0.002",
                    "0.869 ±0.009",
                    "0.966 ±0.003",
                    "0.997 ±0.001"
                ],
                [
                    "RDE-LTC",
                    "0.981 ±0.002",
                    "0.880 ±0.009",
                    "0.970 ±0.003",
                    "0.997 ±0.001"
                ],
                [
                    "HRDE",
                    "0.981 ±0.002",
                    "0.885 ±0.011",
                    "0.971 ±0.004",
                    "0.997 ±0.001"
                ],
                [
                    "HRDE-LTC",
                    "[BOLD] 0.983 ±0.002",
                    "[BOLD] 0.890 ±0.010",
                    "[BOLD] 0.972 ±0.003",
                    "[BOLD] 0.998 ±0.001"
                ]
            ]
        },
        "gold_description": "table 5 indicates the proposed rde - ltc , hrde , and the that hrde - ltc model show performance improvements when compared to the baseline model , tfidf and rde .",
        "generated_description": "we can see that the proposed hrde - ltc outperforms all the baseline models in terms of all the metrics . it is worth noting that the tf - idf and rde models do not perform as well as the proposed models . this is because the samsung qa dataset does not have a large number of short answers in the training set , which makes it hard for them to capture the semantic similarity between the short answer and the long answer . in contrast , the proposed rde and hrde models are able to capture this semantic similarity better ."
    },
    {
        "table_id": "109",
        "table_info": {
            "table_caption": "Table 2: Comparison of our model with the baselines. “*” is our QG module.",
            "table_column_names": [
                "Model",
                "BLEU-1",
                "BLEU-2",
                "BLEU-3",
                "BLEU-4",
                "METEOR",
                "ROUGE-L"
            ],
            "table_content_values": [
                [
                    "Zhou et al. ( 2017 )",
                    "-",
                    "-",
                    "-",
                    "13.29",
                    "-",
                    "-"
                ],
                [
                    "Zhao et al. ( 2018 )*",
                    "45.69",
                    "29.58",
                    "22.16",
                    "16.85",
                    "20.62",
                    "44.99"
                ],
                [
                    "Kim et al. ( 2019 )",
                    "-",
                    "-",
                    "-",
                    "16.17",
                    "-",
                    "-"
                ],
                [
                    "Liu et al. ( 2019 )",
                    "46.58",
                    "30.90",
                    "22.82",
                    "17.55",
                    "21.24",
                    "44.53"
                ],
                [
                    "[BOLD] IWAQG",
                    "[BOLD] 47.69",
                    "[BOLD] 32.24",
                    "[BOLD] 24.01",
                    "[BOLD] 18.53",
                    "[BOLD] 22.33",
                    "[BOLD] 46.94"
                ]
            ]
        },
        "gold_description": "our model outperforms all other models in all the metrics . this improvement is consistent , around 2 % .",
        "generated_description": "we compare our model with the state - of - the - art models in terms of bleu - 1 to bleus - 4 , meteor , and rouge - l scores . our model outperforms all the baselines on all the metrics , which demonstrates the effectiveness of our qg module ."
    },
    {
        "table_id": "110",
        "table_info": {
            "table_caption": "Table 3: Performance of the QG model with respect to the accuracy of the interrogative-word classifier. “*” is our implementation of the QG module without our interrogative-word classifier Zhao et al. (2018).",
            "table_column_names": [
                "Accuracy",
                "BLEU-1",
                "BLEU-2",
                "BLEU-3",
                "BLEU-4",
                "METEOR",
                "ROUGE-L"
            ],
            "table_content_values": [
                [
                    "[BOLD] Only QG*",
                    "[BOLD] 45.63",
                    "[BOLD] 30.43",
                    "[BOLD] 22.51",
                    "[BOLD] 17.30",
                    "[BOLD] 21.06",
                    "[BOLD] 45.42"
                ],
                [
                    "60%",
                    "45.80",
                    "30.61",
                    "22.57",
                    "17.30",
                    "21.47",
                    "44.70"
                ],
                [
                    "70%",
                    "47.05",
                    "31.62",
                    "23.46",
                    "18.05",
                    "22.00",
                    "45.88"
                ],
                [
                    "[BOLD] IWAQG (73.8%)",
                    "[BOLD] 47.69",
                    "[BOLD] 32.24",
                    "[BOLD] 24.01",
                    "[BOLD] 18.53",
                    "[BOLD] 22.33",
                    "[BOLD] 46.94"
                ],
                [
                    "80%",
                    "48.11",
                    "32.36",
                    "24.00",
                    "18.42",
                    "22.43",
                    "47.22"
                ],
                [
                    "90%",
                    "49.33",
                    "33.43",
                    "24.91",
                    "19.20",
                    "22.98",
                    "48.41"
                ],
                [
                    "[BOLD] Upper Bound (100%)",
                    "[BOLD] 50.51",
                    "[BOLD] 34.28",
                    "[BOLD] 25.60",
                    "[BOLD] 19.75",
                    "[BOLD] 23.45",
                    "[BOLD] 49.65"
                ]
            ]
        },
        "gold_description": "table 3 and figure 3 show a linear relationship between the accuracy of the classifier and the iwaqg . this demonstrates the effectiveness of our pipelined approach regardless of the interrogative - word classifier model .",
        "generated_description": "we can see that the iwaqg model outperforms the qg model by a significant margin in terms of bleu - 4 , meteor , and rouge - l scores . however , the difference is not statistically significant according to paired t - test with p - value < 0 . 05 ."
    },
    {
        "table_id": "111",
        "table_info": {
            "table_caption": "Table 4: Recall of interrogative words of the QG model. “*” is our implementation of the QG module without our interrogative-word classifier Zhao et al. (2018).",
            "table_column_names": [
                "Model",
                "What",
                "Which",
                "Where",
                "When",
                "Who",
                "Why",
                "How",
                "Others",
                "Total"
            ],
            "table_content_values": [
                [
                    "Only QG*",
                    "82.24%",
                    "0.29%",
                    "51.90%",
                    "60.82%",
                    "68.34%",
                    "12.66%",
                    "60.62%",
                    "2.13%",
                    "68.29%"
                ],
                [
                    "IWAQG",
                    "87.66%",
                    "1.46%",
                    "66.24%",
                    "49.41%",
                    "76.41%",
                    "50.63%",
                    "70.26%",
                    "14.89%",
                    "74.10%"
                ],
                [
                    "Upper Bound",
                    "99.87%",
                    "99.71%",
                    "100.00%",
                    "99.71%",
                    "99.84%",
                    "98.73%",
                    "99.67%",
                    "89.36%",
                    "99.72%"
                ]
            ]
        },
        "gold_description": "we analyze the recall of the interrogative words generated by our pipelined system . as shown in the table 4 , the total recall of using only the qg module is 68 . 29 % , while the recall of our proposed system , iwaqg , is 74 . 10 % , an improvement of almost 6 % . furthermore , if we assume a perfect interrogative - word classifier , the recall would be 99 . 72 % , a dramatic improvement which proves the validity of our hypothesis .",
        "generated_description": "we can see that the qg model with our proposed iwaqg achieves 87 . 66 % recall of the what , which , when , when , who , why , how , and others questions , which is significantly higher than that of qg without our interrogative - word classifier ( i . e . , “ only qg ” ) . the recall of other questions is much lower , which indicates that our qg module is not able to correctly identify the why and others questions . however , the overall accuracy of the qgg model is much higher than the previous state - of - the - art qg models . the qg “ upper bound ” model achieves 99 . 87 % recall which is close to the upper bound ( 99 . 87 % ) of the previous best qg - based model . the “ what ” and “ which ” questions require more information than the other questions , and the “ why ” question requires more information . the overall accuracy is slightly lower than the ” high bounds ” , which means that we need more information from the question to answer the questions . the reason for the lower performance of “ qg * ” is that we do not use the classifier to distinguish between the different types of questions ."
    },
    {
        "table_id": "112",
        "table_info": {
            "table_caption": "Table 6: Ablation Study of our interrogative-word classifier.",
            "table_column_names": [
                "Classifier",
                "Accuracy"
            ],
            "table_content_values": [
                [
                    "CLS",
                    "56.0%"
                ],
                [
                    "CLS + NER",
                    "56.6%"
                ],
                [
                    "CLS + AE",
                    "70.3%"
                ],
                [
                    "CLS + AT",
                    "73.3%"
                ],
                [
                    "[BOLD] CLS + AT + NER",
                    "[BOLD] 73.8%"
                ]
            ]
        },
        "gold_description": "we tried to combine different features shown in table 6 for the interrogative - word classifier . the first model is only using the [ cls ] bert token embedding the second model is the previous one with the entity type of the answer as an additional feature . the performance of this model is a bit better than the first one but it is not enough to be utilized effectively for our pipeline . as we can see , the performance noticeably increased , which indicates that answer information is the key to predict the interrogative word needed . the fourth model , clearly outperforms the previous one , the fifth model is the same as the previous one but with the addition of the entitytype embedding of the answer . the combination of the three features ( answer , answer entity type , and passage ) yields to the best performance .",
        "generated_description": "ablation study of our classifier we perform an ablation study of our interrogative - word classifier to understand the contribution of each component of our system . we observe that : ( 1 ) adding adversarial training ( at ) and named - entity recognition ( ner ) improves the performance of the classifier by a small amount , which is consistent with our previous findings ; ( 2 ) adding both at and ner to the cls classifier ( cls + at + ner ) increases the performance by a large margin , which demonstrates the importance of the two techniques in our system ; ( 3 ) adding ae further improves the accuracy by about 2 % over the cls baseline ; ( 4 ) finally , the combination of all the components ( cls , at , ner , and ae ) achieves the best performance , which shows the effectiveness of each of them ."
    },
    {
        "table_id": "113",
        "table_info": {
            "table_caption": "Table 7: Recall and precision of interrogative words of our interrogative-word classifier.",
            "table_column_names": [
                "Class",
                "Recall",
                "Precision"
            ],
            "table_content_values": [
                [
                    "What",
                    "87.7%",
                    "76.0%"
                ],
                [
                    "Which",
                    "1.4%",
                    "38.0%"
                ],
                [
                    "Where",
                    "65.9%",
                    "55.8%"
                ],
                [
                    "When",
                    "49.2%",
                    "69.8%"
                ],
                [
                    "Who",
                    "76.9%",
                    "66.7%"
                ],
                [
                    "Why",
                    "50.1%",
                    "74.1%"
                ],
                [
                    "How",
                    "70.5%",
                    "79.0%"
                ],
                [
                    "Others",
                    "10.5%",
                    "57.0%"
                ]
            ]
        },
        "gold_description": "in addition , we provide the recall and precision per class for our final interrogative - word classifier ( cls + at + ner in table 7 ) . however , the recall of which is very low . our model has also problem with why lastly , the recall of ' when is also low",
        "generated_description": "our classifier achieves a recall of 87 . 7 % and a precision of 76 . 0 % on what , which , and when questions . the recall of the what class drops to 1 . 4 % and the precision of the which class is low , indicating that this class is by far the most difficult to predict . the overall performance of the classifier on the who and what classes is slightly better than the other classes , but the overall performance on the rest of the classes remains the same ."
    },
    {
        "table_id": "114",
        "table_info": {
            "table_caption": "Table 1: Statistics on forests generated with various γ (upper half) and K (lower half) on the development set.",
            "table_column_names": [
                "[ITALIC] γ",
                "#Edge/#Node",
                "LAS",
                "Conn. Ratio(%)"
            ],
            "table_content_values": [
                [
                    "0.05",
                    "2.09",
                    "92.5",
                    "100.0"
                ],
                [
                    "0.1",
                    "1.57",
                    "91.2",
                    "99.5"
                ],
                [
                    "0.2",
                    "1.34",
                    "90.5",
                    "94.2"
                ],
                [
                    "0.3",
                    "1.04",
                    "88.0",
                    "77.6"
                ],
                [
                    "[ITALIC] K",
                    "#Edge/#Node",
                    "LAS",
                    "Conn. Ratio(%)"
                ],
                [
                    "1",
                    "1.00",
                    "86.4",
                    "100.0"
                ],
                [
                    "2",
                    "1.03",
                    "87.3",
                    "100.0"
                ],
                [
                    "5",
                    "1.09",
                    "89.1",
                    "100.0"
                ],
                [
                    "10",
                    "1.14",
                    "89.8",
                    "100.0"
                ]
            ]
        },
        "gold_description": "table 1 demonstrates several characteristics of the generated forests of both the edgewise and kbesteisner algorithms in section 5 . 1 , where \" # edge / # sent \" measures the forest density with the number of edges divided by the sentence length , \" las \" represents the oracle las score on 100 biomedical sentences with manually annotated dependency trees , and \" conn . ratio ( % ) \" shows the percentage of forests where both related entity mentions are connected . regarding the forest density , forests produced by edgewise generally contain more edges than those from kbesteisner . for connectivity , kbesteisner guarantees to generate spanning forests . on the other hand , the connectivity ratio for the forests produced by edgewise drops when increasing the threshold γ . we can have more than 94 % being connected with γ ≤ 0 . 2 .",
        "generated_description": "the las and the conn . ratio of the resulting tree is almost 100 % for all values of γ . the number of edges and nodes in the forest is proportional to the number of nodes in each node , which means that the las value is almost the same for all the trees with different values of k . we can see that with increasing γ , the number and location of the nodes increases , which leads to an increase in las . however , as k increases , there is no significant change in the accuracy of the generated trees ."
    },
    {
        "table_id": "115",
        "table_info": {
            "table_caption": "Table 2: Test results of Biocreative VI CPR. † indicates previously reported numbers. ** means significant over DepTree at p<0.01 with 1000 bootstrap tests (Efron and Tibshirani, 1994).",
            "table_column_names": [
                "Model",
                "F1 score"
            ],
            "table_content_values": [
                [
                    "GRU+Attn (Liu et al.,  2017 )†",
                    "49.5"
                ],
                [
                    "Bran (Verga et al.,  2018 )†",
                    "50.8"
                ],
                [
                    "TextOnly",
                    "50.6"
                ],
                [
                    "DepTree",
                    "51.4"
                ],
                [
                    "KBestEisnerPS",
                    "**52.4**"
                ],
                [
                    "EdgewisePS",
                    "** [BOLD] 53.4**"
                ]
            ]
        },
        "gold_description": "table 2 shows the main comparison results on the biocreative cpr testset , with comparisons to the previous state - of - the - art and our baselines . textonly gives a performance comparable with bran . with 1 - best dependency trees , our deptree baseline gives better performances than the previous state of the art . both kbesteisnerps and edgewiseps obtain significantly higher numbers than deptree .",
        "generated_description": "we can see that both kbesteisnerps and edgewiseps significantly outperform the textonly baseline and the deptree baseline by a large margin , which indicates that the syntactic information extracted from the text itself is very useful for the task of biocreative vi cpr . furthermore , our model outperforms deptree by a significant margin ."
    },
    {
        "table_id": "116",
        "table_info": {
            "table_caption": "Table 3: Main results on PGR testest. † denotes previous numbers rounded into 3 significant digits. * and ** indicate significance over DepTree at p<0.05 and p<0.01 with 1000 bootstrap tests.",
            "table_column_names": [
                "Model",
                "F1 score"
            ],
            "table_content_values": [
                [
                    "BO-LSTM (Lamurias et al.,  2019 )†",
                    "52.3"
                ],
                [
                    "BioBERT (Lee et al.,  2019 )†",
                    "67.2"
                ],
                [
                    "TextOnly",
                    "76.0"
                ],
                [
                    "DepTree",
                    "78.9"
                ],
                [
                    "KBestEisnerPS",
                    "*83.6*"
                ],
                [
                    "EdgewisePS",
                    "** [BOLD] 85.7**"
                ]
            ]
        },
        "gold_description": "table 3 shows the comparison with previous work on the pgr testset , where our models are significantly better than the existing models . with 1 - best trees , deptree is 2 . 9 points better than textonly , both kbesteisnerps and edgewiseps significantly outperform deptr",
        "generated_description": "our final model , edgewiseps , outperforms the deptree baseline by 1 . 4 % in f1 score . we also compare our model with kbesteisnerps , the current state - of - the - art method on the pgr dataset , and find that our model also outperforms biobert , which is a strong baseline for this dataset ."
    },
    {
        "table_id": "117",
        "table_info": {
            "table_caption": "Table 4: Main results on SemEval-2010 task 8 testest. † denotes previous numbers.",
            "table_column_names": [
                "Model",
                "F1 score"
            ],
            "table_content_values": [
                [
                    "C-GCN (Zhang et al.,  2018b )†",
                    "84.8"
                ],
                [
                    "C-AGGCN (Guo et al.,  2019 )†",
                    "85.7"
                ],
                [
                    "DepTree",
                    "84.6"
                ],
                [
                    "KBestEisnerPS",
                    "85.8"
                ],
                [
                    "EdgewisePS",
                    "86.3"
                ]
            ]
        },
        "gold_description": "as shown in table 4 , we conduct a preliminary study on semeval - 2010 task 8 deptree achieves similar performance as cgcn and is slightly worse than c - aggcn , both kbesteisnerps and edgewiseps outperform deptree they show comparable and slightly better performances than c - aggcn . edgewiseps is better than kbesteisnerps ,",
        "generated_description": "we can see that both kbesteisnerps and edgewiseps outperform the state - of - the - art model c - gcn and c - aggcn by 0 . 8 % and 0 . 7 % respectively . the difference between the two models is statistically significant ( p - value < 0 . 01 ) . we can also see that the performance of deptree is slightly worse than that of our model ."
    },
    {
        "table_id": "118",
        "table_info": {
            "table_caption": "Table 1: Accuracy (%) of Hits@K on relations with training instances fewer than 100/200.",
            "table_column_names": [
                "Training Instances Hits@K (Macro)",
                "Training Instances Hits@K (Macro)",
                "<100 10",
                "<100 15",
                "<100 20",
                "<200 10",
                "<200 15",
                "<200 20"
            ],
            "table_content_values": [
                [
                    "CNN",
                    "+ATT",
                    "<5.0",
                    "<5.0",
                    "18.5",
                    "<5.0",
                    "16.2",
                    "33.3"
                ],
                [
                    "[EMPTY]",
                    "+HATT",
                    "5.6",
                    "31.5",
                    "57.4",
                    "22.7",
                    "43.9",
                    "65.1"
                ],
                [
                    "[EMPTY]",
                    "+KATT",
                    "[BOLD] 9.1",
                    "[BOLD] 41.3",
                    "[BOLD] 58.5",
                    "[BOLD] 23.3",
                    "[BOLD] 44.1",
                    "[BOLD] 65.4"
                ],
                [
                    "PCNN",
                    "+ATT",
                    "<5.0",
                    "7.4",
                    "40.7",
                    "17.2",
                    "24.2",
                    "51.5"
                ],
                [
                    "[EMPTY]",
                    "+HATT",
                    "29.6",
                    "51.9",
                    "61.1",
                    "41.4",
                    "60.6",
                    "68.2"
                ],
                [
                    "[EMPTY]",
                    "+KATT",
                    "[BOLD] 35.3",
                    "[BOLD] 62.4",
                    "[BOLD] 65.1",
                    "[BOLD] 43.2",
                    "[BOLD] 61.3",
                    "[BOLD] 69.2"
                ]
            ]
        },
        "gold_description": "from the results shown in table 1 , we observe that for both cnn and pcnn models , our model outperforms the plain attention model and the hatt model .",
        "generated_description": "we can see that katt consistently outperforms the baseline models for different sizes of training instances . for example , when there are only 100 training instances , the relative improvement of hits @ 10 of katt over the baseline model is 7 . 4 % for cnn , 5 . 6 % for pcnn , and 9 . 1 % for lstm . moreover , we can also see that the relative improvements are more significant when the size of the training data is smaller , e . g . , when the training size is 200 ."
    },
    {
        "table_id": "119",
        "table_info": {
            "table_caption": "Table 2: Results of ablation study with PCNN.",
            "table_column_names": [
                "Training Instances Hits@K (Macro)",
                "<100 10",
                "<100 15",
                "<100 20",
                "<200 10",
                "<200 15",
                "<200 20"
            ],
            "table_content_values": [
                [
                    "+KATT",
                    "[BOLD] 35.3",
                    "[BOLD] 62.4",
                    "[BOLD] 65.1",
                    "[BOLD] 43.2",
                    "[BOLD] 61.3",
                    "[BOLD] 69.2"
                ],
                [
                    "w/o hier",
                    "34.2",
                    "62.1",
                    "65.1",
                    "42.5",
                    "60.2",
                    "68.1"
                ],
                [
                    "w/o GCNs",
                    "30.5",
                    "61.9",
                    "63.1",
                    "39.5",
                    "58.4",
                    "66.1"
                ],
                [
                    "Word2vec",
                    "30.2",
                    "62.0",
                    "62.5",
                    "39.6",
                    "57.5",
                    "65.8"
                ],
                [
                    "w/o KG",
                    "30.0",
                    "61.0",
                    "61.3",
                    "39.5",
                    "56.5",
                    "62.5"
                ]
            ]
        },
        "gold_description": "from the evaluation results in table 2 , we observe that the performance slightly degraded without coarse - tofine attention , we also noticed that the performance slightly degraded without kg or using word embeddings , and the performance significantly degraded when we removed gcns .",
        "generated_description": "from the results of ablation study , we can see that : ( 1 ) comparing with the original pcnn model , the gcns and hierarchical - based encoder - decoder models ( w / o hier and w / o gcns ) and word2vec , we find that gcns are more important for the katt model . this is because gcns can capture more semantic information from the word embeddings . ( 2 ) the kg - based kg model also contributes to the performance , but not as much as katt . this may be because kg can better capture the semantics of the words in the kgs . ( 3 ) by removing the hierarchical structure of the kg , the performance of katt drops a lot . this indicates that the hierarchical structural information in kg is important . ( 4 ) by comparing the results with pcnn , we found that the word2vec embedding model is more effective than the gcn - based one . the reason is that the word2vec embedding is pre - trained on wikipedia , which contains a lot of syntactic information , which can be learned by pcnn . ( 5 ) compared with the pcnn models , katt significantly outperforms all the other models . this shows that katt can capture the semantic information in the word representations , which is helpful for kgs to perform kg reasoning ."
    },
    {
        "table_id": "120",
        "table_info": {
            "table_caption": "Table 1: Spearman correlations with WordNet similarities (left) and human judgments (right) ×100.",
            "table_column_names": [
                "WordNet",
                "LCH  [ITALIC] 100",
                "ShP  [ITALIC] 100",
                "WuP  [ITALIC] 100",
                "LCH 51.3",
                "ShP 51.3",
                "WuP 47.4"
            ],
            "table_content_values": [
                [
                    "path2vec",
                    "[BOLD] 93.5",
                    "[BOLD] 95.2",
                    "[BOLD] 93.1",
                    "[BOLD] 53.2",
                    "[BOLD] 55.5",
                    "[BOLD] 55.5"
                ],
                [
                    "TransR",
                    "77.6",
                    "77.6",
                    "72.5",
                    "38.6",
                    "38.6",
                    "38.6"
                ],
                [
                    "node2vec",
                    "75.9",
                    "75.9",
                    "78.7",
                    "46.2",
                    "46.2",
                    "46.2"
                ],
                [
                    "DeepWalk",
                    "86.8",
                    "86.8",
                    "85.0",
                    "53.3",
                    "53.3",
                    "53.3"
                ],
                [
                    "FSE",
                    "90.0",
                    "90.0",
                    "89.0",
                    "55.6",
                    "55.6",
                    "55.6"
                ]
            ]
        },
        "gold_description": "discussion of results the left part of table 1 shows results with the wordnet similarity scores used as gold standard . path2vec outperforms other graph embeddings , achieving high correlations with wordnet similarities . this shows that our model efficiently approximates different graph measures . the right part of table 1 shows results for the correlations with human judgments ( simlex999 ) . we report the results for the best models for each method , all of them ( except fse ) using vector size 300 for comparability .",
        "generated_description": "we measure the spearman correlation between the cosine similarity between the learned representations of the word embeddings and human - annotated similarities via spearman ’ s ρ . we observe that path2vec is the best method on all three datasets , and is significantly better on the lch and wup datasets . on the shp dataset , transr is the second - best method , and node2vec and deepwalk are the third and fourth best . the fse is the worst method on this dataset , which is unsurprising given that this dataset is the most difficult of all the three datasets . overall , we see that our method is competitive with the transr baseline , and significantly better than the other methods ."
    },
    {
        "table_id": "121",
        "table_info": {
            "table_caption": "Table 2: F1 scores of a graph-based WSD algorithm on WordNet versus its vectorized counterparts.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Senseval2",
                "[BOLD] Senseval3",
                "[BOLD] SemEval-15"
            ],
            "table_content_values": [
                [
                    "Random sense",
                    "0.381",
                    "0.312",
                    "0.393"
                ],
                [
                    "[ITALIC] Graph-based vs vector-based measures",
                    "[ITALIC] Graph-based vs vector-based measures",
                    "[ITALIC] Graph-based vs vector-based measures",
                    "[ITALIC] Graph-based vs vector-based measures"
                ],
                [
                    "LCH (WordNet)",
                    "0.547↓0.000",
                    "0.494↓0.000",
                    "0.550↓0.000"
                ],
                [
                    "LCH (path2vec)",
                    "0.527↓0.020",
                    "0.472↓0.022",
                    "0.536↓0.014"
                ],
                [
                    "ShP (WordNet)",
                    "0.548↓0.000",
                    "0.495↓0.000",
                    "0.550↓0.000"
                ],
                [
                    "ShP (path2vec)",
                    "0.534↓0.014",
                    "0.489↓0.006",
                    "0.563↑0.013"
                ],
                [
                    "WuP (WordNet)",
                    "0.547↓0.000",
                    "0.487↓0.000",
                    "0.542↓0.000"
                ],
                [
                    "WuP (path2vec)",
                    "0.543↓0.004",
                    "0.489↑0.002",
                    "0.545↑0.003"
                ],
                [
                    "[ITALIC] Various baseline graph embeddings trained on WordNet",
                    "[ITALIC] Various baseline graph embeddings trained on WordNet",
                    "[ITALIC] Various baseline graph embeddings trained on WordNet",
                    "[ITALIC] Various baseline graph embeddings trained on WordNet"
                ],
                [
                    "TransR",
                    "0.540",
                    "0.466",
                    "0.536"
                ],
                [
                    "node2vec",
                    "0.503",
                    "0.467",
                    "0.489"
                ],
                [
                    "DeepWalk",
                    "0.528",
                    "0.476",
                    "0.552"
                ],
                [
                    "FSE",
                    "0.536",
                    "0.476",
                    "0.523"
                ]
            ]
        },
        "gold_description": "discussion of results table 2 presents the wsd micro - f1 scores using raw wordnet similarities , 300d path2vec , deepwalk and node2vec models , and the 128d fse model . we evaluate on the following all - words english wsd test sets : senseval - 2 ( palmer et al . , 2001 ) , senseval - 3 ( mihalcea et al . , 2004 ) , and semeval - 15 task 13 ( moro and navigli , 2015 ) . the raw wordnet similarities have a small edge over their vector approximations in the majority of the cases yet the path2vec models consistently closely follow them while outperforming other graph embedding baselines : we indicate the differences with respect to the original with a subscript number .",
        "generated_description": "we can see that the graph - based measures consistently outperform the vector - based ones on all the three datasets . the relative improvements range from 0 . 015 on senseval - 2 to 0 . 381 on the semeval - 15 dataset . the lch and wup models with path2vec embeddings perform slightly better than the lch with wordnet , but the difference is not statistically significant ."
    },
    {
        "table_id": "122",
        "table_info": {
            "table_caption": "Table 3: Similarity results on the RareWord set, measured as Spearman’s ρ×100. VarEmbed was trained on a 20-million token dataset, Polyglot on a 1.7B-token dataset.",
            "table_column_names": [
                "[EMPTY]",
                "Emb.",
                "Vocab",
                "Polyglot",
                "All"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "dim",
                    "size",
                    "in-vocab",
                    "pairs"
                ],
                [
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[ITALIC] N=862",
                    "[ITALIC] N=2034"
                ],
                [
                    "VarEmbed",
                    "128",
                    "100K",
                    "41.9",
                    "25.5"
                ],
                [
                    "Polyglot",
                    "64",
                    "100K",
                    "40.8",
                    "8.7"
                ],
                [
                    "mimick",
                    "64",
                    "0",
                    "17.9",
                    "17.5"
                ],
                [
                    "Polyglot",
                    "64",
                    "100K",
                    "40.8",
                    "27.0"
                ],
                [
                    "+mimick",
                    "64",
                    "100K",
                    "40.8",
                    "27.0"
                ],
                [
                    "Fasttext",
                    "300",
                    "2.51M",
                    "[EMPTY]",
                    "47.3"
                ]
            ]
        },
        "gold_description": "the results , shown in table 3 , demonstrate that the mimick rnn recovers about half of the loss in performance incurred by the original polyglot training model due to out - of - vocabulary words in the \" all pairs \" condition . mimick also outperforms varembed . fasttext can be considered an upper bound : with a vocabulary that is 25 times larger than the other models , it was missing words from only 44 pairs on this data .",
        "generated_description": "for comparison , we trained varembed and polyglot on a 20 - million token dataset , as well as on a 1 . 7b - token subset of the rareword dataset . as expected , the similarity scores are higher on the polyglot subset than on the in - vocabulary subset , but the difference is not statistically significant . interestingly , the mimick approach does not perform as well . we suspect that this is due to the small size of the dataset , which makes it hard for the model to learn representations that generalize as well to unseen words ."
    },
    {
        "table_id": "123",
        "table_info": {
            "table_caption": "Table 3: Results on argument generation by BLEU and METEOR (MTR), with system retrieved evidence and oracle retrieval. The best performing model is highlighted in bold per metric. Our separate decoder models, with and without keyphrase attention, statistically significantly outperform all seq2seq-based models based on approximation randomization testing Noreen (1989), p<0.0001.",
            "table_column_names": [
                "[EMPTY]",
                "[ITALIC] w/ System Retrieval  [BOLD] BLEU",
                "[ITALIC] w/ System Retrieval  [BOLD] MTR",
                "[ITALIC] w/ System Retrieval  [BOLD] Len",
                "[ITALIC] w/ Oracle Retrieval  [BOLD] BLEU",
                "[ITALIC] w/ Oracle Retrieval  [BOLD] MTR",
                "[ITALIC] w/ Oracle Retrieval  [BOLD] Len"
            ],
            "table_content_values": [
                [
                    "[BOLD] Baseline",
                    "[BOLD] Baseline",
                    "[BOLD] Baseline",
                    "[BOLD] Baseline",
                    "[BOLD] Baseline",
                    "[BOLD] Baseline",
                    "[BOLD] Baseline"
                ],
                [
                    "Retrieval",
                    "15.32",
                    "[BOLD] 12.19",
                    "151.2",
                    "10.24",
                    "[BOLD] 16.22",
                    "132.7"
                ],
                [
                    "[BOLD] Comparisons",
                    "[BOLD] Comparisons",
                    "[BOLD] Comparisons",
                    "[BOLD] Comparisons",
                    "[BOLD] Comparisons",
                    "[BOLD] Comparisons",
                    "[BOLD] Comparisons"
                ],
                [
                    "Seq2seq",
                    "10.21",
                    "5.74",
                    "34.9",
                    "7.44",
                    "5.25",
                    "31.1"
                ],
                [
                    "+  [ITALIC] encode evd",
                    "18.03",
                    "7.32",
                    "67.0",
                    "13.79",
                    "10.06",
                    "68.1"
                ],
                [
                    "+  [ITALIC] encode KP",
                    "21.94",
                    "8.63",
                    "74.4",
                    "12.96",
                    "10.50",
                    "78.2"
                ],
                [
                    "[BOLD] Our Models",
                    "[BOLD] Our Models",
                    "[BOLD] Our Models",
                    "[BOLD] Our Models",
                    "[BOLD] Our Models",
                    "[BOLD] Our Models",
                    "[BOLD] Our Models"
                ],
                [
                    "Dec-shared",
                    "21.22",
                    "8.91",
                    "69.1",
                    "15.78",
                    "11.52",
                    "68.2"
                ],
                [
                    "+  [ITALIC] attend KP",
                    "[BOLD] 24.71",
                    "10.05",
                    "74.8",
                    "11.48",
                    "10.08",
                    "40.5"
                ],
                [
                    "Dec-separate",
                    "24.24",
                    "10.63",
                    "88.6",
                    "17.48",
                    "13.15",
                    "86.9"
                ],
                [
                    "+  [ITALIC] attend KP",
                    "24.52",
                    "11.27",
                    "88.3",
                    "[BOLD] 17.80",
                    "13.67",
                    "86.8"
                ]
            ]
        },
        "gold_description": "as can be seen from table 3 , our models produce better bleu scores than almost all the comparisons . especially , our models with separate decoder yield significantly higher bleu and meteor scores than all seq2seq - based models ( approximation randomization testing , p < 0 . 0001 ) do . better meteor scores are achieved by the retrieval baseline , mainly due to its significantly longer arguments . moreover , utilizing attention over both input and the generated keyphrases further boosts our models ' performance . interestingly , utilizing system retrieved evidence yields better bleu scores than using oracle retrieval for testing .",
        "generated_description": "s4ss3sss0px2 comparisons w / or retrieval . we compare our model with the following baselines : seq2seq - based encoder - decoder model ( seq2seq ) our model outperforms all the baselines in terms of bleu , mtr , and len metrics . with oracle retrieval , our model achieves the state - of - the - art performance on all the metrics with or without encoding evd . this shows that our model is able to utilize the information encoded in the source sentences to improve the quality of generated responses ."
    },
    {
        "table_id": "124",
        "table_info": {
            "table_caption": "Table 5: POS tagging accuracy (UD 1.4 Test). Bold (Italic) indicates significant improvement (degradation) by McNemar’s test, p",
            "table_column_names": [
                "[EMPTY]",
                "[ITALIC] Ntrain=5000 No-Char",
                "[ITALIC] Ntrain=5000 mimick",
                "[ITALIC] Ntrain=5000 char",
                "[ITALIC] Ntrain=5000 Both",
                "Full data  [ITALIC] Ntrain",
                "Full data No-Char",
                "Full data mimick",
                "Full data char",
                "Both",
                "PSG"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "→tag",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "→tag",
                    "[EMPTY]",
                    "2016*"
                ],
                [
                    "kk",
                    "—",
                    "—",
                    "—",
                    "—",
                    "4,949",
                    "81.94",
                    "83.95",
                    "83.64",
                    "84.88",
                    "[EMPTY]"
                ],
                [
                    "ta",
                    "82.30",
                    "81.55",
                    "84.97",
                    "85.22",
                    "6,329",
                    "80.44",
                    "[BOLD] 82.96",
                    "84.11",
                    "84.46",
                    "[EMPTY]"
                ],
                [
                    "lv",
                    "80.44",
                    "[BOLD] 84.32",
                    "84.49",
                    "[BOLD] 85.91",
                    "13,781",
                    "85.77",
                    "[BOLD] 87.95",
                    "89.55",
                    "89.99",
                    "[EMPTY]"
                ],
                [
                    "vi",
                    "85.67",
                    "[ITALIC] 84.22",
                    "84.85",
                    "85.43",
                    "31,800",
                    "89.94",
                    "90.34",
                    "90.50",
                    "90.19",
                    "[EMPTY]"
                ],
                [
                    "hu",
                    "82.88",
                    "[BOLD] 88.93",
                    "85.83",
                    "[BOLD] 88.34",
                    "33,017",
                    "91.52",
                    "[BOLD] 93.88",
                    "94.07",
                    "93.74",
                    "[EMPTY]"
                ],
                [
                    "tr",
                    "83.69",
                    "[BOLD] 85.60",
                    "84.23",
                    "[BOLD] 86.25",
                    "41,748",
                    "90.19",
                    "[BOLD] 91.82",
                    "93.11",
                    "92.68",
                    "[EMPTY]"
                ],
                [
                    "el",
                    "93.10",
                    "[BOLD] 93.63",
                    "94.05",
                    "[BOLD] 94.64",
                    "47,449",
                    "97.27",
                    "[BOLD] 98.08",
                    "98.09",
                    "98.22",
                    "[EMPTY]"
                ],
                [
                    "bg",
                    "90.97",
                    "[BOLD] 93.16",
                    "93.03",
                    "[BOLD] 93.52",
                    "50,000",
                    "96.63",
                    "[BOLD] 97.29",
                    "97.95",
                    "97.78",
                    "98.23"
                ],
                [
                    "sv",
                    "90.87",
                    "[BOLD] 92.30",
                    "92.27",
                    "[BOLD] 93.02",
                    "66,645",
                    "95.26",
                    "[BOLD] 96.27",
                    "96.69",
                    "96.87",
                    "96.60"
                ],
                [
                    "eu",
                    "82.67",
                    "[BOLD] 84.44",
                    "86.01",
                    "[BOLD] 86.93",
                    "72,974",
                    "91.67",
                    "[BOLD] 93.16",
                    "94.46",
                    "94.29",
                    "95.38"
                ],
                [
                    "ru",
                    "87.40",
                    "[BOLD] 89.72",
                    "88.65",
                    "[BOLD] 90.91",
                    "79,772",
                    "92.59",
                    "[BOLD] 95.21",
                    "95.98",
                    "95.84",
                    "[EMPTY]"
                ],
                [
                    "da",
                    "89.46",
                    "90.13",
                    "89.96",
                    "90.55",
                    "88,980",
                    "94.14",
                    "[BOLD] 95.04",
                    "96.13",
                    "96.02",
                    "96.16"
                ],
                [
                    "id",
                    "89.07",
                    "89.34",
                    "89.81",
                    "90.21",
                    "97,531",
                    "92.92",
                    "93.24",
                    "93.41",
                    "[BOLD] 93.70",
                    "93.32"
                ],
                [
                    "zh",
                    "80.84",
                    "[BOLD] 85.69",
                    "81.84",
                    "[BOLD] 85.53",
                    "98,608",
                    "90.91",
                    "[BOLD] 93.31",
                    "93.36",
                    "93.72",
                    "[EMPTY]"
                ],
                [
                    "fa",
                    "93.50",
                    "93.58",
                    "93.53",
                    "93.71",
                    "121,064",
                    "96.77",
                    "[BOLD] 97.03",
                    "97.20",
                    "97.16",
                    "97.60"
                ],
                [
                    "he",
                    "90.73",
                    "[BOLD] 91.69",
                    "91.93",
                    "91.70",
                    "135,496",
                    "95.65",
                    "[BOLD] 96.15",
                    "96.59",
                    "96.37",
                    "96.62"
                ],
                [
                    "ro",
                    "87.73",
                    "[BOLD] 89.18",
                    "88.96",
                    "[BOLD] 89.38",
                    "163,262",
                    "95.68",
                    "[BOLD] 96.72",
                    "97.07",
                    "97.09",
                    "[EMPTY]"
                ],
                [
                    "en",
                    "87.48",
                    "[BOLD] 88.45",
                    "88.89",
                    "88.89",
                    "204,587",
                    "93.39",
                    "[BOLD] 94.04",
                    "94.90",
                    "94.70",
                    "95.17"
                ],
                [
                    "ar",
                    "89.01",
                    "[BOLD] 90.58",
                    "90.49",
                    "90.62",
                    "225,853",
                    "95.51",
                    "[BOLD] 95.72",
                    "96.37",
                    "96.24",
                    "98.87"
                ],
                [
                    "hi",
                    "87.89",
                    "87.77",
                    "87.92",
                    "88.09",
                    "281,057",
                    "96.31",
                    "96.45",
                    "96.64",
                    "96.61",
                    "96.97"
                ],
                [
                    "it",
                    "91.35",
                    "[BOLD] 92.50",
                    "92.45",
                    "[BOLD] 93.01",
                    "289,440",
                    "97.22",
                    "97.47",
                    "97.76",
                    "97.69",
                    "97.90"
                ],
                [
                    "es",
                    "90.54",
                    "[BOLD] 91.41",
                    "91.71",
                    "91.78",
                    "382,436",
                    "94.68",
                    "94.84",
                    "95.08",
                    "95.05",
                    "95.67"
                ],
                [
                    "cs",
                    "87.97",
                    "[BOLD] 90.81",
                    "90.17",
                    "[BOLD] 91.29",
                    "1,173,282",
                    "96.34",
                    "[BOLD] 97.62",
                    "98.18",
                    "[ITALIC] 97.93",
                    "98.02"
                ]
            ]
        },
        "gold_description": "we report the results on the full sets and on = 5000 tokens in table 5 ( partof - speech tagging accuracy ) for pos , the largest margins are in the slavic languages ( russian , czech , bulgarian ) , where word order is relatively free and thus rich word representations are imperative . chinese also exhibits impressive improvement across all settings , perhaps due to the large character inventory ( > 12 , 000 ) , for which a model such as mimick can learn well - informed embeddings using the large polyglot vocabulary dataset , overcoming both word - and characterlevel sparsity in the ud corpus .",
        "generated_description": "we see that character - level embeddings improve over the no - character baseline for all languages , and that the improvement is generally larger when using the full data . the improvement is particularly large for estonian and finnish , two languages with unique morphology from the iarpa treebank that are not represented in the full training data . for estonian , the character - based model outperforms the non - character - based baseline by more than 1 . 5 points when using only 5 % of the training data ( ntrain = 5000 ) . for finnish , the difference is less pronounced , but still substantial ( 1 . 2 points ) . for most languages , the improvement from using both character and pseudo - characters is greater than using only the word - based one ."
    },
    {
        "table_id": "125",
        "table_info": {
            "table_caption": "Table 6: Micro-F1 for morphosyntactic attributes (UD 1.4 Test). Bold (Italic) type indicates significant improvement (degradation) by a bootstrapped Z-test, p",
            "table_column_names": [
                "[EMPTY]",
                "[ITALIC] Ntrain=5000 No-Char",
                "[ITALIC] Ntrain=5000 mimick",
                "[ITALIC] Ntrain=5000 char",
                "[ITALIC] Ntrain=5000 Both",
                "Full data No-Char",
                "Full data mimick",
                "Full data char",
                "Full data Both"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "→tag",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "→tag",
                    "[EMPTY]"
                ],
                [
                    "kk",
                    "—",
                    "—",
                    "—",
                    "—",
                    "21.48",
                    "20.07",
                    "28.47",
                    "20.98"
                ],
                [
                    "ta",
                    "80.68",
                    "[BOLD] 81.96",
                    "84.26",
                    "[BOLD] 85.63",
                    "79.90",
                    "[BOLD] 81.93",
                    "84.55",
                    "85.01"
                ],
                [
                    "lv",
                    "56.98",
                    "[BOLD] 59.86",
                    "64.81",
                    "[BOLD] 65.82",
                    "66.16",
                    "66.61",
                    "76.11",
                    "75.44"
                ],
                [
                    "hu",
                    "73.13",
                    "[BOLD] 76.30",
                    "73.62",
                    "[BOLD] 76.85",
                    "80.04",
                    "80.64",
                    "86.43",
                    "84.12"
                ],
                [
                    "tr",
                    "69.58",
                    "[BOLD] 75.21",
                    "75.81",
                    "[BOLD] 78.93",
                    "78.31",
                    "[BOLD] 83.32",
                    "91.51",
                    "90.86"
                ],
                [
                    "el",
                    "86.87",
                    "[ITALIC] 86.07",
                    "86.40",
                    "[BOLD] 87.50",
                    "94.64",
                    "[BOLD] 94.96",
                    "96.55",
                    "[BOLD] 96.76"
                ],
                [
                    "bg",
                    "78.26",
                    "[BOLD] 81.77",
                    "82.74",
                    "[BOLD] 84.93",
                    "91.98",
                    "[BOLD] 93.48",
                    "96.12",
                    "95.96"
                ],
                [
                    "sv",
                    "82.09",
                    "[BOLD] 84.12",
                    "85.26",
                    "[BOLD] 88.16",
                    "92.45",
                    "[BOLD] 94.20",
                    "96.37",
                    "[BOLD] 96.57"
                ],
                [
                    "eu",
                    "65.29",
                    "[BOLD] 66.00",
                    "70.67",
                    "[ITALIC] 70.27",
                    "82.75",
                    "[BOLD] 84.74",
                    "90.58",
                    "[BOLD] 91.39"
                ],
                [
                    "ru",
                    "77.31",
                    "[BOLD] 81.84",
                    "79.83",
                    "[BOLD] 83.53",
                    "88.80",
                    "[BOLD] 91.24",
                    "93.54",
                    "93.56"
                ],
                [
                    "da",
                    "80.26",
                    "[BOLD] 82.74",
                    "83.59",
                    "82.65",
                    "92.06",
                    "[BOLD] 94.14",
                    "96.05",
                    "95.96"
                ],
                [
                    "zh",
                    "63.29",
                    "[BOLD] 71.44",
                    "63.50",
                    "[BOLD] 74.66",
                    "84.95",
                    "85.70",
                    "84.86",
                    "85.87"
                ],
                [
                    "fa",
                    "84.73",
                    "[BOLD] 86.07",
                    "85.94",
                    "81.75",
                    "95.30",
                    "[BOLD] 95.55",
                    "96.90",
                    "96.80"
                ],
                [
                    "he",
                    "75.35",
                    "68.57",
                    "81.06",
                    "75.24",
                    "90.25",
                    "[BOLD] 90.99",
                    "93.35",
                    "93.63"
                ],
                [
                    "ro",
                    "84.20",
                    "[BOLD] 85.64",
                    "85.61",
                    "[BOLD] 87.31",
                    "94.97",
                    "[BOLD] 96.10",
                    "97.18",
                    "97.14"
                ],
                [
                    "en",
                    "86.71",
                    "[BOLD] 87.99",
                    "88.50",
                    "[BOLD] 89.61",
                    "95.30",
                    "[BOLD] 95.59",
                    "96.40",
                    "96.30"
                ],
                [
                    "ar",
                    "84.14",
                    "84.17",
                    "81.41",
                    "[ITALIC] 81.11",
                    "94.43",
                    "[BOLD] 94.85",
                    "95.50",
                    "95.37"
                ],
                [
                    "hi",
                    "83.45",
                    "[BOLD] 86.89",
                    "85.64",
                    "85.27",
                    "96.15",
                    "96.21",
                    "96.59",
                    "[BOLD] 96.67"
                ],
                [
                    "it",
                    "89.96",
                    "[BOLD] 92.07",
                    "91.27",
                    "[BOLD] 92.62",
                    "97.32",
                    "[BOLD] 97.80",
                    "98.18",
                    "98.31"
                ],
                [
                    "es",
                    "88.11",
                    "[BOLD] 89.81",
                    "88.58",
                    "[BOLD] 89.63",
                    "94.84",
                    "[BOLD] 95.44",
                    "96.21",
                    "[BOLD] 96.84"
                ],
                [
                    "cs",
                    "68.66",
                    "[BOLD] 72.65",
                    "71.02",
                    "[BOLD] 73.61",
                    "91.75",
                    "[BOLD] 93.71",
                    "95.29",
                    "95.31"
                ]
            ]
        },
        "gold_description": "table 6 ( morphosyntactic attribute tagging micro - f1 ) . in morphosyntactic tagging , gains are apparent for slavic languages and chinese , but also for agglutinative languages — especially tamil and turkish — where the stable morpheme representation makes it easy for subword modeling to provide a type - level signal .",
        "generated_description": "we see that character - level embeddings improve over the no - character baseline for all languages , and that the effect is more pronounced in the full data case . we also see that the improvement is larger for tamil than for the other languages . we hypothesize that this is due to the fact that tamil is a morphologically - rich language and , thus , benefits more from the character n - grams ."
    },
    {
        "table_id": "126",
        "table_info": {
            "table_caption": "Table 7: Absolute gain in POS tagging accuracy from using mimick for 10,000-token datasets (all tokens for Tamil and Kazakh). Bold denotes statistical significance (McNemar’s test,p<0.01).",
            "table_column_names": [
                "Test set embeddings",
                "Missing embeddings",
                "Full vocabulary",
                "Full vocabulary",
                "OOV (UD)",
                "OOV (UD)"
            ],
            "table_content_values": [
                [
                    "char→tag",
                    "[EMPTY]",
                    "w/o",
                    "with",
                    "w/o",
                    "with"
                ],
                [
                    "Persian",
                    "2.2%",
                    "0.03",
                    "[BOLD] 0.41",
                    "[BOLD] 0.83",
                    "[BOLD] 0.81"
                ],
                [
                    "Hindi",
                    "3.8%",
                    "[BOLD] 0.59",
                    "0.21",
                    "[BOLD] 3.61",
                    "0.36"
                ],
                [
                    "English",
                    "4.5%",
                    "[BOLD] 0.83",
                    "0.25",
                    "[BOLD] 3.26",
                    "0.49"
                ],
                [
                    "Spanish",
                    "5.2%",
                    "0.33",
                    "-0.26",
                    "1.03",
                    "-0.66"
                ],
                [
                    "Italian",
                    "6.6%",
                    "[BOLD] 0.84",
                    "0.28",
                    "[BOLD] 1.83",
                    "0.21"
                ],
                [
                    "Danish",
                    "7.8%",
                    "0.65",
                    "[BOLD] 0.99",
                    "[BOLD] 2.41",
                    "[BOLD] 1.72"
                ],
                [
                    "Hebrew",
                    "9.2%",
                    "[BOLD] 1.25",
                    "[BOLD] 0.40",
                    "[BOLD] 3.03",
                    "0.06"
                ],
                [
                    "Swedish",
                    "9.2%",
                    "[BOLD] 1.50",
                    "[BOLD] 0.55",
                    "[BOLD] 4.75",
                    "[BOLD] 1.79"
                ],
                [
                    "Bulgarian",
                    "9.4%",
                    "[BOLD] 0.96",
                    "0.12",
                    "[BOLD] 1.83",
                    "-0.11"
                ],
                [
                    "Czech",
                    "10.6%",
                    "[BOLD] 2.24",
                    "[BOLD] 1.32",
                    "[BOLD] 5.84",
                    "[BOLD] 2.20"
                ],
                [
                    "Latvian",
                    "11.1%",
                    "[BOLD] 2.87",
                    "[BOLD] 1.03",
                    "[BOLD] 7.29",
                    "[BOLD] 2.71"
                ],
                [
                    "Hungarian",
                    "11.6%",
                    "[BOLD] 2.62",
                    "[BOLD] 2.01",
                    "[BOLD] 5.76",
                    "[BOLD] 4.85"
                ],
                [
                    "Turkish",
                    "14.5%",
                    "[BOLD] 1.73",
                    "[BOLD] 1.69",
                    "[BOLD] 3.58",
                    "[BOLD] 2.71"
                ],
                [
                    "Tamil*",
                    "16.2%",
                    "[BOLD] 2.52",
                    "0.35",
                    "2.09",
                    "1.35"
                ],
                [
                    "Russian",
                    "16.5%",
                    "[BOLD] 2.17",
                    "[BOLD] 1.82",
                    "[BOLD] 4.55",
                    "[BOLD] 3.52"
                ],
                [
                    "Greek",
                    "17.5%",
                    "[BOLD] 1.07",
                    "0.34",
                    "[BOLD] 3.30",
                    "1.17"
                ],
                [
                    "Indonesian",
                    "19.1%",
                    "[BOLD] 0.46",
                    "0.25",
                    "[BOLD] 1.19",
                    "0.75"
                ],
                [
                    "Kazakh*",
                    "21.0%",
                    "2.01",
                    "1.24",
                    "[BOLD] 5.34",
                    "[BOLD] 4.20"
                ],
                [
                    "Vietnamese",
                    "21.9%",
                    "0.53",
                    "[BOLD] 1.18",
                    "1.07",
                    "[BOLD] 5.73"
                ],
                [
                    "Romanian",
                    "27.1%",
                    "[BOLD] 1.49",
                    "[BOLD] 0.47",
                    "[BOLD] 4.22",
                    "[BOLD] 1.24"
                ],
                [
                    "Arabic",
                    "27.1%",
                    "[BOLD] 1.23",
                    "[BOLD] 0.32",
                    "[BOLD] 2.15",
                    "0.22"
                ],
                [
                    "Basque",
                    "35.3%",
                    "[BOLD] 2.39",
                    "[BOLD] 1.06",
                    "[BOLD] 5.42",
                    "[BOLD] 1.68"
                ],
                [
                    "Chinese",
                    "69.9%",
                    "[BOLD] 4.19",
                    "[BOLD] 2.57",
                    "[BOLD] 9.52",
                    "[BOLD] 5.24"
                ]
            ]
        },
        "gold_description": "table 7 presents the pos tagging improvements that mimick achieves over the pre - trained polyglot models , with and without char → tag concatenation , with 10 , 000 tokens of training data . we obtain statistically significant improvements in most languages , even when char → tag is included . these improvements are particularly substantial for test - set tokens outside the ud training set , as shown in the right two columns . while test set oovs are a strength of the char → tag model ( plank et al . , 2016 ) , in many languages there are still considerable improvements to be obtained from the application of mimick initialization .",
        "generated_description": "we can see that the char → tag baseline is worse than the baseline with the full vocabulary , but the with - embeddings model consistently outperforms the baseline in terms of bleu scores for all languages except arabic , where the difference is statistically significant ( p < 0 . 01 ) . we can also see that in most cases , the model with the embeddings obtained from the char → tag model matches or exceeds the performance of the model without the embedding , except for danish and hebrew ."
    },
    {
        "table_id": "127",
        "table_info": {
            "table_caption": "Table 3: Accuracies (in %) and perplexities for different models and scenarios. The script model substantially outperforms linguistic and base models (with p<0.001, significance tested with McNemar’s test [Everitt1992]). As expected, the human prediction model outperforms the script model (with p<0.001, significance tested by McNemar’s test).",
            "table_column_names": [
                "Scenario",
                "Human Model Accuracy",
                "Human Model Perplexity",
                "Script Model Accuracy",
                "Script Model Perplexity",
                "Linguistic Model Accuracy",
                "Linguistic Model Perplexity",
                "Tily Model Accuracy",
                "Tily Model Perplexity"
            ],
            "table_content_values": [
                [
                    "Grocery Shopping",
                    "74.80",
                    "2.13",
                    "68.17",
                    "3.16",
                    "53.85",
                    "6.54",
                    "32.89",
                    "24.48"
                ],
                [
                    "Repairing a flat bicycle tyre",
                    "78.34",
                    "2.72",
                    "62.09",
                    "3.89",
                    "51.26",
                    "6.38",
                    "29.24",
                    "19.08"
                ],
                [
                    "Riding a public bus",
                    "72.19",
                    "2.28",
                    "64.57",
                    "3.67",
                    "52.65",
                    "6.34",
                    "32.78",
                    "23.39"
                ],
                [
                    "Getting a haircut",
                    "71.06",
                    "2.45",
                    "58.82",
                    "3.79",
                    "42.82",
                    "7.11",
                    "28.70",
                    "15.40"
                ],
                [
                    "Planting a tree",
                    "71.86",
                    "2.46",
                    "59.32",
                    "4.25",
                    "47.80",
                    "7.31",
                    "28.14",
                    "24.28"
                ],
                [
                    "Borrowing book from library",
                    "77.49",
                    "1.93",
                    "64.07",
                    "3.55",
                    "43.29",
                    "8.40",
                    "33.33",
                    "20.26"
                ],
                [
                    "Taking Bath",
                    "81.29",
                    "1.84",
                    "67.42",
                    "3.14",
                    "61.29",
                    "4.33",
                    "43.23",
                    "16.33"
                ],
                [
                    "Going on a train",
                    "70.79",
                    "2.39",
                    "58.73",
                    "4.20",
                    "47.62",
                    "7.68",
                    "30.16",
                    "35.11"
                ],
                [
                    "Baking a cake",
                    "76.43",
                    "2.16",
                    "61.79",
                    "5.11",
                    "46.40",
                    "9.16",
                    "24.07",
                    "23.67"
                ],
                [
                    "Flying in an airplane",
                    "62.04",
                    "3.08",
                    "61.31",
                    "4.01",
                    "48.18",
                    "7.27",
                    "30.90",
                    "30.18"
                ],
                [
                    "Average",
                    "73.63",
                    "2.34",
                    "62.63",
                    "3.88",
                    "49.52",
                    "7.05",
                    "31.34",
                    "23.22"
                ]
            ]
        },
        "gold_description": "see table 3 for the averages across 10 scenarios . as we can see from table 3 , the perplexity scores are consistent with the accuracies : the script model again outperforms other methods , and , as expected , all the models are weaker than humans .",
        "generated_description": "for each scenario , we report the accuracy and perplexity of the three models ( human , script , and linguistic ) as well as the performance of the tily model . the perplexity is computed as the proportion of questions for which the model predicted the correct answer to be the same as the ground truth . we observe that the script model outperforms the other two models in terms of accuracy in most of the scenarios . however , the lily model is slightly better than the human model in some cases ."
    },
    {
        "table_id": "128",
        "table_info": {
            "table_caption": "Table 4: Evaluation on topic relevance—models that generate arguments highly related with OP should be ranked high by a separately trained relevance estimation model, i.e., higher Mean Reciprocal Rank (MRR) and Precision at 1 (P@1) scores. All models trained with evidence significantly outperform seq2seq trained without evidence (approximation randomization testing, p<0.0001).",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] Standard Decoder MRR",
                "[BOLD] Standard Decoder P@1",
                "[BOLD] Our Decoder MRR",
                "[BOLD] Our Decoder P@1"
            ],
            "table_content_values": [
                [
                    "[BOLD] Baseline",
                    "[BOLD] Baseline",
                    "[BOLD] Baseline",
                    "[BOLD] Baseline",
                    "[BOLD] Baseline"
                ],
                [
                    "Retrieval",
                    "81.08",
                    "65.45",
                    "-",
                    "-"
                ],
                [
                    "[BOLD] Comparisons",
                    "[BOLD] Comparisons",
                    "[BOLD] Comparisons",
                    "[BOLD] Comparisons",
                    "[BOLD] Comparisons"
                ],
                [
                    "Seq2seq",
                    "75.29",
                    "58.85",
                    "74.46",
                    "57.06"
                ],
                [
                    "+  [ITALIC] encode evd",
                    "83.73",
                    "71.59",
                    "88.24",
                    "78.76"
                ],
                [
                    "[BOLD] Our Models",
                    "[BOLD] Our Models",
                    "[BOLD] Our Models",
                    "[BOLD] Our Models",
                    "[BOLD] Our Models"
                ],
                [
                    "Dec-shared",
                    "79.80",
                    "65.57",
                    "[BOLD] 95.18",
                    "[BOLD] 90.91"
                ],
                [
                    "+  [ITALIC] attend KP",
                    "[BOLD] 94.33",
                    "[BOLD] 89.76",
                    "93.48",
                    "87.91"
                ],
                [
                    "Dec-separate",
                    "86.85",
                    "76.74",
                    "91.70",
                    "84.72"
                ],
                [
                    "+  [ITALIC] attend KP",
                    "88.53",
                    "79.05",
                    "92.77",
                    "86.46"
                ]
            ]
        },
        "gold_description": "ranking metrics of mrr and precision at 1 ( p @ 1 ) are utilized , with results reported in table 4 . the ranker yields significantly better scores over arguments generated from models trained with evidence , compared to arguments generated by seq2seq model .",
        "generated_description": "we can see that our decoder outperforms the baseline in terms of both mrr and p @ 1 . our decoder with attend kp performs better than the decoder without attend kp , which demonstrates the effectiveness of the attend kp mechanism . we can also see that the performance of our decoders with both attend kp and encoder - decoder are better than that of the baseline with only one decoder ."
    },
    {
        "table_id": "129",
        "table_info": {
            "table_caption": "Table 5: Coefficients obtained from regression analysis for different models. Two NP types considered: full NP and Pronoun/ProperNoun, with base class full NP. Significance: ‘***’ <0.001, ‘**’ <0.01, ‘*’ <0.05, and ‘.’ <0.1.",
            "table_column_names": [
                "[EMPTY]",
                "Estimate Human",
                "Estimate Script",
                "Estimate Linguistic",
                "Estimate Base",
                "Std. Error Human",
                "Std. Error Script",
                "Std. Error Linguistic",
                "Std. Error Base",
                "Pr(>∣ [ITALIC] z∣) Human",
                "Pr(>∣ [ITALIC] z∣) Script",
                "Pr(>∣ [ITALIC] z∣) Linguistic",
                "Pr(>∣ [ITALIC] z∣) Base"
            ],
            "table_content_values": [
                [
                    "(Intercept)",
                    "-3.4",
                    "-3.418",
                    "-3.245",
                    "-3.061",
                    "0.244",
                    "0.279",
                    "0.321",
                    "0.791",
                    "<2e-16 ***",
                    "<2e-16 ***",
                    "<2e-16 ***",
                    "0.00011 ***"
                ],
                [
                    "recency",
                    "1.322",
                    "1.322",
                    "1.324",
                    "1.322",
                    "0.095",
                    "0.095",
                    "0.096",
                    "0.097",
                    "<2e-16 ***",
                    "<2e-16 ***",
                    "<2e-16 ***",
                    "<2e-16 ***"
                ],
                [
                    "frequency",
                    "0.097",
                    "0.103",
                    "0.112",
                    "0.114",
                    "0.098",
                    "0.097",
                    "0.098",
                    "0.102",
                    "0.317",
                    "0.289",
                    "0.251",
                    "0.262"
                ],
                [
                    "pastObj",
                    "0.407",
                    "0.396",
                    "0.423",
                    "0.395",
                    "0.293",
                    "0.294",
                    "0.295",
                    "0.3",
                    "0.165",
                    "0.178",
                    "0.151",
                    "0.189"
                ],
                [
                    "pastSubj",
                    "-0.967",
                    "-0.973",
                    "-0.909",
                    "-0.926",
                    "0.559",
                    "0.564",
                    "0.562",
                    "0.565",
                    "0.0838 .",
                    "0.0846 .",
                    "0.106",
                    "0.101"
                ],
                [
                    "pastExpPronoun",
                    "1.603",
                    "1.619",
                    "1.616",
                    "1.602",
                    "0.21",
                    "0.207",
                    "0.208",
                    "0.245",
                    "2.19e-14 ***",
                    "5.48e-15 ***",
                    "7.59e-15 ***",
                    "6.11e-11 ***"
                ],
                [
                    "depTypeSubj",
                    "2.939",
                    "2.942",
                    "2.656",
                    "2.417",
                    "0.299",
                    "0.347",
                    "0.429",
                    "1.113",
                    "<2e-16 ***",
                    "<2e-16 ***",
                    "5.68e-10 ***",
                    "0.02994 *"
                ],
                [
                    "depTypeObj",
                    "1.199",
                    "1.227",
                    "0.977",
                    "0.705",
                    "0.248",
                    "0.306",
                    "0.389",
                    "1.109",
                    "1.35e-06 ***",
                    "6.05e-05 ***",
                    "0.0119 *",
                    "0.525"
                ],
                [
                    "surprisal",
                    "-0.04",
                    "-0.006",
                    "0.002",
                    "-0.131",
                    "0.099",
                    "0.097",
                    "0.117",
                    "0.387",
                    "0.684",
                    "0.951",
                    "0.988",
                    "0.735"
                ],
                [
                    "residualEntropy",
                    "-0.009",
                    "0.023",
                    "-0.141",
                    "-0.128",
                    "0.088",
                    "0.128",
                    "0.168",
                    "0.258",
                    "0.916",
                    "0.859",
                    "0.401",
                    "0.619"
                ]
            ]
        },
        "gold_description": "the results of all four logistic regression models are shown in table 5 . the results for the full dataset are fully consistent with the findings shown in table 5 : there was no significant effect of surprisal on referring expression type . in order to replicate their settings as closely as possible , we also included residualentropy as a predictor in our model ( see last predictor in table 5 ) ; however , this did not change the results .",
        "generated_description": "overall , we find that the n - grams that are most predictive of script - level fluency are intensity , interval , recency , and frequency , with n = 3 . 4 , 3 . 245 , and 0 . 244 for script and n = 2e - 16 for language model , respectively . in general , we see that ngrams related to fluency and interval tend to be lower for both the base and language model estimates than those related to language fluency . in some cases , ngram - based fluency is slightly lower for the base estimate than for the language model estimate , possibly due to the fact that it is harder to discriminate between scripts and language models for this ngram . however , we do not find any statistically significant differences in the estimated fluency or interval for either the base or language model . overall , the overall trend is similar to what we observed for ngram – ground truth overlap ."
    },
    {
        "table_id": "130",
        "table_info": {
            "table_caption": "Table 1: Results on different SP acquisition evaluation sets. As Keller is created based on the PP distribution and has relatively small size while SP-10K is created based on random sampling and has a much larger size, we treat the performance on SP-10K as the main evaluation metric. Spearman’s correlation between predicated plausibility and annotations are reported. The best performing models are denoted with bold font. † indicates statistical significant (p <0.005) overall baseline methods.",
            "table_column_names": [
                "Model",
                "Downstream",
                "Keller dobj",
                "Keller amod",
                "Keller average",
                "SP-10K nsubj",
                "SP-10K dobj",
                "SP-10K amod",
                "SP-10K average"
            ],
            "table_content_values": [
                [
                    "word2vec",
                    "Friendly",
                    "0.29",
                    "0.28",
                    "0.29",
                    "0.32",
                    "0.53",
                    "0.62",
                    "0.49"
                ],
                [
                    "GloVe",
                    "Friendly",
                    "0.37",
                    "0.32",
                    "0.35",
                    "0.57",
                    "0.60",
                    "0.68",
                    "0.62"
                ],
                [
                    "D-embeddings",
                    "Friendly",
                    "0.19",
                    "0.22",
                    "0.21",
                    "0.66",
                    "0.71",
                    "0.77",
                    "0.71"
                ],
                [
                    "ELMo",
                    "Friendly",
                    "0.23",
                    "0.06",
                    "0.15",
                    "0.09",
                    "0.29",
                    "0.38",
                    "0.25"
                ],
                [
                    "BERT (static)",
                    "Friendly",
                    "0.11",
                    "0.05",
                    "0.08",
                    "0.25",
                    "0.32",
                    "0.27",
                    "0.28"
                ],
                [
                    "BERT (dynamic)",
                    "Friendly",
                    "0.19",
                    "0.23",
                    "0.21",
                    "0.35",
                    "0.45",
                    "0.51",
                    "0.41"
                ],
                [
                    "PP",
                    "Unfriendly",
                    "[BOLD] 0.66",
                    "0.26",
                    "0.46",
                    "0.75",
                    "0.74",
                    "0.75",
                    "0.75"
                ],
                [
                    "DS",
                    "Unfriendly",
                    "0.53",
                    "0.32",
                    "0.43",
                    "0.59",
                    "0.65",
                    "0.67",
                    "0.64"
                ],
                [
                    "NN",
                    "Unfriendly",
                    "0.16",
                    "0.13",
                    "0.15",
                    "0.70",
                    "0.68",
                    "0.68",
                    "0.69"
                ],
                [
                    "MWE",
                    "Friendly",
                    "0.63",
                    "[BOLD] 0.43†",
                    "[BOLD] 0.53†",
                    "[BOLD] 0.76",
                    "[BOLD] 0.79†",
                    "[BOLD] 0.78",
                    "[BOLD] 0.78†"
                ]
            ]
        },
        "gold_description": "the experimental results are shown in table 1 . as keller is created based on the pp distribution and have relatively small size while sp - 10k is created based on random sampling and has a much larger size , we treat the performance on sp - 10k as the major evaluation . our embeddings significantly outperform other baselines , especially embedding based baselines . the only exception is pp on the keller dataset due to its biased distribution . in addition , there are other interesting observations . first , compared with ' dobj ' and ' nsubj ' , ' amod ' is simpler for word2vec and glove . the reason behind is that conventional embeddings only capture the co - occurrence information , which is enough to predict the selectional preference of",
        "generated_description": "we find that elmo , bert , and d - embeddings are all significantly more friendly than word2vec and glove , with the exception of the slightly worse performance of elmo on the sp - 10k dataset . we also find that bert ( static ) and elmo ( dynamic ) are less friendly than the other contextual embeddings , which we attribute to the fact that they are pretrained on wikipedia , which is not the same as the training data used for fine - tuning . we do not find any significant difference between elmo and bert for the keller dataset , which may be due to the small size of the training set , but note that the difference is statistically significant ( p < 0 . 01 ) ."
    },
    {
        "table_id": "131",
        "table_info": {
            "table_caption": "Table 3: Spearman’s correlation of different embeddings for the WS measurement. ‘nsubj’, ‘dobj’, ‘amod’ represents the embeddings of the corresponding relation and ‘center’ indicates the center embeddings. h, t, h+t, and [h,t] refer to the head, tail, sum of two embeddings, and the concatenation of them, respectively. The best scores are marked in bold fonts.",
            "table_column_names": [
                "Model word2vec",
                "Model word2vec",
                "noun 0.41",
                "verb 0.28",
                "adjective 0.44",
                "overall 0.38"
            ],
            "table_content_values": [
                [
                    "Glove",
                    "Glove",
                    "0.40",
                    "0.22",
                    "0.53",
                    "0.37"
                ],
                [
                    "D-embedding",
                    "D-embedding",
                    "0.41",
                    "0.27",
                    "0.38",
                    "0.36"
                ],
                [
                    "nsubj",
                    "h",
                    "0.46",
                    "0.29",
                    "0.54",
                    "0.43"
                ],
                [
                    "nsubj",
                    "t",
                    "0.45",
                    "0.25",
                    "0.48",
                    "0.40"
                ],
                [
                    "nsubj",
                    "h+t",
                    "0.44",
                    "0.23",
                    "0.50",
                    "0.40"
                ],
                [
                    "nsubj",
                    "[h,t]",
                    "0.47",
                    "0.27",
                    "0.51",
                    "0.42"
                ],
                [
                    "dobj",
                    "h",
                    "0.46",
                    "0.27",
                    "0.45",
                    "0.41"
                ],
                [
                    "dobj",
                    "t",
                    "0.45",
                    "0.23",
                    "0.46",
                    "0.40"
                ],
                [
                    "dobj",
                    "h+t",
                    "0.45",
                    "0.20",
                    "0.45",
                    "0.38"
                ],
                [
                    "dobj",
                    "[h,t]",
                    "0.46",
                    "0.25",
                    "0.48",
                    "0.42"
                ],
                [
                    "amod",
                    "h",
                    "0.47",
                    "0.25",
                    "0.52",
                    "0.37"
                ],
                [
                    "amod",
                    "t",
                    "0.46",
                    "0.24",
                    "0.50",
                    "0.38"
                ],
                [
                    "amod",
                    "h+t",
                    "0.46",
                    "0.24",
                    "0.52",
                    "0.38"
                ],
                [
                    "amod",
                    "[h,t]",
                    "0.47",
                    "0.26",
                    "0.52",
                    "0.38"
                ],
                [
                    "center",
                    "h",
                    "0.51",
                    "[BOLD] 0.33",
                    "[BOLD] 0.57",
                    "[BOLD] 0.48"
                ],
                [
                    "center",
                    "t",
                    "0.51",
                    "0.30",
                    "0.56",
                    "0.47"
                ],
                [
                    "center",
                    "h+t",
                    "[BOLD] 0.52",
                    "0.31",
                    "0.54",
                    "0.46"
                ],
                [
                    "center",
                    "[h,t]",
                    "0.51",
                    "0.32",
                    "0.57",
                    "[BOLD] 0.48"
                ]
            ]
        },
        "gold_description": "results are reported in table 3 with several observations . first , our model achieves the best overall performance and significantly better on nouns , which can be explained by that nouns appear in all 9the only possible sp relation between nouns and adjectives is ' amod ' , while multiple sp relations could exist between nouns and verbs , and co occurrence information cannot effectively distinguish them . ( 2017 ) that three relations while most of the verbs and adjectives only appear in one or two relations . this result is promising since it is analyzed by solovyev et al . two - thirds of the frequent words are nouns ; thus there are potential benefits if our embeddings are used in downstream nlp tasks . second , the center embeddings achieve the best performance against all the other relationdependent embeddings , which demonstrates the effectiveness of our model in learning relationdependent information over words and also enhancing their overall semantics .",
        "generated_description": "we can see that the subword - based models outperform the word2vec and d - embedding embeddings by a large margin , indicating that subword information is useful for this task . the nsubj and dobj models perform better than the glove - based ones , and the combination of h and t achieves the best overall score ."
    },
    {
        "table_id": "132",
        "table_info": {
            "table_caption": "Table 4: Comparison of MWE against language models on the WS task. Overall performance, embedding dimension, and training time (days) on a single GPU are reported.",
            "table_column_names": [
                "Model",
                "WS",
                "Dimension",
                "Training Time"
            ],
            "table_content_values": [
                [
                    "ELMo",
                    "0.434",
                    "512",
                    "≈40"
                ],
                [
                    "BERT",
                    "0.486",
                    "768",
                    "≈300"
                ],
                [
                    "MWE",
                    "0.476",
                    "300",
                    "4.17"
                ]
            ]
        },
        "gold_description": "we also compare mwe with pre - trained contextualized word embedding models in table 4 for this task , with overall performance , embedding dimensions , and training times reported . it is observed that that mwe outperforms elmo and achieves comparable results with bert with smaller embedding dimension and much less training complexities .",
        "generated_description": "overall performance , embedding dimension , and training time of mwe are similar to those of the state - of - the - art language models . mwe achieves slightly better performance than elmo and bert on the ws task . however , mwe is significantly faster than bert and elmo . this is due to the fact that bert is pre - trained on a large corpus , which makes its embeddings much more efficient than mwe ."
    },
    {
        "table_id": "133",
        "table_info": {
            "table_caption": "Table 5: Comparisons of different training strategies.",
            "table_column_names": [
                "Training Strategy",
                "Averaged SPA",
                "Overall WS"
            ],
            "table_content_values": [
                [
                    "[ITALIC] λ = 1",
                    "0.762",
                    "0.476"
                ],
                [
                    "[ITALIC] λ = 0",
                    "0.073",
                    "0.018"
                ],
                [
                    "[ITALIC] λ = 0.5",
                    "0.493",
                    "0.323"
                ],
                [
                    "Alternating optimization",
                    "0.775",
                    "0.476"
                ]
            ]
        },
        "gold_description": "as shown in table 5 , we compare our model with several different strategies . the first one is to put all weights to the center embedding ( fix λ to 1 ) , which never updates the local relational embeddings . as a result , it can achieve similar performance on word similarity measurement but is inferior in sp acquisition because no relationdependent information is preserved .",
        "generated_description": "in this section , we compare the alternating optimization strategy with other training strategies . we observe that the proposed strategy with λ = 0 . 5 achieves the best overall performance and the alternating optimization strategy achieves the second best averaged spa and second best overall ws performance . the alternating optimization training strategy performs better than the other two strategies ."
    },
    {
        "table_id": "134",
        "table_info": {
            "table_caption": "Table 3: Single Transformers trained to convergence on 1M WAT Ja-En, batch size 4096",
            "table_column_names": [
                "Representation",
                "Batches / update",
                "Learning rate",
                "Test BLEU"
            ],
            "table_content_values": [
                [
                    "Plain BPE",
                    "1",
                    "0.025",
                    "27.5"
                ],
                [
                    "Plain BPE",
                    "1",
                    "0.2",
                    "27.2"
                ],
                [
                    "Plain BPE",
                    "8",
                    "0.2",
                    "28.9"
                ],
                [
                    "Linearized derivation",
                    "1",
                    "0.025",
                    "25.6"
                ],
                [
                    "Linearized derivation",
                    "1",
                    "0.2",
                    "25.6"
                ],
                [
                    "Linearized derivation",
                    "8",
                    "0.2",
                    "28.7"
                ]
            ]
        },
        "gold_description": "results in table 3 show that large batch training can significantly improve the performance of single transformers , particularly when trained to produce longer sequences . accumulating the gradient over 8 batches of size 4096 gives a 3 bleu improvement for the linear derivation model . it has been suggested that decaying the learning rate can have a similar effect to large batch training ( smith et al . , 2017 ) , but reducing the initial learning rate by a factor of 8 alone did not give the same improvements .",
        "generated_description": "we train single transformers to convergence on 1m wat ja - en sentences , batch size 4096 . we use the same hyperparameters as in the previous experiments , except that we use a smaller learning rate for the linearized derivation loss and a smaller batch size for the bpe encoder ."
    },
    {
        "table_id": "135",
        "table_info": {
            "table_caption": "Table 4: Single models on Ja-En. Previous evaluation result included for comparison.",
            "table_column_names": [
                "Architecture",
                "Representation",
                "Dev BLEU",
                "Test BLEU"
            ],
            "table_content_values": [
                [
                    "Seq2seq (8-model ensemble)",
                    "Best WAT17 result Morishita et al. ( 2017 )",
                    "-",
                    "28.4"
                ],
                [
                    "Seq2seq",
                    "Plain BPE",
                    "21.6",
                    "21.2"
                ],
                [
                    "Seq2seq",
                    "Linearized derivation",
                    "21.9",
                    "21.2"
                ],
                [
                    "Transformer",
                    "Plain BPE",
                    "28.0",
                    "28.9"
                ],
                [
                    "Transformer",
                    "Linearized tree",
                    "28.2",
                    "28.4"
                ],
                [
                    "Transformer",
                    "Linearized derivation",
                    "28.5",
                    "28.7"
                ],
                [
                    "Transformer",
                    "POS/BPE",
                    "28.5",
                    "29.1"
                ]
            ]
        },
        "gold_description": "our plain bpe baseline ( table 4 ) outperforms the current best system on wat ja - en , an 8 - model ensemble ( morishita et al . , 2017 ) . our syntax models achieve similar results despite producing much longer sequences .",
        "generated_description": "morishita et al . the tree - based representation is slightly better than the plain bpe model , but still falls short of the current state - of - the - art by 0 . 4 bleu . the pos / bpe model outperforms the previous state of the art by 1 . 0 on both the development and test sets . we also experiment with a linearized derivation model , where the derivation is based on the pos tag , but it does not outperform the tree model ."
    },
    {
        "table_id": "136",
        "table_info": {
            "table_caption": "Table 5: Ja-En Transformer ensembles: † marks significant improvement on plain BPE baseline shown in Table 4 (p<0.05 using bootstrap resampling (Koehn et al., 2007)).",
            "table_column_names": [
                "External representation",
                "Internal representation",
                "Test BLEU"
            ],
            "table_content_values": [
                [
                    "Plain BPE",
                    "Plain BPE",
                    "29.2"
                ],
                [
                    "Linearized derivation",
                    "Linearized derivation",
                    "28.8"
                ],
                [
                    "Linearized tree",
                    "Plain BPE",
                    "28.9"
                ],
                [
                    "Plain BPE",
                    "Linearized derivation",
                    "28.8"
                ],
                [
                    "Linearized derivation",
                    "Plain BPE",
                    "29.4†"
                ],
                [
                    "POS/BPE",
                    "Plain BPE",
                    "29.3†"
                ],
                [
                    "Plain BPE",
                    "POS/BPE",
                    "29.4†"
                ]
            ]
        },
        "gold_description": "ensembles of two identical models trained with different seeds only slightly improve over the single model ( table 5 ) . however , an ensemble of models producing plain bpe and linearized derivations improves by 0 . 5 bleu over the plain bpe baseline .",
        "generated_description": "for the sake of completeness , we also include results for the j - en and ja - en ensembles using plain bpe as the external bpe representation . we see that the pos / bpe model slightly outperforms the bpe baseline by 0 . 2 bleu , and the tree - based representation slightly underperforms the linearized derivation model ."
    },
    {
        "table_id": "137",
        "table_info": {
            "table_caption": "Table 1: BLEU score variation across WMT’17 language arcs for cased (top) and uncased (bottom) BLEU. Each column varies the processing of the “online-B” system output and its references. basic denotes basic user-supplied tokenization, split adds compound splitting, unk replaces words not appearing at least twice in the training data with UNK, and metric denotes the metric-supplied tokenization used by WMT. The range row lists the difference between the smallest and largest scores, excluding unk.",
            "table_column_names": [
                "config",
                "English→⋆ en-cs",
                "English→⋆ en-de",
                "English→⋆ en-fi",
                "English→⋆ en-lv",
                "English→⋆ en-ru",
                "English→⋆ en-tr",
                "⋆→English cs-en",
                "⋆→English de-en",
                "⋆→English fi-en",
                "⋆→English lv-en",
                "⋆→English ru-en",
                "⋆→English tr-en"
            ],
            "table_content_values": [
                [
                    "basic",
                    "20.7",
                    "25.8",
                    "22.2",
                    "16.9",
                    "33.3",
                    "18.5",
                    "26.8",
                    "31.2",
                    "26.6",
                    "21.1",
                    "36.4",
                    "24.4"
                ],
                [
                    "split",
                    "20.7",
                    "26.1",
                    "22.6",
                    "17.0",
                    "33.3",
                    "18.7",
                    "26.9",
                    "31.7",
                    "26.9",
                    "21.3",
                    "36.7",
                    "24.7"
                ],
                [
                    "unk",
                    "20.9",
                    "26.5",
                    "25.4",
                    "18.7",
                    "33.8",
                    "20.6",
                    "26.9",
                    "31.4",
                    "27.6",
                    "22.7",
                    "37.5",
                    "25.2"
                ],
                [
                    "metric",
                    "20.1",
                    "26.6",
                    "22.0",
                    "17.9",
                    "32.0",
                    "19.9",
                    "27.4",
                    "33.0",
                    "27.6",
                    "22.0",
                    "36.9",
                    "25.6"
                ],
                [
                    "[ITALIC] range",
                    "0.6",
                    "0.8",
                    "0.6",
                    "1.0",
                    "1.3",
                    "1.4",
                    "0.6",
                    "1.8",
                    "1.0",
                    "0.9",
                    "0.5",
                    "1.2"
                ],
                [
                    "basic [ITALIC] lc",
                    "21.2",
                    "26.3",
                    "22.5",
                    "17.4",
                    "33.3",
                    "18.9",
                    "27.7",
                    "32.5",
                    "27.5",
                    "22.0",
                    "37.3",
                    "25.2"
                ],
                [
                    "split [ITALIC] lc",
                    "21.3",
                    "26.6",
                    "22.9",
                    "17.5",
                    "33.4",
                    "19.1",
                    "27.8",
                    "32.9",
                    "27.8",
                    "22.2",
                    "37.5",
                    "25.4"
                ],
                [
                    "unk [ITALIC] lc",
                    "21.4",
                    "27.0",
                    "25.6",
                    "19.1",
                    "33.8",
                    "21.0",
                    "27.8",
                    "32.6",
                    "28.3",
                    "23.6",
                    "38.3",
                    "25.9"
                ],
                [
                    "metric [ITALIC] lc",
                    "20.6",
                    "27.2",
                    "22.4",
                    "18.5",
                    "32.8",
                    "20.4",
                    "28.4",
                    "34.2",
                    "28.5",
                    "23.0",
                    "37.8",
                    "26.4"
                ],
                [
                    "[ITALIC] rangelc",
                    "0.6",
                    "0.9",
                    "0.5",
                    "1.1",
                    "0.6",
                    "1.5",
                    "0.7",
                    "1.7",
                    "1.0",
                    "1.0",
                    "0.5",
                    "1.2"
                ]
            ]
        },
        "gold_description": "table 1 demonstrates the effect of computing bleu scores with different reference tokenizations . the changes in each column show the effect these different schemes have , as high as 1 . 8 for one arc , and averaging around 1 . 0 . the biggest is the treatment of case , which is well known , yet many papers are not clear about whether they report cased or case - insensitive bleu . the variations in table 1 are only some of the possible configurations , since there is no limit to the preprocessing that a group could apply .",
        "generated_description": "we observe that the basic configuration performs slightly worse than the split and unk configurations on all language pairs except for english → cs and english → { cs , de , en , fi , en - lv , ru , en - ru , cs - en , de - en } . the unk configuration slightly outperforms the basic one on most language pairs , except for fi - en and lv - en on english ↔ { en , fr , ru } . the split configuration performs better than the unk one on all languages except for en - cs and en - fr - en . the basic and split configurations perform similarly on the remaining language pairs ."
    },
    {
        "table_id": "138",
        "table_info": {
            "table_caption": "Table 2: System performance on the SPMRL and Wiki5K datasets.",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] % perf",
                "[BOLD] P",
                "[BOLD] R",
                "[BOLD] F"
            ],
            "table_content_values": [
                [
                    "[BOLD] SPMRL",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "[ITALIC] baseline",
                    "69.65",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[ITALIC] UDPipe",
                    "89.65",
                    "93.52",
                    "68.82",
                    "79.29"
                ],
                [
                    "[ITALIC] yap",
                    "94.25",
                    "86.33",
                    "96.33",
                    "91.05"
                ],
                [
                    "[ITALIC] RF",
                    "[BOLD] 98.19",
                    "[BOLD] 97.59",
                    "[BOLD] 96.57",
                    "[BOLD] 97.08"
                ],
                [
                    "[ITALIC] DNN",
                    "97.27",
                    "95.90",
                    "95.01",
                    "95.45"
                ],
                [
                    "[BOLD] Wiki5K",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "[ITALIC] baseline",
                    "67.61",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[ITALIC] UDPipe",
                    "87.39",
                    "92.03",
                    "64.88",
                    "76.11"
                ],
                [
                    "[ITALIC] yap",
                    "92.66",
                    "85.55",
                    "92.34",
                    "88.81"
                ],
                [
                    "[ITALIC] RF",
                    "[BOLD] 97.63",
                    "[BOLD] 97.41",
                    "[BOLD] 95.31",
                    "[BOLD] 96.35"
                ],
                [
                    "[ITALIC] DNN",
                    "95.72",
                    "94.95",
                    "92.22",
                    "93.56"
                ]
            ]
        },
        "gold_description": "table 2 shows the results of several systems on both datasets . 7 the column ' % perf ' indicates the proportion of perfectly segmented super - tokens , while the next three columns indicate precision , recall and f - score for boundary detection , not including the trivial final position characters . the first baseline strategy of not segmenting anything is given in the first row , and unsurprisingly gets many cases right , but performs badly overall . a more intelligent baseline is provided by udpipe ( straka et al . 2016 ; retrained on the spmrl data ) , which , for super - tokens in morphologically rich languages such as hebrew , implements a ' most common segmentation ' baseline ( i . e . each super - token is given its most common segmentation from training data , forgoing segmentation for oov items ) . 8 results for yap represent pure segmentation performance from the previous state of the art ( more and tsarfaty , 2016 ) . the best two approaches in the present paper are represented next : the extra trees random forest variant , 9 called rftokenizer , is labeled rf and the dnn - based system is labeled dnn . surprisingly , while the dnn is a close runner up , the best performance is achieved by the rftokenizer , de spite not having access to word embeddings . its high performance on the spmrl dataset makes it difficult to converge to a better solution using the dnn , though it is conceivable that substantially more data , a better feature representation and / or more hyperparameter tuning could equal or surpass the rftokenizer ' s performance . coupled with a lower cost in system resources and external dependencies , and the ability to forgo large model files to store word embeddings , we consider the rftokenizer solution to be better given the current training data size . performance on the out of domain dataset is",
        "generated_description": "on the spmrl dataset , the baseline is a udpipe - based logistic regression classifier trained on the training set . the udpipe classifier achieves an f - score of 69 . 65 % on the test set . on the wiki5k dataset , our classifiers achieve f - scores of 67 . 61 % and 64 . 88 % for udpipe and udpipeipe , respectively . the classifiers that use raw tweets as features ( rf , dnn , and yap ) perform significantly better than the baseline , with rf performing the best and dnn the second best ."
    },
    {
        "table_id": "139",
        "table_info": {
            "table_caption": "Table 3: Effects of removing features on performance, ordered by descending F-score impact on SPMRL.",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] % perf",
                "[BOLD] P",
                "[BOLD] R",
                "[BOLD] F"
            ],
            "table_content_values": [
                [
                    "[BOLD] SPMRL",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "FINAL",
                    "98.19",
                    "97.59",
                    "96.57",
                    "97.08"
                ],
                [
                    "-expansion",
                    "98.01",
                    "97.25",
                    "96.35",
                    "96.80"
                ],
                [
                    "-vowels",
                    "97.99",
                    "97.55",
                    "95.97",
                    "96.75"
                ],
                [
                    "-letters",
                    "97.77",
                    "96.98",
                    "95.73",
                    "96.35"
                ],
                [
                    "-letr-vowl",
                    "97.57",
                    "97.56",
                    "94.44",
                    "95.97"
                ],
                [
                    "-lexicon",
                    "94.79",
                    "92.08",
                    "91.46",
                    "91.77"
                ],
                [
                    "[BOLD] Wiki5K",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "FINAL",
                    "97.63",
                    "97.41",
                    "95.31",
                    "96.35"
                ],
                [
                    "-expansion",
                    "97.33",
                    "96.64",
                    "95.31",
                    "95.97"
                ],
                [
                    "-vowels",
                    "97.51",
                    "97.56",
                    "94.87",
                    "96.19"
                ],
                [
                    "-letters",
                    "97.27",
                    "96.89",
                    "94.71",
                    "95.79"
                ],
                [
                    "-letr-vowl",
                    "96.72",
                    "97.17",
                    "92.77",
                    "94.92"
                ],
                [
                    "-lexicon",
                    "94.72",
                    "92.53",
                    "91.51",
                    "92.01"
                ]
            ]
        },
        "gold_description": "table 3 gives an overview of the impact on performance when specific features are removed : the entire lexicon , lexicon expansion , letter identity , ' vowel ' features from section 3 . 1 , and both of the latter . performance is high even in ablation scenarios , though we keep in mind that baselines for the task are high ( e . g . ' most frequent lookup ' , the udpipe strategy , achieves close to 90 % ) . the results show the centrality of the lexicon : removing lexicon lookup features degrades performance by about 3 . 5 % perfect accuracy , or 5 . 5 f - score points . all other ablations impact performance by less than 1 % or 1 . 5 f - score points . expanding the lexicon using wikipedia data offers a contribution of 0 . 3 – 0 . 4 points , confirming the original lexicon ' s incompleteness . 10 looking more closely at the other features , it is surprising that identity of the letters is not crucial , as long as we have access to dictionary lookup using the letters . nevertheless , removing letter identity impacts especially boundary recall , perhaps does not break down drastically . the impact on wiki5k is stronger , possibly because the necessary memorization of familiar contexts is less effective out of domain . because some letters receive identical lookup values ( e . g . single letter prepositions such as b ' in ' , l ' to ' ) but have different segmentation likelihoods . the ' vowel ' features , though ostensibly redundant with letter identity , help a little , causing 0 . 33 spmrl f - score point degradation if removed . a",
        "generated_description": "on the spmrl dataset , we see that deletion of vowels , letters , and letr - vowl all hurt performance by less than 0 . 5 % in terms of f - measure . on the wiki5k dataset , deletion of lemmas , expansion , and lexicon also hurt performance slightly , but not as much as deletion of letters and vowels ."
    },
    {
        "table_id": "140",
        "table_info": {
            "table_caption": "Table 3: Maximum perturbation space size in the SST and AG News test set using word / character substitutions, which is the maximum number of forward passes per sentence to evaluate in the exhaustive verification.",
            "table_column_names": [
                "Perturbation radius",
                "[ITALIC] δ=1",
                "[ITALIC] δ=2",
                "[ITALIC] δ=3"
            ],
            "table_content_values": [
                [
                    "SST-word",
                    "49",
                    "674",
                    "5,136"
                ],
                [
                    "SST-character",
                    "206",
                    "21,116",
                    "1,436,026"
                ],
                [
                    "AG-character",
                    "722",
                    "260,282",
                    "-"
                ]
            ]
        },
        "gold_description": "the allowable input perturbation space is much larger than for word - level synonym substitutions , as shown in table 3 . in table 3 , we show the maximum perturbation space size in the sst and ag news test set for different perturbation radii δ . this number grows exponentially as δ increases .",
        "generated_description": "we can see that the size of the perturbation space is proportional to the number of forward passes to evaluate in the exhaustive verification . for example , for sst - word , we need to evaluate 674 forward passes for δ = 1 to perturb the 5 , 136 words in the test set to achieve an exhaustive verification accuracy of 5 % , while for the character - based dataset , we require only 21 , 116 forward passes , which is less than the maximum number of passes needed to achieve the same accuracy ."
    },
    {
        "table_id": "141",
        "table_info": {
            "table_caption": "Table 1: Experimental results for changes up to δ=3 and δ=2 symbols on SST and AG dataset, respectively. We compare normal training, adversarial training, data augmentation and IBP-verifiable training, using three metrics on the test set: the nominal accuracy, adversarial accuracy, and exhaustively verified accuracy (Oracle) (%).",
            "table_column_names": [
                "[BOLD] Training",
                "[BOLD] Acc.",
                "[BOLD] SST-Char-Level  [BOLD] Adv. Acc.",
                "[BOLD] Oracle",
                "[BOLD] Acc.",
                "[BOLD] SST-Word-Level  [BOLD] Adv. Acc.",
                "[BOLD] Oracle",
                "[BOLD] Acc.",
                "[BOLD] AG-Char-Level  [BOLD] Adv. Acc.",
                "[BOLD] Oracle"
            ],
            "table_content_values": [
                [
                    "Normal",
                    "79.8",
                    "36.5",
                    "10.3",
                    "84.8",
                    "71.3",
                    "69.8",
                    "89.5",
                    "75.4",
                    "65.1"
                ],
                [
                    "Adversarial",
                    "79.0",
                    "[BOLD] 74.9",
                    "25.8",
                    "[BOLD] 85.0",
                    "76.8",
                    "74.6",
                    "[BOLD] 90.5",
                    "85.5",
                    "81.6"
                ],
                [
                    "Data aug.",
                    "79.8",
                    "37.8",
                    "13.7",
                    "85.4",
                    "72.7",
                    "71.6",
                    "88.4",
                    "77.5",
                    "72.0"
                ],
                [
                    "Verifiable (IBP)",
                    "74.2",
                    "73.1",
                    "[BOLD] 73.1",
                    "81.7",
                    "[BOLD] 77.2",
                    "[BOLD] 76.5",
                    "87.6",
                    "[BOLD] 87.1",
                    "[BOLD] 87.1"
                ]
            ]
        },
        "gold_description": "table 1 shows the results of ibp training and baseline models under δ = 3 and δ = 24 perturbations on sst and ag news , respectively . in table 1 , comparing adversarial accuracy with exhaustive verification accuracy ( oracle ) , we observe that although adversarial training is effective at defending against hotflip attacks ( 74 . 9 / 76 . 8 / 85 . 5 % ) , the oracle adversarial accuracy under exhaustive testing ( 25 . 8 / 74 . 6 / 81 . 6 % ) is much lower in sst - character / sst - word / ag - character level , respectively . in table 1 , when the perturbation space is larger ( sst character - level vs . sst word - level ) , ( a ) across models , there is a larger gap in adversarial accuracy and true robustness ( oracle ) ; ( b ) the difference in oracle robustness between ibp and adversarial training is even larger ( 73 . 1 % vs . 25 . 8 % and 76 . 5 % vs . 74 . 6 % ) . the resulting models achieve the highest exhaustively verified accuracy at the cost of only moderate deterioration in nominal accuracy ( table 1 ) .",
        "generated_description": "we observe that the adversarial training and data augmentation strategies do not consistently improve the model ’ s performance , and in some cases actually hurt it . this is most evident for sst - char - level , where the oracle accuracy is lower than that of the model trained on the original training set . for the ag - char and word - level datasets , training on adversarial examples leads to a lower oracle performance than training on original training data . we hypothesize that this is due to the fact that the classifier is less confident in its predictions when it is making correct predictions , resulting in fewer false positives and fewer false negatives ."
    },
    {
        "table_id": "142",
        "table_info": {
            "table_caption": "Table 2: Macro precision (P), recall (R), F1 for the binary violation prediction task (± std. dev.).",
            "table_column_names": [
                "[EMPTY]",
                "P",
                "R",
                "F1"
            ],
            "table_content_values": [
                [
                    "majority",
                    "32.9 ± 0.0",
                    "50.0 ± 0.0",
                    "39.7 ± 0.0"
                ],
                [
                    "coin-toss",
                    "50.4 ± 0.7",
                    "50.5 ± 0.8",
                    "49.1 ± 0.7"
                ],
                [
                    "[BOLD] Non-Anonymized",
                    "[BOLD] Non-Anonymized",
                    "[BOLD] Non-Anonymized",
                    "[BOLD] Non-Anonymized"
                ],
                [
                    "bow-svm",
                    "71.5 ± 0.0",
                    "72.0 ± 0.0",
                    "71.8 ± 0.0"
                ],
                [
                    "bigru-att",
                    "87.1 ± 1.0",
                    "77.2 ± 3.4",
                    "79.5 ± 2.7"
                ],
                [
                    "han",
                    "88.2 ± 0.4",
                    "78.0 ± 0.2",
                    "80.5 ± 0.2"
                ],
                [
                    "bert",
                    "24.0 ± 0.2",
                    "50.0 ± 0.0",
                    "17.0 ± 0.5"
                ],
                [
                    "hier-bert",
                    "[BOLD] 90.4 ± 0.3",
                    "[BOLD] 79.3 ± 0.9",
                    "[BOLD] 82.0 ± 0.9"
                ],
                [
                    "[BOLD] Anonymized",
                    "[BOLD] Anonymized",
                    "[BOLD] Anonymized",
                    "[BOLD] Anonymized"
                ],
                [
                    "bow-svm",
                    "71.6 ± 0.0",
                    "70.5 ± 0.0",
                    "70.9 ± 0.0"
                ],
                [
                    "bigru-att",
                    "[BOLD] 87.0 ± 1.0",
                    "76.6 ± 1.9",
                    "78.9 ± 1.9"
                ],
                [
                    "han",
                    "85.2 ± 4.9",
                    "[BOLD] 78.3 ± 2.0",
                    "[BOLD] 80.2 ± 2.7"
                ],
                [
                    "bert",
                    "17.0 ± 3.0",
                    "50.0 ± 0.0",
                    "25.4 ± 0.4"
                ],
                [
                    "hier-bert",
                    "85.2 ± 0.3",
                    "78.1 ± 1.3",
                    "80.1 ± 1.1"
                ]
            ]
        },
        "gold_description": "table 2 ( upper part ) shows the results for binary violation . we evaluate models using macroaveraged precision ( p ) , recall ( p ) , f1 . the weak baselines ( majority , coin - toss ) are widely outperformed by the rest of the methods . bigruatt outperforms in f1 ( 79 . 5 vs . 71 . 8 ) the previous best performing method ( aletras et al . , 2016 ) in english judicial prediction . han slightly improves over bigru - att ( 80 . 5 vs . 79 . 5 ) , while being more robust across runs ( 0 . 2 % vs . 2 . 7 % std . dev . ) . the results in table 2 indicate that performance is comparable even when this information is masked , with the exception of hier - bert that has quite worse results ( 2 % ) compared to using non - anonymized data , suggesting model bias .",
        "generated_description": "in the non - anonymized setting , we observe that hier - bert is the best method in terms of recall and f1 , followed by bigru - bert and bow - svm . in the anonymized setting ( i . e . , without using any unlabeled data ) , the performance of bert is significantly worse than the majority baseline , indicating that there is still room for improvement ."
    },
    {
        "table_id": "143",
        "table_info": {
            "table_caption": "Table 1: Comparison of labeling strategies using many-to-one mapping for target languages with available test data, using 500 clusters or number of states. Accuracy is shown in percentage points.",
            "table_column_names": [
                "Seq. Tagger",
                "en",
                "de",
                "fr",
                "ru",
                "fa",
                "sw"
            ],
            "table_content_values": [
                [
                    "brown",
                    "81.37",
                    "[BOLD] 81.28",
                    "84.81",
                    "[BOLD] 79.78",
                    "[BOLD] 86.94",
                    "87.35"
                ],
                [
                    "marlin",
                    "[BOLD] 81.53",
                    "81.25",
                    "[BOLD] 85.4",
                    "79.14",
                    "86.64",
                    "[BOLD] 88.81"
                ],
                [
                    "a-hmm",
                    "77.12",
                    "74.85",
                    "81.48",
                    "73.88",
                    "80.25",
                    "76.69"
                ],
                [
                    "e-kmeans",
                    "63.01",
                    "65.14",
                    "68.68",
                    "70.80",
                    "76.94",
                    "65.08"
                ]
            ]
        },
        "gold_description": "we evaluate our four labeling strategies using the many - to - one approach , as presented in table 1 . in all cases , clustering by type with brown - based algorithms works better than using a sophisticated tagger such as a - hmm .",
        "generated_description": "for most target languages , using many - to - one mapping results in better performance than using k - means , with the exception of brazilian portuguese ( a - hmm ) , where e - kmeans slightly outperforms brown . however , the difference is not statistically significant for most languages ."
    },
    {
        "table_id": "144",
        "table_info": {
            "table_caption": "Table 2: Performance of cipher grounder using brown (|C|=500) as labeler. The best PL for each CL besides itself, is shown in bold. The artificial case where we have CL POS data (PL=CL) is shown for comparison, as is the ultimately used cipher-avg method.",
            "table_column_names": [
                "CL",
                "Parent Language (PL) en",
                "Parent Language (PL) de",
                "Parent Language (PL) fr",
                "Parent Language (PL) it",
                "Parent Language (PL) es",
                "Parent Language (PL) ja",
                "Parent Language (PL) cs",
                "Parent Language (PL) ru",
                "Parent Language (PL) ar",
                "Parent Language (PL) sw",
                "cipher-avg",
                "PL=CL"
            ],
            "table_content_values": [
                [
                    "en",
                    "-",
                    "57.1",
                    "[BOLD] 60.4",
                    "59.9",
                    "59.4",
                    "25.1",
                    "52.8",
                    "49.0",
                    "30.7",
                    "28.4",
                    "56.4",
                    "73.9"
                ],
                [
                    "fr",
                    "58.1",
                    "56.0",
                    "-",
                    "68.6",
                    "[BOLD] 71.9",
                    "23.6",
                    "48.3",
                    "47.8",
                    "35.0",
                    "26.7",
                    "58.6",
                    "76.7"
                ],
                [
                    "fa",
                    "13.8",
                    "32.3",
                    "29.7",
                    "22.7",
                    "33.3",
                    "19.7",
                    "33.3",
                    "[BOLD] 43.5",
                    "37.0",
                    "38.2",
                    "37.4",
                    "73.3"
                ],
                [
                    "sw",
                    "24.9",
                    "14.3",
                    "37.3",
                    "21.2",
                    "35.9",
                    "21.3",
                    "25.8",
                    "27.9",
                    "[BOLD] 38.96",
                    "-",
                    "37.8",
                    "69.4"
                ]
            ]
        },
        "gold_description": "table 2 presents the intrinsic performance of the cipher grounder over all pl - cl pairs considered . the difference between the best and the worst performing pl for each cl ranges from 24 . 62 percentage points for swahili to 48 . 34 points for french , and an average difference of 34 . 5 points among all languages . the case when pl = cl is also presented in table 2 as a reference and provides a reliable upper - bound under zero - resource conditions . it is worth noting the difference in accuracy when comparing the best performing pl for each cl with its corresponding pl = cl upper - bound . among all cls , the best cipher grounder for french ( es - fr ) gets the closest to its upper - bound with just 4 . 81 percentage points of difference , followed by the english grounder ( fr - en ) with 13 . 53 points of difference . as shown in table 2 , this model , cipher - avg , obtains accuracy scores of 56 . 4 , 58 . 6 , 37 . 4 , and 37 . 8 % for en , fr , fa , and sw , respectively . when compared to the best performing pl for each cl ( see bold cells in table 2 ) , it can be noticed that the performance gap ranges from just 1 . 2 percentage points for swahili to 13 . 3 points for french , with an average of 6 . 1 points among all target languages .",
        "generated_description": "we can see that the cipher - avg model outperforms the cl baseline by a large margin , e . g . , by more than 10 bleu points in most cases . this shows that the use of transfer learning improves the performance of the model as a whole when transferring from a different language to another ."
    },
    {
        "table_id": "145",
        "table_info": {
            "table_caption": "Table 3: Comparison of performance over the NOUN tag, as measured by precision (P), recall (R), and F1 scores, between our combined cipher grounder (cipher-avg) and a supervised tagger.",
            "table_column_names": [
                "CL",
                "cipher-avg P",
                "cipher-avg R",
                "cipher-avg F1",
                "Supervised P",
                "Supervised R",
                "Supervised F1"
            ],
            "table_content_values": [
                [
                    "en",
                    "47.70",
                    "64.4",
                    "54.81",
                    "94.04",
                    "90.44",
                    "92.20"
                ],
                [
                    "fr",
                    "56.26",
                    "78.82",
                    "65.65",
                    "96.15",
                    "93.72",
                    "94.92"
                ],
                [
                    "fa",
                    "64.94",
                    "51.23",
                    "57.27",
                    "96.48",
                    "97.77",
                    "97.12"
                ],
                [
                    "sw",
                    "53.46",
                    "51.82",
                    "52.63",
                    "98.88",
                    "97.50",
                    "98.18"
                ]
            ]
        },
        "gold_description": "let us now compare the performance of cipher - avg with that of a vanilla supervised neural model . 11 table 3 shows precision , recall , and f1 scores for the noun tag . even though cipher - avg achieved mixed results ( mid to low accuracy ) , the model robustly achieves mid - range performance according to f1 - score for all cls . the results are even more optimistic in terms of recall for english and french , and in terms of precision for farsi and swahili .",
        "generated_description": "we compare the performance of our combined cipher grounder ( cipher - avg ) with that of a supervised tagger , which is trained on the full training set of the target language as well as the source language . for comparison , we also report the f1 score of a classifier that is trained only on the supervised training set , that is , the tagger that is provided to the model in the form of a special unk token ( i . e . , the noun tag ) ."
    },
    {
        "table_id": "146",
        "table_info": {
            "table_caption": "Table 4: Impact of grounded unsupervised POS tagging on MaLOPa’s ‘zero-resource’ condition. Bold entries indicate an improvement over the baseline condition of having no POS tag information (beyond punctuation)",
            "table_column_names": [
                "Test Tags",
                "de UAS",
                "de LAS",
                "fr UAS",
                "fr LAS",
                "es UAS",
                "es LAS",
                "it UAS",
                "it LAS",
                "pt UAS",
                "pt LAS",
                "sv UAS",
                "sv LAS"
            ],
            "table_content_values": [
                [
                    "gold",
                    "65.57",
                    "52.37",
                    "71.27",
                    "59.80",
                    "73.26",
                    "63.13",
                    "71.46",
                    "59.66",
                    "63.28",
                    "54.93",
                    "77.50",
                    "64.90"
                ],
                [
                    "none",
                    "40.90",
                    "18.61",
                    "51.14",
                    "30.91",
                    "43.82",
                    "17.67",
                    "48.22",
                    "33.29",
                    "37.89",
                    "16.72",
                    "38.15",
                    "17.96"
                ],
                [
                    "cipher (this work)",
                    "38.31",
                    "[BOLD] 24.72",
                    "[BOLD] 54.46",
                    "[BOLD] 41.04",
                    "[BOLD] 55.56",
                    "[BOLD] 41.16",
                    "[BOLD] 54.05",
                    "[BOLD] 39.78",
                    "[BOLD] 46.97",
                    "[BOLD] 36.07",
                    "[BOLD] 55.06",
                    "[BOLD] 36.51"
                ]
            ]
        },
        "gold_description": "likewise , the utility of cipher - avg tags for dependency parsing under zero - resource scenarios is summarized in table 4 and table 5 . we first analyze the effect of pos tag information at test time for the malopa setup in table 4 . first we remove all pos signal except trivial punctuation information ( none row ) , and , predictably , the scores drop significantly across all target languages . then , we use our cipher tags ( cipher row ) and see improvements for all languages in las and for all but one language in uas ( de ) .",
        "generated_description": "s4ss0sss0px3 impact of named entity recognition we first investigate the impact of the grounded unsupervised pos tagging model on the mal task . we use the same experimental setup as in the main paper , except that we use gold spans instead of pos tags . we observe that the cipher tagger improves over the gold ones for all languages , and that the improvement is more pronounced for languages with fewer training examples ."
    },
    {
        "table_id": "147",
        "table_info": {
            "table_caption": "Table 5: Changing to unsupervised muse embeddings boosts MaLOPa’s zero-resource performance significantly (bold entries), in many cases doing so even without any POS tag information (italic entries), however noisy decipherment-based POS tags are no longer helpful.",
            "table_column_names": [
                "Embeddings",
                "Test Tags",
                "de UAS",
                "de LAS",
                "fr UAS",
                "fr LAS",
                "es UAS",
                "es LAS",
                "it UAS",
                "it LAS",
                "pt UAS",
                "pt LAS",
                "sv UAS",
                "sv LAS"
            ],
            "table_content_values": [
                [
                    "guo",
                    "gold",
                    "65.57",
                    "52.37",
                    "71.27",
                    "59.80",
                    "73.26",
                    "63.13",
                    "71.46",
                    "59.66",
                    "63.28",
                    "54.93",
                    "[BOLD] 77.50",
                    "[BOLD] 64.90"
                ],
                [
                    "muse",
                    "gold",
                    "[BOLD] 66.19",
                    "[BOLD] 56.28",
                    "[BOLD] 80.86",
                    "[BOLD] 72.65",
                    "[BOLD] 81.06",
                    "[BOLD] 73.62",
                    "[BOLD] 82.08",
                    "[BOLD] 72.40",
                    "[BOLD] 81.17",
                    "[BOLD] 76.17",
                    "72.46",
                    "61.71"
                ],
                [
                    "muse",
                    "none",
                    "57.26",
                    "45.10",
                    "[ITALIC] 73.84",
                    "[ITALIC] 63.09",
                    "[ITALIC] 77.01",
                    "[ITALIC] 67.06",
                    "71.36",
                    "[ITALIC] 60.48",
                    "[ITALIC] 75.31",
                    "[ITALIC] 68.36",
                    "60.82",
                    "45.25"
                ],
                [
                    "muse",
                    "cipher",
                    "48.56",
                    "37.13",
                    "69.94",
                    "59.22",
                    "73.86",
                    "61.68",
                    "69.30",
                    "56.85",
                    "73.41",
                    "65.23",
                    "57.39",
                    "41.49"
                ]
            ]
        },
        "gold_description": "likewise , the utility of cipher - avg tags for dependency parsing under zero - resource scenarios is summarized in table 4 and table 5 . we then take the next logical step and remove the parallel data - grounded embeddings , replacing them with fully unsupervised muse embeddings . table 5 summarizes these results . it can be observed that pos signal improves performance greatly for all languages when using muse embeddings . here we note a mixed result : whilst de , sv , and it do benefit from pos information , the other languages do not , obtaining great improvements from muse embed dings instead . finally , consider muse - cipher ( gold pos tags during training , cipher tags during testing ) . when compared to muse - none setup , it can be observed that , unfortunately , the heuristic pos tagger is too noisy and gets in muse ' s way .",
        "generated_description": "we can see that guo outperforms all the other tags in terms of both uas and las for all languages , and that the performance of guo with gold - standard test tags is better than that of any of the other embeddings when tested on the other languages . for example , the las score for fr is increased from 45 . 10 to 52 . 37 when using guo as the test tag instead of the synthetic one , and the uas score increases from 52 . 27 to 54 . 93 when using the synthetic test tag ."
    },
    {
        "table_id": "148",
        "table_info": {
            "table_caption": "Table 3: Micro precision, recall, F1 in multi-label violation for all, frequent, and few training instances.",
            "table_column_names": [
                "overall (all labels)",
                "overall (all labels)  [BOLD] P",
                "overall (all labels)  [BOLD] R",
                "overall (all labels)  [BOLD] F1"
            ],
            "table_content_values": [
                [
                    "bow-svm",
                    "56.3 ± 0.0",
                    "45.5 ± 0.0",
                    "50.4 ± 0.0"
                ],
                [
                    "bigru-att",
                    "62.6 ± 1.2",
                    "50.9 ± 1.5",
                    "56.2 ± 1.3"
                ],
                [
                    "han",
                    "65.0 ± 0.4",
                    "[BOLD] 55.5 ± 0.7",
                    "59.9 ± 0.5"
                ],
                [
                    "lwan",
                    "62.5 ± 1.0",
                    "53.5 ± 1.1",
                    "57.6 ± 1.0"
                ],
                [
                    "hier-bert",
                    "[BOLD] 65.9 ± 1.4",
                    "55.1 ± 3.2",
                    "[BOLD] 60.0 ± 1.3"
                ],
                [
                    "frequent (≥50)",
                    "frequent (≥50)",
                    "frequent (≥50)",
                    "frequent (≥50)"
                ],
                [
                    "bow-svm",
                    "56.3 ± 0.0",
                    "45.6 ± 0.0",
                    "50.4 ± 0.0"
                ],
                [
                    "bigru-att",
                    "62.7 ± 1.2",
                    "52.2 ± 1.6",
                    "57.0 ± 1.4"
                ],
                [
                    "han",
                    "65.1 ± 0.3",
                    "[BOLD] 57.0 ± 0.8",
                    "[BOLD] 60.8 ± 1.3"
                ],
                [
                    "lwan",
                    "62.8 ± 1.2",
                    "54.7 ± 1.2",
                    "58.5 ± 1.0"
                ],
                [
                    "hier-bert",
                    "[BOLD] 66.0 ± 1.4",
                    "56.5 ± 3.3",
                    "[BOLD] 60.8 ± 1.3"
                ],
                [
                    "few ([1,50))",
                    "few ([1,50))",
                    "few ([1,50))",
                    "few ([1,50))"
                ],
                [
                    "bow-svm",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "bigru-att",
                    "36.3 ± 13.8",
                    "03.2 ± 23.1",
                    "05.6 ± 03.8"
                ],
                [
                    "han",
                    "30.2 ± 35.1",
                    "01.6 ± 01.2",
                    "02.8 ± 01.9"
                ],
                [
                    "lwan",
                    "24.9 ± 06.3",
                    "[BOLD] 07.0 ± 04.1",
                    "[BOLD] 10.6 ± 05.2"
                ],
                [
                    "hier-bert",
                    "[BOLD] 43.6 ± 14.5",
                    "05.0 ± 02.8",
                    "08.9 ± 04.9"
                ]
            ]
        },
        "gold_description": "table 3 reports micro - averaged precision ( p ) , recall ( r ) , and f1 results for all methods , now including lwan , in multi - label violation prediction . the results are also grouped by label frequency for all ( overall ) , frequent , and few labels ( articles ) , counting frequencies on the training subset . we observe that predicting specific articles that have been violated is a much more difficult task than predicting if any article has been violated in a binary setup ( cf . table 2 ) . overall , hier - bert outperforms bigru - att and lwan ( 60 . 0 vs . 57 . micro - f1 ) , which is tailored for multi - labeling tasks , while being comparable with han ( 60 . 0 vs . 59 . 9 micro - f1 ) . all models under - perform in labels with few training examples , demonstrating the difficulty of few - shot learning in echr legal judgment prediction .",
        "generated_description": "the table shows that hier - bert obtains the best overall performance , followed by bigru - att and han , and lwan and bow - svm are the best on frequent and frequent labels , respectively ."
    },
    {
        "table_id": "149",
        "table_info": {
            "table_caption": "Table 1: Historical datasets used in the experiments",
            "table_column_names": [
                "[BOLD] Dataset/Language",
                "[BOLD] Dataset/Language",
                "[BOLD] Time Period",
                "[BOLD] Genre",
                "[BOLD] Tokens Train",
                "[BOLD] Tokens Dev",
                "[BOLD] Tokens Test"
            ],
            "table_content_values": [
                [
                    "DEA",
                    "German (Anselm)",
                    "14th–16th c.",
                    "Religious",
                    "233,947",
                    "45,996",
                    "45,999"
                ],
                [
                    "DER",
                    "German (RIDGES)",
                    "1482–1652",
                    "Science",
                    "41,857",
                    "9,712",
                    "9,587"
                ],
                [
                    "EN",
                    "English",
                    "1386–1698",
                    "Letters",
                    "147,826",
                    "16,334",
                    "17,644"
                ],
                [
                    "ES",
                    "Spanish",
                    "15th–19th c.",
                    "Letters",
                    "97,320",
                    "11,650",
                    "12,479"
                ],
                [
                    "HU",
                    "Hungarian",
                    "1440–1541",
                    "Religious",
                    "134,028",
                    "16,707",
                    "16,779"
                ],
                [
                    "IS",
                    "Icelandic",
                    "15th c.",
                    "Religious",
                    "49,633",
                    "6,109",
                    "6,037"
                ],
                [
                    "PT",
                    "Portuguese",
                    "15th–19th c.",
                    "Letters",
                    "222,525",
                    "26,749",
                    "27,078"
                ],
                [
                    "SLB",
                    "Slovene (Bohorič)",
                    "1750–1840s",
                    "Diverse",
                    "50,023",
                    "5,841",
                    "5,969"
                ],
                [
                    "SLG",
                    "Slovene (Gaj)",
                    "1840s–1899",
                    "Diverse",
                    "161,211",
                    "20,878",
                    "21,493"
                ],
                [
                    "SV",
                    "Swedish",
                    "1527–1812",
                    "Diverse",
                    "24,458",
                    "2,245",
                    "29,184"
                ]
            ]
        },
        "gold_description": "table 1 gives an overview of the historical datasets . covering eight languages from different language families — english , german , hungarian , icelandic , spanish , portuguese , slovene , and swedish — as well as different text genres and time periods .",
        "generated_description": "in this section , we evaluate the performance of the proposed method on a wide range of publicly available text classification datasets across a variety of domains , languages , and time periods . the first four datasets ( dea , der , en , es , and pt ) are collected from the united states conference on emmissions and recognition ( iarpa ) the last three datasets ( es , hu , and is ) are collections of letters written by lay persons in spanish , portuguese , and turkish , respectively . each dataset is divided into a training set , a development set , and a test set . the development set is used to select the best performing model based on the performance on the development set ."
    },
    {
        "table_id": "150",
        "table_info": {
            "table_caption": "Table 2: Word accuracy of different normalization methods on the test sets of the historical datasets, in percent; best result for each dataset in bold; results marked with an asterisk (*) are not significantly different from the best result using McNemar’s test at p<0.05. † indicates scores that were not (re)produced here, but reported in previous work; they might not be strictly comparable due to differences in data preprocessing (cf. Sec. 3). Additionally, Identity shows the accuracy when leaving all word forms unchanged, while Maximum gives the theoretical maximum accuracy with purely token-level methods.",
            "table_column_names": [
                "[BOLD] Method",
                "[BOLD] Dataset DEA",
                "[BOLD] Dataset DER",
                "[BOLD] Dataset EN",
                "[BOLD] Dataset ES",
                "[BOLD] Dataset HU",
                "[BOLD] Dataset IS",
                "[BOLD] Dataset PT",
                "[BOLD] Dataset SLB",
                "[BOLD] Dataset SLG",
                "[BOLD] Dataset SV"
            ],
            "table_content_values": [
                [
                    "[ITALIC] Identity",
                    "[ITALIC] 30.63",
                    "[ITALIC] 44.36",
                    "[ITALIC] 75.29",
                    "[ITALIC] 73.40",
                    "[ITALIC] 17.53",
                    "[ITALIC] 47.62",
                    "[ITALIC] 65.19",
                    "[ITALIC] 40.74",
                    "[ITALIC] 85.38",
                    "[ITALIC] 58.59"
                ],
                [
                    "[ITALIC] Maximum",
                    "[ITALIC] 94.64",
                    "[ITALIC] 96.46",
                    "[ITALIC] 98.57",
                    "[ITALIC] 97.40",
                    "[ITALIC] 98.70",
                    "[ITALIC] 93.46",
                    "[ITALIC] 97.65",
                    "[ITALIC] 98.71",
                    "[ITALIC] 98.96",
                    "[ITALIC] 98.97"
                ],
                [
                    "Norma, Lookup",
                    "83.86",
                    "82.15",
                    "92.45",
                    "92.51",
                    "74.58",
                    "82.84",
                    "91.67",
                    "81.76",
                    "93.90",
                    "83.80"
                ],
                [
                    "Norma, Rule-based",
                    "76.48",
                    "82.52",
                    "90.85",
                    "88.59",
                    "78.73",
                    "83.72",
                    "86.33",
                    "86.09",
                    "91.63",
                    "85.23"
                ],
                [
                    "Norma, Distance-based",
                    "58.92",
                    "73.30",
                    "83.92",
                    "84.41",
                    "62.38",
                    "69.95",
                    "77.28",
                    "71.02",
                    "88.20",
                    "76.03"
                ],
                [
                    "Norma (Combined)",
                    "88.02",
                    "86.55",
                    "94.60",
                    "94.41",
                    "86.83",
                    "*86.85",
                    "94.19",
                    "89.45",
                    "91.44",
                    "87.12"
                ],
                [
                    "cSMTiser",
                    "88.82",
                    "*88.06",
                    "*95.21",
                    "*95.01",
                    "*91.63",
                    "*87.10",
                    "*95.09",
                    "*93.18",
                    "*95.99",
                    "[BOLD] 91.13"
                ],
                [
                    "cSMTiser+LM",
                    "86.69",
                    "*88.19",
                    "[BOLD] 95.24",
                    "[BOLD] 95.02",
                    "[BOLD] 91.70",
                    "*86.83",
                    "[BOLD] 95.18",
                    "[BOLD] 93.30",
                    "[BOLD] 96.01",
                    "*91.11"
                ],
                [
                    "NMT (Bollmann,  2018 )",
                    "89.16",
                    "*88.07",
                    "94.80",
                    "*94.83",
                    "91.17",
                    "86.45",
                    "94.64",
                    "91.61",
                    "95.19",
                    "90.27"
                ],
                [
                    "NMT (Tang et al.,  2018 )",
                    "[BOLD] 89.64",
                    "[BOLD] 88.22",
                    "94.95",
                    "*94.84",
                    "*91.65",
                    "[BOLD] 87.31",
                    "94.51",
                    "92.60",
                    "*95.85",
                    "90.39"
                ],
                [
                    "†SMT (Pettersson et al.,  2014 )",
                    "–",
                    "–",
                    "94.3–",
                    "–",
                    "80.1–",
                    "71.8–",
                    "–",
                    "–",
                    "–",
                    "92.9–"
                ],
                [
                    "†NMT (Tang et al.,  2018 )",
                    "–",
                    "–",
                    "94.69",
                    "–",
                    "91.69",
                    "87.59",
                    "–",
                    "–",
                    "–",
                    "91.56"
                ]
            ]
        },
        "gold_description": "table 2 shows the results of this evaluation . the extent of spelling variation varies greatly between datasets , with less than 15 % of tokens requiring normalization ( slg ) to more than 80 % ( hu ) . the maximum accuracy is above 97 % for most datasets , for the normalization systems , we observe significantly better word accuracy with smt than nmt on four of the datasets , and non - significant differences on five others . there is only one dataset ( dea ) where the nmt system by tang et al . ( 2018 ) gets significantly better word accuracy than other systems . overall , the deep nmt model by tang et al . ( 2018 ) consistently outperforms the shallow one by bollmann ( 2018 ) . finally , while norma does produce competitive results on sev eral datasets ( particularly in the \" combined \" setting ) , it is generally significantly behind the smt and nmt methods .",
        "generated_description": "we observe that norma , lookup performs better than the identity baseline for all languages except for hindi , where it is the second - best performing method , closely followed by the maximum baseline . the best performing method for each of the other languages is also the one with the highest score across all languages , except for the english pt dataset , where norma performs the best . overall , we observe that our method is competitive with the state - of - the - art , and in some cases even outperforms it ."
    },
    {
        "table_id": "151",
        "table_info": {
            "table_caption": "Table 4: Mean Absolute Error and Spearman’s ρ for case importance. Importance ranges from 1 (most important) to 4 (least). * Not Applicable.",
            "table_column_names": [
                "[EMPTY]",
                "MAE",
                "spearman’s  [ITALIC] ρ"
            ],
            "table_content_values": [
                [
                    "majority",
                    "[BOLD] .369 ± .000",
                    "[ITALIC] N/ [ITALIC] A*"
                ],
                [
                    "bow-svr",
                    ".585 ± .000",
                    ".370 ± .000"
                ],
                [
                    "bigru-att",
                    ".539 ± .073",
                    ".459 ± .034"
                ],
                [
                    "han",
                    ".524 ± .049",
                    ".437 ± .018"
                ],
                [
                    "hier-bert",
                    ".437 ± .018",
                    "[BOLD] .527 ± .024"
                ]
            ]
        },
        "gold_description": "bow - svr performs worse than bigru - att , while han is 10 % and 3 % better , respectively . hier - bert further improves the results , outperforming han by 17 % . hier - bert has the best ρ ( . 527 ) , indicating a moderate positive correlation ( > 0 . 5 ) , which is not the case for the rest of the methods .",
        "generated_description": "we use spearman ’ s ρ to measure the correlation between the mae and the case importance of each system . we find that hier - bert is the most important system , followed by bigru - att and han , and bow - svr is the least important ."
    },
    {
        "table_id": "152",
        "table_info": {
            "table_caption": "Table 1: 2015 & 2017 test set Smatch scores",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] 2015",
                "[BOLD] 2017"
            ],
            "table_content_values": [
                [
                    "Ours",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "local edge + projective decoder",
                    "70.2 \\scalebox 0.8$±0.3$",
                    "[BOLD] 71.0 ±0.5"
                ],
                [
                    "local edge + fixed-tree decoder",
                    "69.4 \\scalebox 0.8$±0.6$",
                    "70.2 \\scalebox 0.8$±0.5$"
                ],
                [
                    "K&G edge + projective decoder",
                    "68.6 \\scalebox 0.8$±0.7$",
                    "69.4 \\scalebox 0.8$±0.4$"
                ],
                [
                    "K&G edge + fixed-tree decoder",
                    "69.6 \\scalebox 0.8$±0.4$",
                    "69.9 \\scalebox 0.8$±0.2$"
                ],
                [
                    "Baselines",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "fixed-tree (type-unaware)",
                    "26.0 \\scalebox 0.8$±0.6$",
                    "27.9 \\scalebox 0.8$±0.6$"
                ],
                [
                    "JAMR-style",
                    "66.1",
                    "66.2"
                ],
                [
                    "Previous work",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "CAMR Wang et al. ( 2015 )",
                    "66.5",
                    "-"
                ],
                [
                    "JAMR Flanigan et al. ( 2016 )",
                    "67",
                    "-"
                ],
                [
                    "E17-1051",
                    "64",
                    "-"
                ],
                [
                    "van2017neural",
                    "68.5",
                    "[BOLD] 71.0"
                ],
                [
                    "foland2017abstract",
                    "[BOLD] 70.7",
                    "-"
                ],
                [
                    "buys2017oxford",
                    "-",
                    "61.9"
                ]
            ]
        },
        "gold_description": "table 1 shows the smatch scores ( cai and knight , 2013 ) of our models , compared to a selection of previously published results . the fixed - tree decoder seems to work well with either edge model , but performance of the projective decoder drops with the k & g edge scores . as expected , the type - unaware baseline has low recall , the fact that our models outperform the jamr - style baseline so clearly is an indication that",
        "generated_description": "our method outperforms all the baselines , including the state - of - the - art joint jamr model of wang et al . our model with the projective decoder achieves the best overall performance , outperforming the baseline with the fixed - tree decoder by 0 . 8 $ ± 0 . 5 % in f1 score . the k & g edge model also improves over the baseline , but not as much as our model ."
    },
    {
        "table_id": "153",
        "table_info": {
            "table_caption": "Table 2: Details for the LDC2015E86 and LDC2017T10 test sets",
            "table_column_names": [
                "[BOLD] Metric",
                "[BOLD] 2015 W’15",
                "[BOLD] 2015 F’16",
                "[BOLD] 2015 D’17",
                "[BOLD] 2015 PD",
                "[BOLD] 2015 FTD",
                "[BOLD] 2017 vN’17",
                "[BOLD] 2017 PD",
                "[BOLD] 2017 FTD"
            ],
            "table_content_values": [
                [
                    "Smatch",
                    "67",
                    "67",
                    "64",
                    "[BOLD] 70",
                    "[BOLD] 70",
                    "[BOLD] 71",
                    "[BOLD] 71",
                    "70"
                ],
                [
                    "Unlabeled",
                    "69",
                    "69",
                    "69",
                    "[BOLD] 73",
                    "[BOLD] 73",
                    "[BOLD] 74",
                    "[BOLD] 74",
                    "[BOLD] 74"
                ],
                [
                    "No WSD",
                    "64",
                    "68",
                    "65",
                    "[BOLD] 71",
                    "70",
                    "[BOLD] 72",
                    "[BOLD] 72",
                    "70"
                ],
                [
                    "Named Ent.",
                    "75",
                    "79",
                    "[BOLD] 83",
                    "79",
                    "78",
                    "[BOLD] 79",
                    "78",
                    "77"
                ],
                [
                    "Wikification",
                    "0",
                    "[BOLD] 75",
                    "64",
                    "71",
                    "72",
                    "65",
                    "[BOLD] 71",
                    "[BOLD] 71"
                ],
                [
                    "Negations",
                    "18",
                    "45",
                    "48",
                    "[BOLD] 52",
                    "[BOLD] 52",
                    "[BOLD] 62",
                    "57",
                    "55"
                ],
                [
                    "Concepts",
                    "80",
                    "83",
                    "83",
                    "83",
                    "[BOLD] 84",
                    "82",
                    "[BOLD] 84",
                    "[BOLD] 84"
                ],
                [
                    "Reentrancies",
                    "41",
                    "42",
                    "41",
                    "[BOLD] 46",
                    "44",
                    "[BOLD] 52",
                    "49",
                    "46"
                ],
                [
                    "SRL",
                    "60",
                    "60",
                    "56",
                    "[BOLD] 63",
                    "61",
                    "[BOLD] 66",
                    "64",
                    "62"
                ]
            ]
        },
        "gold_description": "table 2 analyzes the performance of our two best systems ( pd = projective , ftd = fixed - tree ) in more detail , and compares them to wang ' s , flanigan ' s , and damonte ' s amr parsers on the 2015 set and , and van noord and bos ( 2017b ) for the 2017 dataset . the good scores we achieve on reentrancy identification ,",
        "generated_description": "we see that the most important metric is smatch , which measures the percentage of sentences that match the gold standard in terms of named entities and synonyms . this is the only metric that does not perform well on any of the three datasets . the second best metric is unlabeled , which is based on the unlabeled sentences , and the third is wikification , which we use to measure the extent to which the provided wikification information is useful for the paraphrase detection task . in general , we see that unigram and bigram overlap is the most effective measure of syntactic generalization , followed by named entity disambiguation , and finally by wikification ."
    },
    {
        "table_id": "154",
        "table_info": {
            "table_caption": "Table 2: Main results.",
            "table_column_names": [
                "System",
                "Dev",
                "Test"
            ],
            "table_content_values": [
                [
                    "TSP-gen",
                    "21.12",
                    "22.44"
                ],
                [
                    "JAMR-gen",
                    "23.00",
                    "23.00"
                ],
                [
                    "All",
                    "[BOLD] 25.24",
                    "[BOLD] 25.62"
                ],
                [
                    "NoInducedRule",
                    "16.75",
                    "17.43"
                ],
                [
                    "NoConceptRule",
                    "23.99",
                    "24.86"
                ],
                [
                    "NoMovingDistance",
                    "23.48",
                    "24.06"
                ],
                [
                    "NoReorderModel",
                    "25.09",
                    "25.43"
                ]
            ]
        },
        "gold_description": "over the rules used on the 1 - best result , more than 30 % are non - terminal rules , on the other hand , 30 % are glue rules . finally , terminal rules take the largest percentage ,",
        "generated_description": "we can see that the all model achieves the best performance on both development and test sets . the performance of the tsp - gen and jamr - gen baselines drops a lot when we remove the induction rule , the concept rule and the moving distance rule , and the reorder model . the noinducedrule and noconceptrule models perform worse than the all system , which indicates that the inductive rule is more important than the rule induction and moving distance rules . we also find that the noreordermodel model performs the worst among all the models ."
    },
    {
        "table_id": "155",
        "table_info": {
            "table_caption": "Table 3: Rules used for decoding.",
            "table_column_names": [
                "[EMPTY]",
                "Glue",
                "Nonterminal",
                "Terminal"
            ],
            "table_content_values": [
                [
                    "1-best",
                    "30.0%",
                    "30.1%",
                    "39.9%"
                ]
            ]
        },
        "gold_description": "over the rules used on the 1 - best result , more than 30 % are non - terminal rules . on the other hand , 30 % are glue rules . finally , terminal rules take the largest percentage",
        "generated_description": "we use beam search with beam search decoding with beam size 10 . the beam search results in a beam search error rate of 30 . 0 % for the nonterminal symbol . the error rate for the terminal symbol is 39 . 9 % , which is significantly higher than for the glue symbol ( 30 . 0 % ) ."
    },
    {
        "table_id": "156",
        "table_info": {
            "table_caption": "Table 2: Label distribution of train, dev, and test set",
            "table_column_names": [
                "[EMPTY]",
                "happy",
                "angry",
                "sad",
                "others",
                "size"
            ],
            "table_content_values": [
                [
                    "Train",
                    "14.07%",
                    "18.26%",
                    "18.11%",
                    "49.56%",
                    "30160"
                ],
                [
                    "Dev",
                    "5.15%",
                    "5.44%",
                    "4.54%",
                    "84.86%",
                    "2755"
                ],
                [
                    "Test",
                    "4.28%",
                    "5.57%",
                    "4.45%",
                    "85.70%",
                    "5509"
                ]
            ]
        },
        "gold_description": "according to the description in ( codalab , 2019 ) , the label distribution for dev and test sets are roughly 4 % for each of the emotions . however , from the dev set ( table 2 ) we know that the proportions of each of the emotion categories are better described as % 5 each , thereby we use % 5 as the empirical estimation of distribution pte ( xtr i ) . we did not use the exact proportion of dev set as the estimation to prevent the overfitting towards dev set . the sample distribution of the train set is used as ptr ( xtr i ) .",
        "generated_description": "we split the data into three parts : train , dev , and test sets . the train set is used for model training , while the dev and test set are used to evaluate the performance of the model on the dev set . the dev set is split into 80 % for training , 20 % for development , and 10 % for testing . the model performance on the test set is evaluated using the official evaluation script provided by the task organizer ."
    },
    {
        "table_id": "157",
        "table_info": {
            "table_caption": "Table 1: Macro-F1 scores and its harmonic means of the four models",
            "table_column_names": [
                "[EMPTY]",
                "F1",
                "Happy",
                "Angry",
                "Sad",
                "Harm. Mean"
            ],
            "table_content_values": [
                [
                    "SL",
                    "Dev",
                    "0.6430",
                    "0.7530",
                    "0.7180",
                    "0.7016"
                ],
                [
                    "SL",
                    "Test",
                    "0.6400",
                    "0.7190",
                    "0.7300",
                    "0.6939"
                ],
                [
                    "SLD",
                    "Dev",
                    "0.6470",
                    "0.7610",
                    "0.7360",
                    "0.7112"
                ],
                [
                    "SLD",
                    "Test",
                    "0.6350",
                    "0.7180",
                    "0.7360",
                    "0.6934"
                ],
                [
                    "HRLCE",
                    "Dev",
                    "0.7460",
                    "0.7590",
                    "0.8100",
                    "[BOLD] 0.7706"
                ],
                [
                    "HRLCE",
                    "Test",
                    "0.7220",
                    "0.766",
                    "0.8180",
                    "[BOLD] 0.7666"
                ],
                [
                    "BERT",
                    "Dev",
                    "0.7138",
                    "0.7736",
                    "0.8106",
                    "0.7638"
                ],
                [
                    "BERT",
                    "Test",
                    "0.7151",
                    "0.7654",
                    "0.8157",
                    "0.7631"
                ]
            ]
        },
        "gold_description": "the results are shown in table 1 . it shows that the proposed hrlce model performs the best . the performance of sld and sl are very close to each other , on the dev set , sld performs better than sl but they have almost the same overall scores on the test set . the macrof1 scores of each emotion category are very different from each other : the classification accuracy for emotion sad is the highest in most of the cases , while the emotion happy is the least accurately classified by all the models . we also noticed that the performance on the dev set is generally slightly better than that on the test set .",
        "generated_description": "from the table , we can see that the harmonic means of the f1 scores of all the four models are significantly different from each other . for example , the harmonic mean of hrlce is 0 . 7706 higher than that of sld and sl on the test set , which is a significant improvement . this means that the model is able to distinguish between happy , angry and sad emotions better than the other two emotions . the harmonic means for bert are also significantly higher than those of sl and sld on both the development and test sets ."
    },
    {
        "table_id": "158",
        "table_info": {
            "table_caption": "Table 3: The intrinsic evaluation results.",
            "table_column_names": [
                "Aligner",
                "Alignment F1",
                "Oracle’s Smatch"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "(on hand-align)",
                    "(on dev. dataset)"
                ],
                [
                    "JAMR",
                    "90.6",
                    "91.7"
                ],
                [
                    "Our",
                    "95.2",
                    "94.7"
                ]
            ]
        },
        "gold_description": "table 3 shows the intrinsic evaluation results , in which our alignment intrinsically outperforms jamr aligner by achieving better alignment f1 score and leading to a higher scored oracle parser .",
        "generated_description": "we can see that our model outperforms jamr in both the alignment f1 and the oracle ’ s match rate , which indicates that our alignment model can produce more precise hand - aligned predictions ."
    },
    {
        "table_id": "159",
        "table_info": {
            "table_caption": "Table 4: The parsing results.",
            "table_column_names": [
                "model",
                "newswire",
                "all"
            ],
            "table_content_values": [
                [
                    "JAMR parser: Word, POS, NER, DEP",
                    "JAMR parser: Word, POS, NER, DEP",
                    "[EMPTY]"
                ],
                [
                    "+ JAMR aligner",
                    "71.3",
                    "65.9"
                ],
                [
                    "+ Our aligner",
                    "73.1",
                    "67.6"
                ],
                [
                    "CAMR parser: Word, POS, NER, DEP",
                    "CAMR parser: Word, POS, NER, DEP",
                    "[EMPTY]"
                ],
                [
                    "+ JAMR aligner",
                    "68.4",
                    "64.6"
                ],
                [
                    "+ Our aligner",
                    "68.8",
                    "65.1"
                ]
            ]
        },
        "gold_description": "table 4 shows the results . from this table , we can see that our alignment consistently improves all the parsers by a margin ranging from 0 . 5 to 1 . 7 .",
        "generated_description": "the jamr parser with our aligner achieves 71 . 3 % and 73 . 1 % accuracy on the newswire and all datasets , respectively . when we add the aligner , the accuracy improves to 68 . 8 % and 65 . 1 % , which are 1 . 4 % and 1 . 5 % absolute improvements over the baseline . the camr parser achieves 64 . 6 % accuracy , which is slightly worse than our model . the reason may be that the camr dataset is much smaller than the newswwire dataset , which makes it hard for the alignment model to capture the semantic similarity between sentences ."
    },
    {
        "table_id": "160",
        "table_info": {
            "table_caption": "Table 6: The parsing results. xn denotes the ensemble of n differently initialized parsers. The difference in rounding is due to previous works report differently rounded results. † BA17 represents the result of Ballesteros and Al-Onaizan (2017), ‡ Damonte et al. (2017)’s result is drawn from Ballesteros and Al-Onaizan (2017).",
            "table_column_names": [
                "model",
                "newswire",
                "all"
            ],
            "table_content_values": [
                [
                    "Our single parser: Word only",
                    "Our single parser: Word only",
                    "[EMPTY]"
                ],
                [
                    "+ JAMR aligner",
                    "68.6",
                    "63.9"
                ],
                [
                    "+ Our aligner",
                    "69.3",
                    "64.7"
                ],
                [
                    "Our single parser: Word, POS",
                    "Our single parser: Word, POS",
                    "[EMPTY]"
                ],
                [
                    "+ JAMR aligner",
                    "68.8",
                    "64.6"
                ],
                [
                    "+ Our aligner",
                    "69.8",
                    "65.2"
                ],
                [
                    "Our ensemble: Word only + Our aligner",
                    "Our ensemble: Word only + Our aligner",
                    "[EMPTY]"
                ],
                [
                    "x3",
                    "71.9",
                    "67.4"
                ],
                [
                    "x10",
                    "72.5",
                    "68.1"
                ],
                [
                    "Our ensemble: Word, POS + Our aligner",
                    "Our ensemble: Word, POS + Our aligner",
                    "[EMPTY]"
                ],
                [
                    "x3",
                    "72.5",
                    "67.7"
                ],
                [
                    "x10",
                    "73.3",
                    "[BOLD] 68.4"
                ],
                [
                    "BA17: Word only†",
                    "68",
                    "63"
                ],
                [
                    "+ POS",
                    "68",
                    "63"
                ],
                [
                    "+ POS, DEP",
                    "69",
                    "64"
                ],
                [
                    "Damonte et al. ( 2017 )‡",
                    "-",
                    "66"
                ],
                [
                    "Artzi et al. ( 2015 )",
                    "66.3",
                    "-"
                ],
                [
                    "Wang et al. ( 2015a )",
                    "70",
                    "66"
                ],
                [
                    "Pust et al. ( 2015 )",
                    "-",
                    "67.1"
                ],
                [
                    "Zhou et al. ( 2016 )",
                    "71",
                    "66"
                ],
                [
                    "Goodman et al. ( 2016 )",
                    "70",
                    "-"
                ],
                [
                    "Wang and Xue ( 2017 )",
                    "-",
                    "68.1"
                ]
            ]
        },
        "gold_description": "table 6 shows the performance of our transitionbased parser along with comparison to the parsers in the previous works . the second block in table 6 shows the results of our ensemble parser , in which ensemble significantly improves the performance and more parsers ensembled , more improvements are achieved .",
        "generated_description": "our parser with the jamr aligner outperforms the baseline with the help of our aligner by 1 . 8 % absolute f1 on the newswire test set , and 1 . 7 % on the whole test set . when we add the pos tagger to our parser , we obtain an additional 1 . 6 % absolute improvement over the baseline , but the gain diminishes after adding the aligner . we also compare our parser with damon et al . ’ s \\ newcitedamonte2017 on the test set of the wnli dataset . our parser achieves an f1 score of 71 . 9 % when trained on the word only subset of the training set , compared to the parser ’ s performance on the full test set ( 68 . 8 % ) ."
    },
    {
        "table_id": "161",
        "table_info": {
            "table_caption": "Table 1: SQA test results. † marks contextual models using the previous question or the answer to the previous question. * marks the models that use the table content. RA denotes an oracle model that has access to the previous reference answer at test time. ALL is the average question accuracy, SEQ the sequence accuracy, and POS X, the accuracy of the X’th question in a sequence.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] ALL",
                "[BOLD] SEQ",
                "[BOLD] POS1",
                "[BOLD] POS2",
                "[BOLD] POS3"
            ],
            "table_content_values": [
                [
                    "FP *",
                    "34.1",
                    "7.2",
                    "52.6",
                    "25.6",
                    "25.9"
                ],
                [
                    "NP *",
                    "39.4",
                    "10.8",
                    "58.9",
                    "35.9",
                    "24.6"
                ],
                [
                    "DynSp",
                    "42.0",
                    "10.2",
                    "[BOLD] 70.9",
                    "35.8",
                    "20.1"
                ],
                [
                    "FP † *",
                    "33.2",
                    "7.7",
                    "51.4",
                    "22.2",
                    "22.3"
                ],
                [
                    "NP † *",
                    "40.2",
                    "11.8",
                    "60.0",
                    "35.9",
                    "25.5"
                ],
                [
                    "DynSp †",
                    "44.7",
                    "12.8",
                    "70.4",
                    "41.1",
                    "23.6"
                ],
                [
                    "Camp † *",
                    "45.6",
                    "13.2",
                    "70.3",
                    "42.6",
                    "24.8"
                ],
                [
                    "Ours *",
                    "45.1",
                    "13.3",
                    "67.2",
                    "42.4",
                    "26.4"
                ],
                [
                    "Ours † *",
                    "[BOLD] 55.1",
                    "[BOLD] 28.1",
                    "67.2",
                    "[BOLD] 52.7",
                    "[BOLD] 46.8"
                ],
                [
                    "Ours † * (RA)",
                    "61.7",
                    "28.1",
                    "67.2",
                    "60.1",
                    "57.7"
                ]
            ]
        },
        "gold_description": "we compare our model to float parser ( fp ) ( pasupat and liang , 2015 ) , neural programmer ( np ) ( neelakantan et al . , 2016b ) , dynsp ( iyyer et al . , 2017 ) and camp ( sun et al . , 2018b ) in table 1 . we observe that our model improves the sota from 45 . 6 % by camp to 55 . 1 % in question accuracy ( all ) , reducing the relative error rate by 18 % . for the initial question ( pos1 ) , however , it is behind dynsp by 3 . 7 % . more interestingly , our model handles follow up questions especially well outperforming the previously best model fp by 20 % on pos3 , a 28 % relative error reduction . we observe that our model effectively leverages the context information by improving the average question accuracy from 45 . 1 % to 55 . 1 % in comparison to the use of context in dynsp yielding 2 . 7 % improvement . if we provide the previous reference answers , the average question accuracy jumps to 61 . 7 % , showing that 6 . 6 % of the errors are due to error propagation .",
        "generated_description": "our model outperforms all the baselines on the all and seq metrics , and obtains the highest scores on pos1 , pos2 and pos3 . our model also achieves the highest score on all the pos tags except for pos1 ."
    },
    {
        "table_id": "162",
        "table_info": {
            "table_caption": "Table 2: ESE performance (p@k). Best performing combination is bold faced.",
            "table_column_names": [
                "[EMPTY]",
                "[EMPTY]",
                "[BOLD] Location Eq. 5",
                "[BOLD] Location Eq. 6",
                "[BOLD] Location Eq. 7",
                "[BOLD] Person Eq. 5",
                "[BOLD] Person Eq. 6",
                "[BOLD] Person Eq. 7",
                "[BOLD] Gene Eq. 5",
                "[BOLD] Gene Eq. 6",
                "[BOLD] Gene Eq. 7",
                "[BOLD] Protein Eq. 5",
                "[BOLD] Protein Eq. 6",
                "[BOLD] Protein Eq. 7",
                "[BOLD] Cell Type Eq. 5",
                "[BOLD] Cell Type Eq. 6",
                "[BOLD] Cell Type Eq. 7",
                "[BOLD] Virus Eq. 5",
                "[BOLD] Virus Eq. 6",
                "[BOLD] Virus Eq. 7"
            ],
            "table_content_values": [
                [
                    "[BOLD] Seed 1",
                    "Eq. 8",
                    "0.37",
                    "0.40",
                    "0.50",
                    "0.23",
                    "0.23",
                    "0.30",
                    "0.00",
                    "0.03",
                    "0.13",
                    "0.17",
                    "0.23",
                    "0.20",
                    "0.27",
                    "0.50",
                    "0.53",
                    "0.20",
                    "0.13",
                    "0.17"
                ],
                [
                    "[EMPTY]",
                    "Eq. 9",
                    "0.63",
                    "[BOLD] 0.73",
                    "0.73",
                    "0.03",
                    "[BOLD] 0.17",
                    "0.20",
                    "0.03",
                    "[BOLD] 0.07",
                    "0.07",
                    "0.43",
                    "[BOLD] 0.43",
                    "0.53",
                    "0.17",
                    "[BOLD] 0.23",
                    "0.23",
                    "0.07",
                    "[BOLD] 0.10",
                    "0.07"
                ],
                [
                    "[BOLD] Seed 2",
                    "Eq. 8",
                    "0.33",
                    "0.33",
                    "0.57",
                    "0.53",
                    "0.40",
                    "0.30",
                    "0.63",
                    "0.63",
                    "0.63",
                    "0.17",
                    "0.60",
                    "0.27",
                    "0.10",
                    "0.20",
                    "0.13",
                    "0.07",
                    "0.03",
                    "0.03"
                ],
                [
                    "[EMPTY]",
                    "Eq. 9",
                    "0.57",
                    "[BOLD] 0.70",
                    "0.63",
                    "0.47",
                    "[BOLD] 0.37",
                    "0.37",
                    "0.60",
                    "[BOLD] 0.57",
                    "0.60",
                    "0.07",
                    "[BOLD] 0.30",
                    "0.30",
                    "0.07",
                    "[BOLD] 0.07",
                    "0.07",
                    "0.03",
                    "[BOLD] 0.10",
                    "0.03"
                ]
            ]
        },
        "gold_description": "we designed ese to output thirty candidate entities ( nps ) ranked based on the similarity to the seed term . therefore , we calculated precision at k ( p @ k ) where k is always 30 . table 2 shows the best results when using the feature ensemble method which is more stable than the non - ensemble one ( due to lower standard deviation and non - zero precision ) . according to the results , the best combination in terms of the mean and standard deviation is obtained when using tfidf ( eq . 5 ) to weigh the edges and context - dependent similarity ( eq . 8 ) to rank nps . this shows that the uniqueness and the significant overlap of features between noun phrases were very important .",
        "generated_description": "in this section , we show the results of applying the proposed method to the person , gene , protein , and cell type classification tasks . for each of these classification tasks , we randomly select one fold as the training set and use the rest of the folds as the test set to evaluate the performance of the model . this process is repeated 100 times for each of the five classification tasks and we report the mean and standard deviation of the micro - f1 scores ."
    },
    {
        "table_id": "163",
        "table_info": {
            "table_caption": "Table 3: Pipeline testing results of EAL and EAA annotation modes showing the model confidence (σ), F-Scores, and percentage cut from the pool of sentences.",
            "table_column_names": [
                "[BOLD] Dataset Name",
                "[BOLD] Entity Class",
                "[BOLD] EAL @ 1.0 F",
                "[BOLD] EAL @ 1.0 F",
                "[BOLD] EAA Annotation Mode  [BOLD] FA",
                "[BOLD] EAA Annotation Mode  [BOLD] HFA",
                "[BOLD] EAA Annotation Mode  [BOLD] UFA"
            ],
            "table_content_values": [
                [
                    "[BOLD] Dataset Name",
                    "[BOLD] Entity Class",
                    "[ITALIC] σ",
                    "% cut",
                    "[BOLD] F-Score (percentage cut)",
                    "[BOLD] F-Score (percentage cut)",
                    "[BOLD] F-Score (percentage cut)"
                ],
                [
                    "CoNLL-2003",
                    "Location",
                    "0.97",
                    "55%",
                    "0.99 (46%)",
                    "0.93 (83%)",
                    "0.82 (91%)"
                ],
                [
                    "CoNLL-2003",
                    "Person",
                    "0.97",
                    "59%",
                    "0.99 (48%)",
                    "0.95 (81%)",
                    "0.85 (90%)"
                ],
                [
                    "BioCreAtIvE II",
                    "Gene",
                    "0.94",
                    "35%",
                    "1.00 (35%)",
                    "0.96 (50%)",
                    "0.89 (69%)"
                ],
                [
                    "GENIA 3.02",
                    "Protein Molecule",
                    "0.99",
                    "33%",
                    "0.98 (36%)",
                    "0.87 (71%)",
                    "0.74 (85%)"
                ],
                [
                    "GENIA 3.02",
                    "Cell Type",
                    "0.99",
                    "62%",
                    "0.94 (70%)",
                    "0.82 (86%)",
                    "0.74 (91%)"
                ],
                [
                    "GENIA 3.02",
                    "Virus",
                    "0.94",
                    "24%",
                    "0.97 (79%)",
                    "0.89 (94%)",
                    "0.84 (96%)"
                ],
                [
                    "[BOLD] Average",
                    "[BOLD] Average",
                    "0.97",
                    "45%",
                    "0.98 (52%)",
                    "0.90 (78%)",
                    "0.81 (87%)"
                ]
            ]
        },
        "gold_description": "finally , for the last setting , we tested the system using the three auto - annotation modes ( i . e . , fa , hfa , and ufa ) as shown in table 3 . while the auto - annotation mode can allow us to reduce up to 87 % of the data pool , this drastic saving also reduces the accuracy of the learned model , achieving , on average , around 81 % f - score . overall , our framework presents a trade off between coverage and annotation cost . the hfa auto - annotation mode shows the benefit , especially in a realistic enterprise setting , when we need to annotate 33 % of the data to increase f - score by only 10 % ( when comparing the on average performance of hfa with esa ) is unreasonable . table 3 appears to show fa being inferior to eal in terms of the percentage cut for the location class , for example . in reality fa reduced sentence annotation by 65 % to reach 0 . 99 f - score . but as our testing criteria demanded that we either reach 1 . 0 f - score or finish all sentences from the pool , fa tried to finish the pool without any further performance improvement on the 0 . 99 f - score .",
        "generated_description": "in order to evaluate the performance of the proposed method , we compare it with the state - of - the - art methods in terms of eal @ 1 . 0 and f - score on the entity classification and annotation tasks . the results show that the proposed ufa method outperforms the other methods in both the eal and the eaa annotation mode . in particular , ufa outperforms hfa and fa in most cases ."
    },
    {
        "table_id": "164",
        "table_info": {
            "table_caption": "Table 1: Coarse text types in OntoNotes",
            "table_column_names": [
                "[BOLD] Spoken bc.conv",
                "[BOLD] Spoken 137,223",
                "[BOLD] Written news",
                "[BOLD] Written 68,6455"
            ],
            "table_content_values": [
                [
                    "bc.news",
                    "244,425",
                    "bible",
                    "243,040"
                ],
                [
                    "phone",
                    "110,132",
                    "trans.",
                    "98,143"
                ],
                [
                    "[EMPTY]",
                    "[EMPTY]",
                    "web",
                    "71467"
                ],
                [
                    "[BOLD] total",
                    "491,780",
                    "[BOLD] total",
                    "1,099,105"
                ],
                [
                    "[BOLD] total 1,590,885",
                    "[BOLD] total 1,590,885",
                    "[BOLD] total 1,590,885",
                    "[BOLD] total 1,590,885"
                ]
            ]
        },
        "gold_description": "the coreference annotated portion of the corpus contains 1 . 59 million tokens from multiple genres , presented in table 1 . written data constitutes the large bulk of material , primarily from newswire ( wall street journal data ) , as well as some data from the web and the new testament , and some translations of news and online discussions in arabic and chinese . the translated data has been placed in its own category : it behaves more conservatively in preferring strict agreement than non - translated language ( see section 4 . 2 ) , perhaps due to translators ' editorial practices . the spoken data comes primarily from television broadcasts , including dialogue data from msnbc , phoenix and other broadcast sources ( bc . conv ) , or news , from cnn , abc and others ( bc . news ) , as well as phone conversations .",
        "generated_description": "the ontonotes dataset is a large - scale text dataset that contains 1 . 4m labelled text documents from the wordnet glosses welleck et al . the texts are organized in the following order of granularity : bc . conv , news , bc . news , bible , phone , trans . and web . the text is organized according to the type of the context ( e . g . , written text , written news , or book ) ."
    },
    {
        "table_id": "165",
        "table_info": {
            "table_caption": "Table 2: Confusion matrix for test data classification",
            "table_column_names": [
                "[EMPTY]",
                "[EMPTY]",
                "Predicted Sg",
                "Predicted Pl",
                "Total"
            ],
            "table_content_values": [
                [
                    "Actual",
                    "Sg",
                    "222",
                    "39",
                    "261"
                ],
                [
                    "Actual",
                    "Pl",
                    "7",
                    "81",
                    "88"
                ],
                [
                    "[EMPTY]",
                    "Total",
                    "229",
                    "120",
                    "349"
                ]
            ]
        },
        "gold_description": "looking at the actual classifications obtained by the classifier produces the confusion matrix in table 2 . the matrix makes it clear that the classifier is very good at avoiding errors against the majority class : it almost never guesses ' notional ' when it shouldn ' t . conversely , about 1 / 3 of actual notional cases are misclassified , predicted to be ' strict ' . among the erroneous cases , only 6 belong to type iii ( about 15 % of errors ) , showing that the classifier largely handles this type quite well next to the other types , since type iii covers about 20 % of plural - to - singular agreement cases .",
        "generated_description": "the classifier achieves an f1 - score of 0 . 787 on the test data set . the misclassification rate is defined as the ratio of incorrectly classified samples over the total number of samples correctly classified . the precision and recall for grade level prediction are 0 . 8 and 0 . 9 respectively ."
    },
    {
        "table_id": "166",
        "table_info": {
            "table_caption": "Table 3: Agreement patterns across genres",
            "table_column_names": [
                "[BOLD] genre  [ITALIC] written",
                "[BOLD] agreement  [ITALIC] notional",
                "[BOLD] agreement  [ITALIC] strict",
                "[BOLD] agreement  [ITALIC] % notional"
            ],
            "table_content_values": [
                [
                    "bible",
                    "169",
                    "487",
                    "25.76"
                ],
                [
                    "newswire",
                    "344",
                    "843",
                    "28.98"
                ],
                [
                    "translations",
                    "55",
                    "210",
                    "20.75"
                ],
                [
                    "web",
                    "48",
                    "71",
                    "40.33"
                ],
                [
                    "[BOLD] total written",
                    "616",
                    "1611",
                    "27.66"
                ],
                [
                    "[ITALIC] spoken",
                    "[ITALIC] notional",
                    "[ITALIC] strict",
                    "[ITALIC] % notional"
                ],
                [
                    "bc.conv",
                    "237",
                    "201",
                    "54.11"
                ],
                [
                    "bc.news",
                    "296",
                    "378",
                    "43.91"
                ],
                [
                    "phone",
                    "60",
                    "89",
                    "40.26"
                ],
                [
                    "[BOLD] total spoken",
                    "593",
                    "668",
                    "47.02"
                ]
            ]
        },
        "gold_description": "next we can consider the effect of genre , and expectations that speech promotes notional agreement . this is confirmed in table 3 . however we note that individual genres do behave differently : data from the web is closer to spoken language . the most restrictive genre in avoiding notional agreement is translations . both of these facts may reflect a combination of modality , genre and editorial practice effects . however the strong differences suggest that genre is likely crucial to any model attempting to predict this phenomenon .",
        "generated_description": "we find that the genres bible and newswire have the highest agreement , with 25 . 76 % and 28 . 98 % notional agreement , respectively , followed closely by newswire with 20 . 75 % and 40 . 33 % strict agreement . the average agreement across genres is 43 . 91 % and 47 . 02 % for spoken and non - spoken genres , respectively . we observe similar patterns across genres , with the bible having the largest agreement ( 27 . 66 % ) and the newswire having the smallest ( 28 . 98 % ) ."
    },
    {
        "table_id": "167",
        "table_info": {
            "table_caption": "Table 3: Number of propositions per type in AMPERE.",
            "table_column_names": [
                "Eval",
                "Req",
                "Fact",
                "Ref",
                "Quot",
                "Non-A",
                "Total"
            ],
            "table_content_values": [
                [
                    "3,982",
                    "1,911",
                    "3,786",
                    "207",
                    "161",
                    "339",
                    "10,386"
                ]
            ]
        },
        "gold_description": "we also show the number of propositions in each category in table 3 . the most frequent types are evaluation ( 38 . 3 % ) and fact ( 36 . 5 % ) .",
        "generated_description": "the ampere dataset contains about 10 , 000 annotated propositions divided into three categories : req ( req ) , fact ( fact ) , ref ( ref ) , quot ( quot ) , non - a ( non - a ) , and non - fact ( fact ) . we categorize a proposition as “ req ” if it contains at least one referential answer , “ fact ” for “ quotes ” and “ non - fact ” , and the other categories for the “ other ” category . we manually annotated each of these categories using the annotations provided by the annotators . note that the fact category is the most frequent category , followed by the quot category ."
    },
    {
        "table_id": "168",
        "table_info": {
            "table_caption": "Table 4: Proposition segmentation results. Result that is significantly better than all comparisons is marked with ∗ (p<10−6, McNemar test).",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] Prec.",
                "[BOLD]  Rec.",
                "[BOLD]  F1"
            ],
            "table_content_values": [
                [
                    "FullSent",
                    "73.68",
                    "56.00",
                    "63.64"
                ],
                [
                    "PDTB-conn",
                    "51.11",
                    "49.71",
                    "50.40"
                ],
                [
                    "RST-parser",
                    "30.28",
                    "43.00",
                    "35.54"
                ],
                [
                    "CRF",
                    "66.53",
                    "52.92",
                    "58.95"
                ],
                [
                    "BiLSTM-CRF",
                    "[BOLD] 82.25",
                    "[BOLD] 79.96",
                    "[BOLD] 81.09∗"
                ],
                [
                    "CRF-joint",
                    "74.99",
                    "63.33",
                    "68.67"
                ],
                [
                    "BiLSTM-CRF-joint",
                    "81.12",
                    "78.42",
                    "79.75"
                ]
            ]
        },
        "gold_description": "table 4 shows that bilstm - crf outperforms other methods in f1 . more importantly , the perfor mance on reviews is lower than those reached on existing datasets , e . g . , an f1 of 86 . 7 is obtained by crf for essays ( stab and gurevych , 2017 ) .",
        "generated_description": "the crf and bilstm - crf models significantly outperform the fullsent and pdtb - conn baselines by a large margin , showing the importance of using syntactic information for this task . our joint model improves over the crf baseline by more than 10 points in terms of f1 - score , and outperforms the rst parser by over 20 points in precision ."
    },
    {
        "table_id": "169",
        "table_info": {
            "table_caption": "Table 4: All 2-layer systems, and 1-layer systems if best in column. State-of-the-art results in bold; † indicates best in column (corresponding row shaded in purple). Key: L=linear, T=tree, H=hybrid, (1,2)=# layers, S=single-task specific, G=single-task general, +lexfeats=with all lexical features, MultiSimp=multi-task simple, MultiBal=multi-task balanced, MultiFoc=multi-task focused, w/UDS-IH2=trained on all data including UDS-IH2. All-3.0 is a constant baseline, always predicting 3.0.",
            "table_column_names": [
                "[EMPTY]",
                "FactBank MAE",
                "FactBank r",
                "UW MAE",
                "UW r",
                "Meantime MAE",
                "Meantime r",
                "UDS-IH2 MAE",
                "UDS-IH2 r"
            ],
            "table_content_values": [
                [
                    "All-3.0",
                    "0.8",
                    "NAN",
                    "0.78",
                    "NAN",
                    "0.31",
                    "NAN",
                    "2.255",
                    "NAN"
                ],
                [
                    "Lee et al. 2015",
                    "-",
                    "-",
                    "0.511",
                    "0.708",
                    "-",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "Stanovsky et al. 2017",
                    "0.59",
                    "0.71",
                    "[BOLD] 0.42†",
                    "0.66",
                    "0.34",
                    "0.47",
                    "-",
                    "-"
                ],
                [
                    "L-biLSTM(2)-S",
                    "[BOLD] 0.427",
                    "[BOLD] 0.826",
                    "0.508",
                    "[BOLD] 0.719",
                    "0.427",
                    "0.335",
                    "[BOLD] 0.960†",
                    "[BOLD] 0.768"
                ],
                [
                    "T-biLSTM(2)-S",
                    "[BOLD] 0.577",
                    "[BOLD] 0.752",
                    "0.600",
                    "0.645",
                    "0.428",
                    "0.094",
                    "[BOLD] 1.101",
                    "[BOLD] 0.704"
                ],
                [
                    "L-biLSTM(2)-G",
                    "[BOLD] 0.412",
                    "[BOLD] 0.812",
                    "0.523",
                    "0.703",
                    "0.409",
                    "0.462",
                    "-",
                    "-"
                ],
                [
                    "T-biLSTM(2)-G",
                    "[BOLD] 0.455",
                    "[BOLD] 0.809",
                    "0.567",
                    "0.688",
                    "0.396",
                    "0.368",
                    "-",
                    "-"
                ],
                [
                    "L-biLSTM(2)-S+lexfeats",
                    "[BOLD] 0.429",
                    "[BOLD] 0.796",
                    "0.495",
                    "[BOLD] 0.730",
                    "0.427",
                    "0.322",
                    "[BOLD] 1.000",
                    "[BOLD] 0.755"
                ],
                [
                    "T-biLSTM(2)-S+lexfeats",
                    "[BOLD] 0.542",
                    "[BOLD] 0.744",
                    "0.567",
                    "0.676",
                    "0.375",
                    "0.242",
                    "[BOLD] 1.087",
                    "[BOLD] 0.719"
                ],
                [
                    "L-biLSTM(2)-MultiSimp",
                    "[BOLD] 0.353",
                    "[BOLD] 0.843",
                    "0.503",
                    "[BOLD] 0.725",
                    "0.345",
                    "[BOLD] 0.540",
                    "-",
                    "-"
                ],
                [
                    "T-biLSTM(2)-MultiSimp",
                    "[BOLD] 0.482",
                    "[BOLD] 0.803",
                    "0.599",
                    "0.645",
                    "0.545",
                    "0.237",
                    "-",
                    "-"
                ],
                [
                    "L-biLSTM(2)-MultiBal",
                    "[BOLD] 0.391",
                    "[BOLD] 0.821",
                    "0.496",
                    "[BOLD] 0.724",
                    "[BOLD] 0.278",
                    "[BOLD] 0.613†",
                    "-",
                    "-"
                ],
                [
                    "T-biLSTM(2)-MultiBal",
                    "[BOLD] 0.517",
                    "[BOLD] 0.788",
                    "0.573",
                    "0.659",
                    "0.400",
                    "0.405",
                    "-",
                    "-"
                ],
                [
                    "L-biLSTM(1)-MultiFoc",
                    "[BOLD] 0.343",
                    "[BOLD] 0.823",
                    "0.516",
                    "0.698",
                    "[BOLD] 0.229†",
                    "[BOLD] 0.599",
                    "-",
                    "-"
                ],
                [
                    "L-biLSTM(2)-MultiFoc",
                    "[BOLD] 0.314",
                    "[BOLD] 0.846",
                    "0.502",
                    "[BOLD] 0.710",
                    "[BOLD] 0.305",
                    "0.377",
                    "-",
                    "-"
                ],
                [
                    "T-biLSTM(2)-MultiFoc",
                    "1.100",
                    "0.234",
                    "0.615",
                    "0.616",
                    "0.395",
                    "0.300",
                    "-",
                    "-"
                ],
                [
                    "L-biLSTM(2)-MultiSimp w/UDS-IH2",
                    "[BOLD] 0.377",
                    "[BOLD] 0.828",
                    "0.508",
                    "[BOLD] 0.722",
                    "0.367",
                    "0.469",
                    "[BOLD] 0.965",
                    "[BOLD] 0.771†"
                ],
                [
                    "T-biLSTM(2)-MultiSimp w/UDS-IH2",
                    "0.595",
                    "[BOLD] 0.716",
                    "0.598",
                    "0.609",
                    "0.467",
                    "0.345",
                    "[BOLD] 1.072",
                    "[BOLD] 0.723"
                ],
                [
                    "H-biLSTM(2)-S",
                    "0.488",
                    "[BOLD] 0.775",
                    "0.526",
                    "[BOLD] 0.714",
                    "0.442",
                    "0.255",
                    "[BOLD] 0.967",
                    "[BOLD] 0.768"
                ],
                [
                    "H-biLSTM(1)-MultiSimp",
                    "[BOLD] 0.313†",
                    "[BOLD] 0.857†",
                    "0.528",
                    "0.704",
                    "0.314",
                    "0.545",
                    "-",
                    "-"
                ],
                [
                    "H-biLSTM(2)-MultiSimp",
                    "[BOLD] 0.431",
                    "[BOLD] 0.808",
                    "0.514",
                    "[BOLD] 0.723",
                    "0.401",
                    "0.461",
                    "-",
                    "-"
                ],
                [
                    "H-biLSTM(2)-MultiBal",
                    "[BOLD] 0.386",
                    "[BOLD] 0.825",
                    "0.502",
                    "[BOLD] 0.713",
                    "0.352",
                    "[BOLD] 0.564",
                    "-",
                    "-"
                ],
                [
                    "H-biLSTM(2)-MultiSimp w/UDS-IH2",
                    "[BOLD] 0.393",
                    "[BOLD] 0.820",
                    "0.481",
                    "[BOLD] 0.749†",
                    "0.374",
                    "[BOLD] 0.495",
                    "[BOLD] 0.969",
                    "[BOLD] 0.760"
                ]
            ]
        },
        "gold_description": "table 4 reports the results for all of the 2 - layer l - , t - , and h - bilstms . 7 the best - performing system for each dataset and metric are highlighted in purple , and when the best - performing system for a particular dataset was a 1 - layer model , that system is included in table 4 . the highest - performing system for each is reported in table 4 . on its own , the bilstm with linear topology ( l - bilstm ) performs consistently better than the bilstm with tree topology ( t - bilstm ) . however , the hybrid topology ( h - bilstm ) , consisting of both a l - and tbilstm is the top - performing system on uw for correlation ( table 4 ) . though our methods achieve state of the art in the single - task setting , the best performing systems are mostly multi - task ( table 4 and supplementary materials ) .",
        "generated_description": "in this section , we compare the performance of our proposed models against the state - of - the - art methods in the prediction of stock price changes in the real - world financial news datasets . we use mae and r - squared as the performance metrics . the best results in each dataset are marked with an asterisk in the table ."
    },
    {
        "table_id": "170",
        "table_info": {
            "table_caption": "Table 5: Proposition classification F1 scores. Results that are significant better than other methods are marked with ∗ (p<10−6, McNemar test).",
            "table_column_names": [
                "[EMPTY]",
                "Overall",
                "Eval",
                "Req",
                "Fact",
                "Ref",
                "Quot"
            ],
            "table_content_values": [
                [
                    "[ITALIC] With Gold-Standard Segments",
                    "[ITALIC] With Gold-Standard Segments",
                    "[ITALIC] With Gold-Standard Segments",
                    "[ITALIC] With Gold-Standard Segments",
                    "[ITALIC] With Gold-Standard Segments",
                    "[ITALIC] With Gold-Standard Segments",
                    "[ITALIC] With Gold-Standard Segments"
                ],
                [
                    "Majority",
                    "40.75",
                    "57.90",
                    "–",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "PropLexicon",
                    "36.83",
                    "40.42",
                    "36.07",
                    "32.23",
                    "59.57",
                    "31.28"
                ],
                [
                    "SVM",
                    "60.98",
                    "63.88",
                    "[BOLD] 69.02",
                    "54.74",
                    "[BOLD] 69.47",
                    "7.69"
                ],
                [
                    "CNN",
                    "[BOLD] 66.56∗",
                    "[BOLD] 69.02",
                    "63.26",
                    "[BOLD] 66.17",
                    "67.44",
                    "[BOLD] 52.94"
                ],
                [
                    "[ITALIC] With Predicted Segments",
                    "[ITALIC] With Predicted Segments",
                    "[ITALIC] With Predicted Segments",
                    "[ITALIC] With Predicted Segments",
                    "[ITALIC] With Predicted Segments",
                    "[ITALIC] With Predicted Segments",
                    "[ITALIC] With Predicted Segments"
                ],
                [
                    "Majority",
                    "33.30",
                    "47.60",
                    "–",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "PropLexicon",
                    "23.21",
                    "22.45",
                    "23.97",
                    "23.73",
                    "35.96",
                    "16.67"
                ],
                [
                    "SVM",
                    "51.46",
                    "54.05",
                    "48.16",
                    "52.77",
                    "52.27",
                    "4.71"
                ],
                [
                    "CNN",
                    "55.48",
                    "57.75",
                    "53.71",
                    "55.19",
                    "48.78",
                    "33.33"
                ],
                [
                    "CRF-joint",
                    "50.69",
                    "46.78",
                    "55.74",
                    "52.27",
                    "[BOLD] 55.77",
                    "26.47"
                ],
                [
                    "BiLSTM-CRF-joint",
                    "[BOLD] 62.64∗",
                    "[BOLD] 62.36∗",
                    "[BOLD] 67.31∗",
                    "[BOLD] 61.86",
                    "54.74",
                    "[BOLD] 37.36"
                ]
            ]
        },
        "gold_description": "f1 scores for all propositions and each type are reported in table 5 . cnn performs better for types with significantly more training samples , i . e . , evaluation and fact , indicating the effect of data size on neural model ' s performance . joint models ( crf - joint and bilstm - crf - joint ) yield the best f1 scores for all categories when gold - standard segmentation is unavailable .",
        "generated_description": "we can see that the accuracy of the proplexicon is significantly lower than that of the svm and cnn classifiers . this is due to the fact that the proplexicon does not provide any segment - level labels for the question , and therefore , it is not able to predict the correct answer . on the other hand , the cnn and svm classifiers perform significantly better than the majority classifier , and the accuracy increases significantly as the predicted segments are added to the training set . this shows that the cnn classifier is better at predicting the correct segment than the other classifiers , and that the predicted segment labels are more accurate than the gold standard labels ."
    },
    {
        "table_id": "171",
        "table_info": {
            "table_caption": "Table 1: The model and its hyper-parameters.",
            "table_column_names": [
                "# encoders",
                "2"
            ],
            "table_content_values": [
                [
                    "encoder type",
                    "B-LSTM"
                ],
                [
                    "encoder layers",
                    "2"
                ],
                [
                    "encoder hidden dim",
                    "500"
                ],
                [
                    "# decoders",
                    "1"
                ],
                [
                    "decoder type",
                    "LSTM"
                ],
                [
                    "decoder layers",
                    "2"
                ],
                [
                    "decoder hidden dim",
                    "500"
                ],
                [
                    "word vector dim",
                    "300"
                ],
                [
                    "attention type",
                    "[ITALIC] general"
                ],
                [
                    "dropout",
                    "0.3"
                ],
                [
                    "beam size",
                    "5"
                ]
            ]
        },
        "gold_description": "table 1 lists all hyper - parameters which have all been chosen using only training and validation data . the two encoders have been implemented using a bidirectional long short - term memory ( b - lstm ) ( hochreiter and schmidhuber , 1997 ) while the decoder uses a unidirectional lstm . both the encoders and the decoder use two hidden layers . for the attention network , we have used the opennmt ' s general option ( luong et al . , 2015 ) .",
        "generated_description": "the model is a 2 - layer bidirectional lstm ( b - lstm ) encoder and decoder are two layers of 500 hidden units , each with a hidden dimension of 500 . the word vectors are fed into two separate lstms with a dimension of 300 and a dropout layer of 0 . 3 . the beam size is set to 5 ."
    },
    {
        "table_id": "172",
        "table_info": {
            "table_caption": "Table 2: Results on the WMT17 IT domain English-German APE test set.",
            "table_column_names": [
                "Model",
                "TER",
                "BLEU"
            ],
            "table_content_values": [
                [
                    "MT Bojar et al. ( 2017 )",
                    "24.48",
                    "62.49"
                ],
                [
                    "SPE Bojar et al. ( 2017 )",
                    "24.69",
                    "62.97"
                ],
                [
                    "Varis and Bojar ( 2017 )",
                    "24.03",
                    "64.28"
                ],
                [
                    "Bérard et al. ( 2017 )",
                    "22.81",
                    "65.91"
                ],
                [
                    "train 11K",
                    "41.58",
                    "43.05"
                ],
                [
                    "train 23K",
                    "30.23",
                    "57.14"
                ],
                [
                    "train 23K + 500K",
                    "[BOLD] 22.60",
                    "[BOLD] 66.21"
                ]
            ]
        },
        "gold_description": "table 2 compares the accuracy of our model on the test data with two baselines and two state - of - theart comparable systems . the mt baseline simply consists of the accuracy of the mt sentences with respect to the pe ground truth . the other baseline is given by a statistical pe ( spe ) system ( simard et al . , 2007 ) chosen by the wmt17 organizers . table 2 shows that when our model is trained with only the 11k wmt17 official training sentences , it cannot even approach the baselines . even when the 12k wmt16 sentences are added , its accuracy is still well below that of the baselines . however , when the 500k artificial data are added , it reports a major improvement and it outperforms them both significantly . in addition , we have compared our model with two recent systems that have used our same training settings ( 500k artificial triplets + 23k manual triplets oversampled 10 times ) , reporting a slightly higher accuracy than both ( 1 . 43 ter and 1 . 93 bleu p . p . over ( varis and bojar , 2017 ) and 0 . 21 ter and 0 . 30 bleu p . p . over ( b ´ erard et al . , 2017 ) ) . since their models explicitly predicts edit operations rather than post - edited sentences , we speculate that these two tasks are of comparable intrinsic complexity .",
        "generated_description": "our model outperforms the previous state - of - the - art in terms of both ter and bleu by a large margin . the model trained on 23k parallel sentences achieves a ter score of 30 . 23 , which is already better than the previous best result of 24 . 48 by bérard et al . however , the gap between the 23k and 500k model narrows down to 7 . 5 ter points after fine - tuning , which shows that our model is able to benefit from additional parallel training data ."
    },
    {
        "table_id": "173",
        "table_info": {
            "table_caption": "Table 3: The performance of the best setting for each property.",
            "table_column_names": [
                "[BOLD] Feature",
                "[BOLD] Representation",
                "[BOLD] Embedding",
                "[BOLD] Window",
                "[BOLD] Dimension",
                "[BOLD] Precision",
                "[BOLD] Recall",
                "[BOLD] F1"
            ],
            "table_content_values": [
                [
                    "Used for transportation",
                    "Co-occurrence",
                    "word2vec SG",
                    "10",
                    "300",
                    "74.5",
                    "78.8",
                    "76.6"
                ],
                [
                    "Is a weapon",
                    "Backtranslation",
                    "word2vec CBOW",
                    "2",
                    "300",
                    "71.4",
                    "88.2",
                    "78.9"
                ],
                [
                    "Is round",
                    "Co-occurrence",
                    "word2vec CBOW",
                    "10",
                    "300",
                    "56.2",
                    "87.1",
                    "68.4"
                ],
                [
                    "Has various colors",
                    "Co-occurrence",
                    "GloVe",
                    "2",
                    "200",
                    "70.6",
                    "76.6",
                    "73.5"
                ],
                [
                    "Made of metal",
                    "Matrix",
                    "word2vec SG",
                    "5",
                    "300",
                    "78.6",
                    "61.1",
                    "68.8"
                ]
            ]
        },
        "gold_description": "table 3 displays the best performing dsmfor each property . there is a preference to word2vec and to a higher embedding dimension .",
        "generated_description": "we can see that the best setting for each property is different depending on the dimensionality of the feature representation , the word2vec cbow and glove embeddings , and the type of feature representation . for the property “ made of metal ” , the dimension of the matrix encoder is 5 and the window size is 300 , while for the properties “ has various colors ” and “ is round ” the dimension is 2 and 1 respectively . the best f1 - score is achieved by the combination of all the properties with a window size of 300 ."
    },
    {
        "table_id": "174",
        "table_info": {
            "table_caption": "Table 6: Mean predictions for linear (L-biLSTM-S(2)) and tree models (T-biLSTM-S(2)) on UDS-IH2-dev, grouped by governing dependency relation. Only the 10 most frequent governing dependency relations in UDS-IH2-dev are shown.",
            "table_column_names": [
                "Relation",
                "Mean Label",
                "L-biLSTM",
                "T-biLSTM",
                "#"
            ],
            "table_content_values": [
                [
                    "root",
                    "1.07",
                    "1.03",
                    "0.96",
                    "949"
                ],
                [
                    "conj",
                    "0.37",
                    "0.44",
                    "0.46",
                    "316"
                ],
                [
                    "advcl",
                    "0.46",
                    "0.53",
                    "0.45",
                    "303"
                ],
                [
                    "xcomp",
                    "-0.42",
                    "-0.57",
                    "-0.49",
                    "234"
                ],
                [
                    "acl:relcl",
                    "1.28",
                    "1.40",
                    "1.31",
                    "193"
                ],
                [
                    "ccomp",
                    "0.11",
                    "0.31",
                    "0.34",
                    "191"
                ],
                [
                    "acl",
                    "0.77",
                    "0.59",
                    "0.58",
                    "159"
                ],
                [
                    "parataxis",
                    "0.44",
                    "0.63",
                    "0.79",
                    "127"
                ],
                [
                    "amod",
                    "1.92",
                    "1.88",
                    "1.81",
                    "76"
                ],
                [
                    "csubj",
                    "0.36",
                    "0.38",
                    "0.27",
                    "37"
                ]
            ]
        },
        "gold_description": "evidence of this complementarity can be seen in table 6 , which contains a breakdown of system performance by governing dependency relation , for both linear and tree models , on uds - ih2 - dev . in most cases , the l - bilstm ' s mean prediction is closer to the true mean . this appears to arise in part because the t - bilstm is less confident in its predictions – i . e . its mean prediction tends to be closer to 0 . this results in the l - bilstm being too confident in certain cases – e . g . in the case of the xcomp governing relation , where the t - bilstm mean prediction is closer to the true mean .",
        "generated_description": "the l - bilstm - s ( 2 ) performs better than the tree model for root , conj , advcl , xcomp , parataxis , amod , and csubj . the tree model performs better for the rest of the relations , with the exception of amod ."
    },
    {
        "table_id": "175",
        "table_info": {
            "table_caption": "Table 1: The lexicons used as external knowledge.",
            "table_column_names": [
                "Lexicons",
                "Annotations",
                "# dim.",
                "# words"
            ],
            "table_content_values": [
                [
                    "LIWC",
                    "psycho-linguistic",
                    "73",
                    "18,504"
                ],
                [
                    "Bing Liu",
                    "valence",
                    "1",
                    "2,477"
                ],
                [
                    "AFINN",
                    "sentiment",
                    "1",
                    "6,786"
                ],
                [
                    "MPQA",
                    "sentiment",
                    "4",
                    "6,886"
                ],
                [
                    "SemEval15",
                    "sentiment",
                    "1",
                    "1,515"
                ],
                [
                    "Emolex",
                    "emotion",
                    "19",
                    "14,182"
                ]
            ]
        },
        "gold_description": "we augment our models with existing linguistic and affective knowledge from human experts . specifically , we leverage lexica containing psycho - linguistic , sentiment and emotion annotations . the word ' s annotations from the lexicons shown in table 1 . as prior knowledge , we leverage the lexicons presented in table 1 . we selected widely - used lexicons that represent different facets of affective and psycho - linguistic features , namely ;",
        "generated_description": "the liwc lexicon is a collection of psycholinguistic information about psycho - linguistic psychological concepts . it contains 73 psychological terms that are grouped into five categories , namely , positive , negative , neutral , positive and negative . the emotion lexicon of emolex is a subset of the semeval15 corpus , which contains 14 , 182 words for emotion and one for the emotion - neutral ."
    },
    {
        "table_id": "176",
        "table_info": {
            "table_caption": "Table 3: Comparison across benchmark datasets. Reported values are averaged across ten runs. All reported measures are F1 scores, apart from SST−5 which is evaluated with Accuracy.",
            "table_column_names": [
                "Model",
                "SST-5",
                "Sent17",
                "PhychExp",
                "Irony18",
                "SCv1",
                "SCv2"
            ],
            "table_content_values": [
                [
                    "baseline",
                    "43.5±0.5",
                    "68.3±0.2",
                    "53.2±0.8",
                    "46.3±1.4",
                    "64.1±0.5",
                    "74.0±0.7"
                ],
                [
                    "emb. conc.",
                    "43.3±0.6",
                    "68.4±0.2",
                    "57.1±1.2",
                    "48.1±1.2",
                    "64.2±0.7",
                    "74.2±0.7"
                ],
                [
                    "conc.",
                    "44.0±0.7",
                    "68.6±0.3",
                    "54.3±0.6",
                    "47.4±0.9",
                    "[BOLD] 65.1±0.6",
                    "74.3±1.2"
                ],
                [
                    "gate",
                    "44.2±0.4",
                    "68.7±0.3",
                    "53.4±1.0",
                    "[BOLD] 48.5±0.7",
                    "64.7±0.7",
                    "74.3±1.2"
                ],
                [
                    "affine",
                    "43.2±0.7",
                    "68.5±0.3",
                    "53.1±0.9",
                    "45.3±1.5",
                    "60.3±0.8",
                    "74.0±1.0"
                ],
                [
                    "gate+emb.conc.",
                    "[BOLD] 46.2±0.5",
                    "[BOLD] 68.9±0.3",
                    "[BOLD] 57.2±1.1",
                    "[BOLD] 48.4±1.0",
                    "[BOLD] 64.9±0.6",
                    "[BOLD] 74.4±0.9"
                ],
                [
                    "state-of-the-art",
                    "51.7",
                    "68.5",
                    "57.0",
                    "53.6",
                    "69.0",
                    "76.0"
                ],
                [
                    "state-of-the-art",
                    "Shen et al. ( 2018 )",
                    "Cliche ( 2017 )",
                    "Felbo et al. ( 2017 )",
                    "Baziotis et al. ( 2018 )",
                    "Felbo et al. ( 2017 )",
                    "Ilić et al. ( 2018 )"
                ]
            ]
        },
        "gold_description": "we present our results in section 5 ( table 3 ) in table 3 we use the abbreviations \" baseline \" and \" emb . conc . \" for the two baseline models respectively . we compare the performance of the three proposed conditioning methods with the two baselines and the state - of - the - art in table 3 . the results show that incorporating external knowledge in rnn - based architectures consistently improves performance over the baseline for all datasets . furthermore , feature - based gating improves upon baseline concatenation in the embedding layer across benchmarks , with the exception of psychexp dataset . for the sent17 dataset we achieve state - ofthe - art f1 score using the feature - based gating method ; we further improve performance when combining gating with the emb . conc . method . for sst - 5 , we observe a significant performance boost with combined attentional gating and embedding conditioning ( gate + emb . conc . ) . for psychexp , we marginally outperform the state - ofthe - art also with the combined method , while for irony18 , feature - based gating yields the best results . finally , concatenation based conditioning is the top method for scv1 , and the combination method for scv2 .",
        "generated_description": "we find that the concatenation of the embeddings of the words in a sentence improves the performance of the baseline model , with the best results for sst - 5 , sent17 , phychexp , and irony18 , and the worst results for scv1 and scv2 . the best results on the other datasets are obtained by the affine , gate , and concordance regularization methods . the gate regularization does not improve the performance over the baseline on any of the datasets . the affine regularization method performs slightly better than the gate method on the sent17 dataset , but worse on all other datasets ."
    },
    {
        "table_id": "177",
        "table_info": {
            "table_caption": "Table 5: Mean gold labels, counts, and MAE for L-biLSTM(2)-S and T-biLSTM(2)-S model predictions on UDS-IH2-dev, grouped by modals and negation.",
            "table_column_names": [
                "Modal",
                "Negated",
                "Mean Label",
                "Linear MAE",
                "Tree MAE",
                "#"
            ],
            "table_content_values": [
                [
                    "none",
                    "no",
                    "1.00",
                    "0.93",
                    "1.03",
                    "2244"
                ],
                [
                    "none",
                    "yes",
                    "-0.19",
                    "1.40",
                    "1.69",
                    "98"
                ],
                [
                    "may",
                    "no",
                    "-0.38",
                    "1.00",
                    "0.99",
                    "14"
                ],
                [
                    "would",
                    "no",
                    "-0.61",
                    "0.85",
                    "0.99",
                    "39"
                ],
                [
                    "ca(n’t)",
                    "yes",
                    "-0.72",
                    "1.28",
                    "1.55",
                    "11"
                ],
                [
                    "can",
                    "yes",
                    "-0.75",
                    "0.99",
                    "0.86",
                    "6"
                ],
                [
                    "(wi)’ll",
                    "no",
                    "-0.94",
                    "1.47",
                    "1.14",
                    "8"
                ],
                [
                    "could",
                    "no",
                    "-1.03",
                    "0.97",
                    "1.32",
                    "20"
                ],
                [
                    "can",
                    "no",
                    "-1.25",
                    "1.02",
                    "1.21",
                    "73"
                ],
                [
                    "might",
                    "no",
                    "-1.25",
                    "0.66",
                    "1.06",
                    "6"
                ],
                [
                    "would",
                    "yes",
                    "-1.27",
                    "0.40",
                    "0.86",
                    "5"
                ],
                [
                    "should",
                    "no",
                    "-1.31",
                    "1.20",
                    "1.01",
                    "22"
                ],
                [
                    "will",
                    "no",
                    "-1.88",
                    "0.75",
                    "0.86",
                    "75"
                ]
            ]
        },
        "gold_description": "table 5 illustrates the influence of modals and negation on the factuality of the events they have direct scope over . the context with the highest factuality on average is no direct modal and no negation ( first row ) ; all other modal contexts have varying degrees of negative mean factuality scores , with will as the most negative .",
        "generated_description": "the mean mae for the mean label is computed by taking the absolute difference between the prediction of the majority class and the mean of the minority class , and then dividing by the number of predictions that would be classified as positive by the classifier . the tree mae is computed as the average of the maes for the majority and minority classes , and represents the mean absolute difference of prediction errors across all classifiers ."
    },
    {
        "table_id": "178",
        "table_info": {
            "table_caption": "Table 2: Coefficient of determination (r2) between global metrics and crowdsourced topic-word matching annotations.",
            "table_column_names": [
                "[EMPTY]",
                "Metric",
                "Amazon",
                "Newsgroups",
                "New York Times"
            ],
            "table_content_values": [
                [
                    "Global",
                    "SigVac",
                    "0.6960",
                    "0.6081",
                    "0.6063"
                ],
                [
                    "Global",
                    "SigUni",
                    "0.6310",
                    "0.4839",
                    "0.4935"
                ],
                [
                    "Global",
                    "Coherence",
                    "0.4907",
                    "0.4463",
                    "0.3799"
                ]
            ]
        },
        "gold_description": "as seen in table 2 , we report the coefficient of determination ( r2 ) for each global metric and dataset . note that global metrics do correlate somewhat with human judgment of local topic quality . however , the correlation is moderate to poor , especially in the case of coherence",
        "generated_description": "in this experiment , we compare the performance of siguni and sigvac on the amazon , newsgroups , and new york times datasets using the same global metrics as before . for each dataset , we crowdsourced topic - word matching annotations using the amazon mechanical turk ( amt ) crowdsourcing platform . we use the amt ’ s mechanical turk platform to collect the annotations for the amazon and newsgroups datasets , and the amazon . com dataset for sigununi . the amt workers were asked to judge the topic - words matching between each pair of documents based on the following criterion : 1 ) whether the two documents are related , 2 ) whether they are related at all , and 3 ) if they are unrelated . we used r2 to measure the consistency between the global metrics and the crowdsourced annotations . for the amazon dataset , r2 is 0 . 6960 , which is higher than 0 . 6310 obtained by siguni , and r2 = 0 . 6063 obtained by sigvac , which has a r2 of 0 . 6081 . on the newsgroups dataset , the r2 values are 0 . 4839 and 0 . 4463 , which are lower than those obtained by the global metric with the same number of topics and words ."
    },
    {
        "table_id": "179",
        "table_info": {
            "table_caption": "Table 3: Coefficient of determination (r2) between automated metrics and crowdsourced topic-word matching annotations. We include metrics measuring both local topic quality and global topic quality.",
            "table_column_names": [
                "[EMPTY]",
                "Metric",
                "Amazon",
                "Newsgroups",
                "New York Times"
            ],
            "table_content_values": [
                [
                    "Local",
                    "SwitchP",
                    "0.9077",
                    "0.8737",
                    "0.7022"
                ],
                [
                    "Local",
                    "SwitchVI",
                    "0.8485",
                    "0.8181",
                    "0.6977"
                ],
                [
                    "Local",
                    "AvgRank",
                    "0.5103",
                    "0.5089",
                    "0.4473"
                ],
                [
                    "Local",
                    "Window",
                    "0.4884",
                    "0.3024",
                    "0.1127"
                ],
                [
                    "Local",
                    "WordDiv",
                    "0.3112",
                    "0.2197",
                    "0.0836"
                ],
                [
                    "Global",
                    "SigVac",
                    "0.6960",
                    "0.6081",
                    "0.6063"
                ],
                [
                    "Global",
                    "SigUni",
                    "0.6310",
                    "0.4839",
                    "0.4935"
                ],
                [
                    "Global",
                    "Coherence",
                    "0.4907",
                    "0.4463",
                    "0.3799"
                ]
            ]
        },
        "gold_description": "humans agree more often with models trained on amazon reviews than on new york times . as seen in table 3 , we report the coefficient of determination ( r2 ) for each metric and dataset . switchp most closely approximates human judgments of local topic quality , with an r2 which indicates a strong correlation . as evidenced by the lower r2 for switchvi , even switching between related topics does not seem to line up with human judgments of local topic quality .",
        "generated_description": "we include metrics measuring both local topic quality and global topic quality . for each metric , we report the coefficient of determination ( r2 ) between the automatic metrics and the human - annotated topic - word matching annotations for the amazon , newsgroups , and new york times datasets . for the amazon dataset , the r2 is 0 . 9077 , 0 . 8737 , and 0 . 7022 for switchp , switchvi , and avgrank , respectively . we find that the coherence metric is less correlated with the topic quality than the other metrics on the amazon and newsgroups datasets . we hypothesize that this is because the newsgroups and amazon datasets are more similar to each other than to the amazon datasets ( e . g . , the amazon reviews are shorter and the newsgroups reviews are more diverse than the ny times ) ."
    },
    {
        "table_id": "180",
        "table_info": {
            "table_caption": "Table 3: Event salience performance. (-E) and (-F) marks removing Entity information and Features from the full KCM model. The relative performance differences are computed against Frequency. W/T/L are the number of documents a method wins, ties, and loses compared to Frequency. † and ‡ mark the statistically significant improvements over Frequency†, LeToR‡ respectively.",
            "table_column_names": [
                "[BOLD] Method Location",
                "[BOLD] P@01 0.3555",
                "[BOLD] P@01 –",
                "[BOLD] P@05 0.3077",
                "[BOLD] P@05 –",
                "[BOLD] P@10 0.2505",
                "[BOLD] P@10 –",
                "[BOLD] AUC 0.5226",
                "[BOLD] AUC –"
            ],
            "table_content_values": [
                [
                    "PageRank",
                    "0.3628",
                    "–",
                    "0.3438",
                    "–",
                    "0.3007",
                    "–",
                    "0.5866",
                    "–"
                ],
                [
                    "Frequency",
                    "0.4542",
                    "–",
                    "0.4024",
                    "–",
                    "0.3445",
                    "–",
                    "0.5732",
                    "–"
                ],
                [
                    "LeToR",
                    "0.4753†",
                    "+4.64%",
                    "0.4099†",
                    "+1.87%",
                    "0.3517†",
                    "+2.10%",
                    "0.6373†",
                    "+11.19%"
                ],
                [
                    "KCE (-EF)",
                    "0.4420",
                    "−2.69%",
                    "0.4038",
                    "+0.34%",
                    "0.3464†",
                    "+0.54%",
                    "0.6089†",
                    "+6.23%"
                ],
                [
                    "KCE (-E)",
                    "0.4861†‡",
                    "+7.01%",
                    "0.4227†‡",
                    "+5.04%",
                    "0.3603†‡",
                    "+4.58%",
                    "0.6541†‡",
                    "+14.12%"
                ],
                [
                    "KCE",
                    "0.5049†‡",
                    "+11.14%",
                    "0.4277†‡",
                    "+6.29%",
                    "0.3638†‡",
                    "+5.61%",
                    "0.6557†‡",
                    "+14.41%"
                ],
                [
                    "[BOLD] Method",
                    "[BOLD] R@01",
                    "[BOLD] R@01",
                    "[BOLD] R@05",
                    "[BOLD] R@05",
                    "[BOLD] R@10",
                    "[BOLD] R@10",
                    "[BOLD] W/T/L",
                    "[BOLD] W/T/L"
                ],
                [
                    "Location",
                    "0.0807",
                    "–",
                    "0.2671",
                    "–",
                    "0.3792",
                    "–",
                    "–/–/–",
                    "–/–/–"
                ],
                [
                    "PageRank",
                    "0.0758",
                    "–",
                    "0.2760",
                    "–",
                    "0.4163",
                    "–",
                    "–/–/–",
                    "–/–/–"
                ],
                [
                    "Frequency",
                    "0.0792",
                    "–",
                    "0.2846",
                    "–",
                    "0.4270",
                    "–",
                    "–/–/–",
                    "–/–/–"
                ],
                [
                    "LeToR",
                    "0.0836†",
                    "+5.61%",
                    "0.2980†",
                    "+4.70%",
                    "0.4454†",
                    "+4.31%",
                    "8037 / 48493 / 6770",
                    "8037 / 48493 / 6770"
                ],
                [
                    "KCE (-EF)",
                    "0.0714",
                    "−9.77%",
                    "0.2812",
                    "−1.18%",
                    "0.4321†",
                    "+1.20%",
                    "6936 / 48811 / 7553",
                    "6936 / 48811 / 7553"
                ],
                [
                    "KCE (-E)",
                    "0.0925†‡",
                    "+16.78%",
                    "0.3172†‡",
                    "+11.46%",
                    "0.4672†‡",
                    "+9.41%",
                    "11676 / 43294 / 8330",
                    "11676 / 43294 / 8330"
                ],
                [
                    "KCE",
                    "0.0946†‡",
                    "+19.44%",
                    "0.3215†‡",
                    "+12.96%",
                    "0.4719†‡",
                    "+10.51%",
                    "12554 / 41461 / 9285",
                    "12554 / 41461 / 9285"
                ]
            ]
        },
        "gold_description": "we summarize the main results in table 3 . frequency is the best performing baseline . its precision at 1 and 5 are higher than 40 % . pagerank performs worse than frequency on all the precision and recall metrics . location performs the worst . letor outperforms the baselines significantly on all metrics . particularly , its p @ 1 value outperforms the frequency baseline the most ( 4 . 64 % ) , indicating a much better estimation on the most salient event . in terms of auc , letor outperforms frequency by a large margin ( 11 . 19 % relative gain ) . the kce model further beats letor significantly on all metrics , by around 5 % on auc and precision values , and by around 10 % on the recall values . notably , the p @ 1 score is much higher , reaching 50 % . the large relative gain on all the recall metrics and the high performance on precision show that kce works really well on the top of the rank list . to understand the source of performance gain of kce , we conduct an ablation study by removing its components : - e removes of entity kernels ; - ef removes the entity kernels and the features . we observe a performance drop in both cases .",
        "generated_description": "we compare the performance of our approach to the state - of - the - art baselines in terms of precision at k ( p @ k ) and area under the roc curve ( auc ) on the test set . our approach outperforms all baselines by a significant margin in both p @ 01 and p @ 10 , with an average relative improvement of 6 . 23 % and 11 . 19 % in p @ 1 and auc , respectively . in particular , our method outperforms the baseline frequency method by 4 . 64 % and 1 . 87 % on p @ 05 , and the baseline letor method by 2 . 34 % and 2 . 10 % on the average in terms p @ { 01 , 05 } ."
    },
    {
        "table_id": "181",
        "table_info": {
            "table_caption": "Table 4: Feature Ablation Results. + sign indicates the additional features to Frequency. Loc is the sentence location feature. Event is the event voting feature. Entity is the entity voting feature. Local is the local entity voting feature. † marks the statistically significant improvements over + Loc.",
            "table_column_names": [
                "[BOLD] Feature Groups",
                "P@1",
                "P@5",
                "P@10",
                "R@1",
                "R@5",
                "R@10",
                "AUC"
            ],
            "table_content_values": [
                [
                    "Loc",
                    "0.3548",
                    "0.3069",
                    "0.2497",
                    "0.0807",
                    "0.2671",
                    "0.3792",
                    "0.5226"
                ],
                [
                    "Frequency",
                    "0.4536",
                    "0.4018",
                    "0.3440",
                    "0.0792",
                    "0.2846",
                    "0.4270",
                    "0.5732"
                ],
                [
                    "+ Loc",
                    "0.4734",
                    "0.4097",
                    "0.3513",
                    "0.0835",
                    "0.2976",
                    "0.4436",
                    "0.6354"
                ],
                [
                    "+ Loc + Event",
                    "0.4726",
                    "0.4101†",
                    "0.3516",
                    "0.0831",
                    "0.2969",
                    "0.4431",
                    "0.6365†"
                ],
                [
                    "+ Loc + Entity",
                    "0.4739",
                    "0.4100",
                    "0.3518",
                    "0.0812",
                    "0.2955",
                    "0.4418",
                    "0.6374"
                ],
                [
                    "+ Loc + Entity + Event",
                    "0.4739",
                    "0.4100",
                    "0.3518†",
                    "0.0832",
                    "0.2974",
                    "0.4452†",
                    "0.6374†"
                ],
                [
                    "+ Loc + Entity + Event + Local",
                    "0.4754†",
                    "0.4100",
                    "0.3517†",
                    "0.0837",
                    "0.2981",
                    "0.4454†",
                    "0.6373†"
                ]
            ]
        },
        "gold_description": "we gradually add feature groups to the frequency baseline . the combination of location ( sentence location ) and frequency almost sets the performance for the whole model . adding each voting feature individually produces mixed results . however , adding all voting features improves all metrics . though the margin is small , 4 of them are statistically significant over frequency + location . to understand the contribution of individual features , we conduct an ablation study of various feature settings in table 4 .",
        "generated_description": "we can see that the best performance is achieved when we only use bag - of - words features , i . e . , bag of - nouns , entity mentions , and event types . this is because bag of words is a strong feature representation of the event types in our dataset . however , bag of n - grams alone do not perform as well as bag of word features . we can also see that entity mentions are more important than event types for this task . this may be due to the fact that many event types are strongly related to specific entities , such as ‘ location ’ and ‘ identifier ’ ."
    },
    {
        "table_id": "182",
        "table_info": {
            "table_caption": "Table 7: Notable attributes of 50 instances from UDS-IH2-dev with highest absolute prediction error (using H-biLSTM(2)-MultiSim w/UDS-IH2).",
            "table_column_names": [
                "Attribute",
                "#"
            ],
            "table_content_values": [
                [
                    "Grammatical error present, incl. run-ons",
                    "16"
                ],
                [
                    "Is an auxiliary or light verb",
                    "14"
                ],
                [
                    "Annotation is incorrect",
                    "13"
                ],
                [
                    "Future event",
                    "12"
                ],
                [
                    "Is a question",
                    "5"
                ],
                [
                    "Is an imperative",
                    "3"
                ],
                [
                    "Is not an event or state",
                    "2"
                ],
                [
                    "One or more of the above",
                    "43"
                ]
            ]
        },
        "gold_description": "table 7 shows results from a manual error analysis on 50 events from uds - ih2 - dev with highest absolute prediction error ( using h - bilstm ( 2 ) multisim w / uds - ih2 ) . grammatical errors ( such as run - on sentences ) in the underlying text of uds - ih2 appear to pose a particular challenge for these models ;",
        "generated_description": "for instance , the absolute prediction error for a sentence “ what time would you like to leave ? ” can be as high as 43 % when using h - bilstm ( 2 ) - multisim w / uds - ih2 . this shows that the model is very sensitive to the type of grammatical errors that are present in the sentences . in general , we found that the most predictive attributes are “ the presence of an auxiliary or light verb ” , “ annotation is incorrect ” and “ future event or state ” ."
    },
    {
        "table_id": "183",
        "table_info": {
            "table_caption": "Table 5: Similarities between event entity pairs. Word2vec shows the cosine similarity in pre-trained embeddings. KCE lists their closest kernel mean after training. (E) marks entities.",
            "table_column_names": [
                "attack",
                "kill",
                "[BOLD] Word2Vec 0.69",
                "[BOLD] KCE 0.3"
            ],
            "table_content_values": [
                [
                    "arrest",
                    "charge",
                    "0.53",
                    "0.3"
                ],
                [
                    "USA (E)",
                    "war",
                    "0.46",
                    "0.3"
                ],
                [
                    "911 attack (E)",
                    "attack",
                    "0.72",
                    "0.3"
                ],
                [
                    "attack",
                    "trade",
                    "0.42",
                    "0.9"
                ],
                [
                    "hotel (E)",
                    "travel",
                    "0.49",
                    "0.9"
                ],
                [
                    "charge",
                    "murder",
                    "0.49",
                    "0.7"
                ],
                [
                    "business (E)",
                    "increase",
                    "0.43",
                    "0.7"
                ],
                [
                    "attack",
                    "walk",
                    "0.44",
                    "-0.3"
                ],
                [
                    "people (E)",
                    "work",
                    "0.40",
                    "-0.3"
                ]
            ]
        },
        "gold_description": "we inspect some pairs of events and entities in different kernels and list some examples in table 5 . the pairs in table 3 exhibit interesting types of relations : e . g . , \" arrest - charge \" and \" attack - kill \" form script - like chains ; \" 911 attack \" forms a quasiidentity relation ( recasens et al . , 2010 ) with \" attack \" ; \" business \" and \" increase \" are candidates as frame - argument structure .",
        "generated_description": "word2vec shows the cosine similarity of event pairs from pre - trained embeddings with their closest kernel mean after training . we see that the most similar event pairs are : kill ( 0 . 69 ) and kill ( e ) with a kernel mean of 0 . 69 and 0 . 3 , respectively . the less similar pairs are , the less similar they are . this shows that even if we do not explicitly model the semantic relationship between event and label entities , the embedding is able to learn the association between event pairs ."
    },
    {
        "table_id": "184",
        "table_info": {
            "table_caption": "Table 2: Self-BLEU and percent of generated n-grams that are unique relative to own generations (left) WikiText-103 test set (middle) a sample of 5000 sentences from Toronto Book Corpus (right). For the WT103 and TBC rows, we sample 1000 sentences from the respective datasets.",
            "table_column_names": [
                "Model",
                "Self-BLEU (↓)",
                "% Unique  [ITALIC] n-grams (↑) Self",
                "% Unique  [ITALIC] n-grams (↑) Self",
                "% Unique  [ITALIC] n-grams (↑) Self",
                "% Unique  [ITALIC] n-grams (↑) WT103",
                "% Unique  [ITALIC] n-grams (↑) WT103",
                "% Unique  [ITALIC] n-grams (↑) WT103",
                "% Unique  [ITALIC] n-grams (↑) TBC",
                "% Unique  [ITALIC] n-grams (↑) TBC",
                "% Unique  [ITALIC] n-grams (↑) TBC"
            ],
            "table_content_values": [
                [
                    "Model",
                    "Self-BLEU (↓)",
                    "n=2",
                    "n=3",
                    "n=4",
                    "n=2",
                    "n=3",
                    "n=4",
                    "n=2",
                    "n=3",
                    "n=4"
                ],
                [
                    "BERT (large)",
                    "9.43",
                    "63.15",
                    "92.38",
                    "98.01",
                    "59.91",
                    "91.86",
                    "98.43",
                    "64.59",
                    "93.27",
                    "98.59"
                ],
                [
                    "BERT (base)",
                    "10.06",
                    "60.76",
                    "91.76",
                    "98.14",
                    "57.90",
                    "91.72",
                    "98.55",
                    "60.94",
                    "92.04",
                    "98.56"
                ],
                [
                    "GPT",
                    "40.02",
                    "31.13",
                    "67.01",
                    "87.28",
                    "33.71",
                    "72.86",
                    "91.12",
                    "25.74",
                    "65.04",
                    "88.42"
                ],
                [
                    "WT103",
                    "9.80",
                    "70.29",
                    "94.36",
                    "99.05",
                    "56.19",
                    "88.05",
                    "97.44",
                    "68.35",
                    "94.20",
                    "99.23"
                ],
                [
                    "TBC",
                    "12.51",
                    "62.19",
                    "92.70",
                    "98.73",
                    "55.30",
                    "91.08",
                    "98.81",
                    "44.75",
                    "82.06",
                    "96.31"
                ]
            ]
        },
        "gold_description": "we present sample generations , quality results , and diversity results respectively in tables 1 , 2 , 3 . this observation is further bolstered by the fact that the gpt generations have a higher corpus - bleu with tbc than tbc has with itself . the corpusbleu between bert models and the datasets is low , particularly with wt103 . we find that bert generations are more diverse than gpt generations . gpt has high n - gram overlap ( smaller percent of unique n - grams ) with tbc , but surprisingly also with wikitext - 103 , despite being trained on different data . furthermore , gpt generations have greater n - gram overlap with these datasets than these datasets have with themselves , further suggesting that gpt is relying significantly on generic sentences . bert has lower n - gram overlap with both corpora , with similar degrees of n - gram overlap as the samples of the data .",
        "generated_description": "we measure the percentage of unique n - grams among all sentences in the test set that are extracted from the training data using the self - bleu metric . we observe that the bert ( base ) model , which has the largest number of parameters , is the most unique among all the models , with the exception of wt103 where it is less than 2 % more unique than the largest bert model . on the other hand , as we increase the size of bert ’ s parameters , we see that the percentage increases , suggesting that bert is more likely to extract more and more unique sentences . we also observe that as we scale down bert to a smaller model size ( i . e . , smaller than bert - large ) , we see a decrease in the percentage ."
    },
    {
        "table_id": "185",
        "table_info": {
            "table_caption": "Table 3: Quality metrics of model generations. Perplexity (PPL) is measured using an additional language model (Dauphin et al., 2016). For the WT103 and TBC rows, we sample 1000 sentences from the respective datasets.",
            "table_column_names": [
                "Model",
                "Corpus-BLEU (↑) WT103",
                "Corpus-BLEU (↑) TBC",
                "PPL (↓)"
            ],
            "table_content_values": [
                [
                    "BERT (large)",
                    "5.05",
                    "7.60",
                    "331.47"
                ],
                [
                    "BERT (base)",
                    "7.80",
                    "7.06",
                    "279.10"
                ],
                [
                    "GPT",
                    "10.81",
                    "30.75",
                    "154.29"
                ],
                [
                    "WT103",
                    "17.48",
                    "6.57",
                    "54.00"
                ],
                [
                    "TBC",
                    "10.05",
                    "23.05",
                    "314.28"
                ]
            ]
        },
        "gold_description": "we present sample generations , quality results , and diversity results respectively in tables 1 , 2 , 3 . we find that , compared to gpt , the bert generations are of worse quality , but are more diverse . surprisingly , the outside language model , which was trained on wikipedia , is less perplexed by the gpt generations than the bert generations , even though gpt was only trained on romance novels and bert was trained on romance novels and wikipedia . on actual data from tbc , the outside language model is about as perplexed as on the bert generations , which suggests that domain shift is an issue in using a trained language model for evaluating generations and that the gpt generations might have collapsed to fairly generic and simple sentences . the perplexity on bert samples is not absurdly high , and in reading the samples , we find that many are fairly coherent .",
        "generated_description": "we evaluate the quality of the generations of the wt103 and tbc datasets using bert devlin et al . we sample 1000 sentences from each of the respective datasets to compute bleu and perplexity scores . we observe that bert ( large ) produces the highest quality generations on both datasets , with wt103 being slightly better than tbc . the gpt model , on the other hand , produces sentences that are substantially worse than bert on wt103 but slightly better on tbc , likely due to the fact that it does not have access to the context of the input sentence . we also observe that the bert models produced by wt103 are significantly better than those produced by tbc in terms of perplexity ."
    },
    {
        "table_id": "186",
        "table_info": {
            "table_caption": "Table 1: F1 scores on six test sets. The last column, Avg, shows the average of F1 scores on MSNBC, AQUAINT, ACE2004, CWEB, and WIKI.",
            "table_column_names": [
                "Methods",
                "AIDA-B",
                "MSNBC",
                "AQUAINT",
                "ACE2004",
                "CWEB",
                "WIKI",
                "Avg"
            ],
            "table_content_values": [
                [
                    "[ITALIC] Wikipedia",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Milne and Witten ( 2008 )",
                    "-",
                    "78",
                    "85",
                    "81",
                    "64.1",
                    "[BOLD] 81.7",
                    "77.96"
                ],
                [
                    "Ratinov et al. ( 2011a )",
                    "-",
                    "75",
                    "83",
                    "82",
                    "56.2",
                    "67.2",
                    "72.68"
                ],
                [
                    "Hoffart et al. ( 2011 )",
                    "-",
                    "79",
                    "56",
                    "80",
                    "58.6",
                    "63",
                    "67.32"
                ],
                [
                    "Cheng and Roth ( 2013 )",
                    "-",
                    "90",
                    "90",
                    "86",
                    "67.5",
                    "73.4",
                    "81.38"
                ],
                [
                    "Chisholm and Hachey ( 2015 )",
                    "84.9",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "[ITALIC] Wiki + unlab",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Lazic et al. ( 2015 )",
                    "86.4",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "[EMPTY]"
                ],
                [
                    "Our model",
                    "[BOLD] 89.66 ±0.16",
                    "[BOLD] 92.2 ±0.2",
                    "[BOLD] 90.7 ±0.2",
                    "[BOLD] 88.1 ±0.0",
                    "[BOLD] 78.2 ±0.2",
                    "[BOLD] 81.7 ±0.1",
                    "[BOLD] 86.18"
                ],
                [
                    "[ITALIC] Wiki + Extra supervision",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Chisholm and Hachey ( 2015 )",
                    "88.7",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "[ITALIC] Fully-supervised (Wiki +",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "[ITALIC] AIDA CoNLL train)",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Guo and Barbosa ( 2016 )",
                    "89.0",
                    "92",
                    "87",
                    "88",
                    "77",
                    "84.5",
                    "85.7"
                ],
                [
                    "Globerson et al. ( 2016 )",
                    "91.0",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "Yamada et al. ( 2016 )",
                    "91.5",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "Ganea and Hofmann ( 2017 )",
                    "92.22 ±0.14",
                    "93.7 ±0.1",
                    "88.5 ±0.4",
                    "88.5 ±0.3",
                    "77.9 ±0.1",
                    "77.5 ±0.1",
                    "85.22"
                ],
                [
                    "Le and Titov ( 2018 )",
                    "93.07 ±0.27",
                    "93.9 ±0.2",
                    "88.3 ±0.6",
                    "89.9 ±0.8",
                    "77.5 ±0.1",
                    "78.0 ±0.1",
                    "85.5"
                ]
            ]
        },
        "gold_description": "first , we compare to systems which relied on wikipedia and those which used wikipedia along with unlabeled data ( ' wikipedia + unlab ' ) , i . e . the top half of table 1 . these methods are comparable to ours , as they use the same type of information as supervision . our model outperformed all of them on all test sets . when evaluated on aida - b , their scores are still lower than ours , though significantly higher that those of the previous systems suggesting that web links are indeed valuable . second , we compare to fully - supervised systems , which were estimated on aida - conll documents . we distinguish results on a test set taken from aida - conll ( aida - b ) and the other standard test sets not directly corresponding to the aida - conll domain . when tested on the latter , our approach is very effective , on average outperforming fully - supervised techniques . as expected , on the in - domain test set ( aida - b ) , the majority of recent fully - supervised methods are more accurate than our model . however , even on this test set our model is not as far behind , for example , outperforming the system of guo and barbosa ( 2016 ) .",
        "generated_description": "we compare our model with the state - of - the - art methods on the ace2004 dataset , cweb , and wiki datasets . our model achieves the best performance on aida - b , msnbc , aquaint , and ace2004 . on the other five datasets , our model outperforms the previous state of the art by a large margin ."
    },
    {
        "table_id": "187",
        "table_info": {
            "table_caption": "Table 2: F1 scores of our model when it is weakly-supervised and when it is fully-supervised on Wikipedia and on AIDA CoNLL. AIDA-A is our development set. Avg is the average of F1 scores on MSNBC, AQUAINT, ACE2004, CWEB, and WIKI. Each F1 is the mean of five runs.",
            "table_column_names": [
                "Our model",
                "AIDA-A",
                "AIDA-B",
                "Avg"
            ],
            "table_content_values": [
                [
                    "weakly-supervised",
                    "88.05",
                    "89.66",
                    "86.18"
                ],
                [
                    "fully-supervised",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "on Wikipedia",
                    "87.23",
                    "87.83",
                    "85.84"
                ],
                [
                    "on AIDA CoNLL",
                    "91.34",
                    "91.87",
                    "84.55"
                ]
            ]
        },
        "gold_description": "the results are shown in table 2 ( ' wikipedia ' ) . the resulting model is significantly less accurate than the one which used unlabeled documents . the score difference is larger for aida - conll test set than for the other 5 test sets . additionally we train our model on aida - conll , producing its fully - supervised version ( ' aida conll ' row in table 2 ) . though , as expected , this version is more accurate on aida test set , similarly to other fully - supervised methods , it overfits and does not perform that well on the 5 out - of - domain test sets .",
        "generated_description": "when it is weakly - supervised , our model achieves an f1 score of 88 . 05 on aida - a , 89 . 66 on wikipedia , and 91 . 34 on the aida conll test set . the gap between the two sets of f1 scores is smaller than on the development set , which shows that our model does not suffer from the data sparsity issue . on the other hand , the gap is larger on the full set of aida test sets , which is probably because aida is a much larger test set than the other three ."
    },
    {
        "table_id": "188",
        "table_info": {
            "table_caption": "Table 3: Ablation study on AIDA CoNLL development set. Each F1 score is the mean of five runs.",
            "table_column_names": [
                "Model",
                "AIDA-A"
            ],
            "table_content_values": [
                [
                    "Our model",
                    "88.05"
                ],
                [
                    "without local",
                    "82.41"
                ],
                [
                    "without attention",
                    "86.82"
                ],
                [
                    "No disambiguation model ( [ITALIC] sc)",
                    "86.42"
                ]
            ]
        },
        "gold_description": "as we do not want to test multiple systems on the final test set , we report the remaining ablations on the development set ( aida - a ) , table 3 . we constructed a baseline which only relies on link statistics in wikipedia as well as string similarity ( we refereed to its scoring function as sc ) . it appears surprisingly strong , however , we still outperform it by 1 . 6 % ( see table 3 ) . when we use only global coherence ( i . e . only second term in expression ( 1 ) ) and drop any modeling of local context on the disambiguation stage , the performance drops very substantially ( to 82 . 4 % f1 , see table 3 ) . without using local scores the disambiguation model appears to be even less accurate than our ' no - statisticaldisambiguation ' baseline . it is also important to have an accurate global model : not using global attention results in a 1 . 2 % drop in performance .",
        "generated_description": "we can see that without local embedding , the f1 score drops from 88 . 05 to 82 . 41 , which demonstrates the effectiveness of our local graph embedding . without attention , the model also suffers a significant performance drop , which shows the importance of the attention mechanism . finally , without the disambiguation model , the performance drops to 86 . 42 , which indicates that the pre - trained embedding model is essential for aida conll ."
    },
    {
        "table_id": "189",
        "table_info": {
            "table_caption": "Table 4: Accuracy (%) by NER type on AIDA-A.",
            "table_column_names": [
                "Type",
                "Our model",
                "Fully-supervised learning"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "[EMPTY]",
                    "on AIDA CoNLL"
                ],
                [
                    "LOC",
                    "85.53",
                    "89.41"
                ],
                [
                    "MISC",
                    "75.71",
                    "83.27"
                ],
                [
                    "ORG",
                    "89.51",
                    "92.70"
                ],
                [
                    "PER",
                    "97.20",
                    "97.73"
                ]
            ]
        },
        "gold_description": "figure 4 shows the accuracy of two systems for different ner ( named entity recognition ) types . we consider four types : location ( loc ) , organization ( org ) , person ( per ) , and miscellany ( mics ) . these types are given in conll 2003 dataset , which was used as a basis for aida conll . our model is accurate for per , achieving accuracy of about 97 % , only 0 . 53 % lower than the supervised model .",
        "generated_description": "our model outperforms the fully - supervised learning model on all four types of ner by a significant margin . the most significant improvement is achieved for the ner type per , where our model improves from 75 . 71 % to 97 . 73 % ."
    },
    {
        "table_id": "190",
        "table_info": {
            "table_caption": "Table 1: Model performance (P, R and F) for development sets for all MWE and only discontinuous ones (%: proportion of discontinuous MWES)",
            "table_column_names": [
                "[EMPTY]",
                "[EMPTY]",
                "All Token-",
                "All MWE-",
                "Discontinuous",
                "Discontinuous",
                "Discontinuous",
                "Discontinuous"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "[EMPTY]",
                    "based",
                    "based",
                    "[EMPTY]",
                    "MWE-based",
                    "MWE-based",
                    "MWE-based"
                ],
                [
                    "L",
                    "model",
                    "F",
                    "F",
                    "%",
                    "P",
                    "R",
                    "F"
                ],
                [
                    "EN",
                    "baseline",
                    "41.37",
                    "35.38",
                    "32",
                    "24.44",
                    "10.48",
                    "14.67"
                ],
                [
                    "[EMPTY]",
                    "GCN-based",
                    "39.78",
                    "39.11",
                    "32",
                    "39.53",
                    "16.19",
                    "22.97"
                ],
                [
                    "[EMPTY]",
                    "Att-based",
                    "33.33",
                    "31.79",
                    "32",
                    "46.88",
                    "14.29",
                    "21.90"
                ],
                [
                    "[EMPTY]",
                    "H-combined",
                    "41.63",
                    "[BOLD] 40.76",
                    "32",
                    "63.33",
                    "18.10",
                    "[BOLD] 28.15"
                ],
                [
                    "DE",
                    "baseline",
                    "62.27",
                    "57.17",
                    "43",
                    "69.50",
                    "45.37",
                    "54.90"
                ],
                [
                    "[EMPTY]",
                    "GCN-based",
                    "65.48",
                    "[BOLD] 61.17",
                    "43",
                    "65.19",
                    "47.69",
                    "55.08"
                ],
                [
                    "[EMPTY]",
                    "Att-based",
                    "61.20",
                    "58.19",
                    "43",
                    "67.86",
                    "43.98",
                    "53.37"
                ],
                [
                    "[EMPTY]",
                    "H-combined",
                    "63.80",
                    "60.71",
                    "43",
                    "68.59",
                    "49.54",
                    "[BOLD] 57.53"
                ],
                [
                    "FR",
                    "baseline",
                    "76.62",
                    "72.16",
                    "43",
                    "75.27",
                    "52.04",
                    "61.54"
                ],
                [
                    "[EMPTY]",
                    "GCN-based",
                    "79.59",
                    "75.15",
                    "43",
                    "79.58",
                    "56.51",
                    "66.09"
                ],
                [
                    "[EMPTY]",
                    "Att-based",
                    "78.21",
                    "74.23",
                    "43",
                    "71.49",
                    "60.59",
                    "65.59"
                ],
                [
                    "[EMPTY]",
                    "H-combined",
                    "80.25",
                    "[BOLD] 76.56",
                    "43",
                    "77.94",
                    "59.11",
                    "[BOLD] 67.23"
                ],
                [
                    "FA",
                    "baseline",
                    "88.45",
                    "86.50",
                    "14",
                    "67.76",
                    "55.88",
                    "61.29"
                ],
                [
                    "[EMPTY]",
                    "GCN-based",
                    "87.78",
                    "86.42",
                    "14",
                    "78.72",
                    "54.41",
                    "64.35"
                ],
                [
                    "[EMPTY]",
                    "Att-based",
                    "87.55",
                    "84.20",
                    "14",
                    "62.32",
                    "63.24",
                    "62.77"
                ],
                [
                    "[EMPTY]",
                    "H-combined",
                    "88.76",
                    "[BOLD] 87.15",
                    "14",
                    "75.44",
                    "63.24",
                    "[BOLD] 68.80"
                ]
            ]
        },
        "gold_description": "we perform hyperparameter optimisation and make comparisons among our systems , including gcn + bi - lstm ( gcn - based ) , cnn + attention + bi - lstm ( attbased ) , and their combination using a highway layer ( h - combined ) in table 1 . systems are evaluated using two types of precision , recall and f - score measures : strict mwebased scores ( every component of an mwe should be correctly tagged to be considered as true positive ) , and token - based scores ( a partial match between a predicted and a gold mwe would be considered as true positive ) . we report results for all mwes as well as discontinuous ones specifically . gcn - based outperforms att - based and they both outperform the strong baseline in terms of mwe - based f - score in three out of four languages . combining gcn with attention using highway networks results in further improvements for en , fr and fa . the hcombined model consistently exceeds the baseline for all languages . gcn and h - combined models each show significant improvement with regard to discontinuous mwes , regardless of the proportion of such expressions . the overall results confirm our assumption that a hybrid architecture can mitigate errors of individual models and bolster their strengths .",
        "generated_description": "we can see that the h - combined model achieves the best overall f - score ( 28 . 15 ) , outperforming the baseline model by a large margin . the gcn - based and att - based models perform better than the base models for most of the languages , except for german , where the gcn model performs slightly better . for english , the performance of the base and gcn models is similar for both mwe - and non - mwe - based embeddings , and the att - base model is slightly better for both types of embedding representations ."
    },
    {
        "table_id": "191",
        "table_info": {
            "table_caption": "Table 9: MAE of L-biLSTM(2)-S and L-biLSTM(2)-S+lexfeats, for predictions on events in UDS-IH2-dev that are xcomp-governed by an infinitival-taking verb.",
            "table_column_names": [
                "Verb",
                "L-biLSTM(2)-S",
                "+lexfeats",
                "#"
            ],
            "table_content_values": [
                [
                    "decide to",
                    "3.28",
                    "2.66",
                    "2"
                ],
                [
                    "forget to",
                    "0.67",
                    "0.48",
                    "2"
                ],
                [
                    "get to",
                    "1.55",
                    "1.43",
                    "9"
                ],
                [
                    "hope to",
                    "1.35",
                    "1.23",
                    "5"
                ],
                [
                    "intend to",
                    "1.18",
                    "0.61",
                    "1"
                ],
                [
                    "promise to",
                    "0.40",
                    "0.49",
                    "1"
                ],
                [
                    "try to",
                    "1.14",
                    "1.42",
                    "12"
                ],
                [
                    "want to",
                    "1.22",
                    "1.17",
                    "24"
                ]
            ]
        },
        "gold_description": "despite the underperformance of these features overall , table 9 shows that they may still improve performance in the subset of instances where they appear .",
        "generated_description": "overall , we see that the l - bilstm ( 2 ) - s + lexfeats model outperforms the baseline model for all verb types except for “ dont to ” , for which the difference is not statistically significant . however , the difference in mae between the two models is statistically significant at p < 0 . 01 for the forget to and get to events ."
    },
    {
        "table_id": "192",
        "table_info": {
            "table_caption": "Table 2: Comparing the performance of the systems on test data in terms of MWE-based F-score",
            "table_column_names": [
                "[EMPTY]",
                "All | Discontinuous EN",
                "All | Discontinuous DE",
                "All | Discontinuous FR",
                "All | Discontinuous FA"
            ],
            "table_content_values": [
                [
                    "baseline",
                    "33.01 | 16.53",
                    "54.12 | 53.94",
                    "67.66 | 58.70",
                    "[BOLD] 81.62 | 61.73"
                ],
                [
                    "GCN-based",
                    "36.27 |  [BOLD] 24.15",
                    "56.96 | 54.87",
                    "70.79 | 59.95",
                    "81.00 |  [BOLD] 62.35"
                ],
                [
                    "H-combined",
                    "[BOLD] 41.91 | 22.73",
                    "[BOLD] 59.29 |  [BOLD] 55.00",
                    "[BOLD] 70.97 |  [BOLD] 63.90",
                    "80.04 | 61.90"
                ],
                [
                    "ATILF-LLF",
                    "31.58 | 09.91",
                    "54.43 | 40.34",
                    "58.60 | 51.96",
                    "77.48 | 53.85"
                ],
                [
                    "SHOMA",
                    "26.42 | 01.90",
                    "48.71 | 40.12",
                    "62.00 | 51.43",
                    "78.35 | 56.10"
                ]
            ]
        },
        "gold_description": "we show the superior performance ( in terms of mwe - based f - score ) of our top systems on the test data compared to the baseline and stateof - the - art systems , namely , atilf - llf ( al saied et al . , 2017 ) and shoma ( taslimipoor and rohanian , 2018 ) . gcn works the best for discontinuous mwes in en and fa , while h - combined outperforms based on results for all mwes except for fa . the overall results confirm our assumption that a hybrid architecture can mitigate errors of individual models and bolster their strengths .",
        "generated_description": "we can see that the gcn - based and h - combined models perform better than the baseline in all the cases , which indicates that the graph convolutional network is able to learn the discriminative features of speech in different languages . the performance of shoma on the disjoint datasets is not satisfactory , which can be explained by the fact that it does not consider the structural information of the utterances in the test data ."
    },
    {
        "table_id": "193",
        "table_info": {
            "table_caption": "Table 2: Results for pretraining experiments on development sets except where noted. Bold denotes best result overall. Underlining denotes an average score surpassing the Random baseline. See Section 6 for discussion of WNLI results (*).",
            "table_column_names": [
                "[BOLD] Pretr. Baselines",
                "[BOLD] Avg Baselines",
                "[BOLD] CoLA Baselines",
                "[BOLD] SST Baselines",
                "[BOLD] MRPC Baselines",
                "[BOLD] MRPC Baselines",
                "[BOLD] QQP Baselines",
                "[BOLD] QQP Baselines",
                "[BOLD] STS Baselines",
                "[BOLD] STS Baselines",
                "[BOLD] MNLI Baselines",
                "[BOLD] QNLI Baselines",
                "[BOLD] RTE Baselines",
                "[BOLD] WNLI Baselines"
            ],
            "table_content_values": [
                [
                    "[BOLD] Random",
                    "68.2",
                    "16.9",
                    "84.3",
                    "77.7/",
                    "85.6",
                    "83.0/",
                    "80.6",
                    "81.7/",
                    "82.6",
                    "73.9",
                    "[BOLD] 79.6",
                    "57.0",
                    "31.0*"
                ],
                [
                    "[BOLD] Single-Task",
                    "69.1",
                    "21.3",
                    "89.0",
                    "77.2/",
                    "84.7",
                    "84.7/",
                    "81.9",
                    "81.4/",
                    "82.2",
                    "74.8",
                    "78.8",
                    "56.0",
                    "11.3*"
                ],
                [
                    "GLUE Tasks as Pretraining Tasks",
                    "GLUE Tasks as Pretraining Tasks",
                    "GLUE Tasks as Pretraining Tasks",
                    "GLUE Tasks as Pretraining Tasks",
                    "GLUE Tasks as Pretraining Tasks",
                    "GLUE Tasks as Pretraining Tasks",
                    "GLUE Tasks as Pretraining Tasks",
                    "GLUE Tasks as Pretraining Tasks",
                    "GLUE Tasks as Pretraining Tasks",
                    "GLUE Tasks as Pretraining Tasks",
                    "GLUE Tasks as Pretraining Tasks",
                    "GLUE Tasks as Pretraining Tasks",
                    "GLUE Tasks as Pretraining Tasks",
                    "GLUE Tasks as Pretraining Tasks"
                ],
                [
                    "[BOLD] CoLA",
                    "68.2",
                    "21.3",
                    "85.7",
                    "75.0/",
                    "83.7",
                    "85.7/",
                    "82.4",
                    "79.0/",
                    "80.3",
                    "72.7",
                    "78.4",
                    "56.3",
                    "15.5*"
                ],
                [
                    "[BOLD] SST",
                    "68.6",
                    "16.4",
                    "89.0",
                    "76.0/",
                    "84.2",
                    "84.4/",
                    "81.6",
                    "80.6/",
                    "81.4",
                    "73.9",
                    "78.5",
                    "58.8",
                    "19.7*"
                ],
                [
                    "[BOLD] MRPC",
                    "68.2",
                    "16.4",
                    "85.6",
                    "77.2/",
                    "84.7",
                    "84.4/",
                    "81.8",
                    "81.2/",
                    "82.2",
                    "73.6",
                    "79.3",
                    "56.7",
                    "22.5*"
                ],
                [
                    "[BOLD] QQP",
                    "68.0",
                    "14.7",
                    "86.1",
                    "77.2/",
                    "84.5",
                    "84.7/",
                    "81.9",
                    "81.1/",
                    "82.0",
                    "73.7",
                    "78.2",
                    "57.0",
                    "45.1*"
                ],
                [
                    "[BOLD] STS",
                    "67.7",
                    "14.1",
                    "84.6",
                    "77.9/",
                    "85.3",
                    "81.7/",
                    "79.2",
                    "81.4/",
                    "82.2",
                    "73.6",
                    "79.3",
                    "57.4",
                    "43.7*"
                ],
                [
                    "[BOLD] MNLI",
                    "69.1",
                    "16.7",
                    "88.2",
                    "78.9/",
                    "85.2",
                    "84.5/",
                    "81.5",
                    "81.8/",
                    "82.6",
                    "74.8",
                    "[BOLD] 79.6",
                    "58.8",
                    "36.6*"
                ],
                [
                    "[BOLD] QNLI",
                    "67.9",
                    "15.6",
                    "84.2",
                    "76.5/",
                    "84.2",
                    "84.3/",
                    "81.4",
                    "80.6/",
                    "81.8",
                    "73.4",
                    "78.8",
                    "58.8",
                    "[BOLD] 56.3"
                ],
                [
                    "[BOLD] RTE",
                    "68.1",
                    "18.1",
                    "83.9",
                    "77.5/",
                    "85.4",
                    "83.9/",
                    "81.2",
                    "81.2/",
                    "82.2",
                    "74.1",
                    "79.1",
                    "56.0",
                    "39.4*"
                ],
                [
                    "[BOLD] WNLI",
                    "68.0",
                    "16.3",
                    "84.3",
                    "76.5/",
                    "84.6",
                    "83.0/",
                    "80.5",
                    "81.6/",
                    "82.5",
                    "73.6",
                    "78.8",
                    "58.1",
                    "11.3*"
                ],
                [
                    "Non-GLUE Pretraining Tasks",
                    "Non-GLUE Pretraining Tasks",
                    "Non-GLUE Pretraining Tasks",
                    "Non-GLUE Pretraining Tasks",
                    "Non-GLUE Pretraining Tasks",
                    "Non-GLUE Pretraining Tasks",
                    "Non-GLUE Pretraining Tasks",
                    "Non-GLUE Pretraining Tasks",
                    "Non-GLUE Pretraining Tasks",
                    "Non-GLUE Pretraining Tasks",
                    "Non-GLUE Pretraining Tasks",
                    "Non-GLUE Pretraining Tasks",
                    "Non-GLUE Pretraining Tasks",
                    "Non-GLUE Pretraining Tasks"
                ],
                [
                    "[BOLD] DisSent WT",
                    "68.6",
                    "18.3",
                    "86.6",
                    "79.9/",
                    "86.0",
                    "85.3/",
                    "82.0",
                    "79.5/",
                    "80.5",
                    "73.4",
                    "79.1",
                    "56.7",
                    "42.3*"
                ],
                [
                    "[BOLD] LM WT",
                    "70.1",
                    "30.8",
                    "85.7",
                    "76.2/",
                    "84.2",
                    "86.2/",
                    "82.9",
                    "79.2/",
                    "80.2",
                    "74.0",
                    "79.4",
                    "60.3",
                    "25.4*"
                ],
                [
                    "[BOLD] LM BWB",
                    "[BOLD] 70.4",
                    "30.7",
                    "86.8",
                    "79.9/",
                    "86.2",
                    "[BOLD] 86.3/",
                    "[BOLD] 83.2",
                    "80.7/",
                    "81.4",
                    "74.2",
                    "79.0",
                    "57.4",
                    "47.9*"
                ],
                [
                    "[BOLD] MT En-De",
                    "68.1",
                    "16.7",
                    "85.4",
                    "77.9/",
                    "84.9",
                    "83.8/",
                    "80.5",
                    "82.4/",
                    "82.9",
                    "73.5",
                    "[BOLD] 79.6",
                    "55.6",
                    "22.5*"
                ],
                [
                    "[BOLD] MT En-Ru",
                    "68.4",
                    "16.8",
                    "85.1",
                    "79.4/",
                    "86.2",
                    "84.1/",
                    "81.2",
                    "82.7/",
                    "83.2",
                    "74.1",
                    "79.1",
                    "56.0",
                    "26.8*"
                ],
                [
                    "[BOLD] Reddit",
                    "66.9",
                    "15.3",
                    "82.3",
                    "76.5/",
                    "84.6",
                    "81.9/",
                    "79.2",
                    "81.5/",
                    "81.9",
                    "72.7",
                    "76.8",
                    "55.6",
                    "53.5*"
                ],
                [
                    "[BOLD] SkipThought",
                    "68.7",
                    "16.0",
                    "84.9",
                    "77.5/",
                    "85.0",
                    "83.5/",
                    "80.7",
                    "81.1/",
                    "81.5",
                    "73.3",
                    "79.1",
                    "[BOLD] 63.9",
                    "49.3*"
                ],
                [
                    "Multitask Pretraining",
                    "Multitask Pretraining",
                    "Multitask Pretraining",
                    "Multitask Pretraining",
                    "Multitask Pretraining",
                    "Multitask Pretraining",
                    "Multitask Pretraining",
                    "Multitask Pretraining",
                    "Multitask Pretraining",
                    "Multitask Pretraining",
                    "Multitask Pretraining",
                    "Multitask Pretraining",
                    "Multitask Pretraining",
                    "Multitask Pretraining"
                ],
                [
                    "[BOLD] MTL GLUE",
                    "68.9",
                    "15.4",
                    "[BOLD] 89.9",
                    "78.9/",
                    "86.3",
                    "82.6/",
                    "79.9",
                    "[BOLD] 82.9/",
                    "[BOLD] 83.5",
                    "[BOLD] 74.9",
                    "78.9",
                    "57.8",
                    "38.0*"
                ],
                [
                    "[BOLD] MTL Non-GLUE",
                    "69.9",
                    "30.6",
                    "87.0",
                    "[BOLD] 81.1/",
                    "[BOLD] 87.6",
                    "86.0/",
                    "82.2",
                    "79.9/",
                    "80.6",
                    "72.8",
                    "78.9",
                    "54.9",
                    "22.5*"
                ],
                [
                    "[BOLD] MTL All",
                    "[BOLD] 70.4",
                    "[BOLD] 33.2",
                    "88.2",
                    "78.9/",
                    "85.9",
                    "85.5/",
                    "81.8",
                    "79.7/",
                    "80.0",
                    "73.9",
                    "78.7",
                    "57.4",
                    "33.8*"
                ],
                [
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results"
                ],
                [
                    "[BOLD] LM BWB",
                    "66.5",
                    "29.1",
                    "86.9",
                    "75.0/",
                    "82.1",
                    "82.7/",
                    "63.3",
                    "74.0/",
                    "73.1",
                    "73.4",
                    "68.0",
                    "51.3",
                    "65.1"
                ],
                [
                    "[BOLD] MTL All",
                    "68.5",
                    "36.3",
                    "88.9",
                    "77.7/",
                    "84.8",
                    "82.7/",
                    "63.6",
                    "77.8/",
                    "76.7",
                    "75.3",
                    "66.2",
                    "53.2",
                    "65.1"
                ]
            ]
        },
        "gold_description": "tables 2 and 3 respectively show results for our pretraining and intermediate training experiments . from table 2 , among target tasks , we find the grammar - related cola task benefits dramatically from lm pretraining : the results achieved with lm pretraining are significantly better than the results achieved without . in contrast , the meaningoriented sts sees good results with several kinds of pretraining , but does not benefit substantially from lm pretraining . among pretraining tasks , language modeling performs best , followed by mnli . the remaining pretraining tasks yield performance near that of the random baseline . even our single - task baseline gets less than a one point gain over this simple baseline . the multitask models are tied or outperformed by models trained on one of their constituent tasks , suggesting that our approach to multitask learning does not reliably produce models that productively combine the knowledge taught by each task . however , of the two models that perform best on the development data , the multitask model generalizes better than the single - task model on test data for tasks like sts and mnli where the test set contains out - of - domain data .",
        "generated_description": "in this section , we compare the performance of our model with the baselines on different pretraining tasks . we use the same model pretrained on each glue task as the base model for all the other tasks , and then fine - tune it separately on each of the glue tasks . the results show that our model consistently outperforms the random pretraining baseline and the single - task baseline on all the tasks , which demonstrates the effectiveness of our proposed model in leveraging multiple tasks for pre - training . we also observe that fine - tuning the model pre - trained on one task ( e . g . , qqp ) results in worse performance compared to pretraining the model on all other tasks . for example , the average f1 score of the model trained on sts ( 76 . 7 % ) drops from 89 . 0 % to 56 . 0 % , which indicates that the model is not able to leverage the additional sts task information to improve the performance on the downstream tasks ."
    },
    {
        "table_id": "194",
        "table_info": {
            "table_caption": "Table 3: Results for intermediate training experiments on development sets except where noted. E and B respectively denote ELMo and BERT experiments. Bold denotes best scores by section. Underlining denotes average scores better than the single-task baseline. See Section 6 for discussion of WNLI results (*). BERT Base numbers are from Devlin et al. (2019).",
            "table_column_names": [
                "[BOLD] Intermediate Task ELMo with Intermediate Task Training",
                "[BOLD] Avg ELMo with Intermediate Task Training",
                "[BOLD] CoLA ELMo with Intermediate Task Training",
                "[BOLD] SST ELMo with Intermediate Task Training",
                "[BOLD] MRPC ELMo with Intermediate Task Training",
                "[BOLD] MRPC ELMo with Intermediate Task Training",
                "[BOLD] QQP ELMo with Intermediate Task Training",
                "[BOLD] QQP ELMo with Intermediate Task Training",
                "[BOLD] STS ELMo with Intermediate Task Training",
                "[BOLD] STS ELMo with Intermediate Task Training",
                "[BOLD] MNLI ELMo with Intermediate Task Training",
                "[BOLD] QNLI ELMo with Intermediate Task Training",
                "[BOLD] RTE ELMo with Intermediate Task Training",
                "[BOLD] WNLI ELMo with Intermediate Task Training"
            ],
            "table_content_values": [
                [
                    "[BOLD] Random [ITALIC] E",
                    "70.5",
                    "38.5",
                    "87.7",
                    "79.9/",
                    "86.5",
                    "86.7/",
                    "83.4",
                    "80.8/",
                    "82.1",
                    "75.6",
                    "79.6",
                    "[BOLD] 61.7",
                    "33.8*"
                ],
                [
                    "[BOLD] Single-Task [ITALIC] E",
                    "71.2",
                    "39.4",
                    "[BOLD] 90.6",
                    "77.5/",
                    "84.4",
                    "86.4/",
                    "82.4",
                    "79.9/",
                    "80.6",
                    "75.6",
                    "78.0",
                    "55.6",
                    "11.3*"
                ],
                [
                    "[BOLD] CoLA [ITALIC] E",
                    "71.1",
                    "39.4",
                    "87.3",
                    "77.5/",
                    "85.2",
                    "86.5/",
                    "83.0",
                    "78.8/",
                    "80.2",
                    "74.2",
                    "78.2",
                    "59.2",
                    "33.8*"
                ],
                [
                    "[BOLD] SST [ITALIC] E",
                    "71.2",
                    "38.8",
                    "[BOLD] 90.6",
                    "80.4/",
                    "86.8",
                    "87.0/",
                    "83.5",
                    "79.4/",
                    "81.0",
                    "74.3",
                    "77.8",
                    "53.8",
                    "43.7*"
                ],
                [
                    "[BOLD] MRPC [ITALIC] E",
                    "71.3",
                    "40.0",
                    "88.4",
                    "77.5/",
                    "84.4",
                    "86.4/",
                    "82.7",
                    "79.5/",
                    "80.6",
                    "74.9",
                    "78.4",
                    "58.1",
                    "[BOLD] 54.9*"
                ],
                [
                    "[BOLD] QQP [ITALIC] E",
                    "70.8",
                    "34.3",
                    "88.6",
                    "79.4/",
                    "85.7",
                    "86.4/",
                    "82.4",
                    "81.1/",
                    "82.1",
                    "74.3",
                    "78.1",
                    "56.7",
                    "38.0*"
                ],
                [
                    "[BOLD] STS [ITALIC] E",
                    "71.6",
                    "39.9",
                    "88.4",
                    "79.9/",
                    "86.4",
                    "86.7/",
                    "83.3",
                    "79.9/",
                    "80.6",
                    "74.3",
                    "78.6",
                    "58.5",
                    "26.8*"
                ],
                [
                    "[BOLD] MNLI [ITALIC] E",
                    "72.1",
                    "38.9",
                    "89.0",
                    "80.9/",
                    "86.9",
                    "86.1/",
                    "82.7",
                    "81.3/",
                    "82.5",
                    "75.6",
                    "79.7",
                    "58.8",
                    "16.9*"
                ],
                [
                    "[BOLD] QNLI [ITALIC] E",
                    "71.2",
                    "37.2",
                    "88.3",
                    "81.1/",
                    "86.9",
                    "85.5/",
                    "81.7",
                    "78.9/",
                    "80.1",
                    "74.7",
                    "78.0",
                    "58.8",
                    "22.5*"
                ],
                [
                    "[BOLD] RTE [ITALIC] E",
                    "71.2",
                    "38.5",
                    "87.7",
                    "81.1/",
                    "87.3",
                    "86.6/",
                    "83.2",
                    "80.1/",
                    "81.1",
                    "74.6",
                    "78.0",
                    "55.6",
                    "32.4*"
                ],
                [
                    "[BOLD] WNLI [ITALIC] E",
                    "70.9",
                    "38.4",
                    "88.6",
                    "78.4/",
                    "85.9",
                    "86.3/",
                    "82.8",
                    "79.1/",
                    "80.0",
                    "73.9",
                    "77.9",
                    "57.0",
                    "11.3*"
                ],
                [
                    "[BOLD] DisSent WT [ITALIC] E",
                    "71.9",
                    "39.9",
                    "87.6",
                    "[BOLD] 81.9/",
                    "[BOLD] 87.2",
                    "85.8/",
                    "82.3",
                    "79.0/",
                    "80.7",
                    "74.6",
                    "79.1",
                    "61.4",
                    "23.9*"
                ],
                [
                    "[BOLD] MT En-De [ITALIC] E",
                    "72.1",
                    "40.1",
                    "87.8",
                    "79.9/",
                    "86.6",
                    "86.4/",
                    "83.2",
                    "81.8/",
                    "82.4",
                    "75.9",
                    "79.4",
                    "58.8",
                    "31.0*"
                ],
                [
                    "[BOLD] MT En-Ru [ITALIC] E",
                    "70.4",
                    "[BOLD] 41.0",
                    "86.8",
                    "76.5/",
                    "85.0",
                    "82.5/",
                    "76.3",
                    "81.4/",
                    "81.5",
                    "70.1",
                    "77.3",
                    "60.3",
                    "45.1*"
                ],
                [
                    "[BOLD] Reddit [ITALIC] E",
                    "71.0",
                    "38.5",
                    "87.7",
                    "77.2/",
                    "85.0",
                    "85.4/",
                    "82.1",
                    "80.9/",
                    "81.7",
                    "74.2",
                    "79.3",
                    "56.7",
                    "21.1*"
                ],
                [
                    "[BOLD] SkipThought [ITALIC] E",
                    "71.7",
                    "40.6",
                    "87.7",
                    "79.7/",
                    "86.5",
                    "85.2/",
                    "82.1",
                    "81.0/",
                    "81.7",
                    "75.0",
                    "79.1",
                    "58.1",
                    "52.1*"
                ],
                [
                    "[BOLD] MTL GLUE [ITALIC] E",
                    "72.1",
                    "33.8",
                    "90.5",
                    "81.1/",
                    "87.4",
                    "86.6/",
                    "83.0",
                    "82.1/",
                    "83.3",
                    "[BOLD] 76.2",
                    "79.2",
                    "61.4",
                    "42.3*"
                ],
                [
                    "[BOLD] MTL Non-GLUE [ITALIC] E",
                    "[BOLD] 72.4",
                    "39.4",
                    "88.8",
                    "80.6/",
                    "86.8",
                    "[BOLD] 87.1/",
                    "[BOLD] 84.1",
                    "[BOLD] 83.2/",
                    "[BOLD] 83.9",
                    "75.9",
                    "[BOLD] 80.9",
                    "57.8",
                    "22.5*"
                ],
                [
                    "[BOLD] MTL All [ITALIC] E",
                    "72.2",
                    "37.9",
                    "89.6",
                    "79.2/",
                    "86.4",
                    "86.0/",
                    "82.8",
                    "81.6/",
                    "82.5",
                    "76.1",
                    "80.2",
                    "60.3",
                    "31.0*"
                ],
                [
                    "BERT with Intermediate Task Training",
                    "BERT with Intermediate Task Training",
                    "BERT with Intermediate Task Training",
                    "BERT with Intermediate Task Training",
                    "BERT with Intermediate Task Training",
                    "BERT with Intermediate Task Training",
                    "BERT with Intermediate Task Training",
                    "BERT with Intermediate Task Training",
                    "BERT with Intermediate Task Training",
                    "BERT with Intermediate Task Training",
                    "BERT with Intermediate Task Training",
                    "BERT with Intermediate Task Training",
                    "BERT with Intermediate Task Training",
                    "BERT with Intermediate Task Training"
                ],
                [
                    "[BOLD] Single-Task [ITALIC] B",
                    "78.8",
                    "56.6",
                    "90.9",
                    "88.5/",
                    "91.8",
                    "89.9/",
                    "86.4",
                    "86.1/",
                    "86.0",
                    "83.5",
                    "[BOLD] 87.9",
                    "69.7",
                    "[BOLD] 56.3"
                ],
                [
                    "[BOLD] CoLA [ITALIC] B",
                    "78.3",
                    "[BOLD] 61.3",
                    "91.1",
                    "87.7/",
                    "91.4",
                    "89.7/",
                    "86.3",
                    "85.0/",
                    "85.0",
                    "83.3",
                    "85.9",
                    "64.3",
                    "43.7*"
                ],
                [
                    "[BOLD] SST [ITALIC] B",
                    "78.4",
                    "57.4",
                    "[BOLD] 92.2",
                    "86.3/",
                    "90.0",
                    "89.6/",
                    "86.1",
                    "85.3/",
                    "85.1",
                    "83.2",
                    "87.4",
                    "67.5",
                    "43.7*"
                ],
                [
                    "[BOLD] MRPC [ITALIC] B",
                    "78.3",
                    "60.3",
                    "90.8",
                    "87.0/",
                    "91.1",
                    "89.7/",
                    "86.3",
                    "86.6/",
                    "86.4",
                    "[BOLD] 83.8",
                    "83.9",
                    "66.4",
                    "[BOLD] 56.3"
                ],
                [
                    "[BOLD] QQP [ITALIC] B",
                    "79.1",
                    "56.8",
                    "91.3",
                    "88.5/",
                    "91.7",
                    "[BOLD] 90.5/",
                    "[BOLD] 87.3",
                    "88.1/",
                    "87.8",
                    "83.4",
                    "87.2",
                    "69.7",
                    "[BOLD] 56.3"
                ],
                [
                    "[BOLD] STS [ITALIC] B",
                    "79.4",
                    "61.1",
                    "92.3",
                    "88.0/",
                    "91.5",
                    "89.3/",
                    "85.5",
                    "86.2/",
                    "86.0",
                    "82.9",
                    "87.0",
                    "71.5",
                    "50.7*"
                ],
                [
                    "[BOLD] MNLI [ITALIC] B",
                    "[BOLD] 79.6",
                    "56.0",
                    "91.3",
                    "88.0/",
                    "91.3",
                    "90.0/",
                    "86.7",
                    "87.8/",
                    "87.7",
                    "82.9",
                    "87.0",
                    "[BOLD] 76.9",
                    "[BOLD] 56.3"
                ],
                [
                    "[BOLD] QNLI [ITALIC] B",
                    "78.4",
                    "55.4",
                    "91.2",
                    "[BOLD] 88.7/",
                    "[BOLD] 92.1",
                    "89.9/",
                    "86.4",
                    "86.5/",
                    "86.3",
                    "82.9",
                    "86.8",
                    "68.2",
                    "[BOLD] 56.3"
                ],
                [
                    "[BOLD] RTE [ITALIC] B",
                    "77.7",
                    "59.3",
                    "91.2",
                    "86.0/",
                    "90.4",
                    "89.2/",
                    "85.9",
                    "85.9/",
                    "85.7",
                    "82.0",
                    "83.3",
                    "65.3",
                    "[BOLD] 56.3"
                ],
                [
                    "[BOLD] WNLI [ITALIC] B",
                    "76.2",
                    "53.2",
                    "92.1",
                    "85.5/",
                    "90.0",
                    "89.1/",
                    "85.5",
                    "85.6/",
                    "85.4",
                    "82.4",
                    "82.5",
                    "58.5",
                    "[BOLD] 56.3"
                ],
                [
                    "[BOLD] DisSent WT [ITALIC] B",
                    "78.1",
                    "58.1",
                    "91.9",
                    "87.7/",
                    "91.2",
                    "89.2/",
                    "85.9",
                    "84.2/",
                    "84.1",
                    "82.5",
                    "85.5",
                    "67.5",
                    "43.7*"
                ],
                [
                    "[BOLD] MT En-De [ITALIC] B",
                    "73.9",
                    "47.0",
                    "90.5",
                    "75.0/",
                    "83.4",
                    "89.6/",
                    "86.1",
                    "84.1/",
                    "83.9",
                    "81.8",
                    "83.8",
                    "54.9",
                    "[BOLD] 56.3"
                ],
                [
                    "[BOLD] MT En-Ru [ITALIC] B",
                    "74.3",
                    "52.4",
                    "89.9",
                    "71.8/",
                    "81.3",
                    "89.4/",
                    "85.6",
                    "82.8/",
                    "82.8",
                    "81.5",
                    "83.1",
                    "58.5",
                    "43.7*"
                ],
                [
                    "[BOLD] Reddit [ITALIC] B",
                    "75.6",
                    "49.5",
                    "91.7",
                    "84.6/",
                    "89.2",
                    "89.4/",
                    "85.8",
                    "83.8/",
                    "83.6",
                    "81.8",
                    "84.4",
                    "58.1",
                    "[BOLD] 56.3"
                ],
                [
                    "[BOLD] SkipThought [ITALIC] B",
                    "75.2",
                    "53.9",
                    "90.8",
                    "78.7/",
                    "85.2",
                    "89.7/",
                    "86.3",
                    "81.2/",
                    "81.5",
                    "82.2",
                    "84.6",
                    "57.4",
                    "43.7*"
                ],
                [
                    "[BOLD] MTL GLUE [ITALIC] B",
                    "[BOLD] 79.6",
                    "56.8",
                    "91.3",
                    "88.0/",
                    "91.4",
                    "90.3/",
                    "86.9",
                    "[BOLD] 89.2/",
                    "[BOLD] 89.0",
                    "83.0",
                    "86.8",
                    "74.7",
                    "43.7*"
                ],
                [
                    "[BOLD] MTL Non-GLUE [ITALIC] B",
                    "76.7",
                    "54.8",
                    "91.1",
                    "83.6/",
                    "88.7",
                    "89.2/",
                    "85.6",
                    "83.2/",
                    "83.2",
                    "82.4",
                    "84.4",
                    "64.3",
                    "43.7*"
                ],
                [
                    "[BOLD] MTL All [ITALIC] B",
                    "79.3",
                    "53.1",
                    "91.7",
                    "88.0/",
                    "91.3",
                    "90.4/",
                    "87.0",
                    "88.1/",
                    "87.9",
                    "83.5",
                    "87.6",
                    "75.1",
                    "45.1*"
                ],
                [
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results",
                    "[ITALIC] Test Set Results"
                ],
                [
                    "[BOLD] Non-GLUE [ITALIC] E",
                    "69.7",
                    "34.5",
                    "89.5",
                    "78.2/",
                    "84.8",
                    "83.6/",
                    "64.3",
                    "77.5/",
                    "76.0",
                    "75.4",
                    "74.8",
                    "55.6",
                    "65.1"
                ],
                [
                    "[BOLD] MNLI [ITALIC] B",
                    "77.1",
                    "49.6",
                    "93.2",
                    "88.5/",
                    "84.7",
                    "70.6/",
                    "88.3",
                    "86.0/",
                    "85.5",
                    "82.7",
                    "78.7",
                    "72.6",
                    "65.1"
                ],
                [
                    "[BOLD] GLUE [ITALIC] B",
                    "77.3",
                    "49.0",
                    "93.5",
                    "89.0/",
                    "85.3",
                    "70.6/",
                    "88.6",
                    "85.8/",
                    "84.9",
                    "82.9",
                    "81.0",
                    "71.7",
                    "34.9"
                ],
                [
                    "[BOLD] BERT Base",
                    "78.4",
                    "52.1",
                    "93.5",
                    "88.9/",
                    "84.8",
                    "71.2/",
                    "89.2",
                    "87.1/",
                    "85.8",
                    "84.0",
                    "91.1",
                    "66.4",
                    "65.1"
                ]
            ]
        },
        "gold_description": "tables 2 and 3 respectively show results for our pretraining and intermediate training experiments . looking to table 3 , using elmo uniformly improves over training the encoder from scratch . the elmo - augmented random baseline is strong , lagging behind the single - task baseline by less than a point . most intermediate tasks beat the random baseline , but several fail to significantly outperform the single - task baseline . mnli and english – german translation perform best with elmo , with skipthought and dissent also beating the single - task baseline . intermediate multitask training on all the non - glue tasks produces our best - performing elmo model . using bert consistently outperforms elmo and pretraining from scratch . we find that intermediate training on each of mnli , qqp , and sts leads to improvements over no intermediate training , while intermediate training on the other tasks harms transfer performance . the improve ments gained via sts , a small - data task , versus the negative impact of fairly large - data tasks ( e . g . qnli ) , suggests that the benefit of intermediate training is not solely due to additional training , but that the signal provided by the intermediate task complements the original language modeling objective . intermediate training on generation tasks such as mt and skipthought significantly impairs bert ' s transfer ability . we speculate that this degradation may be due to catastrophic forgetting in fine - tuning for a task substantially different from the tasks bert was originally trained on . this phenomenon might be mitigated in our elmo models via the frozen encoder and skip connection . on the test set , we lag slightly behind the bert base results from devlin et al . ( 2019 ) , likely due in part to our limited hyperparameter tuning .",
        "generated_description": "we find that the single - taske baseline outperforms the randome baseline on all of the tasks except for rte and wnli , where randome is the best . we also find that elmo with elmo pretrained on the entire training set outperforms all other models on most of the datasets , except for sst and qqp . we hypothesize that this is due to the small size of the training set , which makes it difficult for elmo to overfit to the training data . in contrast , elmo fine - tuned on the single - task training set does not suffer from this issue ."
    },
    {
        "table_id": "195",
        "table_info": {
            "table_caption": "Table 4: Pearson correlations between performances on a subset of all pairs of target tasks, measured over all runs reported in Table 2. The Avg column shows the correlation between performance on a target task and the overall GLUE score. For QQP and STS, the correlations are computed respectively using F1 and Pearson correlation. Negative correlations are underlined.",
            "table_column_names": [
                "[BOLD] Task",
                "[BOLD] Avg",
                "[BOLD] CoLA",
                "[BOLD] SST",
                "[BOLD] STS",
                "[BOLD] QQP",
                "[BOLD] MNLI",
                "[BOLD] QNLI"
            ],
            "table_content_values": [
                [
                    "[BOLD] CoLA",
                    "0.86",
                    "1.00",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "[BOLD] SST",
                    "0.60",
                    "0.25",
                    "1.00",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "[BOLD] MRPC",
                    "0.39",
                    "0.21",
                    "0.34",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "[BOLD] STS",
                    "-0.36",
                    "-0.60",
                    "0.01",
                    "1.00",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "[BOLD] QQP",
                    "0.61",
                    "0.61",
                    "0.27",
                    "-0.58",
                    "1.00",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "[BOLD] MNLI",
                    "0.54",
                    "0.16",
                    "0.66",
                    "0.40",
                    "0.08",
                    "1.00",
                    "[EMPTY]"
                ],
                [
                    "[BOLD] QNLI",
                    "0.43",
                    "0.13",
                    "0.26",
                    "0.04",
                    "0.27",
                    "0.56",
                    "1.00"
                ],
                [
                    "[BOLD] RTE",
                    "0.34",
                    "0.08",
                    "0.16",
                    "-0.10",
                    "0.04",
                    "0.14",
                    "0.32"
                ],
                [
                    "[BOLD] WNLI",
                    "-0.21",
                    "-0.21",
                    "-0.37",
                    "0.31",
                    "-0.37",
                    "-0.07",
                    "-0.26"
                ]
            ]
        },
        "gold_description": "table 4 presents an alternative view of the results of the pretraining experiment ( table 2 ) : the table shows correlations between pairs of target tasks over the space of pretrained encoders . the correlations reflect the degree to which the performance on one target task with some encoder predicts performance on another target task with the same encoder . see appendix d for the full table and similar tables for intermediate elmo and bert experiments . many correlations are low , suggesting that different tasks benefit from different forms of pretraining to a substantial degree , and bolstering the observation that no single pretraining task yields good performance on all target tasks . for reasons noted earlier , the models that tended to perform best overall also tended to overfit the wnli training set most , leading to a negative correlation between wnli and overall glue score . sts also shows a negative correlation , likely due to the observation that it does not benefit from lm pretraining . in contrast , cola shows a strong correlation with the overall glue scores , but has weak or negative correlations with many tasks : the use of lm pretraining dramatically improves cola performance , but most other forms of pretraining have little effect .",
        "generated_description": "for each task , we report the mean and standard deviation of the difference between the average score across all tasks and the mean score across the tasks . we observe that for all tasks except qqp , there is a positive correlation between the score on the cola task and the score for each of the other tasks . the only exception is the mrpc task , where there is only a negative correlation between score on cola and score on sts ."
    },
    {
        "table_id": "196",
        "table_info": {
            "table_caption": "Table 1: NE-tags of numbers in Wikipedia.",
            "table_column_names": [
                "NE Tag",
                "Frequency"
            ],
            "table_content_values": [
                [
                    "date, time, duration, set (temporal)",
                    "54.28%"
                ],
                [
                    "number",
                    "40.13%"
                ],
                [
                    "[ITALIC]  Relation cardinality",
                    "[ITALIC] 18.86%"
                ],
                [
                    "percent",
                    "2.92%"
                ],
                [
                    "money",
                    "2.25%"
                ],
                [
                    "person, location, organization",
                    "0.26%"
                ],
                [
                    "ordinal",
                    "0.16%"
                ]
            ]
        },
        "gold_description": "the distribution of their named - entity ( ne ) tags , according to stanford ne - tagger , is shown in table 1 . while temporal - related numbers are the most frequent , around 40 % are classified only as unspecific number . by manually checking 100 random numbers , we observed that 47 are relation cardinalities , 1 i . e . , approximately 18 . 86 % of all numbers in wikipedia are relation cardinalities .",
        "generated_description": "ne - tags refer to a set of entities , i . e . , dates , time , duration , set , set ( temporal ) , number , or cardinality . the ne - tag of a document is defined as follows : number refers to the number of entities in the document ( e . g . , “ number ” , “ location ” ) . percent of nes refers to percent of documents that have a cardinality of at least one entity . the most frequent ne is “ percentage ” ( 2 . 92 % ) , followed by “ money ” with 2 . 25 % . the least frequent nes are “ person ” and “ organization ” at 0 . 26 % ."
    },
    {
        "table_id": "197",
        "table_info": {
            "table_caption": "Table 2: Number of Wikidata entities as subjects (#s) of each predicate (p), and evaluation results on manually annotated randomly selected subjects that have at least an object.",
            "table_column_names": [
                "[ITALIC] p",
                "# [ITALIC] s",
                "[ITALIC] baseline P",
                "[ITALIC] vanilla P",
                "[ITALIC] vanilla R",
                "[ITALIC] vanilla F1",
                "[ITALIC] only-nummod P",
                "[ITALIC] only-nummod R",
                "[ITALIC] only-nummod F1"
            ],
            "table_content_values": [
                [
                    "has part (creative work series)",
                    "261",
                    ".050",
                    ".333",
                    ".316",
                    ".324",
                    ".353",
                    ".316",
                    ".333"
                ],
                [
                    "contains admin. terr. entity",
                    "18,000",
                    ".034",
                    ".390",
                    ".188",
                    ".254",
                    ".548",
                    ".200",
                    ".293"
                ],
                [
                    "spouse",
                    "45,917",
                    "0",
                    ".014",
                    ".011",
                    ".013",
                    ".028",
                    ".017",
                    ".021"
                ],
                [
                    "child",
                    "35,057",
                    ".112",
                    ".151",
                    ".129",
                    ".139",
                    ".320",
                    ".219",
                    ".260"
                ],
                [
                    "child (manual ground truth)",
                    "6,408",
                    "[EMPTY]",
                    "0.374",
                    "0.309",
                    "0.338",
                    "0.452",
                    "0.315",
                    "0.371"
                ]
            ]
        },
        "gold_description": "table 2 shows the performance of our crf - based method in finding the correct relation cardinality , evaluated on manually annotated 20 ( has part ) , 100 ( admin . terr . entity ) and 200 ( child and spouse ) randomly selected subjects that have at least one object . the random - number baseline achieves a precision of 5 % ( has part ) , 3 . 5 % ( admin . territ . entity ) , 0 % ( spouse ) and 11 . 2 % ( child ) . compared to that , especially using only - nummod , our method gives encouraging results for has part , admin . territ . entity and child , with 30 - 50 % precision and around 30 % f1 - score . as shown by the last row of table 2 , higher quality of training data can considerably boost the performance of cardinality extraction .",
        "generated_description": "the only - nummod model significantly outperforms the baseline in terms of both precision and f1 - measure for all predicate types , with the exception of the entity has part predicate , where the vanilla model performs slightly better . this is likely due to the fact that the number of wikidata entities as subjects is much smaller than in the other two datasets . for example , only 2 % of the entities in the wikipedia dataset are covered by the child predicate , but this entity does not appear in the training data ."
    },
    {
        "table_id": "198",
        "table_info": {
            "table_caption": "Table 1: LAS on the test sets, the best LAS in each group is marked in bold face.",
            "table_column_names": [
                "Model",
                "Model",
                "Ara",
                "Baq",
                "Fre",
                "Ger",
                "Heb",
                "Hun",
                "Kor",
                "Pol",
                "Swe",
                "Avg"
            ],
            "table_content_values": [
                [
                    "Int",
                    "WORD",
                    "84.50",
                    "77.87",
                    "82.20",
                    "85.35",
                    "[BOLD] 74.68",
                    "76.17",
                    "84.62",
                    "80.71",
                    "79.14",
                    "80.58"
                ],
                [
                    "Int",
                    "W2V",
                    "[BOLD] 85.11",
                    "79.07",
                    "[BOLD] 82.73",
                    "[BOLD] 86.60",
                    "74.55",
                    "78.21",
                    "85.30",
                    "82.37",
                    "79.67",
                    "81.51"
                ],
                [
                    "Int",
                    "LSTM",
                    "83.42",
                    "82.97",
                    "81.35",
                    "85.34",
                    "74.03",
                    "83.06",
                    "86.56",
                    "80.13",
                    "77.44",
                    "81.48"
                ],
                [
                    "Int",
                    "CNN",
                    "84.65",
                    "[BOLD] 83.91",
                    "82.41",
                    "85.61",
                    "74.23",
                    "[BOLD] 83.68",
                    "[BOLD] 86.99",
                    "[BOLD] 83.28",
                    "[BOLD] 80.00",
                    "[BOLD] 82.75"
                ],
                [
                    "Int",
                    "LSTM+WORD",
                    "[BOLD] 84.75",
                    "83.43",
                    "[BOLD] 82.25",
                    "85.56",
                    "74.62",
                    "83.43",
                    "86.85",
                    "82.30",
                    "79.85",
                    "82.56"
                ],
                [
                    "Int",
                    "CNN+WORD",
                    "84.58",
                    "[BOLD] 84.22",
                    "81.79",
                    "[BOLD] 85.85",
                    "[BOLD] 74.79",
                    "[BOLD] 83.51",
                    "[BOLD] 87.21",
                    "[BOLD] 83.66",
                    "[BOLD] 80.52",
                    "[BOLD] 82.90"
                ],
                [
                    "Int",
                    "LSTM+W2V",
                    "85.35",
                    "83.94",
                    "83.04",
                    "86.38",
                    "[BOLD] 75.15",
                    "83.30",
                    "87.35",
                    "83.00",
                    "79.38",
                    "82.99"
                ],
                [
                    "Int",
                    "CNN+W2V",
                    "[BOLD] 85.67",
                    "[BOLD] 84.37",
                    "[BOLD] 83.09",
                    "[BOLD] 86.81",
                    "74.95",
                    "[BOLD] 84.08",
                    "[BOLD] 87.72",
                    "[BOLD] 84.44",
                    "[BOLD] 80.35",
                    "[BOLD] 83.50"
                ],
                [
                    "Ext",
                    "B15-WORD",
                    "[BOLD] 83.46",
                    "73.56",
                    "[BOLD] 82.03",
                    "[BOLD] 84.62",
                    "[BOLD] 72.70",
                    "69.31",
                    "83.37",
                    "[BOLD] 79.83",
                    "[BOLD] 76.40",
                    "78.36"
                ],
                [
                    "Ext",
                    "B15-LSTM",
                    "83.40",
                    "[BOLD] 78.61",
                    "81.08",
                    "84.49",
                    "72.26",
                    "[BOLD] 76.34",
                    "[BOLD] 86.21",
                    "78.24",
                    "74.47",
                    "[BOLD] 79.46"
                ],
                [
                    "Ext",
                    "BestPub",
                    "86.21",
                    "85.70",
                    "85.66",
                    "89.65",
                    "81.65",
                    "86.13",
                    "87.27",
                    "87.07",
                    "82.75",
                    "85.79"
                ]
            ]
        },
        "gold_description": "the experimental results are shown in table 1 , with int denoting internal comparisons ( with three groups ) and ext denoting external comparisons , the highest las in each group is marked in bold face . in the first group , we compare the las of the four single models word , w2v , lstm , and cnn . in macro average of all languages , the cnn model performs 2 . 17 % higher than the word model , and 1 . 24 % higher than the w2v model . the lstm model , however , performs only 0 . 9 % higher than the word model and 1 . 27 % lower than the cnn model . in the second group , we observe that the additional word - lookup model does not significantly improve the cnn moodel ( from 82 . 75 % in cnn to 82 . 90 % in cnn + word on average ) while the lstm model is improved by a much larger margin ( from 81 . 48 % in lstm to 82 . 56 % in lstm + word on average ) . this suggests that the cnn model has already learned the most important information from the the word forms , while the lstm model has not . also , the combined cnn + word model is still better than the lstm + word model , despite the large improvement in the latter . while comparing to the best published results ( björkelund et al . , 2013 , 2014 ) , we have to note that their approach uses explicit morphological features , ensemble , ranking , etc . , which all can boost parsing performance . we only use a greedy parser with much fewer features , but bridge the 6 points gap between the previous best greedy parser and the best published result by more than one half . on average , the b15 - lstm model improves their own baseline by 1 . 1 % , similar to the",
        "generated_description": "in this section , we show the experimental results of our proposed models for inter - int and intra - int pairs . for int , we compare our models with the baselines on ara , baq , fre , ger , heb , kor , pol , and swe datasets . we also compare our model with several state - of - the - art baselines for intra - int and inter - int pairs , including word2vec , lstm , cnn , and rnn - based models . we can see that our model achieves the best average accuracy on all the seven languages , outperforming the second best by a small margin ."
    },
    {
        "table_id": "199",
        "table_info": {
            "table_caption": "Table 2: LAS improvements by CNN and LSTM in the IV and OOV cases on the development sets.",
            "table_column_names": [
                "Model",
                "Case",
                "Ara",
                "Baq",
                "Fre",
                "Ger",
                "Heb",
                "Hun",
                "Kor",
                "Pol",
                "Swe",
                "Avg"
            ],
            "table_content_values": [
                [
                    "CNN",
                    "ΔIV",
                    "0.12",
                    "2.72",
                    "-0.44",
                    "0.13",
                    "-0.35",
                    "1.48",
                    "1.30",
                    "0.98",
                    "1.39",
                    "0.81"
                ],
                [
                    "CNN",
                    "ΔOOV",
                    "0.03",
                    "5.78",
                    "0.33",
                    "0.10",
                    "-1.04",
                    "5.04",
                    "2.17",
                    "2.34",
                    "0.95",
                    "1.74"
                ],
                [
                    "LSTM",
                    "ΔIV",
                    "-0.58",
                    "1.98",
                    "-0.55",
                    "-0.08",
                    "-1.23",
                    "1.62",
                    "1.12",
                    "-0.49",
                    "0.21",
                    "0.22"
                ],
                [
                    "LSTM",
                    "ΔOOV",
                    "-0.32",
                    "5.09",
                    "0.12",
                    "-0.21",
                    "-1.99",
                    "4.74",
                    "1.51",
                    "0.10",
                    "0.38",
                    "1.05"
                ]
            ]
        },
        "gold_description": "table 2 shows the results , where the two cases are denoted as δiv and δoov . the general trend in the results is that the improvements of both models in the oov case are larger than in the iv case , which means that the character composition models indeed alleviates the oov problem . also , cnn improves on seven languages in the iv case and eight languages in the oov case , and it performs consistently better than lstm in both cases .",
        "generated_description": "the las improvements in the iv and oov cases are in the range of 0 . 10 to 1 . 5 , and the average δiv improvement is 0 . 8 to 0 . 9 . the average δoov improvement is 1 . 74 to 2 . 74 , which is much smaller than the average improvement of the iv case . the reason is that the las improvement in the oov case is smaller than that in iv case , because the number of oov words in oov sentences is much fewer than that of iv words , which makes it easier for the model to detect them ."
    },
    {
        "table_id": "200",
        "table_info": {
            "table_caption": "Table 3: Accuracy scores × 1000 for different train and test dataset combinations",
            "table_column_names": [
                "train dataset",
                "test dataset Belarusian",
                "test dataset Russian",
                "test dataset Ukrai-nian"
            ],
            "table_content_values": [
                [
                    "Belarusian",
                    "647",
                    "326",
                    "373"
                ],
                [
                    "Russian",
                    "495",
                    "738",
                    "516"
                ],
                [
                    "Ukrainian",
                    "556",
                    "553",
                    "683"
                ],
                [
                    "Ukrainian, Belarusian",
                    "769",
                    "597",
                    "701"
                ],
                [
                    "Russian, Belarusian",
                    "740",
                    "740",
                    "563"
                ],
                [
                    "Russian, Ukrainian",
                    "627",
                    "756",
                    "[BOLD] 700"
                ],
                [
                    "Russian, Ukrainian, Belarusian",
                    "[BOLD] 772",
                    "[BOLD] 760",
                    "698"
                ]
            ]
        },
        "gold_description": "averaged . the table 3 presents the results of these experiments . the table 3 shows , that : 1 . in monolingual setting , we can get highquality results . the scores are significantly lower than the scores of the same model on the standard dataset , due to the smaller sizes of the training datasets . nevertheless , one can see , that our approach to word stress detection applies not only to the russian language data , but also to the data in the belarusian and ukrainian languages ; 2 . cross - lingual setting ( 1 ) : the belarusian training dataset , being the smallest one among the three datasets , is not a good source for training word stress detection models in other languages , while the ukrainian dataset stands out as a good source for training word stress detection systems both for the russian and belarusian languages ; 3 . cross - lingual setting ( 2 ) : adding one or two datasets to the other languages improves the quality . for example , around 10 % of accuracy is gained by adding the russian training dataset to the belarusian training dataset , while testing on belarusian .",
        "generated_description": "as expected , the best results are obtained when the training and test sets are all from the same language family . however , when the same languages are used for training and testing , the results are not as good as when they are combined . this is probably due to the fact that the amount of training data in these two countries is smaller than that in the other two countries . in this case , it would be more beneficial to use the same training data for both languages ."
    },
    {
        "table_id": "201",
        "table_info": {
            "table_caption": "Table 1: BLEU and exact-match scores over held-out test set",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] BLEU  [BOLD] (All)",
                "[BOLD] BLEU  [BOLD] (WSJ)",
                "[BOLD] BLEU  [BOLD] (All overlap)",
                "[BOLD] Exact  [BOLD] Match%",
                "[BOLD] Coverage%"
            ],
            "table_content_values": [
                [
                    "Neural MRS (gold)",
                    "66.11",
                    "73.12",
                    "69.27",
                    "24.09",
                    "100"
                ],
                [
                    "Neural MRS (silver)",
                    "75.43",
                    "81.76",
                    "77.13",
                    "25.82",
                    "100"
                ],
                [
                    "Neural MRS (gold + silver)",
                    "77.17",
                    "83.37",
                    "79.15",
                    "32.07",
                    "100"
                ],
                [
                    "ACE (ERG)",
                    "–",
                    "–",
                    "62.05",
                    "15.08",
                    "78"
                ],
                [
                    "DAG transducer Ye et al. ( 2018 )",
                    "–",
                    "68.07",
                    "–",
                    "–",
                    "100"
                ]
            ]
        },
        "gold_description": "we compare the performance of our neural generator when trained on either gold , silver , or gold and silver data ( table 1 ) . generation quality is primarily evaluated with bleu semi - supervised training leads to an 11 bleu point improvement compar train in addition to bleu , we also report exact match accuracy on the overlapping subset . results show that our neural models outperform the grammar - based generator by a large margin .",
        "generated_description": "we report bleu and exact - match scores over the held - out test set of the wall street journal ( wsj ) and the conll - 2002 test set . the neural mrs model outperforms the ace model by a large margin , improving over the erg baseline by more than 20 points in all cases . the dag transducer ye et al . however , we note that the dag model is trained on the full training set , whereas our neural mrs is trained only on the subset of the wsj test set that contains the gold and silver amrs ."
    },
    {
        "table_id": "202",
        "table_info": {
            "table_caption": "Table 3: Hyper-parameter values.",
            "table_column_names": [
                "[BOLD] Parameter char emb size",
                "[BOLD] Value 50",
                "[BOLD] Parameter bigram emb size",
                "[BOLD] Value 50"
            ],
            "table_content_values": [
                [
                    "lattice emb size",
                    "50",
                    "LSTM hidden",
                    "200"
                ],
                [
                    "char dropout",
                    "0.5",
                    "lattice dropout",
                    "0.5"
                ],
                [
                    "LSTM layer",
                    "1",
                    "regularization  [ITALIC] λ",
                    "1e-8"
                ],
                [
                    "learning rate  [ITALIC] lr",
                    "0.015",
                    "[ITALIC] lr decay",
                    "0.05"
                ]
            ]
        },
        "gold_description": "table 3 shows the values of hyper - parameters for our models , in particular , the embedding sizes are set to 50 and the hidden size of lstm models to 200 . dropout ( srivastava et al . , 2014 ) is applied to both word and character embeddings with a rate of 0 . 5 . stochastic gradient descent ( sgd ) is used for optimization , with an initial learning rate of 0 . 015 and a decay rate of 0 . 05 .",
        "generated_description": "we use the same hyper - parameters for all the experiments . the char emb size and bigram emb size are set to 50 and 50 , respectively . the lattice emb size is fixed to 50 , and the lstm hidden size is set to 200 . the dropout rate lr is 0 . 015 and the learning rate is decayed by a factor of 0 . 05 every 5 epochs ."
    },
    {
        "table_id": "203",
        "table_info": {
            "table_caption": "Table 4: Development results.",
            "table_column_names": [
                "[BOLD] Input",
                "[BOLD] Models",
                "[BOLD] P",
                "[BOLD] R",
                "[BOLD] F1"
            ],
            "table_content_values": [
                [
                    "Auto seg",
                    "Word baseline",
                    "73.20",
                    "57.05",
                    "64.12"
                ],
                [
                    "Auto seg",
                    "+char LSTM",
                    "71.98",
                    "65.41",
                    "68.54"
                ],
                [
                    "Auto seg",
                    "+char LSTM′",
                    "71.08",
                    "65.83",
                    "68.35"
                ],
                [
                    "Auto seg",
                    "+char+bichar LSTM",
                    "72.63",
                    "67.60",
                    "70.03"
                ],
                [
                    "Auto seg",
                    "+char CNN",
                    "73.06",
                    "66.29",
                    "69.51"
                ],
                [
                    "Auto seg",
                    "+char+bichar CNN",
                    "72.01",
                    "65.50",
                    "68.60"
                ],
                [
                    "No seg",
                    "Char baseline",
                    "67.12",
                    "58.42",
                    "62.47"
                ],
                [
                    "No seg",
                    "+softword",
                    "69.30",
                    "62.47",
                    "65.71"
                ],
                [
                    "No seg",
                    "+bichar",
                    "71.67",
                    "64.02",
                    "67.63"
                ],
                [
                    "No seg",
                    "+bichar+softword",
                    "72.64",
                    "66.89",
                    "69.64"
                ],
                [
                    "No seg",
                    "Lattice",
                    "[BOLD] 74.64",
                    "[BOLD] 68.83",
                    "[BOLD] 71.62"
                ]
            ]
        },
        "gold_description": "as shown in table 4 , without using word segmentation , a characterbased lstm - crf model gives a development f1score of 62 . 47 % . adding character - bigram and softword representations as described in section 3 . 1 increases the f1 - score to 67 . 63 % and 65 . 71 % , respectively , demonstrating the usefulness of both sources of information . in addition , a combination of both gives a 69 . 64 % f1 - score , which is the best among various character representations . table 4 shows a variety of different settings for word - based chinese ner . with automatic segmentation , a word - based lstm crf baseline gives a 64 . 12 % f1 - score , which is higher compared to the character - based baseline . this demonstrates that both word information and character information are useful for chinese ner . the two methods of word + char lstm and word + char lstm ( cid : 48 ) , lead to similar improvements . a cnn representation of character sequences gives a slightly higher f1 - score compared to lstm character representations . on the other hand , further using character bigram information leads to increased f1 - score over word + char lstm , but decreased f1 - score over word + char cnn . as shown in table 4 , the lattice lstm - crf model gives a development f1 - score of 71 . 62 % , which is significantly7 higher compared with both the word - based and character - based methods , despite that it does not use character bigrams or word segmentation information .",
        "generated_description": "we can see that the char - based baseline and the character - based lstm model with character - level input achieve the best performance . the bichar character embeddings improve the performance of the word baseline by about 1 . 5 % in terms of f1 - score . the character cnn model achieves slightly better results than the character baseline . however , the best results are achieved when the character cnn is combined with the bichar embedding . the best overall results are obtained when we combine the character based embedding with the bichar character and the word - level embedding , i . e . , + bichar + softword ."
    },
    {
        "table_id": "204",
        "table_info": {
            "table_caption": "Table 5: Main results on OntoNotes.",
            "table_column_names": [
                "[BOLD] Input",
                "[BOLD] Models",
                "[BOLD] P",
                "[BOLD] R",
                "[BOLD] F1"
            ],
            "table_content_values": [
                [
                    "Gold seg",
                    "Yang et al. ( 2016 )",
                    "65.59",
                    "71.84",
                    "68.57"
                ],
                [
                    "Gold seg",
                    "Yang et al. ( 2016 )*†",
                    "72.98",
                    "[BOLD] 80.15",
                    "[BOLD] 76.40"
                ],
                [
                    "Gold seg",
                    "Che et al. ( 2013 )*",
                    "77.71",
                    "72.51",
                    "75.02"
                ],
                [
                    "Gold seg",
                    "Wang et al. ( 2013 )*",
                    "76.43",
                    "72.32",
                    "74.32"
                ],
                [
                    "Gold seg",
                    "Word baseline",
                    "76.66",
                    "63.60",
                    "69.52"
                ],
                [
                    "Gold seg",
                    "+char+bichar LSTM",
                    "[BOLD] 78.62",
                    "73.13",
                    "75.77"
                ],
                [
                    "Auto seg",
                    "Word baseline",
                    "72.84",
                    "59.72",
                    "65.63"
                ],
                [
                    "Auto seg",
                    "+char+bichar LSTM",
                    "73.36",
                    "70.12",
                    "71.70"
                ],
                [
                    "No seg",
                    "Char baseline",
                    "68.79",
                    "60.35",
                    "64.30"
                ],
                [
                    "No seg",
                    "+bichar+softword",
                    "74.36",
                    "69.43",
                    "71.81"
                ],
                [
                    "No seg",
                    "Lattice",
                    "[BOLD] 76.35",
                    "[BOLD] 71.56",
                    "[BOLD] 73.88"
                ]
            ]
        },
        "gold_description": "the ontonotes test results are shown in table 5 . with gold - standard segmentation , our word - based methods give competitive results to the state - of - the - art on the dataset ( che et al . , 2013 ; wang et al . , 2013 ) , in addition , the results show that our word - based models can serve as highly competitive baselines . with automatic segmentation , the f1 - score of word + char + bichar lstm decreases from 75 . 77 % to 71 . 70 % , showing the influence of segmentation to ner . consistent with observations on the development set , adding lattice word information leads to an 88 . 81 % → 93 . 18 % increasement of f1 - score over the character baseline , as compared with 88 . 81 % → 91 . 87 % by adding bichar + softword . the lattice model gives significantly the best f1 - score on automatic segmentation .",
        "generated_description": "we compare our model with the state - of - the - art results on the conll - 2005 dataset . our model outperforms the previous state of the art by 1 . 5 % in terms of f1 score . we also compare our results with the results reported in yang et al . when using gold segmentation labels , our model achieves 78 . 62 % in precision , 73 . 13 % in recall and 75 . 77 % in f1 . the previous best result is 72 . 98 % of \\ newciteyangetal : 2015 : conll which uses character n - gram embeddings . we can see that our character - based lstm and bichar - lstm models outperform the word - based baseline model by about 1 . 4 % and 1 . 6 % respectively . when we use the auto - segmented segments , the performance of our model is slightly worse than that of the model using gold segments . we attribute this to the fact that the amount of training data is small and it is hard for our model to learn a good representation of word boundaries ."
    },
    {
        "table_id": "205",
        "table_info": {
            "table_caption": "Table 6: Main results on MSRA.",
            "table_column_names": [
                "[BOLD] Models",
                "[BOLD] P",
                "[BOLD] R",
                "[BOLD] F1"
            ],
            "table_content_values": [
                [
                    "Chen et al. ( 2006a )",
                    "91.22",
                    "81.71",
                    "86.20"
                ],
                [
                    "Zhang et al. ( 2006 )*",
                    "92.20",
                    "90.18",
                    "91.18"
                ],
                [
                    "Zhou et al. ( 2013 )",
                    "91.86",
                    "88.75",
                    "90.28"
                ],
                [
                    "Lu et al. ( 2016 )",
                    "–",
                    "–",
                    "87.94"
                ],
                [
                    "Dong et al. ( 2016 )",
                    "91.28",
                    "90.62",
                    "90.95"
                ],
                [
                    "Word baseline",
                    "90.57",
                    "83.06",
                    "86.65"
                ],
                [
                    "+char+bichar LSTM",
                    "91.05",
                    "89.53",
                    "90.28"
                ],
                [
                    "Char baseline",
                    "90.74",
                    "86.96",
                    "88.81"
                ],
                [
                    "+bichar+softword",
                    "92.97",
                    "90.80",
                    "91.87"
                ],
                [
                    "Lattice",
                    "[BOLD] 93.57",
                    "[BOLD] 92.79",
                    "[BOLD] 93.18"
                ]
            ]
        },
        "gold_description": "results on the msra dataset are shown in table 6 . our chosen segmentor gives 95 . 93 % accuracy on 5 - fold cross - validated training set . compared with the existing methods , our wordbased and character - based lstm - crf models give competitive accuracies . the lattice model significantly outperforms both the best characterbased and word - based models ( p < 0 . 01 ) , achieving the best result on this standard benchmark .",
        "generated_description": "the word baseline is our basic character - level ner model . the char baseline is the same as the word baseline except that the character n - grams are replaced by a special unk token . the word + bichar + softword model is our extended character baseline model with bichar lstm embeddings . the lattice model outperforms the character baseline and word baseline by about 1 . 5 % in terms of f1 score . the lattice model also outperforms all the previous state - of - the - art systems ."
    },
    {
        "table_id": "206",
        "table_info": {
            "table_caption": "Table 8: Main results on resume NER.",
            "table_column_names": [
                "[BOLD] Models",
                "[BOLD] P",
                "[BOLD] R",
                "[BOLD] F1"
            ],
            "table_content_values": [
                [
                    "Word baseline",
                    "93.72",
                    "93.44",
                    "93.58"
                ],
                [
                    "+char+bichar LSTM",
                    "94.07",
                    "94.42",
                    "94.24"
                ],
                [
                    "Char baseline",
                    "93.66",
                    "93.31",
                    "93.48"
                ],
                [
                    "+bichar+softword",
                    "94.53",
                    "[BOLD] 94.29",
                    "94.41"
                ],
                [
                    "Lattice",
                    "[BOLD] 94.81",
                    "94.11",
                    "[BOLD] 94.46"
                ]
            ]
        },
        "gold_description": "results on the resume ner test data are shown in table 8 . the lattice model significantly outperforms both the word - based mode and the character - based model for weibo and resume ( p < 0 . 01 ) , giving state - of - the - art results .",
        "generated_description": "we can see that the lattice model achieves the best f1 score of 94 . 46 , outperforming the word baseline and the character baseline by 0 . 8 % and 0 . 7 % , respectively . we also observe that the addition of bichar embeddings further improves the performance of the baseline model ."
    },
    {
        "table_id": "207",
        "table_info": {
            "table_caption": "Table 3: Development set results for English–Estonian. character-F and BLEU scores in percentages. +/− stands for adding/removing a component. Multiple modifications are indicated by increasing the indentation.",
            "table_column_names": [
                "[EMPTY]",
                "chrF-1.0",
                "BLEU%"
            ],
            "table_content_values": [
                [
                    "en-et",
                    "dev",
                    "dev"
                ],
                [
                    "BPE",
                    "56.52",
                    "17.93"
                ],
                [
                    "monolingual",
                    "53.44",
                    "15.82"
                ],
                [
                    "Cognate Morfessor",
                    "57.05",
                    "18.40"
                ],
                [
                    "+finetuned",
                    "57.23",
                    "18.45"
                ],
                [
                    "+ensemble-of-5",
                    "[BOLD] 57.75",
                    "[BOLD] 19.09"
                ],
                [
                    "+ensemble-of-3",
                    "57.64",
                    "18.96"
                ],
                [
                    "+linked embeddings",
                    "56.20",
                    "17.48"
                ],
                [
                    "−LM filtering",
                    "52.94",
                    "14.65"
                ],
                [
                    "6+6 layers",
                    "57.35",
                    "18.84"
                ]
            ]
        },
        "gold_description": "table 3 shows the development set results for estonian . cognate morfessor outperforms the comparable bpe system according to both measures for estonian . the cross - lingual segmentation is particularly beneficial for estonian . for estonian , we have two ensemble configurations one combining 3 monolingually finetuned independent runs , and one combining 5 monolingually finetuned savepoints from 4 independent runs .",
        "generated_description": "for english – estonian , we use the same settings as for german – english . the bpe baseline is a bpe model trained on the training data of the conll - 2002 shared task . cognate morfessor is a morpheme - based interpolation of the english and estonian bpe models , which is finetuned on the development set . we find that the bpe monolingual baseline is slightly better than the cognate morfessor model , but the overall bleu score is significantly worse . the best results are obtained by increasing the indentation from 1 . 0 to 2 . 0 and by adding / removing a component at a time . we also find that ensembling 5 models , denoted as “ ensemble - of - 5 ” , improves the character - f score by 1 . 5 % over the baseline . the ensembled model is further improved by adding the linked embeddings from the last layer of the 6 - layer encoder ."
    },
    {
        "table_id": "208",
        "table_info": {
            "table_caption": "Table 1: Results on UNCorpus-1.",
            "table_column_names": [
                "[EMPTY]",
                "Sestorain et al. ( 2018 )† PBSMT",
                "Sestorain et al. ( 2018 )† NMT-0",
                "Sestorain et al. ( 2018 )† Dual-0",
                "Our baselines Basic",
                "Our baselines Pivot",
                "Agree"
            ],
            "table_content_values": [
                [
                    "\\En → \\Es",
                    "61.26",
                    "51.93",
                    "—",
                    "56.58",
                    "56.58",
                    "56.36"
                ],
                [
                    "\\En → \\Fr",
                    "50.09",
                    "40.56",
                    "—",
                    "44.27",
                    "44.27",
                    "44.80"
                ],
                [
                    "\\Es → \\En",
                    "59.89",
                    "51.58",
                    "—",
                    "55.70",
                    "55.70",
                    "55.24"
                ],
                [
                    "\\Fr → \\En",
                    "52.22",
                    "43.33",
                    "—",
                    "46.46",
                    "46.46",
                    "46.17"
                ],
                [
                    "Supervised (avg.)",
                    "55.87",
                    "46.85",
                    "—",
                    "50.75",
                    "50.75",
                    "50.64"
                ],
                [
                    "\\Es → \\Fr",
                    "52.44",
                    "20.29",
                    "36.68",
                    "34.75",
                    "[BOLD] 38.10",
                    "37.54"
                ],
                [
                    "\\Fr → \\Es",
                    "49.79",
                    "19.01",
                    "39.19",
                    "37.67",
                    "[BOLD] 40.84",
                    "40.02"
                ],
                [
                    "Zero-shot (avg.)",
                    "51.11",
                    "19.69",
                    "37.93",
                    "36.21",
                    "[BOLD] 39.47",
                    "38.78"
                ]
            ]
        },
        "gold_description": "tables 1 and 2 show results on the uncorpus datasets . our approach consistently outperforms basic and dual - 0 , despite the latter being trained with additional monolingual data ( sestorain et al . , 2018 ) .",
        "generated_description": "we observe that the basic and pivot baselines outperform the previous pbsmt and nmt - 0 models by a significant margin . the pivot model outperforms the basic model for all language pairs except for \\ fr / english / french , where it is on par with the supervised baseline . the agreement model improves over the basic model for most language pairs , except for the \\ es / \\ fr pair , in which it is outperformed by the nmt model of sestorain et al . this is likely due to the fact that the agreement model is trained on parallel data only , while the pbsmt model was trained on multilingual training data ."
    },
    {
        "table_id": "209",
        "table_info": {
            "table_caption": "Table 3: Results of semantic feature ablation, model trained with gold data only",
            "table_column_names": [
                "[BOLD] Ablation",
                "[BOLD] BLEU"
            ],
            "table_content_values": [
                [
                    "All attributes",
                    "72.06"
                ],
                [
                    "No node attributes",
                    "59.37"
                ],
                [
                    "No node attr except num, tense",
                    "67.34"
                ],
                [
                    "No edge features",
                    "71.27"
                ]
            ]
        },
        "gold_description": "edge properties are removed , which table 3 shows has an effect of less than 1 bleu point ) . we ablate node ( predicate ) and edge attributes number and tense have the largest effect on the reported bleu score . has only a small impact on performance .",
        "generated_description": "semantic feature ablation we perform an ablation study to understand the importance of the semantic features in our model . we observe that removing all of the node attributes leads to a significant drop in bleu score . the most important features are the nouns , adjectives and adverbs , which account for more than half of the drop in performance ."
    },
    {
        "table_id": "210",
        "table_info": {
            "table_caption": "Table 2: Results on UNCorpus-2.",
            "table_column_names": [
                "[EMPTY]",
                "Sestorain et al. ( 2018 ) PBSMT",
                "Sestorain et al. ( 2018 ) NMT-0",
                "Sestorain et al. ( 2018 ) Dual-0",
                "Our baselines Basic",
                "Our baselines Pivot",
                "Agree"
            ],
            "table_content_values": [
                [
                    "\\En → \\Es",
                    "61.26",
                    "47.51",
                    "44.30",
                    "55.15",
                    "55.15",
                    "54.30"
                ],
                [
                    "\\En → \\Fr",
                    "50.09",
                    "36.70",
                    "34.34",
                    "43.42",
                    "43.42",
                    "42.57"
                ],
                [
                    "\\En → \\Ru",
                    "43.25",
                    "30.45",
                    "29.47",
                    "36.26",
                    "36.26",
                    "35.89"
                ],
                [
                    "\\Es → \\En",
                    "59.89",
                    "48.56",
                    "45.55",
                    "54.35",
                    "54.35",
                    "54.33"
                ],
                [
                    "\\Fr → \\En",
                    "52.22",
                    "40.75",
                    "37.75",
                    "45.55",
                    "45.55",
                    "45.87"
                ],
                [
                    "\\Ru → \\En",
                    "52.59",
                    "39.35",
                    "37.96",
                    "45.52",
                    "45.52",
                    "44.67"
                ],
                [
                    "Supervised (avg.)",
                    "53.22",
                    "40.55",
                    "36.74",
                    "46.71",
                    "46.71",
                    "46.27"
                ],
                [
                    "\\Es → \\Fr",
                    "52.44",
                    "25.85",
                    "34.51",
                    "34.73",
                    "35.93",
                    "[BOLD] 36.02"
                ],
                [
                    "\\Fr → \\Es",
                    "49.79",
                    "22.68",
                    "37.71",
                    "38.20",
                    "39.51",
                    "[BOLD] 39.94"
                ],
                [
                    "\\Es → \\Ru",
                    "39.69",
                    "9.36",
                    "24.55",
                    "26.29",
                    "27.15",
                    "[BOLD] 28.08"
                ],
                [
                    "\\Ru → \\Es",
                    "49.61",
                    "26.26",
                    "33.23",
                    "33.43",
                    "[BOLD] 37.17",
                    "35.01"
                ],
                [
                    "\\Fr → \\Ru",
                    "36.48",
                    "9.35",
                    "22.76",
                    "23.88",
                    "24.99",
                    "[BOLD] 25.13"
                ],
                [
                    "\\Ru → \\Fr",
                    "43.37",
                    "22.43",
                    "26.49",
                    "28.52",
                    "[BOLD] 30.06",
                    "29.53"
                ],
                [
                    "Zero-shot (avg.)",
                    "45.23",
                    "26.26",
                    "29.88",
                    "30.84",
                    "[BOLD] 32.47",
                    "32.29"
                ]
            ]
        },
        "gold_description": "we see that models trained with agreement perform comparably to pivot , outperforming it in some cases , e . g . , when the target is russian , perhaps because it is quite different linguistically from the english pivot . unlike dual - 0 , agree maintains high performance in the supervised directions ( within 1 bleu point compared to basic ) ,",
        "generated_description": "we see that our baseline pbsmt outperforms sestorain et al . ’ s pbsmt and nmt - 0 by a substantial margin , and is on par with the state - of - the - art dual system dual - 0 , which is trained on parallel data from the iwslt 2018 evaluation campaign . we also compare our approach to the basic approach of \\ newcitebapna2018pivot , which builds a pivot - based nmt model on top of the encoder - decoder pipeline of pbsmt . our approach outperforms this baseline by a significant margin , showing that our approach can benefit from pretraining on unlabeled data in a data - driven manner ."
    },
    {
        "table_id": "211",
        "table_info": {
            "table_caption": "Table 3: Zero-shot results on Europarl. Note that Soft and Distill are not multilingual systems.",
            "table_column_names": [
                "[EMPTY]",
                "Previous work Soft‡",
                "Previous work Distill†",
                "Our baselines Basic",
                "Our baselines Pivot",
                "Agree"
            ],
            "table_content_values": [
                [
                    "\\En → \\Es",
                    "—",
                    "—",
                    "34.69",
                    "34.69",
                    "33.80"
                ],
                [
                    "\\En → \\De",
                    "—",
                    "—",
                    "23.06",
                    "23.06",
                    "22.44"
                ],
                [
                    "\\En → \\Fr",
                    "31.40",
                    "—",
                    "33.87",
                    "33.87",
                    "32.55"
                ],
                [
                    "\\Es → \\En",
                    "31.96",
                    "—",
                    "34.77",
                    "34.77",
                    "34.53"
                ],
                [
                    "\\De → \\En",
                    "26.55",
                    "—",
                    "29.06",
                    "29.06",
                    "29.07"
                ],
                [
                    "\\Fr → \\En",
                    "—",
                    "—",
                    "33.67",
                    "33.67",
                    "33.30"
                ],
                [
                    "Supervised (avg.)",
                    "—",
                    "—",
                    "31.52",
                    "31.52",
                    "30.95"
                ],
                [
                    "\\Es → \\De",
                    "—",
                    "—",
                    "18.23",
                    "20.14",
                    "[BOLD] 20.70"
                ],
                [
                    "\\De → \\Es",
                    "—",
                    "—",
                    "20.28",
                    "[BOLD] 26.50",
                    "22.45"
                ],
                [
                    "\\Es → \\Fr",
                    "30.57",
                    "[BOLD] 33.86",
                    "27.99",
                    "32.56",
                    "30.94"
                ],
                [
                    "\\Fr → \\Es",
                    "—",
                    "—",
                    "27.12",
                    "[BOLD] 32.96",
                    "29.91"
                ],
                [
                    "\\De → \\Fr",
                    "23.79",
                    "[BOLD] 27.03",
                    "21.36",
                    "25.67",
                    "24.45"
                ],
                [
                    "\\Fr → \\De",
                    "—",
                    "—",
                    "18.57",
                    "[BOLD] 19.86",
                    "19.15"
                ],
                [
                    "Zero-shot (avg.)",
                    "—",
                    "—",
                    "22.25",
                    "26.28",
                    "24.60"
                ]
            ]
        },
        "gold_description": "table 3 shows the results on the europarl corpus . our approach consistently outperforms basic by 2 - 3 bleu points but lags a bit behind pivot on average ( except on de where it is better ) . es",
        "generated_description": "we observe that the pivot approach outperforms both the basic and pivot baselines for all language pairs except for \\ en \\ fr \\ en and \\ de \\ en , where we do not observe any significant difference . the pivot model outperforms the distillation approach for all but one language pair , \\ es \\ es and \\ fr \\ en , where the difference is statistically significant ( p < 0 . 01 ) . we also observe that our distillation approach is able to outperform the soft and distill approaches for most language pairs , except for the \\ eqns \\ en \\ de \\ fr and \\ zh \\ en \\ zh \\ fr , where both approaches are outperformed by the agreement approach ."
    },
    {
        "table_id": "212",
        "table_info": {
            "table_caption": "Table 4: Results on the official IWSLT17 multilingual task.",
            "table_column_names": [
                "[EMPTY]",
                "Previous work SOTA†",
                "Previous work CPG‡",
                "Our baselines Basic",
                "Our baselines Pivot",
                "Agree"
            ],
            "table_content_values": [
                [
                    "Supervised (avg.)",
                    "24.10",
                    "19.75",
                    "24.63",
                    "24.63",
                    "23.97"
                ],
                [
                    "Zero-shot (avg.)",
                    "20.55",
                    "11.69",
                    "19.86",
                    "19.26",
                    "[BOLD] 20.58"
                ]
            ]
        },
        "gold_description": "table 4 presents results on the original iwslt17 task . the vanilla training method ( johnson et al . , 2016 ) achieves very high zero shot performance , even outperforming pivot .",
        "generated_description": "results on iwslt17 . we observe that our baseline basic outperforms sota and cpg on both the supervised and zero - shot settings , confirming the effectiveness of our approach . the pivot and agree method improves over the basic baseline by 0 . 8 and 0 . 7 bleu points , respectively ."
    },
    {
        "table_id": "213",
        "table_info": {
            "table_caption": "Table 5: Results on our proposed IWSLT17?",
            "table_column_names": [
                "[EMPTY]",
                "Basic",
                "Pivot",
                "Agree"
            ],
            "table_content_values": [
                [
                    "Supervised (avg.)",
                    "28.72",
                    "28.72",
                    "[BOLD] 29.17"
                ],
                [
                    "Zero-shot (avg.)",
                    "12.61",
                    "[BOLD] 17.68",
                    "15.23"
                ]
            ]
        },
        "gold_description": "on our proposed preprocessed iwslt17 ( cid : 63 ) that eliminates the overlap and reduces the number of supervised directions ( 8 ) , there is a considerable gap between the supervised and zeroshot performance of basic . agree performs better than basic and is slightly worse than pivot .",
        "generated_description": "s6ss0sss0px3 results on iwslt17 our final model is a fully supervised model , which is trained on the iwli dataset . on this dataset , we find that the adaptive and pivot strategies significantly outperform the basic strategy , while the agreement strategy performs slightly worse than the pivot strategy ."
    },
    {
        "table_id": "214",
        "table_info": {
            "table_caption": "Table 2: BLEU scores for the bilingual test sets. Here all contexts are incorporated as InitDec for Europarl and InitDec+AddDec for Subtitles unless otherwise specified. bold: Best performance, †: Statistically significantly better than the base model, based on bootstrap resampling Clark et al. (2011) with p < 0.05.",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] Europarl  [BOLD] En-Fr",
                "[BOLD] Europarl  [BOLD] En-Fr",
                "[BOLD] Europarl  [BOLD] En-Fr",
                "[BOLD] Europarl  [BOLD] En-Et",
                "[BOLD] Europarl  [BOLD] En-Et",
                "[BOLD] Europarl  [BOLD] En-Et",
                "[BOLD] Europarl  [BOLD] En-De",
                "[BOLD] Europarl  [BOLD] En-De",
                "[BOLD] Europarl  [BOLD] En-De",
                "[BOLD] Subtitles  [BOLD] En-Ru",
                "[BOLD] Subtitles  [BOLD] En-Ru",
                "[BOLD] Subtitles  [BOLD] En-Ru"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "Overall",
                    "En→Fr",
                    "Fr→En",
                    "Overall",
                    "En→Et",
                    "Et→En",
                    "Overall",
                    "En→De",
                    "De→En",
                    "Overall",
                    "En→Ru",
                    "Ru→En"
                ],
                [
                    "[ITALIC] Base Model",
                    "37.36",
                    "38.13",
                    "36.03",
                    "20.68",
                    "18.64",
                    "26.65",
                    "24.74",
                    "21.80",
                    "27.74",
                    "19.05",
                    "14.90",
                    "23.04"
                ],
                [
                    "+ [ITALIC] Source Context as Lang-Specific Attention via",
                    "+ [ITALIC] Source Context as Lang-Specific Attention via",
                    "+ [ITALIC] Source Context as Lang-Specific Attention via",
                    "+ [ITALIC] Source Context as Lang-Specific Attention via",
                    "+ [ITALIC] Source Context as Lang-Specific Attention via",
                    "+ [ITALIC] Source Context as Lang-Specific Attention via",
                    "+ [ITALIC] Source Context as Lang-Specific Attention via",
                    "+ [ITALIC] Source Context as Lang-Specific Attention via",
                    "+ [ITALIC] Source Context as Lang-Specific Attention via",
                    "+ [ITALIC] Source Context as Lang-Specific Attention via",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "InitDec",
                    "38.40†",
                    "39.19†",
                    "36.86†",
                    "[BOLD] 21.79†",
                    "19.54†",
                    "[BOLD] 28.33†",
                    "[BOLD] 26.34†",
                    "[BOLD] 23.31†",
                    "29.39†",
                    "18.88",
                    "14.89",
                    "22.56"
                ],
                [
                    "AddDec",
                    "38.50†",
                    "[BOLD] 39.35†",
                    "36.98†",
                    "21.65†",
                    "[BOLD] 19.66†",
                    "27.48†",
                    "26.30†",
                    "23.09†",
                    "[BOLD] 29.52†",
                    "19.34",
                    "15.16",
                    "23.12"
                ],
                [
                    "InitDec+AddDec",
                    "[BOLD] 38.55†",
                    "39.34†",
                    "[BOLD] 37.14†",
                    "21.49†",
                    "19.43†",
                    "27.55†",
                    "26.25†",
                    "23.18†",
                    "29.30†",
                    "[BOLD] 19.35",
                    "[BOLD] 15.16",
                    "[BOLD] 23.14"
                ],
                [
                    "+ [ITALIC] Source Context via",
                    "+ [ITALIC] Source Context via",
                    "+ [ITALIC] Source Context via",
                    "+ [ITALIC] Source Context via",
                    "+ [ITALIC] Source Context via",
                    "+ [ITALIC] Source Context via",
                    "+ [ITALIC] Source Context via",
                    "+ [ITALIC] Source Context via",
                    "+ [ITALIC] Source Context via",
                    "+ [ITALIC] Source Context via",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Direct Tranformation",
                    "38.35†",
                    "39.13†",
                    "36.96†",
                    "21.75†",
                    "[BOLD] 19.59†",
                    "28.07†",
                    "26.29†",
                    "23.34†",
                    "29.22†",
                    "19.09",
                    "14.89",
                    "22.76"
                ],
                [
                    "Hierarchical Gating",
                    "38.33†",
                    "39.14†",
                    "36.89†",
                    "21.62†",
                    "19.55†",
                    "27.64†",
                    "26.31†",
                    "23.17†",
                    "29.45†",
                    "19.20",
                    "15.10",
                    "22.73"
                ],
                [
                    "Lang-Specific Attention",
                    "38.40†",
                    "39.19†",
                    "36.86†",
                    "21.79†",
                    "19.54†",
                    "28.33†",
                    "26.34†",
                    "23.31†",
                    "29.39†",
                    "[BOLD] 19.35",
                    "[BOLD] 15.16",
                    "[BOLD] 23.14"
                ],
                [
                    "Combined Attention",
                    "[BOLD] 38.50†",
                    "[BOLD] 39.36†",
                    "36.94†",
                    "21.66†",
                    "19.52†",
                    "27.90†",
                    "26.38†",
                    "23.31†",
                    "29.44†",
                    "18.96",
                    "14.82",
                    "22.92"
                ],
                [
                    "Lang-Specific S-Attention",
                    "38.46†",
                    "39.24†",
                    "[BOLD] 37.06†",
                    "[BOLD] 21.84†",
                    "19.58†",
                    "[BOLD] 28.43†",
                    "[BOLD] 26.49†",
                    "[BOLD] 23.49†",
                    "[BOLD] 29.49†",
                    "19.09",
                    "14.59",
                    "22.98"
                ],
                [
                    "+ [ITALIC] Lang-Specific S-Attention using",
                    "+ [ITALIC] Lang-Specific S-Attention using",
                    "+ [ITALIC] Lang-Specific S-Attention using",
                    "+ [ITALIC] Lang-Specific S-Attention using",
                    "+ [ITALIC] Lang-Specific S-Attention using",
                    "+ [ITALIC] Lang-Specific S-Attention using",
                    "+ [ITALIC] Lang-Specific S-Attention using",
                    "+ [ITALIC] Lang-Specific S-Attention using",
                    "+ [ITALIC] Lang-Specific S-Attention using",
                    "+ [ITALIC] Lang-Specific S-Attention using",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Source Context",
                    "38.46†",
                    "39.24†",
                    "37.06†",
                    "[BOLD] 21.84†",
                    "19.58†",
                    "[BOLD] 28.43†",
                    "[BOLD] 26.49†",
                    "[BOLD] 23.49†",
                    "29.49†",
                    "19.09",
                    "14.59",
                    "22.98"
                ],
                [
                    "Target Context",
                    "38.76†",
                    "[BOLD] 39.57†",
                    "37.35†",
                    "21.77†",
                    "[BOLD] 19.68†",
                    "27.86†",
                    "26.21†",
                    "23.16†",
                    "29.26†",
                    "19.23",
                    "14.77",
                    "[BOLD] 23.23"
                ],
                [
                    "Dual Context Src-Tgt",
                    "[BOLD] 38.80†",
                    "39.51†",
                    "[BOLD] 37.50†",
                    "21.74†",
                    "19.60†",
                    "27.98†",
                    "26.39†",
                    "23.28†",
                    "[BOLD] 29.50†",
                    "18.89",
                    "14.52",
                    "23.06"
                ],
                [
                    "Dual Context Src-Tgt-Mix",
                    "38.76†",
                    "39.52†",
                    "37.43†",
                    "21.68†",
                    "19.63†",
                    "27.71†",
                    "26.37†",
                    "23.26†",
                    "29.48†",
                    "[BOLD] 19.26",
                    "[BOLD] 14.86",
                    "23.01"
                ]
            ]
        },
        "gold_description": "for the europarl data , we see decent improvements with initdec for en - et ( + 1 . 11 bleu ) and en - de ( + 1 . 60 bleu ) , and with initdec + adddec for en - fr ( + 1 . 19 bleu ) . we also observe that , for all language - pairs , both translation directions benefit from context , on the other hand , for the subtitles data , we see a maximum improvement of + 0 . 30 bleu for initdec + adddec . the next set of experiments evaluates the five different approaches for computing the sourceside context . from table 2 that for english - estonian and english - german , our model indeed benefits from using is evident finally , our results with source , target and dual contexts are reported . interestingly , just using the source context is sufficient for english - estonian and english - german . for english - french , on the other hand , we see significant improvements for the models using the target - side conversation history over using only the source - side . unlike europarl , for subtitles , we see improvements for our src - tgtmix dual context variant over the src - tgt one for en → ru , to summarise , for majority of the cases our language - specific sentence - level attention is a winner or a close second . using the target context is useful when the base model generates reasonable - quality translations ; otherwise , using the source context should suffice .",
        "generated_description": "we can see that our proposed model consistently outperforms the baseline model on all datasets and all language pairs . for example , on europarl , our model improves the bleu score from 37 . 36 ( en → fr ) to 38 . 13 ( en - et ) and from 24 . 65 ( en → en ) to 24 . 74 ( en – de ) . on the other hand , we can see a similar trend on the subtitles dataset , where our model obtains an average improvement of 1 . 65 bleus for en → fr and 1 . 64 for en - de over the base model . we can also see that the improvements are more significant for the translation between languages with different scripts , e . g . , en → ru for en ↔ en and en → en ."
    },
    {
        "table_id": "215",
        "table_info": {
            "table_caption": "Table 3: BLEU scores for the bilingual test sets. bold: Best performance, †: Statistically significantly better than the contextual baseline.",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] Europarl  [BOLD] En-Fr",
                "[BOLD] Europarl  [BOLD] En-Et",
                "[BOLD] Europarl  [BOLD] En-De",
                "[BOLD] Subtitles  [BOLD] En-Ru"
            ],
            "table_content_values": [
                [
                    "[ITALIC] Prev Sent",
                    "38.15",
                    "21.70",
                    "26.09",
                    "[BOLD] 19.13"
                ],
                [
                    "Our Model",
                    "[BOLD] 38.46†",
                    "[BOLD] 21.84",
                    "[BOLD] 26.49†",
                    "19.09"
                ]
            ]
        },
        "gold_description": "from table 3 , it can be seen that our model surpasses the local - context baseline for europarl showing that the wider context is indeed beneficial for en - ru , it can be seen that using previous sentence is sufficient",
        "generated_description": "our model outperforms the contextual baseline for all language pairs on all test sets , with statistically significant improvements in all cases except for en - fr for the europarl dataset . for the en - et and en - de datasets , the differences are not statistically significant , but for the subtitles dataset we see a statistically significant improvement ."
    },
    {
        "table_id": "216",
        "table_info": {
            "table_caption": "Table 4: BLEU scores for En-De bilingual test set.",
            "table_column_names": [
                "[BOLD] Type of Context",
                "[BOLD] BLEU"
            ],
            "table_content_values": [
                [
                    "No context (Base Model)",
                    "24.74"
                ],
                [
                    "Current Turn",
                    "26.39"
                ],
                [
                    "Current Language from Previous Turns",
                    "26.21"
                ],
                [
                    "Other Language from Previous Turns",
                    "26.32"
                ],
                [
                    "Complete Context",
                    "[BOLD] 26.49"
                ]
            ]
        },
        "gold_description": "we conduct an ablation study to validate our hypothesis of using the complete context versus using only one of the three types of contexts in a bilingual multi - speaker conversation : ( i ) current turn , ( ii ) previous turns in current language , and ( iii ) previous turns in the other language . the results for en - de are reported in table 4 . we see decrease in bleu for all types of contexts with significant decrease when considering only current language from previous turns . the results show that the current turn has the most influence on translating a sentence ,",
        "generated_description": "we can see that incorporating context from previous turns improves the baseline model by 1 . 5 bleu points , which indicates that the previous context is helpful for the current task . moreover , the context obtained from the other language is slightly better than the current context , which is consistent with our intuition that the additional context from other languages can help the model to learn better representations for current and previous turns . finally , the model with complete context achieves the best performance , demonstrating the effectiveness of contextualized representations for both languages ."
    },
    {
        "table_id": "217",
        "table_info": {
            "table_caption": "Table 1: Performance comparison between different state-of-the-art approaches on SCWS, in terms of Spearman’s correlation. UTDSM refers to the projected cross-topic representation, UTDSM Random refers to the case when random words served as anchors and GMM (c) corresponds to GMM smoothing with c components.",
            "table_column_names": [
                "Method",
                "AvgSimC",
                "MaxSimC"
            ],
            "table_content_values": [
                [
                    "Liu et al. ( 2015a )",
                    "67.3",
                    "68.1"
                ],
                [
                    "Liu et al. ( 2015b )",
                    "69.5",
                    "67.9"
                ],
                [
                    "Amiri et al. ( 2016 )",
                    "70.9",
                    "-"
                ],
                [
                    "Lee and Chen ( 2017 )",
                    "68.7",
                    "67.9"
                ],
                [
                    "Guo et al. ( 2018 )",
                    "69.3",
                    "68.2"
                ],
                [
                    "[ITALIC] 300-dimensions",
                    "[ITALIC] 300-dimensions",
                    "[ITALIC] 300-dimensions"
                ],
                [
                    "Global-DSM",
                    "67.1",
                    "67.1"
                ],
                [
                    "UTDSM Random",
                    "69.1±0.1",
                    "66.4±0.2"
                ],
                [
                    "UTDSM",
                    "[BOLD] 69.6",
                    "67.1"
                ],
                [
                    "UTDSM + GMM (1)",
                    "67.4",
                    "67.4"
                ],
                [
                    "UTDSM + GMM (2)",
                    "68.4",
                    "[BOLD] 68.3"
                ],
                [
                    "UTDSM + GMM (3)",
                    "68.9",
                    "[BOLD] 68.3"
                ],
                [
                    "UTDSM + GMM (8)",
                    "69.1",
                    "68.0"
                ],
                [
                    "UTDSM + GMM (10)",
                    "69.0",
                    "67.8"
                ],
                [
                    "[ITALIC] 500-dimensions",
                    "[ITALIC] 500-dimensions",
                    "[ITALIC] 500-dimensions"
                ],
                [
                    "Global-DSM",
                    "67.6",
                    "67.6"
                ],
                [
                    "UTDSM Random",
                    "69.4±0.1",
                    "66.5±0.3"
                ],
                [
                    "UTDSM",
                    "[BOLD] 70.2",
                    "68.0"
                ],
                [
                    "UTDSM + GMM (1)",
                    "67.6",
                    "67.6"
                ],
                [
                    "UTDSM + GMM (2)",
                    "68.8",
                    "[BOLD] 68.6"
                ],
                [
                    "UTDSM + GMM (3)",
                    "69.0",
                    "68.5"
                ],
                [
                    "UTDSM + GMM (8)",
                    "69.5",
                    "68.5"
                ],
                [
                    "UTDSM + GMM (10)",
                    "69.2",
                    "68.0"
                ]
            ]
        },
        "gold_description": "in table 1 we compare our model ( utdsm ) with our baseline ( global - dsm ) and other state - ofthe - art multi - prototype approaches for the contextual semantic similarity task . it is clear that all different setups of utdsm perform better than the baseline for both contextual semantic similarity metrics . using a single gaussian distribution ( utdsm + gmm ( 1 ) ) at the smoothing step of our method produces similar results to the baseline model . we also observe that random anchoring performs slightly worse than utdsm with respect to avgsimc . furthermore , we observe that gmm smoothing has a different effect on the maxsimc and avgsimc metrics . specifically , for avgsimc we consistently report lower results when gmm smoothing is applied for different number of components . at the same time , our smoothing technique highly improves the performance of maxsimc for all possible configurations . overall , the performance of our model is highly competitive to the state - of - the - art models in terms of avgsimc , for 500 - dimensional topic embeddings . we also achieve state - of - the - art performance for the maxsimc metric , using smoothed topic embeddings of 300 or 500 dimensions with 2 or 3 gaussian components .",
        "generated_description": "utdsm + gmm consistently outperforms the previous state - of - the - art methods on both the avgsimc and maxsimc datasets . we also observe that the performance of the random initialization of embeddings is comparable to that of the 300 - dimensions embedding , indicating that the learned embedding is not sensitive to the dimensionality of the latent space ."
    },
    {
        "table_id": "218",
        "table_info": {
            "table_caption": "Table 2: BLEU scores for domain match experiments",
            "table_column_names": [
                "[BOLD] Test domain",
                "[BOLD] Training Data  [BOLD] WSJ",
                "[BOLD] Training Data  [BOLD] WSJ + Giga"
            ],
            "table_content_values": [
                [
                    "WSJ",
                    "65.78",
                    "83.42"
                ],
                [
                    "Brown",
                    "45.00",
                    "76.99"
                ],
                [
                    "Wikipedia",
                    "35.90",
                    "62.26"
                ]
            ]
        },
        "gold_description": "we evaluate the in - and out - of - domain performance of our approach by training models on either wsj gold data only , or both wsj gold data and gigaword silver data , and evaluating on different domains . the results in table 2 show that while the generator performs best on test data which matches the training domain ( news ) , semisupervised training leads to substantial out - ofdomain improvements on the wikipedia and the brown corpus portions of the test set .",
        "generated_description": "for the wsj test set , we use the same training data as in the previous experiment . for the brown corpus , we add gigaword to the training data provided by brown books , and for the wikipedia corpus we add it as a separate domain match test set . we observe that the bleu scores are higher when using the wiki corpus than when using wsj training data . we hypothesize that this is due to the fact that wikipedia is much smaller than the other two domains ."
    },
    {
        "table_id": "219",
        "table_info": {
            "table_caption": "Table 2: Evaluation results of multi-class text classification.",
            "table_column_names": [
                "Method",
                "Precision",
                "Recall",
                "F1-score",
                "Accuracy"
            ],
            "table_content_values": [
                [
                    "LDA",
                    "39.7",
                    "41.8",
                    "38.8",
                    "41.8"
                ],
                [
                    "Global-DSM",
                    "62.9",
                    "63.3",
                    "62.9",
                    "63.3"
                ],
                [
                    "MaxCD",
                    "61.9",
                    "63.0",
                    "62.0",
                    "63.0"
                ],
                [
                    "AvgD",
                    "63.5",
                    "64.6",
                    "63.3",
                    "64.3"
                ],
                [
                    "AvgCD",
                    "[BOLD] 64.6",
                    "[BOLD] 65.5",
                    "[BOLD] 64.5",
                    "[BOLD] 65.5"
                ]
            ]
        },
        "gold_description": "evaluation results on text classification are presented in table 2 . we observe that our model performs better than the baseline across all metrics for both averaging approaches ( avgcd , avgd ) , while the usage of dominant topics appears to have lower performance ( maxcd ) . specifically , we get an improvement of 2 − 2 . 5 % on topic - based average and 0 . 5 − 1 % on simple average combination compared to using global - dsm .",
        "generated_description": "we can see that the performance of lda and global - dsm are much worse than that of the other baselines . this is because these two baselines do not utilize any unlabeled data . maxcd and avgcd perform better than avgd , which is consistent with our observation in the previous section . the performance of avgcd is slightly better than maxcd ."
    },
    {
        "table_id": "220",
        "table_info": {
            "table_caption": "Table 3: Evaluation results on paraphrase detection task.",
            "table_column_names": [
                "Method",
                "Precision",
                "Recall",
                "F1-score",
                "Accuracy"
            ],
            "table_content_values": [
                [
                    "Global-DSM",
                    "68.6",
                    "69.2",
                    "62.0",
                    "69.2"
                ],
                [
                    "MaxCD",
                    "[BOLD] 69.0",
                    "69.3",
                    "62.1",
                    "69.3"
                ],
                [
                    "AvgD",
                    "67.7",
                    "[BOLD] 69.4",
                    "[BOLD] 64.0",
                    "[BOLD] 69.4"
                ],
                [
                    "AvgCD",
                    "68.8",
                    "69.4",
                    "62.6",
                    "69.4"
                ]
            ]
        },
        "gold_description": "results for the paraphrase identification task are presented in table 3 . avgd yields the best results especially in f1 metric showing that cross - topic representations are semantically richer than single embeddings baseline ( global - dsm ) .",
        "generated_description": "we can see that both avgd and avgcd outperform global - dsm and maxcd in terms of f1 - score and accuracy , which indicates that the paraphrase detection task is more challenging than the sentence classification task . maxcd performs slightly better than avgcd , which may be due to the fact that maxcd has more training samples than avgd ."
    },
    {
        "table_id": "221",
        "table_info": {
            "table_caption": "Table 2: Macro f1-score of unknown intent detection with different proportion (25%, 50% and 75%) of classes are treated as known intents on SNIPS and ATIS dataset.",
            "table_column_names": [
                "% of known intents",
                "SNIPS 25%",
                "50%",
                "75%",
                "ATIS 25%",
                "50%",
                "75%"
            ],
            "table_content_values": [
                [
                    "MSP",
                    "0.0",
                    "6.2",
                    "8.3",
                    "8.1",
                    "15.3",
                    "17.2"
                ],
                [
                    "DOC",
                    "72.5",
                    "67.9",
                    "63.9",
                    "61.6",
                    "62.8",
                    "37.7"
                ],
                [
                    "DOC (Softmax)",
                    "72.8",
                    "65.7",
                    "61.8",
                    "63.6",
                    "63.3",
                    "38.7"
                ],
                [
                    "LOF (Softmax)",
                    "76.0",
                    "69.4",
                    "65.8",
                    "67.3",
                    "61.8",
                    "38.9"
                ],
                [
                    "LOF (LMCL)",
                    "[BOLD] 79.2",
                    "[BOLD] 84.1",
                    "[BOLD] 78.8",
                    "[BOLD] 69.6",
                    "[BOLD] 63.4",
                    "[BOLD] 39.6"
                ]
            ]
        },
        "gold_description": "we show the experiment results in table 2 . our method consistently performs better than all baselines in all settings . our method is also better than lof ( softmax ) . we observe that on the atis dataset , the performance of unknown intent detection dramatically drops as the known intent increases .",
        "generated_description": "to evaluate the performance of lof , we randomly select 25 % , 50 % , 50 % and 75 % of classes from snips and atis datasets as known intents and treat them as unlabeled . we can see that lof consistently outperforms doc and doc with different proportion of known intent classes . for example , on atis dataset , when only 25 % of the classes are treated as known intent , the macro - f1 - score of the proposed method is 79 . 2 % , 84 . 1 % and 78 . 8 % compared to 72 . 8 % , 61 . 6 % and 63 . 9 % of doc , respectively . these results indicate that our method is more robust to class imbalance ."
    },
    {
        "table_id": "222",
        "table_info": {
            "table_caption": "Table 1: Comparing AL with and without its truncated average, tracking time-indexed lag ALi=gi−i−1γ when |x|=|y|=4 for a wait-3 system.",
            "table_column_names": [
                "Statistics  [ITALIC] i",
                "Statistics 1",
                "Statistics 2",
                "Statistics 3",
                "Statistics 4",
                "Scores  [ITALIC] τ=2",
                "Scores  [ITALIC] τ=| [BOLD] y|"
            ],
            "table_content_values": [
                [
                    "[ITALIC] gi",
                    "3",
                    "4",
                    "4",
                    "4",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "AL [ITALIC] i",
                    "3",
                    "3",
                    "2",
                    "1",
                    "AL = 3",
                    "AL = 2.25"
                ]
            ]
        },
        "gold_description": "table 1 shows the time - indexed lags that are averaged to calculate al for a wait - 3 system . the lags make the problem clear : each position beyond the point where all source tokens have been read ( gi = | x | ) has its lag reduced by , pulling the average lag below k .",
        "generated_description": "we first compare the performance of al with and without truncated average , i . e . when | x | = | y | = 4 . for a wait - 3 system with n = 4 timesteps , the average length of the delay is 2 . 25 , which is less than the typical wait - time of 2 . 5s in the literature . this is because we truncate the average of the lag by setting τ = 2 for the first time , and then by using the same τ for the second and third time ."
    },
    {
        "table_id": "223",
        "table_info": {
            "table_caption": "Table 4: BLEU scores for evaluating AMR and DMRS generators on an AMR test set",
            "table_column_names": [
                "[BOLD] Representation",
                "[BOLD] Train on  [BOLD] Gold",
                "[BOLD] Train on  [BOLD] Gold+Silver"
            ],
            "table_content_values": [
                [
                    "AMR",
                    "22.0",
                    "33.8"
                ],
                [
                    "DMRS - no attributes",
                    "40.1",
                    "63.6"
                ],
                [
                    "DMRS - all attributes",
                    "56.9",
                    "75.8"
                ]
            ]
        },
        "gold_description": "we compare our approach to amr - to - text generation by evaluating our generator on a standard amr test set for models trained on gold as well as gold plus silver data . 9 we evaluate dmrs models both with and without predicate and edge attributes , the results in table 4 show that our mrs generator performs better than the amr generator by a large margin , even when the additional mrs attributes are excluded .",
        "generated_description": "the bleu scores for evaluating the amr and dmrs generators on an amr test set are shown in table 4 . we observe that the dmrs generator with all attributes performs significantly better than its amr counterpart . the dmrs model with no attributes performs slightly worse than when trained on the original amr , but when trained with all the attributes , it outperforms the vanilla amr by a large margin ."
    },
    {
        "table_id": "224",
        "table_info": {
            "table_caption": "Table 3: Accuracy of the model trained only on MultiNLI on our datasets, which are used as probing datasets. The Complexity column refers to the syntactic complexity of the sentences.",
            "table_column_names": [
                "[BOLD] Complexity",
                "[BOLD] Ent.",
                "[BOLD] Neutral",
                "[BOLD] Cont.",
                "[BOLD] All"
            ],
            "table_content_values": [
                [
                    "MultiNLI Matched Dev Set",
                    "MultiNLI Matched Dev Set",
                    "MultiNLI Matched Dev Set",
                    "MultiNLI Matched Dev Set",
                    "MultiNLI Matched Dev Set"
                ],
                [
                    "[BOLD] All",
                    "83.56",
                    "84.12",
                    "86.37",
                    "[BOLD] 84.66"
                ],
                [
                    "Dative Alternation",
                    "Dative Alternation",
                    "Dative Alternation",
                    "Dative Alternation",
                    "Dative Alternation"
                ],
                [
                    "[BOLD] Simple",
                    "100",
                    "-",
                    "4.22",
                    "[BOLD] 52.63"
                ],
                [
                    "[BOLD] Medium",
                    "100",
                    "-",
                    "2.16",
                    "[BOLD] 49.27"
                ],
                [
                    "[BOLD] Complex",
                    "99.77",
                    "-",
                    "0.36",
                    "[BOLD] 50.45"
                ],
                [
                    "[BOLD] All",
                    "99.92",
                    "-",
                    "2.25",
                    "[BOLD] 50.78"
                ],
                [
                    "Numerical Reasoning",
                    "Numerical Reasoning",
                    "Numerical Reasoning",
                    "Numerical Reasoning",
                    "Numerical Reasoning"
                ],
                [
                    "[BOLD] Simple",
                    "38.14",
                    "0.66",
                    "69.53",
                    "[BOLD] 45.04"
                ],
                [
                    "[BOLD] Medium",
                    "57.14",
                    "1.36",
                    "50.14",
                    "[BOLD] 38.11"
                ],
                [
                    "[BOLD] Complex",
                    "55.48",
                    "3.04",
                    "46.26",
                    "[BOLD] 36.15"
                ],
                [
                    "[BOLD] All",
                    "50.25",
                    "1.69",
                    "55.31",
                    "[BOLD] 39.77"
                ]
            ]
        },
        "gold_description": "the model has relatively low accuracy on the entailment and contradiction examples while close to zero accuracy on the neutral ones . the accuracy of the model on each test set . on our dative alternation dataset , the accuracy on our test sets is substantially lower than on the multinli development set ( 50 . 78 % versus 84 . 66 % respectively ) , the model has very high accuracy on the entailment examples , while close to zero on the contradiction ones . on the numerical reasoning dataset , the model also seems to fail on this inference type with test set accuracy much lower than on the multinli development set ,",
        "generated_description": "in order to better understand the impact of the complexity of the proposed model , we further evaluate the performance of the model on the multinli dev and mismatched set . the results are shown in the first row of the table , where all the models are trained on the full training set and tested on the mismatched dev and matched set . we can see that the accuracy of the models on the matched set is higher than that of the simple and complex models on both the development and matched sets , which indicates that the models can learn better to reason about complex sentences with the help of the disambiguation method ."
    },
    {
        "table_id": "225",
        "table_info": {
            "table_caption": "Table 2: BLEU and METEOR scores for the sentence-level baseline (S-NMT) vs. variants of our Document NMT model. bold: Best performance, †: Statistically significantly better than the baseline.",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] Memory-to-Context BLEU",
                "[BOLD] Memory-to-Context BLEU",
                "[BOLD] Memory-to-Context BLEU",
                "[BOLD] Memory-to-Context BLEU",
                "[BOLD] Memory-to-Context METEOR",
                "[BOLD] Memory-to-Context METEOR",
                "[BOLD] Memory-to-Context METEOR",
                "[BOLD] Memory-to-Context METEOR",
                "[BOLD] Memory-to-Output BLEU",
                "[BOLD] Memory-to-Output BLEU",
                "[BOLD] Memory-to-Output BLEU",
                "[BOLD] Memory-to-Output BLEU",
                "[BOLD] Memory-to-Output METEOR",
                "[BOLD] Memory-to-Output METEOR",
                "[BOLD] Memory-to-Output METEOR",
                "[BOLD] Memory-to-Output METEOR"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "Fr→En",
                    "De→En",
                    "De→En",
                    "Et→En",
                    "Fr→En",
                    "De→En",
                    "De→En",
                    "Et→En",
                    "Fr→En",
                    "De→En",
                    "De→En",
                    "Et→En",
                    "Fr→En",
                    "De→En",
                    "De→En",
                    "Et→En"
                ],
                [
                    "[EMPTY]",
                    "[EMPTY]",
                    "NC-11",
                    "NC-16",
                    "[EMPTY]",
                    "[EMPTY]",
                    "NC-11",
                    "NC-16",
                    "[EMPTY]",
                    "[EMPTY]",
                    "NC-11",
                    "NC-16",
                    "[EMPTY]",
                    "[EMPTY]",
                    "NC-11",
                    "NC-16",
                    "[EMPTY]"
                ],
                [
                    "[ITALIC] S-NMT",
                    "20.85",
                    "5.24",
                    "9.18",
                    "20.42",
                    "23.27",
                    "10.90",
                    "14.35",
                    "24.65",
                    "20.85",
                    "5.24",
                    "9.18",
                    "20.42",
                    "23.27",
                    "10.90",
                    "14.35",
                    "24.65"
                ],
                [
                    "[ITALIC]  +src",
                    "21.91†",
                    "6.26†",
                    "10.20†",
                    "22.10†",
                    "24.04†",
                    "11.52†",
                    "15.45†",
                    "25.92†",
                    "[BOLD] 21.80†",
                    "6.10†",
                    "9.98†",
                    "21.50†",
                    "23.99†",
                    "11.53†",
                    "15.29†",
                    "25.44†"
                ],
                [
                    "[ITALIC]  +trg",
                    "21.74†",
                    "6.24†",
                    "9.97†",
                    "21.94†",
                    "23.98†",
                    "11.58†",
                    "15.32†",
                    "25.89†",
                    "21.76†",
                    "[BOLD] 6.31†",
                    "10.04†",
                    "21.82†",
                    "24.06†",
                    "[BOLD] 12.10†",
                    "15.75†",
                    "25.93†"
                ],
                [
                    "[ITALIC]  +both",
                    "[BOLD] 22.00†",
                    "[BOLD] 6.57†",
                    "[BOLD] 10.54†",
                    "[BOLD] 22.32†",
                    "[BOLD] 24.40†",
                    "[BOLD] 12.24†",
                    "[BOLD] 16.18†",
                    "[BOLD] 26.34†",
                    "21.77†",
                    "6.20†",
                    "[BOLD] 10.23†",
                    "[BOLD] 22.20†",
                    "[BOLD] 24.27†",
                    "11.84†",
                    "[BOLD] 15.82†",
                    "[BOLD] 26.10†"
                ]
            ]
        },
        "gold_description": "we consistently observe + 1 . 15 / + 1 . 13 bleu / meteor score improvements across the three language pairs upon comparing our best model to s - nmt ( see table 2 ) . overall , our document nmt model with both memories has been the most effective variant for all of the three language pairs . from table 2 , we consistently see + . 95 / + 1 . 00 bleu / meteor improvements between the best variants of our model and the sentence - level baseline across the three lan for german → english , guage pairs . for french → english , all variants of document nmt model show comparable performance when using bleu ; however , when evaluated using meteor , the dual memory model is the best . the target memory variants give comparable results , whereas for estonian → english , the dual memory variant proves to be the best . overall , the memory - tocontext model variants perform better than their memory - to - output counterparts .",
        "generated_description": "meteor is used to evaluate the quality of the translation produced by the memory - to - context model . the results show that our proposed model outperforms all the baseline models in all the settings . in particular , our model improves the bleu - 4 score of fr → en and de → en by 0 . 4 and 0 . 5 points , respectively , when compared with the previous best model nc - 11 . this shows that our model is able to produce more relevant information for the target language with the help of rich semantic information from the memory ."
    },
    {
        "table_id": "226",
        "table_info": {
            "table_caption": "Table 2: Probing tasks performance of vector averaging (AVG) and max pooling (MAX) vs. DCT embeddings with various K. Majority (baseline), Human (human-bound), and a linear classifier with sentence length as sole feature (Length) as reported in Conneau et al. (2018), respectively.",
            "table_column_names": [
                "Model",
                "[BOLD] Surface SentLen",
                "[BOLD] Surface WC",
                "[BOLD] Syntactic TreeDepth",
                "[BOLD] Syntactic TopConst",
                "[BOLD] Syntactic BShift",
                "[BOLD] Semantic Tense",
                "[BOLD] Semantic SubjNum",
                "[BOLD] Semantic ObjNum",
                "[BOLD] Semantic SOMO",
                "[BOLD] Semantic CoordInv"
            ],
            "table_content_values": [
                [
                    "Majority",
                    "20.0",
                    "0.5",
                    "17.9",
                    "5.0",
                    "50.0",
                    "50.0",
                    "50.0",
                    "50.0",
                    "50.0",
                    "50.0"
                ],
                [
                    "Human",
                    "100",
                    "100",
                    "84.0",
                    "84.0",
                    "98.0",
                    "85.0",
                    "88.0",
                    "86.5",
                    "81.2",
                    "85.0"
                ],
                [
                    "Length",
                    "100",
                    "0.2",
                    "18.1",
                    "9.3",
                    "50.6",
                    "56.5",
                    "50.3",
                    "50.1",
                    "50.2",
                    "50.0"
                ],
                [
                    "AVG",
                    "64.12",
                    "82.1",
                    "36.38",
                    "68.04",
                    "50.16",
                    "87.9",
                    "80.89",
                    "80.24",
                    "50.39",
                    "51.95"
                ],
                [
                    "MAX",
                    "62.67",
                    "88.97",
                    "33.02",
                    "62.63",
                    "50.31",
                    "85.66",
                    "77.11",
                    "76.04",
                    "51.86",
                    "52.33"
                ],
                [
                    "[ITALIC] c[0]",
                    "[BOLD] 98.67",
                    "[BOLD] 91.11",
                    "38.6",
                    "70.54",
                    "50.42",
                    "88.25",
                    "80.88",
                    "80.56",
                    "[BOLD] 55.6",
                    "55"
                ],
                [
                    "[ITALIC] c[0:1]",
                    "97.18",
                    "89.16",
                    "40.41",
                    "78.34",
                    "52.25",
                    "88.58",
                    "86.59",
                    "84.36",
                    "54.62",
                    "70.42"
                ],
                [
                    "[ITALIC] c[0:2]",
                    "95.84",
                    "86.77",
                    "43.01",
                    "80.41",
                    "54.84",
                    "88.87",
                    "88.06",
                    "86.26",
                    "53.07",
                    "71.87"
                ],
                [
                    "[ITALIC] c[0:3]",
                    "94.63",
                    "84.96",
                    "[BOLD] 43.35",
                    "81.01",
                    "57.29",
                    "88.88",
                    "88.36",
                    "86.51",
                    "53.79",
                    "[BOLD] 72.01"
                ],
                [
                    "[ITALIC] c[0:4]",
                    "93.25",
                    "83.24",
                    "43.26",
                    "81.49",
                    "60.31",
                    "[BOLD] 88.91",
                    "[BOLD] 88.65",
                    "87.15",
                    "52.77",
                    "71.91"
                ],
                [
                    "[ITALIC] c[0:5]",
                    "92.29",
                    "81.84",
                    "42.75",
                    "[BOLD] 81.60",
                    "62.01",
                    "88.82",
                    "88.44",
                    "87.98",
                    "52.38",
                    "70.96"
                ],
                [
                    "[ITALIC] c[0:6]",
                    "91.56",
                    "79.83",
                    "43.05",
                    "81.41",
                    "[BOLD] 62.59",
                    "88.87",
                    "[BOLD] 88.65",
                    "[BOLD] 88.28",
                    "52.07",
                    "70.63"
                ]
            ]
        },
        "gold_description": "we report the performance in probing tasks in table 2 . in general , dct yields better performance compared to averaging on all tasks , and larger k often yields improved performance in syntactic and semantic tasks . for the surface information tasks , sentlen and word content ( wc ) , c significantly outperforms avg . the performance decreased with increasing k in c [ 0 : k ] , while increasing k has no positive effect on surface information tasks , syntactic and semantic tasks demonstrate performance gains with larger k . this trend is clearly observed in all syntactic tasks and three of the semantic tasks , where dct performs well above avg and the performance improves with increasing k . the only exception is somo , where increasing k actually results in lower performance , although all dct results are still higher than avg .",
        "generated_description": "our model outperforms the majority baseline by a large margin on most of the syntactic tasks , with the exception of the somo task , where the difference between the length baseline and our model is not statistically significant . our model also achieves the best performance on somo and coordinv , which are two of the most difficult tasks in semeval - 2018 . we hypothesize that this is due to the fact that coordinv and somo are the two most challenging tasks for our model , as they require more complex syntactic knowledge than bshift ."
    },
    {
        "table_id": "227",
        "table_info": {
            "table_caption": "Table 3: DCT embedding Performance in SentEval downstream tasks compared to vector averaging (AVG) and max pooling (MAX).",
            "table_column_names": [
                "Model",
                "[BOLD] Sentiment Analysis MR",
                "[BOLD] Sentiment Analysis SST2",
                "[BOLD] Sentiment Analysis SST5",
                "[BOLD] Sentiment Analysis CR",
                "[BOLD] Sentiment Analysis MPQA",
                "[BOLD] SUBJ",
                "[BOLD] Relatedness/Paraphrase SICK-R",
                "[BOLD] Relatedness/Paraphrase STSB",
                "[BOLD] Relatedness/Paraphrase MRPC",
                "[BOLD] Inference SICK-E",
                "[BOLD] TREC"
            ],
            "table_content_values": [
                [
                    "AVG",
                    "78.3",
                    "[BOLD] 84.13",
                    "44.16",
                    "79.6",
                    "87.94",
                    "92.33",
                    "81.95",
                    "69.26",
                    "74.43",
                    "79.5",
                    "83.2"
                ],
                [
                    "MAX",
                    "73.31",
                    "79.24",
                    "41.86",
                    "73.35",
                    "86.54",
                    "88.02",
                    "81.93",
                    "[BOLD] 71.57",
                    "72.5",
                    "77.98",
                    "76.2"
                ],
                [
                    "[ITALIC] c[0]",
                    "[BOLD] 78.45",
                    "83.53",
                    "44.57",
                    "79.81",
                    "[BOLD] 88.36",
                    "[BOLD] 92.79",
                    "82.61",
                    "71.11",
                    "72.93",
                    "78.91",
                    "84.8"
                ],
                [
                    "[ITALIC] c[0:1]",
                    "78.15",
                    "83.47",
                    "[BOLD] 46.06",
                    "79.84",
                    "87.76",
                    "92.61",
                    "82.73",
                    "70.82",
                    "72.81",
                    "79.64",
                    "88.2"
                ],
                [
                    "[ITALIC] c[0:2]",
                    "78.02",
                    "82.98",
                    "45.16",
                    "79.68",
                    "87.62",
                    "92.5",
                    "[BOLD] 82.95",
                    "70.36",
                    "72.87",
                    "79.76",
                    "[BOLD] 89.8"
                ],
                [
                    "[ITALIC] c[0:3]",
                    "77.81",
                    "83.8",
                    "45.79",
                    "79.66",
                    "87.54",
                    "92.4",
                    "82.93",
                    "69.79",
                    "73.57",
                    "[BOLD] 80.56",
                    "88.2"
                ],
                [
                    "[ITALIC] c[0:4]",
                    "77.72",
                    "83.75",
                    "44.03",
                    "[BOLD] 80.08",
                    "87.4",
                    "92.61",
                    "82.53",
                    "69.31",
                    "72.35",
                    "79.72",
                    "[BOLD] 89.8"
                ],
                [
                    "[ITALIC] c[0:5]",
                    "77.42",
                    "82.43",
                    "43.3",
                    "78.6",
                    "87.21",
                    "92.19",
                    "82.36",
                    "68.9",
                    "73.91",
                    "79.89",
                    "88.8"
                ],
                [
                    "[ITALIC] c[0:6]",
                    "77.47",
                    "82.81",
                    "42.99",
                    "78.78",
                    "87.06",
                    "92.15",
                    "81.86",
                    "68.17",
                    "[BOLD] 75.07",
                    "79.76",
                    "86.4"
                ]
            ]
        },
        "gold_description": "our results in table 3 are consistent with these observations , where we see improvements in most tasks , but the difference is not as significant as the probing tasks , except in trec question classification where increasing k leads to much better performance .",
        "generated_description": "we can see that our model outperforms all the baselines on most of the datasets , with the exception of the mpqa dataset , where the c [ 0 ] model slightly outperforms our model on the subj dataset . on the stsb dataset , our model performs slightly better than the avg and max baselines , but not as good as the c [ 0 ] and c [ 1 ] models . the main reason for this may be the fact that stsb is a small dataset with only a few sentences per sentiment label , which makes it more difficult for the models to capture the correlations between the words in the sentence and the sentiment label ."
    },
    {
        "table_id": "228",
        "table_info": {
            "table_caption": "Table 4: Performance in text classification (20-NG, R-8) and sentiment (SST-5) tasks of various models as reported in Kayal and Tsatsaronis (2019), where DCT* refers to the implementation in Kayal and Tsatsaronis (2019). Our DCT embeddings are denoted as c[k] in the bottom row. Bold indicates the best result, and italic indicates second-best.",
            "table_column_names": [
                "Model",
                "[BOLD] 20-NG P",
                "[BOLD] 20-NG R",
                "[BOLD] 20-NG F1",
                "[BOLD] R-8 P",
                "[BOLD] R-8 R",
                "[BOLD] R-8 F1",
                "[BOLD] SST-5 P",
                "[BOLD] SST-5 R",
                "[BOLD] SST-5 F1"
            ],
            "table_content_values": [
                [
                    "PCA",
                    "55.43",
                    "54.67",
                    "54.77",
                    "83.83",
                    "83.42",
                    "83.41",
                    "26.47",
                    "25.08",
                    "25.23"
                ],
                [
                    "DCT*",
                    "61.07",
                    "59.16",
                    "59.78",
                    "90.41",
                    "90.78",
                    "90.38",
                    "30.11",
                    "30.09",
                    "29.53"
                ],
                [
                    "Avg. vec.",
                    "68.72",
                    "68.19",
                    "68.25",
                    "96.34",
                    "96.30",
                    "96.27",
                    "27.88",
                    "26.44",
                    "24.81"
                ],
                [
                    "p-means",
                    "[ITALIC] 72.20",
                    "[ITALIC] 71.65",
                    "[BOLD] 71.79",
                    "96.69",
                    "96.67",
                    "96.65",
                    "33.77",
                    "33.41",
                    "33.26"
                ],
                [
                    "ELMo",
                    "71.20",
                    "[BOLD] 71.79",
                    "71.36",
                    "94.54",
                    "91.32",
                    "91.32",
                    "[ITALIC] 42.35",
                    "[ITALIC] 41.51",
                    "[ITALIC] 41.54"
                ],
                [
                    "BERT",
                    "70.89",
                    "70.79",
                    "70.88",
                    "95.52",
                    "95.39",
                    "95.39",
                    "39.92",
                    "39.38",
                    "39.35"
                ],
                [
                    "EigenSent",
                    "66.98",
                    "66.40",
                    "66.54",
                    "95.91",
                    "95.80",
                    "95.76",
                    "35.32",
                    "33.69",
                    "33.91"
                ],
                [
                    "EigenSent⊕Avg",
                    "[BOLD] 72.24",
                    "71.62",
                    "[ITALIC] 71.78",
                    "[BOLD] 97.18",
                    "[BOLD] 97.13",
                    "[BOLD] 97.14",
                    "[BOLD] 42.77",
                    "[BOLD] 41.67",
                    "[BOLD] 41.81"
                ],
                [
                    "c[k]",
                    "[ITALIC] 72.20",
                    "71.58",
                    "71.73",
                    "[ITALIC] 96.98",
                    "[ITALIC] 96.98",
                    "[ITALIC] 96.94",
                    "37.67",
                    "34.47",
                    "34.54"
                ]
            ]
        },
        "gold_description": "table 4 shows the best results for the various models as reported in kayal and tsat saronis ( 2019 ) , in addition to the best performance of our model denoted as c [ k ] . note that the dct - based model , dct * , described in kayal and tsatsaronis ( 2019 ) performed relatively poorly in all tasks , while our model achieved close to state - of - the - art performance in both the 20 - ng and r - 8 tasks . our model outperformed eignsent on all tasks and generally performed better than or on par with p - means , elmo , bert , and eigensent ⊕ avg on both the 20 - ng and r - 8 . on the other hand , both eigensent ⊕ avg and elmo performed better than all other models on sst - 5 .",
        "generated_description": "for the 20 - ng and sst - 5 datasets , our method outperforms the baselines by a large margin . for the r - 8 dataset , we do not observe significant difference between our method and p - means clustering , but note that the difference is not statistically significant . our method performs on par with the best baselines for the 20ng dataset and slightly worse for the sst dataset ."
    },
    {
        "table_id": "229",
        "table_info": {
            "table_caption": "Table 1: Coverage of words from the manual transcripts in the DSTC2 development set of different batch ASR output types (%). In the pruned cnet interjections and hypotheses with scores below 0.001 were removed.",
            "table_column_names": [
                "[EMPTY]",
                "1-best",
                "10-best",
                "cnet",
                "pruned cnet"
            ],
            "table_content_values": [
                [
                    "all words",
                    "69.3",
                    "78.6",
                    "85.7",
                    "83.1"
                ],
                [
                    "slots/values",
                    "69.8",
                    "75.6",
                    "82.4",
                    "80.6"
                ]
            ]
        },
        "gold_description": "as shown in table 1 , this does not discard too many correct hypotheses but markedly reduces the size of the cnet to an average of seven timesteps with two hypotheses .",
        "generated_description": "we can see that the accuracy of the pruned cnet is comparable to that of the cnet on the 1 - best and 10 - best batch asr output types . however , the coverage of slots / values is much lower than that of all words . this is because the number of slots and values in the dstc2 development set is much smaller than that in the original asr outputs , which means that it is easier for the asr model to learn to predict the correct slot / value if it had access to the full set of context words ."
    },
    {
        "table_id": "230",
        "table_info": {
            "table_caption": "Table 3: DSTC2 test set accuracy of ten runs with different random seeds in the format average maximumminimum. ⋆ denotes a statistically significant higher result than the baseline (p<0.05, Wilcoxon signed-rank test with Bonferroni correction for ten repeated comparisons). The cnet ensemble corresponds to the best cnet model with pruning threshold 0.001 and weighted pooling.",
            "table_column_names": [
                "[BOLD] method",
                "[BOLD] goals",
                "[BOLD] requests"
            ],
            "table_content_values": [
                [
                    "1-best baseline",
                    "63.6 66.658.7",
                    "96.8 97.196.5"
                ],
                [
                    "[ITALIC] cnet - no pruning",
                    "[ITALIC] cnet - no pruning",
                    "[ITALIC] cnet - no pruning"
                ],
                [
                    "weighted pooling",
                    "63.7 65.661.6",
                    "96.7 97.096.3"
                ],
                [
                    "[ITALIC] cnet - score threshold 0.001",
                    "[ITALIC] cnet - score threshold 0.001",
                    "[ITALIC] cnet - score threshold 0.001"
                ],
                [
                    "average pooling",
                    "63.7 66.460.0",
                    "96.6 96.896.0"
                ],
                [
                    "weighted pooling",
                    "[BOLD] 65.2 68.559.1",
                    "97.0 97.496.6"
                ],
                [
                    "[ITALIC] cnet - score threshold 0.01",
                    "[ITALIC] cnet - score threshold 0.01",
                    "[ITALIC] cnet - score threshold 0.01"
                ],
                [
                    "average pooling",
                    "64.6 67.959.7",
                    "96.9⋆ 97.296.5"
                ],
                [
                    "weighted pooling",
                    "64.7 68.462.2",
                    "[BOLD] 97.1⋆ 97.396.9"
                ],
                [
                    "[ITALIC] ensemble models",
                    "[ITALIC] ensemble models",
                    "[ITALIC] ensemble models"
                ],
                [
                    "baseline",
                    "69.7",
                    "96.7"
                ],
                [
                    "cnet",
                    "[BOLD] 71.4",
                    "[BOLD] 97.2"
                ],
                [
                    "[ITALIC] results from related work",
                    "[ITALIC] results from related work",
                    "[ITALIC] results from related work"
                ],
                [
                    "Vodolán et al. ( 2017 )",
                    "80.0",
                    "-"
                ],
                [
                    "Williams ( 2014 )",
                    "78.4",
                    "98.0"
                ],
                [
                    "Mrksic et al. ( 2017 )",
                    "73.4",
                    "96.5"
                ]
            ]
        },
        "gold_description": "table 3 displays the results for our model evaluated on cnets for increasingly aggressive pruning levels ( discarding only interjections , additionally discarding hypotheses with scores below 0 . 001 and 0 . 01 , respectively ) . as can be seen , using the full cnet except for interjections does not improve over the baseline . however , when pruning low - probability hypotheses both pooling strategies improve over the baseline . yet , average pooling performs worse for the lower pruning threshold , which shows that the model is still affected by noise among the hypotheses . weighted pooling performs better for the lower pruning threshold of 0 . 001 with which we obtain the highest result overall , improving the joint goals accuracy by 1 . 6 percentage points compared to the baseline . moreover , we see that an ensemble model that averages the predictions of ten cnet models trained with different random seeds also outperforms an ensemble of ten baseline models . our ensemble models outperform mrksic et al . ( 2017 ) for the joint requests but are a bit worse for the joint goals .",
        "generated_description": "the results show that weighted pooling and average pooling improve over the 1 - best baseline for all goals and all requests , and that both methods outperform the baseline with a large margin when the score threshold is 0 . 01 . the pruning technique improves the performance for the cnet without pruning , but not for the pruned cnet . this may be due to the fact that the pruning process increases the number of parameters that need to be pruned in order to reach the same level of accuracy ."
    },
    {
        "table_id": "231",
        "table_info": {
            "table_caption": "Table 2: DSTC2 test set accuracy for 1-best ASR outputs of ten runs with different random seeds in the format average maximumminimum.",
            "table_column_names": [
                "[BOLD] test data",
                "[BOLD] goals",
                "[BOLD] requests"
            ],
            "table_content_values": [
                [
                    "[ITALIC] train on transcripts + batch ASR (baseline)",
                    "[ITALIC] train on transcripts + batch ASR (baseline)",
                    "[ITALIC] train on transcripts + batch ASR (baseline)"
                ],
                [
                    "[ITALIC] batch ASR",
                    "63.6 66.658.7",
                    "96.8 97.196.5"
                ],
                [
                    "[ITALIC] train on transcripts + live ASR",
                    "[ITALIC] train on transcripts + live ASR",
                    "[ITALIC] train on transcripts + live ASR"
                ],
                [
                    "[ITALIC] live ASR",
                    "63.8 67.060.2",
                    "97.5 97.797.2"
                ],
                [
                    "transcripts",
                    "78.3 82.474.3",
                    "98.7 99.098.0"
                ]
            ]
        },
        "gold_description": "as can be seen from table 2 , the dst accuracy slightly increases for the higher - quality live asr outputs . more importantly , the dst performance drastically increases , when we evaluate on the manual transcripts that reflect the true user utterances nearly perfectly .",
        "generated_description": "the results show that training on transcripts + batch asr improves the accuracy of the baseline system by a large margin , from 63 . 6 % to 96 . 8 % when using batches of asr , and from 78 . 3 % to 78 . 2 % with live asr when using both batches and real human - annotated transcripts . this shows that our system is able to make use of the transcripts in order to improve the quality of the asr output ."
    },
    {
        "table_id": "232",
        "table_info": {
            "table_caption": "Table 2: Sentences/clauses after sentence splitting.",
            "table_column_names": [
                "[BOLD] Gold Class",
                "[BOLD] Train",
                "[BOLD] Dev",
                "[BOLD] Test"
            ],
            "table_content_values": [
                [
                    "None",
                    "15,401",
                    "3,905",
                    "4,141"
                ],
                [
                    "Obligation",
                    "11,005",
                    "2,860",
                    "970"
                ],
                [
                    "Prohibition",
                    "1,172",
                    "314",
                    "108"
                ],
                [
                    "Obligation List Intro",
                    "828",
                    "203",
                    "70"
                ],
                [
                    "Obligation List Item",
                    "2888",
                    "726",
                    "255"
                ],
                [
                    "Prohibition List Item",
                    "251",
                    "28",
                    "19"
                ],
                [
                    "[BOLD] Total",
                    "[BOLD] 31,545",
                    "[BOLD] 8,036",
                    "[BOLD] 5,563"
                ]
            ]
        },
        "gold_description": "fourth , we introduce finer classes ( tables 1 – 2 ) , which fit better the target task , where nested clauses are frequent . the splitter produced 31 , 545 training , 8 , 036 development , and 5 , 563 test sentences / clauses . 3 table 2 shows their distribution in the six gold ( correct ) classes . cf . table 2 ) ,",
        "generated_description": "in order to better understand the impact of sentence splitting , we break each sentence / clauses in our gold standard sentences into sentences and clauses , and evaluate the performance of the model on those sentences after sentence splitting . we find that the model performs best on sentences that are either none or obligation , with the exception of the ban list items , where the model does better on the dev and test sets ."
    },
    {
        "table_id": "233",
        "table_info": {
            "table_caption": "Table 1: Manually aligned News Commentary data.",
            "table_column_names": [
                "Ru",
                "Ja",
                "En",
                "#sent.",
                "Usage test",
                "Usage development"
            ],
            "table_content_values": [
                [
                    "✓",
                    "✓",
                    "✓",
                    "913",
                    "600",
                    "313"
                ],
                [
                    "✓",
                    "✓",
                    "[EMPTY]",
                    "173",
                    "-",
                    "173"
                ],
                [
                    "[EMPTY]",
                    "✓",
                    "✓",
                    "276",
                    "-",
                    "276"
                ],
                [
                    "✓",
                    "[EMPTY]",
                    "✓",
                    "0",
                    "-",
                    "-"
                ],
                [
                    "✓",
                    "[EMPTY]",
                    "[EMPTY]",
                    "4",
                    "-",
                    "-"
                ],
                [
                    "[EMPTY]",
                    "✓",
                    "[EMPTY]",
                    "287",
                    "-",
                    "-"
                ],
                [
                    "[EMPTY]",
                    "[EMPTY]",
                    "✓",
                    "1",
                    "-",
                    "-"
                ],
                [
                    "Total",
                    "Total",
                    "Total",
                    "1,654",
                    "-",
                    "-"
                ]
            ]
        },
        "gold_description": "as a result , we obtained 1 , 654 lines of data comprising trilingual , bilingual , and monolingual segments ( mainly sentences ) as summarized in table 1 . finally , for the sake of comparability , we randomly chose 600 trilingual sentences to create a test set , and concatenated the rest of them and bilingual sentences to form development sets .",
        "generated_description": "in order to evaluate the impact of each component of our system on the overall performance , we perform an ablation study on the manually aligned news commentary dataset . this dataset contains 1 , 654 sentence pairs for english , japanese and french translations of news articles from the new york times ( nyt ) and bbc ( bbc1 / bbc2 ) . the source sentences are aligned using the sentence alignment method proposed by \\ newcitedblp : journals / corr / abs - 1809 - 0686 and the cross - lingual alignments are performed using the bpe - based alignment method of \\ newciteluong - etal : 2014 : acl - ijcnlp . we use the development data to evaluate our system and the test data for evaluating the performance ."
    },
    {
        "table_id": "234",
        "table_info": {
            "table_caption": "Table 3: Precision, recall, f1, and auc scores, with the best results in bold and gray background.",
            "table_column_names": [
                "[BOLD] Gold Class",
                "[BOLD] bilstm P",
                "[BOLD] bilstm R",
                "[BOLD] bilstm F1",
                "[BOLD] bilstm AUC",
                "[BOLD] bilstm-att P",
                "[BOLD] bilstm-att R",
                "[BOLD] bilstm-att F1",
                "[BOLD] bilstm-att AUC",
                "[BOLD] x-bilstm-att P",
                "[BOLD] x-bilstm-att R",
                "[BOLD] x-bilstm-att F1",
                "[BOLD] x-bilstm-att AUC",
                "[BOLD] h-bilstm-att P",
                "[BOLD] h-bilstm-att R",
                "[BOLD] h-bilstm-att F1",
                "[BOLD] h-bilstm-att AUC"
            ],
            "table_content_values": [
                [
                    "None",
                    "0.95",
                    "0.91",
                    "0.93",
                    "0.98",
                    "0.97",
                    "0.90",
                    "0.93",
                    "[BOLD] 0.99",
                    "0.96",
                    "0.90",
                    "0.93",
                    "0.98",
                    "[BOLD] 0.98",
                    "[BOLD] 0.96",
                    "[BOLD] 0.97",
                    "[BOLD] 0.99"
                ],
                [
                    "Obligation",
                    "0.75",
                    "0.85",
                    "0.79",
                    "0.86",
                    "0.75",
                    "0.88",
                    "0.81",
                    "0.86",
                    "0.75",
                    "0.87",
                    "0.81",
                    "0.88",
                    "[BOLD] 0.87",
                    "[BOLD] 0.92",
                    "[BOLD] 0.90",
                    "[BOLD] 0.96"
                ],
                [
                    "Prohibition",
                    "0.67",
                    "0.62",
                    "0.64",
                    "0.75",
                    "0.74",
                    "0.75",
                    "0.74",
                    "0.80",
                    "0.65",
                    "0.75",
                    "0.70",
                    "0.74",
                    "[BOLD] 0.84",
                    "[BOLD] 0.83",
                    "[BOLD] 0.84",
                    "[BOLD] 0.90"
                ],
                [
                    "Obl. List Begin",
                    "0.70",
                    "0.86",
                    "0.77",
                    "0.81",
                    "0.71",
                    "0.85",
                    "0.77",
                    "0.83",
                    "0.72",
                    "0.75",
                    "0.74",
                    "0.80",
                    "[BOLD] 0.90",
                    "[BOLD] 0.89",
                    "[BOLD] 0.89",
                    "[BOLD] 0.93"
                ],
                [
                    "Obl. List Item",
                    "0.53",
                    "0.66",
                    "0.59",
                    "0.64",
                    "0.48",
                    "0.70",
                    "0.57",
                    "0.60",
                    "0.49",
                    "0.78",
                    "0.60",
                    "0.66",
                    "[BOLD] 0.85",
                    "[BOLD] 0.94",
                    "[BOLD] 0.89",
                    "[BOLD] 0.94"
                ],
                [
                    "Proh. List Item",
                    "0.59",
                    "0.35",
                    "0.43",
                    "0.50",
                    "0.61",
                    "0.55",
                    "0.59",
                    "0.62",
                    "[BOLD] 0.83",
                    "0.50",
                    "0.62",
                    "0.67",
                    "0.80",
                    "[BOLD] 0.84",
                    "[BOLD] 0.82",
                    "[BOLD] 0.92"
                ],
                [
                    "[BOLD] Macro-average",
                    "0.70",
                    "0.70",
                    "0.70",
                    "0.74",
                    "0.73",
                    "0.78",
                    "0.74",
                    "0.78",
                    "0.73",
                    "0.76",
                    "0.73",
                    "0.79",
                    "[BOLD] 0.87",
                    "[BOLD] 0.90",
                    "[BOLD] 0.89",
                    "[BOLD] 0.94"
                ],
                [
                    "[BOLD] Micro-average",
                    "0.90",
                    "0.88",
                    "0.88",
                    "0.94",
                    "0.90",
                    "0.88",
                    "0.89",
                    "0.96",
                    "0.90",
                    "0.88",
                    "0.89",
                    "0.94",
                    "[BOLD] 0.95",
                    "[BOLD] 0.95",
                    "[BOLD] 0.95",
                    "[BOLD] 0.98"
                ]
            ]
        },
        "gold_description": "table 3 reports the precision , recall , f1 score , area under the precision - recall curve ( auc ) per class , as well as micro - and macro - averages . the self - attention mechanism ( bilstm - att ) leads to clear overall improvements ( in macro and micro f1 and auc , table 3 ) comparing to the plain bilstm , supporting the hypothesis that selfattention allows the classifier to focus on indicative tokens . allowing the bilstm to consider tokens of neighboring sentences ( x - bilstm - att ) does not lead to any clear overall improvements . the hierarchical h - bilstm - att clearly outperforms the other three methods , supporting the hypothesis that considering entire sections and allowing the sentence embeddings to interact in the upper bilstm ( fig . 3 ) is beneficial .",
        "generated_description": "we evaluate the performance of the classifiers on the held - out test set , which is a subset of the gold - standard training set , in order to better understand their behaviour on the dev set . the classifiers are evaluated on the subset of tweets that contain at least one of the above - mentioned semantic types , namely obligation and obfuscation . the best performance is achieved by the x - bilstm - att classifier , with an f1 - score of 0 . 93 and an auc of 0 . , outperforming the baseline by 0 . 01 and 0 . 07 for bilstm and x - btc respectively . the x - bc classifier outperforms the bilstm classifier in terms of auc , achieving 0 . 99 . the h - bert classifier also performs better than the baseline , obtaining 0 . 98 auc . the results show that the attention - based classifiers outperform the baseline in predicting the presence of any semantic types in the tweets , regardless of whether they are annotated by humans or not ."
    },
    {
        "table_id": "235",
        "table_info": {
            "table_caption": "Table 8: BLEU scores of M2M Transformer NMT systems trained on the mixture of given parallel corpus and pseudo-parallel data generated by back-translation using (b3). Six “X∗→Y” columns show whether the pseudo-parallel data for each translation direction is involved. Bold indicates the scores higher than (b3) and “∙” indicates statistical significance of the improvement.",
            "table_column_names": [
                "ID",
                "Pseudo-parallel data involved Ja∗→Ru",
                "Pseudo-parallel data involved Ru∗→Ja",
                "Pseudo-parallel data involved Ja∗→En",
                "Pseudo-parallel data involved En∗→Ja",
                "Pseudo-parallel data involved Ru∗→En",
                "Pseudo-parallel data involved En∗→Ru",
                "BLEU score Ja→Ru",
                "BLEU score Ru→Ja",
                "BLEU score Ja→En",
                "BLEU score En→Ja",
                "BLEU score Ru→En",
                "BLEU score En→Ru"
            ],
            "table_content_values": [
                [
                    "(b3)",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "3.72",
                    "8.35",
                    "10.24",
                    "12.43",
                    "22.10",
                    "16.92"
                ],
                [
                    "#1",
                    "✓",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "∙ [BOLD] 4.59",
                    "[BOLD] 8.63",
                    "[BOLD] 10.64",
                    "[BOLD] 12.94",
                    "[BOLD] 22.21",
                    "[BOLD] 17.30"
                ],
                [
                    "#2",
                    "-",
                    "✓",
                    "-",
                    "-",
                    "-",
                    "-",
                    "[BOLD] 3.74",
                    "∙ [BOLD] 8.85",
                    "10.13",
                    "[BOLD] 13.05",
                    "[BOLD] 22.48",
                    "[BOLD] 17.20"
                ],
                [
                    "#3",
                    "✓",
                    "✓",
                    "-",
                    "-",
                    "-",
                    "-",
                    "∙ [BOLD] 4.56",
                    "∙ [BOLD] 9.09",
                    "[BOLD] 10.57",
                    "∙ [BOLD] 13.23",
                    "[BOLD] 22.48",
                    "∙ [BOLD] 17.89"
                ],
                [
                    "2-13 #4",
                    "-",
                    "-",
                    "✓",
                    "-",
                    "-",
                    "-",
                    "3.71",
                    "8.05",
                    "∙ [BOLD] 11.00",
                    "[BOLD] 12.66",
                    "[BOLD] 22.17",
                    "16.76"
                ],
                [
                    "#5",
                    "-",
                    "-",
                    "-",
                    "✓",
                    "-",
                    "-",
                    "3.62",
                    "8.10",
                    "9.92",
                    "∙ [BOLD] 14.06",
                    "21.66",
                    "16.68"
                ],
                [
                    "#6",
                    "-",
                    "-",
                    "✓",
                    "✓",
                    "-",
                    "-",
                    "3.61",
                    "7.94",
                    "∙ [BOLD] 11.51",
                    "∙ [BOLD] 14.38",
                    "[BOLD] 22.22",
                    "16.80"
                ],
                [
                    "2-13 #7",
                    "-",
                    "-",
                    "-",
                    "-",
                    "✓",
                    "-",
                    "[BOLD] 3.80",
                    "[BOLD] 8.37",
                    "[BOLD] 10.67",
                    "[BOLD] 13.00",
                    "[BOLD] 22.51",
                    "∙ [BOLD] 17.73"
                ],
                [
                    "#8",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "✓",
                    "[BOLD] 3.77",
                    "8.04",
                    "[BOLD] 10.52",
                    "12.43",
                    "∙ [BOLD] 22.85",
                    "[BOLD] 17.13"
                ],
                [
                    "#9",
                    "-",
                    "-",
                    "-",
                    "-",
                    "✓",
                    "✓",
                    "3.37",
                    "8.03",
                    "10.19",
                    "[BOLD] 12.79",
                    "[BOLD] 22.77",
                    "[BOLD] 17.26"
                ],
                [
                    "2-13 #10",
                    "✓",
                    "✓",
                    "✓",
                    "✓",
                    "✓",
                    "✓",
                    "∙ [BOLD] 4.43",
                    "∙ [BOLD] 9.38",
                    "∙ [BOLD] 12.06",
                    "∙ [BOLD] 14.43",
                    "∙ [BOLD] 23.09",
                    "[BOLD] 17.30"
                ]
            ]
        },
        "gold_description": "table 8 shows the bleu scores achieved by several reasonable combinations of six - way pseudo - parallel data . we observed that the use of all six - way pseudo - parallel data ( # 10 ) significantly improved the base model for all the translation directions , except en → ru . a translation direction often benefited when the pseudo - parallel data for that specific direction was used . however , the resulting bleu scores for ja → ru and ru → ja tasks do not exceed 10 bleu points , implying the inherent limitation of the in - domain data as well as the difficulty of these translation directions . models of our multistage fine - tuning , i . e . , v and vii , achieved significantly higher bleu scores than ( b3 ) in table 5 , a weak baseline without using any monolingual data , and # 10 in table 8 , a strong baseline established with monolingual data .",
        "generated_description": "we can see that when the parallel data involved in the same language pair ( ja ∗ → ja , en → ja ) as the target language pair , the bilingual model achieved the best bleu score ( rows ( b3 ) v . s . ( b2 ) and ( b4 ) ) . when the same parallel data was used in the reverse direction ( ja → en and en → ru ) , bilingual model ( row ( b1 ) ) achieved better results than the baseline model ( rows ( b3 ) , ( b2 ) ) and ( c3 ) ) . the bilingual model that was trained with the same data as the source language was still better than the model trained with pseudo - parallel data . when the data was translated from english to ru ↔ ja , we got the best results when the model was trained and tested on the same source and target language pairs ."
    },
    {
        "table_id": "236",
        "table_info": {
            "table_caption": "Table 2: Accuracies (%) on few-shot DA. “On 1.0” represents the results on the original FewRel dataset and “On 2.0” represents the results on the new test set. The models with “-ADV” use adversarial training described in Section 3.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] 5-Way 1-Shot  [BOLD] On 1.0",
                "[BOLD] 5-Way 1-Shot  [BOLD] On 2.0",
                "[BOLD] 5-Way 5-Shot  [BOLD] On 1.0",
                "[BOLD] 5-Way 5-Shot  [BOLD] On 2.0"
            ],
            "table_content_values": [
                [
                    "GNN (CNN)",
                    "66.23±0.75",
                    "27.94±0.03",
                    "81.28±0.62",
                    "29.33±0.11"
                ],
                [
                    "Proto (CNN)",
                    "74.52±0.07",
                    "35.09±0.10",
                    "88.40±0.06",
                    "49.37±0.10"
                ],
                [
                    "Proto-ADV (CNN)",
                    "70.28±0.15",
                    "42.21±0.09",
                    "84.63±0.07",
                    "58.71±0.06"
                ],
                [
                    "Proto (BERT)",
                    "80.68±0.28",
                    "40.12±0.19",
                    "89.60±0.09",
                    "51.50±0.29"
                ],
                [
                    "Proto-ADV (BERT)",
                    "73.35±0.95",
                    "41.90±0.44",
                    "82.30±0.53",
                    "54.74±0.22"
                ],
                [
                    "BERT-PAIR",
                    "88.32±0.64",
                    "56.25±0.40",
                    "93.22±0.13",
                    "67.44±0.54"
                ],
                [
                    "[BOLD] Model",
                    "[BOLD] 10-Way 1-Shot",
                    "[BOLD] 10-Way 1-Shot",
                    "[BOLD] 10-Way 5-Shot",
                    "[BOLD] 10-Way 5-Shot"
                ],
                [
                    "[BOLD] Model",
                    "[BOLD] On 1.0",
                    "[BOLD] On 2.0",
                    "[BOLD] On 1.0",
                    "[BOLD] On 2.0"
                ],
                [
                    "GNN (CNN)",
                    "46.27±0.80",
                    "16.44±0.04",
                    "64.02±0.77",
                    "18.26±0.03"
                ],
                [
                    "Proto (CNN)",
                    "62.38±0.06",
                    "22.98±0.05",
                    "80.45±0.08",
                    "35.22±0.06"
                ],
                [
                    "Proto-ADV (CNN)",
                    "56.34±0.08",
                    "28.91±0.10",
                    "74.67±0.12",
                    "44.35±0.09"
                ],
                [
                    "Proto (BERT)",
                    "71.48±0.15",
                    "26.45±0.10",
                    "82.89±0.11",
                    "36.93±0.01"
                ],
                [
                    "Proto-ADV (BERT)",
                    "61.49±0.69",
                    "27.36±0.50",
                    "72.60±0.38",
                    "37.40±0.36"
                ],
                [
                    "BERT-PAIR",
                    "80.63±0.17",
                    "43.64±0.46",
                    "87.02±0.12",
                    "53.17±0.09"
                ]
            ]
        },
        "gold_description": "table 2 demonstrates the evaluation results of few - shot da on the existing fewrel test set and the new test set . ( 1 ) all few - shot models suffer dramatic perfor mance falls when tested on a different domain . ( 2 ) adversarial training does improve the results on the new test domain , yet still has large space for growth . ( 3 ) bert - pair outperforms all other few - shot models on both 1 . 0 and 2 . 0 test set .",
        "generated_description": "results on 1 - shot and 5 - shot classification . we can see that our method outperforms all the baselines in all the settings . in particular , our method improves the performance of bert - pair by a large margin in the 5 - way 1 - shot case , which demonstrates the effectiveness of our method on small - scale datasets . in addition , we can also see that adv - based methods ( proto and proto - adv ) outperform the bert based methods in most settings ."
    },
    {
        "table_id": "237",
        "table_info": {
            "table_caption": "Table 3: Accuracies (%) on few-shot NOTA. Models with * simply ignore the NOTA setting and assume all queries can be classified as one of the given relations.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] 5-Way-1-Shot  [BOLD] 0% NOTA",
                "[BOLD] 5-Way-1-Shot  [BOLD] 15% NOTA",
                "[BOLD] 5-Way-1-Shot  [BOLD] 30% NOTA",
                "[BOLD] 5-Way-1-Shot  [BOLD] 50% NOTA"
            ],
            "table_content_values": [
                [
                    "Proto (CNN)*",
                    "74.52±0.07",
                    "62.18±0.22",
                    "53.38±0.14",
                    "37.26±0.04"
                ],
                [
                    "Proto (CNN)",
                    "69.17±0.07",
                    "60.59±0.05",
                    "53.18±0.12",
                    "40.00±0.10"
                ],
                [
                    "Proto (BERT)*",
                    "80.68±0.28",
                    "67.92±0.31",
                    "58.22±0.20",
                    "40.64±0.14"
                ],
                [
                    "Proto (BERT)",
                    "81.65±0.97",
                    "70.02±0.23",
                    "61.08±0.28",
                    "45.94±0.50"
                ],
                [
                    "BERT-PAIR*",
                    "88.32±0.64",
                    "73.60±0.51",
                    "63.00±0.47",
                    "43.99±0.09"
                ],
                [
                    "BERT-PAIR",
                    "76.73±0.55",
                    "77.67±0.14",
                    "78.49±0.21",
                    "80.31±0.12"
                ]
            ]
        },
        "gold_description": "all models are trained given 50 % nota queries and tested under four different nota rates : 0 % , 15 % , 30 % , 50 % . for detailed numbers of results on fewshot nota , please refer to table 3 . ( 1 ) treating nota as the + 1 relation is beneficial for handling few - shot nota , though the results still fall fast when the nota rate increases . ( 2 ) bert - pair works better under the nota setting for its binary - classification style model , and stays stable with rising nota rate . ( 3 ) though bert - pair achieves promising results , huge gaps still exist between the conventional ( 0 % nota rate ) and nota settings ( gaps of 8 points for 5 - way 1 - shot and 7 points for 5way 5 - shot with 50 % nota rate ) , which calls for further research to address the challenge .",
        "generated_description": "the proto ( cnn ) and proto ( bert ) models are fine - tuned on the 5 - way - 1 - shot classification task . the bert - pair model is pre - trained on the large - scale unlabeled dataset , and the results are evaluated on the small - scale dataset , nota . we can see that the proto models significantly outperform the corresponding proto models in all the settings , which demonstrates the effectiveness of the proto pre - training framework . in addition , we can also see that our proposed method significantly outperforms the bert model , which shows that our method can also benefit from fine - grained classification tasks ."
    },
    {
        "table_id": "238",
        "table_info": {
            "table_caption": "Table 2: Performance analysis of entity classification methods on the three datasets.",
            "table_column_names": [
                "Typing methods",
                "Wiki/Figer(gold) Acc.",
                "Wiki/Figer(gold) Ma-F1",
                "Wiki/Figer(gold) Mi-F1",
                "OntoNotes Acc.",
                "OntoNotes Ma-F1",
                "OntoNotes Mi-F1",
                "BBN Acc.",
                "BBN Ma-F1",
                "BBN Mi-F1"
            ],
            "table_content_values": [
                [
                    "[BOLD] FIGER* ",
                    "0.474",
                    "0.692",
                    "0.655",
                    "0.369",
                    "0.578",
                    "0.516",
                    "0.467",
                    "0.672",
                    "0.612"
                ],
                [
                    "[BOLD] HYENA* ",
                    "0.288",
                    "0.528",
                    "0.506",
                    "0.249",
                    "0.497",
                    "0.446",
                    "0.523",
                    "0.576",
                    "0.587"
                ],
                [
                    "[BOLD] AFET-NoCo* ",
                    "0.526",
                    "0.693",
                    "0.654",
                    "0.486",
                    "0.652",
                    "0.594",
                    "0.655",
                    "0.711",
                    "0.716"
                ],
                [
                    "[BOLD] AFET-CoH* ",
                    "0.433",
                    "0.583",
                    "0.551",
                    "0.521",
                    "0.680",
                    "0.609",
                    "0.657",
                    "0.703",
                    "0.712"
                ],
                [
                    "[BOLD] AFET* ",
                    "0.533",
                    "0.693",
                    "0.664",
                    "0.551",
                    "0.711",
                    "0.647",
                    "0.670",
                    "0.727",
                    "0.735"
                ],
                [
                    "[BOLD] AFET†‡ ",
                    "0.509",
                    "0.689",
                    "0.653",
                    "[BOLD] 0.553",
                    "[BOLD] 0.712",
                    "[BOLD] 0.646",
                    "0.683",
                    "0.744",
                    "0.747"
                ],
                [
                    "[BOLD] Attentive† ",
                    "0.581",
                    "0.780",
                    "0.744",
                    "0.473",
                    "0.655",
                    "0.586",
                    "0.484",
                    "0.732",
                    "0.724"
                ],
                [
                    "[BOLD] our-AllC†",
                    "[BOLD] 0.662",
                    "0.805",
                    "0.770",
                    "0.514",
                    "0.672",
                    "0.626",
                    "0.655",
                    "0.736",
                    "0.752"
                ],
                [
                    "[BOLD] our-NoM†",
                    "0.646",
                    "0.808",
                    "0.768",
                    "0.521",
                    "0.683",
                    "0.626",
                    "0.615",
                    "0.742",
                    "0.755"
                ],
                [
                    "[BOLD] our†",
                    "0.658",
                    "[BOLD] 0.812",
                    "[BOLD] 0.774",
                    "0.522",
                    "0.685",
                    "0.633",
                    "0.604",
                    "0.741",
                    "0.757"
                ],
                [
                    "[BOLD] model level transfer-learning†",
                    "-",
                    "-",
                    "-",
                    "0.531",
                    "0.684",
                    "0.637",
                    "0.645",
                    "0.784",
                    "[BOLD] 0.795"
                ],
                [
                    "[BOLD] feature level transfer-learning†",
                    "-",
                    "-",
                    "-",
                    "0.471",
                    "0.689",
                    "0.635",
                    "[BOLD] 0.733",
                    "[BOLD] 0.791",
                    "0.792"
                ]
            ]
        },
        "gold_description": "these results are shown in table 2 as feature level transfer - learning . these results are shown in table 2 as model level transfer learning . table 2 shows the results of the proposed method , its variants and the baseline methods .",
        "generated_description": "overall , our method outperforms the state - of - the - art methods with respect to all evaluation metrics on all three datasets , which demonstrates the effectiveness of our proposed method . in particular , our model achieves the best performance on the multi - label f1 score ( i . e . , mi - f1 ) on the ontonotes dataset and the best on the wiki / figer dataset with gold data ."
    },
    {
        "table_id": "239",
        "table_info": {
            "table_caption": "Table 4: Performance analysis of the proposed model and AFET on top 10 (in terms of type frequency) types present in OntoNotes dataset.",
            "table_column_names": [
                "Label type",
                "Support",
                "our Prec.",
                "our Rec.",
                "our F-1",
                "AFET Prec.",
                "AFET Rec.",
                "AFET F-1"
            ],
            "table_content_values": [
                [
                    "[ITALIC] /other",
                    "42.6%",
                    "0.838",
                    "0.809",
                    "0.823",
                    "0.774",
                    "0.962",
                    "[BOLD] 0.858"
                ],
                [
                    "[ITALIC] /organization",
                    "11.0%",
                    "0.588",
                    "0.490",
                    "[BOLD] 0.534",
                    "0.903",
                    "0.273",
                    "0.419"
                ],
                [
                    "[ITALIC] /person",
                    "9.9%",
                    "0.559",
                    "0.467",
                    "[BOLD] 0.508",
                    "0.669",
                    "0.352",
                    "0.461"
                ],
                [
                    "[ITALIC] /organization/company",
                    "7.8%",
                    "0.932",
                    "0.166",
                    "[BOLD] 0.282",
                    "1.0",
                    "0.127",
                    "0.225"
                ],
                [
                    "[ITALIC] /location",
                    "7.5%",
                    "0.687",
                    "0.796",
                    "[BOLD] 0.737",
                    "0.787",
                    "0.609",
                    "0.687"
                ],
                [
                    "[ITALIC] /organization/government",
                    "2.1%",
                    "0",
                    "0",
                    "0",
                    "0",
                    "0",
                    "0"
                ],
                [
                    "[ITALIC] /location/country",
                    "2.0%",
                    "0.783",
                    "0.614",
                    "[BOLD] 0.688",
                    "0.838",
                    "0.498",
                    "0.625"
                ],
                [
                    "[ITALIC] /other/legal",
                    "1.8%",
                    "0",
                    "0",
                    "0",
                    "0",
                    "0",
                    "0"
                ],
                [
                    "[ITALIC] /location/city",
                    "1.8%",
                    "0.919",
                    "0.610",
                    "[BOLD] 0.733",
                    "0.816",
                    "0.637",
                    "0.715"
                ],
                [
                    "[ITALIC] /person/political_figure",
                    "1.6%",
                    "0",
                    "0",
                    "0",
                    "0",
                    "0",
                    "0"
                ]
            ]
        },
        "gold_description": "results are shown in table 4 . compared to afet , the proposed model performs better in all types except other in the top - 10 frequent types .",
        "generated_description": "we can see that afet outperforms our model on all labels except for “ organization / company ” and “ location ” , where our model achieves a slightly lower f - 1 score . this may be due to the fact that the amount of training data for these labels is much smaller than the ones for other labels , which makes it less likely to overfit ."
    },
    {
        "table_id": "240",
        "table_info": {
            "table_caption": "Table 2: Performance of different approaches in relation to the average cosine similarity of words associated with a property (cos). The last row shows the Spearman Rank correlation between f1-scores and average cosine similarity. Property types are listed under type (p = part, vp = visual-perceptual, op = other-perceptual, e = encyclopaedic, f = functional, t = taxonomic).",
            "table_column_names": [
                "feature",
                "cos",
                "f1-neigh",
                "f1-lr",
                "f1-net",
                "type"
            ],
            "table_content_values": [
                [
                    "is_heavy",
                    "0.15",
                    "0.15",
                    "0.17",
                    "0.21",
                    "op"
                ],
                [
                    "is_strong",
                    "0.15",
                    "0.13",
                    "0.13",
                    "0.34",
                    "e"
                ],
                [
                    "is_thin",
                    "0.16",
                    "0",
                    "0.05",
                    "0.1",
                    "vp"
                ],
                [
                    "is_hard",
                    "0.16",
                    "0.15",
                    "0.08",
                    "0.26",
                    "op"
                ],
                [
                    "is_expensive",
                    "0.16",
                    "0",
                    "0.28",
                    "0.37",
                    "e"
                ],
                [
                    "…",
                    "…",
                    "…",
                    "…",
                    "…",
                    "[EMPTY]"
                ],
                [
                    "is_black",
                    "0.2",
                    "0.29",
                    "0.23",
                    "0.24",
                    "vp"
                ],
                [
                    "is_electric",
                    "0.21",
                    "0.48",
                    "0.5",
                    "0.69",
                    "vp"
                ],
                [
                    "is_dangerous",
                    "0.21",
                    "0.53",
                    "0.57",
                    "0.59",
                    "e"
                ],
                [
                    "is_colourful",
                    "0.21",
                    "0.14",
                    "0.25",
                    "0.32",
                    "vp"
                ],
                [
                    "is_brown",
                    "0.21",
                    "0.13",
                    "0.22",
                    "0.33",
                    "vp"
                ],
                [
                    "has_a_handle _handles",
                    "0.22",
                    "0.44",
                    "0.57",
                    "0.58",
                    "p"
                ],
                [
                    "has_a_seat _seats",
                    "0.22",
                    "0.43",
                    "0.3",
                    "0.48",
                    "p"
                ],
                [
                    "does_smell _is_smelly",
                    "0.22",
                    "0.08",
                    "0.15",
                    "0.37",
                    "op"
                ],
                [
                    "made_of_glass",
                    "0.22",
                    "0.29",
                    "0",
                    "0.28",
                    "vp"
                ],
                [
                    "has_a_point",
                    "0.23",
                    "0.38",
                    "0.23",
                    "0.47",
                    "p"
                ],
                [
                    "does_protect",
                    "0.24",
                    "0.38",
                    "0.26",
                    "0.37",
                    "f"
                ],
                [
                    "is_yellow",
                    "0.24",
                    "0.22",
                    "0",
                    "0.23",
                    "vp"
                ],
                [
                    "is_soft",
                    "0.24",
                    "0.12",
                    "0",
                    "0.16",
                    "op"
                ],
                [
                    "is_red",
                    "0.25",
                    "0.34",
                    "0.13",
                    "0.27",
                    "vp"
                ],
                [
                    "is_fast",
                    "0.25",
                    "0.3",
                    "0.31",
                    "0.48",
                    "vp"
                ],
                [
                    "is_tall",
                    "0.25",
                    "0.43",
                    "0.57",
                    "0.65",
                    "vp"
                ],
                [
                    "is_a_tool",
                    "0.26",
                    "0.5",
                    "0.51",
                    "0.47",
                    "t"
                ],
                [
                    "…",
                    "…",
                    "…",
                    "…",
                    "…",
                    "[EMPTY]"
                ],
                [
                    "is_a_weapon",
                    "0.3",
                    "0.74",
                    "0.56",
                    "0.63",
                    "t"
                ],
                [
                    "is_green",
                    "0.31",
                    "0.45",
                    "0.45",
                    "0.45",
                    "vp"
                ],
                [
                    "has_a_ blade_blades",
                    "0.32",
                    "0.68",
                    "0.65",
                    "0.74",
                    "p"
                ],
                [
                    "is_worn",
                    "0.32",
                    "0.47",
                    "0.86",
                    "0.9",
                    "f"
                ],
                [
                    "has_wheels",
                    "0.32",
                    "0.82",
                    "0.83",
                    "0.87",
                    "p"
                ],
                [
                    "is_found _in_kitchens",
                    "0.33",
                    "0.56",
                    "0.73",
                    "0.76",
                    "e"
                ],
                [
                    "does_fly",
                    "0.33",
                    "0.57",
                    "0.76",
                    "0.76",
                    "f"
                ],
                [
                    "has_a_tail",
                    "0.33",
                    "0.53",
                    "0.68",
                    "0.69",
                    "p"
                ],
                [
                    "is_an_animal",
                    "0.33",
                    "0.64",
                    "0.76",
                    "0.78",
                    "t"
                ],
                [
                    "is_eaten_edible",
                    "0.33",
                    "0.37",
                    "0.88",
                    "0.85",
                    "f"
                ],
                [
                    "has_four_legs",
                    "0.34",
                    "0.67",
                    "0.66",
                    "0.66",
                    "p"
                ],
                [
                    "is_a_vehicle",
                    "0.34",
                    "0.76",
                    "0.69",
                    "0.79",
                    "t"
                ],
                [
                    "does_eat",
                    "0.34",
                    "0.68",
                    "0.71",
                    "0.68",
                    "f"
                ],
                [
                    "…",
                    "…",
                    "…",
                    "…",
                    "…",
                    "[EMPTY]"
                ],
                [
                    "has_a_beak",
                    "0.37",
                    "0.63",
                    "0.83",
                    "0.87",
                    "p"
                ],
                [
                    "made_of_cotton",
                    "0.37",
                    "0.68",
                    "0.56",
                    "0.64",
                    "vp"
                ],
                [
                    "has_roots",
                    "0.37",
                    "0.3",
                    "0.65",
                    "0.72",
                    "p"
                ],
                [
                    "is_a_mammal",
                    "0.37",
                    "0.69",
                    "0.85",
                    "0.86",
                    "t"
                ],
                [
                    "does_grow",
                    "0.37",
                    "0.52",
                    "0.81",
                    "0.81",
                    "e"
                ],
                [
                    "is_a_plant",
                    "0.37",
                    "0.43",
                    "0.63",
                    "0.64",
                    "t"
                ],
                [
                    "has_leaves",
                    "0.37",
                    "0.41",
                    "0.71",
                    "0.78",
                    "p"
                ],
                [
                    "…",
                    "…",
                    "…",
                    "…",
                    "…",
                    "[EMPTY]"
                ],
                [
                    "has_pips_seeds",
                    "0.47",
                    "0.5",
                    "0.08",
                    "0.46",
                    "p"
                ],
                [
                    "is_juicy",
                    "0.5",
                    "0.71",
                    "0.48",
                    "0.56",
                    "op"
                ],
                [
                    "is_a_vegetable",
                    "0.52",
                    "0.78",
                    "0.75",
                    "0.81",
                    "t"
                ],
                [
                    "is_played _does_play",
                    "0.53",
                    "0.9",
                    "0.98",
                    "0.98",
                    "f"
                ],
                [
                    "does_make_music",
                    "0.55",
                    "0.89",
                    "0.95",
                    "0.92",
                    "f"
                ],
                [
                    "spearman-r",
                    "[EMPTY]",
                    "0.72",
                    "0.52",
                    "0.59",
                    "[EMPTY]"
                ]
            ]
        },
        "gold_description": "table 2 shows a selection of the f1 - scores achieved on properties in the cslb dataset in relation to the average cosine similarity of the associated words . a high average cosine similarity means that the concepts overall have similar vector representations and can thus be seen as having a low diversity . the results of the spearman rank correlation clearly indicate that scores achieved by nearest neighbors correlate more strongly with the average cosine than the two supervised classification approaches .",
        "generated_description": "the best performance is achieved by f1 - neigh with a cosine similarity score of 0 . 15 for the feature is_heavy , 0 . 16 for is_strong , and 0 . 13 for the other features . the best score is obtained for the features is_blightgrey , is_black , and is_electric , with 0 . 21 , 0 . 21 respectively . in general , the best score for each feature is obtained by one of the three f1 classifiers ( i . e . , cosine , f1 − neigh , or f1 - lr ) . the best overall performance is obtained using f1 , with the cosine and the linear combination of f1 and cosine giving the best results ."
    },
    {
        "table_id": "241",
        "table_info": {
            "table_caption": "Table 4: Training times and parameters to learn.",
            "table_column_names": [
                "[BOLD] Network",
                "[BOLD] Training Time",
                "[BOLD] Parameters"
            ],
            "table_content_values": [
                [
                    "[BOLD] bilstm",
                    "5h 30m",
                    "1,278M"
                ],
                [
                    "[BOLD] bilstm-att",
                    "8h 30m",
                    "1,279M"
                ],
                [
                    "[BOLD] x-bilstm-att",
                    "25h 40m",
                    "1,279M"
                ],
                [
                    "[BOLD] h-bilstm-att",
                    "2h 30m",
                    "1,837M"
                ]
            ]
        },
        "gold_description": "h - bilstm - att is also much faster to train than bilstm and bilstm - att ( table 4 ) , even though it has more parameters , because it converges faster ( 5 - 7 epochs vs . 12 - 15 ) .",
        "generated_description": "the bilstm network was trained for 5h 30m epochs using adam with a learning rate of 0 . 001 , with a batch size of 32 . all other networks were trained for 8 hours . for the x - bilstm - att network , we used the same learning rate schedule as in the previous section , but decreased the learning rate by a factor of 10 at epoch 25h 40m and we found that this improved performance was not enough to train for longer than 2h30m . we also compared the performance of h - btlm and x - bertlm when trained for longer epochs , but found that longer training times did not improve performance ."
    },
    {
        "table_id": "242",
        "table_info": {
            "table_caption": "Table 4: F1 scores achieved by logistic regression (lr) two runs of a neural net classifier (net1 and net2 and the n-best nearest neighbors evaluated with leave-one-out on the full datasets (marked as full_ and the crow-only sets (marked as crowd_).",
            "table_column_names": [
                "property",
                "av-cos",
                "neigh",
                "lr",
                "net1",
                "net2"
            ],
            "table_content_values": [
                [
                    "full_is_yellow",
                    "0.23",
                    "0.19",
                    "0.47",
                    "0.64",
                    "0.64"
                ],
                [
                    "full_is_used_in _cooking",
                    "0.37",
                    "0.29",
                    "0.98",
                    "0.98",
                    "0.98"
                ],
                [
                    "full_is_black",
                    "0.19",
                    "0.35",
                    "0.75",
                    "0.77",
                    "0.77"
                ],
                [
                    "full_is_red",
                    "0.23",
                    "0.36",
                    "0.51",
                    "0.54",
                    "0.52"
                ],
                [
                    "full_is_dangerous",
                    "0.24",
                    "0.58",
                    "0.88",
                    "0.88",
                    "0.87"
                ],
                [
                    "crowd_is_dangerous",
                    "0.26",
                    "0.61",
                    "0.86",
                    "0.86",
                    "0.86"
                ],
                [
                    "full_has_wheels",
                    "0.38",
                    "0.90",
                    "0.96",
                    "0.96",
                    "0.95"
                ],
                [
                    "full_is_found_in_seas",
                    "0.44",
                    "0.87",
                    "0.97",
                    "0.98",
                    "0.98"
                ],
                [
                    "crowd_is_found _in_seas",
                    "0.50",
                    "0.87",
                    "0.94",
                    "0.96",
                    "0.96"
                ],
                [
                    "full_does_kill",
                    "0.27",
                    "0.67",
                    "0.83",
                    "0.86",
                    "0.82"
                ],
                [
                    "crowd_does_kill",
                    "0.30",
                    "0.70",
                    "0.82",
                    "0.84",
                    "0.80"
                ],
                [
                    "full_made_of_wood",
                    "0.17",
                    "0.14",
                    "0.84",
                    "0.85",
                    "0.85"
                ],
                [
                    "full_is_food_test",
                    "0.37",
                    "0.00",
                    "0.36",
                    "0.36",
                    "0.36"
                ],
                [
                    "full_is_an _animal_test",
                    "0.37",
                    "0.52",
                    "0.88",
                    "0.88",
                    "0.88"
                ]
            ]
        },
        "gold_description": "table 4 shows the f1 - scores on the full clean datasets . for polysemy between food and animals ( table 4 ) , we observe that when trained on pure animal and food words and tested on polysemous animal and food words , the classifiers perform highly with a large difference to nearest neighbors .",
        "generated_description": "the property ‘ full_is_yellow ’ is the property with the highest f1 - score for all classifiers , and the class ‘ is_black ’ has the lowest . the classifiers trained on the full dataset perform better than the classifier trained on a subset of the property ’ s attributes , e . g . , ‘ has_towards ’ and ‘ found_in_seas ’ . this is due to the fact that the larger the subset of properties , the more difficult it is for the classifiers to distinguish between them ."
    },
    {
        "table_id": "243",
        "table_info": {
            "table_caption": "Table 1: Word-level evaluation results. Each value corresponds to average Pearson correlation of 7 identical models initialized with different random seeds. Correlations were scaled to the [−100;100] range for easier reading. Bold values represent the best method per training dataset, per task; underlined values represent the best-performing method per task, independent of training dataset. For each task and dataset, every best-performing method was significantly different to other methods (p<0.05), except for w trained in SNLI at the MTurk287 task. Statistical significance was obtained with a two-sided Welch’s t-test for two independent samples without assuming equal variance (Welch, 1947).",
            "table_column_names": [
                "SNLI",
                "w",
                "[BOLD] MEN 71.78",
                "[BOLD] MTurk287 35.40",
                "[BOLD] MTurk771 49.05",
                "[BOLD] RG65 61.80",
                "[BOLD] RW 18.43",
                "[BOLD] SimLex999 19.17",
                "[BOLD] SimVerb3500 10.32",
                "[BOLD] WS353 39.27",
                "[BOLD] WS353R 28.01",
                "[BOLD] WS353S 53.42"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "c",
                    "9.85",
                    "-5.65",
                    "0.82",
                    "-5.28",
                    "17.81",
                    "0.86",
                    "2.76",
                    "-2.20",
                    "0.20",
                    "-3.87"
                ],
                [
                    "[EMPTY]",
                    "cat",
                    "71.91",
                    "[BOLD] 35.52",
                    "48.84",
                    "62.12",
                    "18.46",
                    "19.10",
                    "10.21",
                    "39.35",
                    "28.16",
                    "53.40"
                ],
                [
                    "[EMPTY]",
                    "sg",
                    "70.49",
                    "34.49",
                    "46.15",
                    "59.75",
                    "18.24",
                    "17.20",
                    "8.73",
                    "35.86",
                    "23.48",
                    "50.83"
                ],
                [
                    "[EMPTY]",
                    "vg",
                    "[BOLD] 80.00",
                    "32.54",
                    "[BOLD] 62.09",
                    "[BOLD] 68.90",
                    "[BOLD] 20.76",
                    "[BOLD] 37.70",
                    "[BOLD] 20.45",
                    "[BOLD] 54.72",
                    "[BOLD] 47.24",
                    "[BOLD] 65.60"
                ],
                [
                    "MNLI",
                    "w",
                    "68.76",
                    "50.15",
                    "68.81",
                    "65.83",
                    "18.43",
                    "42.21",
                    "25.18",
                    "61.10",
                    "58.21",
                    "70.17"
                ],
                [
                    "[EMPTY]",
                    "c",
                    "4.84",
                    "0.06",
                    "1.95",
                    "-0.06",
                    "12.18",
                    "3.01",
                    "1.52",
                    "-4.68",
                    "-3.63",
                    "-3.65"
                ],
                [
                    "[EMPTY]",
                    "cat",
                    "68.77",
                    "50.40",
                    "68.77",
                    "65.92",
                    "18.35",
                    "42.22",
                    "25.12",
                    "61.15",
                    "58.26",
                    "70.21"
                ],
                [
                    "[EMPTY]",
                    "sg",
                    "67.66",
                    "49.58",
                    "68.29",
                    "64.84",
                    "18.36",
                    "41.81",
                    "24.57",
                    "60.13",
                    "57.09",
                    "69.41"
                ],
                [
                    "[EMPTY]",
                    "vg",
                    "[BOLD] 76.69",
                    "[BOLD] 56.06",
                    "[BOLD] 70.13",
                    "[BOLD] 69.00",
                    "[BOLD] 25.35",
                    "[BOLD] 48.40",
                    "[BOLD] 35.12",
                    "[BOLD] 68.91",
                    "[BOLD] 64.70",
                    "[BOLD] 77.23"
                ]
            ]
        },
        "gold_description": "table 1 shows the quality of word representations in terms of the correlation between word similarity scores obtained by the proposed models and word similarity scores defined by humans . for that can see first , we each task , character only models had significantly worse performance than every other model trained on the same dataset . further , bold results show the overall trend that vector gates outperformed the other methods regardless of training dataset . additionally , results from the mnli row in general , and underlined results in particular , show that training on multinli produces word representations better at capturing word similarity . exceptions to the previous rule are models evaluated in men and rw . more notably , in the rarewords dataset ( luthe word only , concat , ong et al . , 2013 ) , and scalar gate methods performed equally , despite having been trained in different datasets ( p > 0 . 1 ) , and the char only method performed significantly worse when trained in multinli . the vector gate , however , performed significantly better than its counterpart trained in snli .",
        "generated_description": "on the snli dataset , our model outperforms the men baseline by a large margin , outperforming the previous state - of - the - art by a wide margin . on the simverb3500 dataset , the performance of our model is comparable to that of the next best model ( ws353r ) . on the rg65 dataset , we outperform the previous best model by a small margin , but our model still performs competitively ."
    },
    {
        "table_id": "244",
        "table_info": {
            "table_caption": "Table 2: Experimental results. Each value shown in the table is the average result of 7 identical models initialized with different random seeds. Values represent accuracy (%) unless indicated by †, in which case they represent Pearson correlation scaled to the range [−100,100] for easier reading. Bold values represent the best method per training dataset, per task; underlined values represent the best-performing method per task, independent of training dataset. Values marked with an asterisk (∗) are significantly different to the average performance of the best model trained on the same dataset (p<0.05). Results for every best-performing method trained on one dataset are significantly different to the best-performing method trained on the other. Statistical significance was obtained in the same way as described in table 1.",
            "table_column_names": [
                "[EMPTY]",
                "[EMPTY]",
                "Classification  [BOLD] CR",
                "Classification  [BOLD] MPQA",
                "Classification  [BOLD] MR",
                "Classification  [BOLD] SST2",
                "Classification  [BOLD] SST5",
                "Classification  [BOLD] SUBJ",
                "Classification  [BOLD] TREC",
                "Entailment  [BOLD] SICKE",
                "Relatedness  [BOLD] SICKR†",
                "Semantic Textual Similarity  [BOLD] STS16†",
                "Semantic Textual Similarity  [BOLD] STSB†"
            ],
            "table_content_values": [
                [
                    "SNLI",
                    "w",
                    "80.50",
                    "84.59",
                    "74.18",
                    "78.86",
                    "42.33",
                    "[BOLD] 90.38",
                    "[BOLD] 86.83",
                    "86.37",
                    "88.52",
                    "59.90∗",
                    "71.29∗"
                ],
                [
                    "[EMPTY]",
                    "c",
                    "74.90∗",
                    "78.86∗",
                    "65.93∗",
                    "69.42∗",
                    "35.56∗",
                    "82.97∗",
                    "83.31∗",
                    "84.13∗",
                    "83.89∗",
                    "59.33∗",
                    "67.20∗"
                ],
                [
                    "[EMPTY]",
                    "cat",
                    "80.44",
                    "84.66",
                    "74.31",
                    "78.37",
                    "41.34∗",
                    "90.28",
                    "85.80∗",
                    "[BOLD] 86.40",
                    "88.44",
                    "59.90∗",
                    "71.24∗"
                ],
                [
                    "[EMPTY]",
                    "sg",
                    "[BOLD] 80.59",
                    "84.60",
                    "[BOLD] 74.49",
                    "[BOLD] 79.04",
                    "41.63∗",
                    "90.16",
                    "86.00",
                    "86.10∗",
                    "[BOLD] 88.57",
                    "60.05∗",
                    "71.34∗"
                ],
                [
                    "[EMPTY]",
                    "vg",
                    "80.42",
                    "[BOLD] 84.66",
                    "74.26",
                    "78.87",
                    "[BOLD] 42.38",
                    "90.07",
                    "85.97",
                    "85.67",
                    "88.31∗",
                    "[BOLD] 60.92",
                    "[BOLD] 71.99"
                ],
                [
                    "MNLI",
                    "w",
                    "83.80",
                    "[BOLD] 89.13",
                    "79.05",
                    "83.38",
                    "45.21",
                    "91.79",
                    "89.23",
                    "84.92",
                    "86.33",
                    "66.08",
                    "71.96∗"
                ],
                [
                    "[EMPTY]",
                    "c",
                    "70.23∗",
                    "72.19∗",
                    "62.83∗",
                    "64.55∗",
                    "32.47∗",
                    "79.49∗",
                    "74.74∗",
                    "81.53∗",
                    "75.92∗",
                    "51.47∗",
                    "61.74∗"
                ],
                [
                    "[EMPTY]",
                    "cat",
                    "[BOLD] 83.96",
                    "89.12",
                    "[BOLD] 79.23",
                    "83.70",
                    "45.08∗",
                    "[BOLD] 91.92",
                    "[BOLD] 90.03",
                    "[BOLD] 85.06",
                    "86.45",
                    "[BOLD] 66.17",
                    "71.82∗"
                ],
                [
                    "[EMPTY]",
                    "sg",
                    "83.88",
                    "89.06",
                    "79.22",
                    "83.71",
                    "45.26",
                    "91.66∗",
                    "88.83∗",
                    "84.96",
                    "86.40",
                    "65.49∗",
                    "71.87∗"
                ],
                [
                    "[EMPTY]",
                    "vg",
                    "83.45∗",
                    "89.05",
                    "79.13",
                    "[BOLD] 83.87",
                    "[BOLD] 45.88",
                    "91.55∗",
                    "89.49",
                    "84.82",
                    "[BOLD] 86.50",
                    "65.75",
                    "[BOLD] 72.82"
                ]
            ]
        },
        "gold_description": "table 2 shows the impact that different methods for combining character and word - level word representations have in the quality of the sentence representations produced by our models . we can observe the same trend mentioned in section 4 . 1 , and highlighted by the difference between bold values , that models trained in multinli performed better than those trained in snli at a statistically significant level , the two exceptions to the previous trend , sicke and sickr , benefited more from models trained on snli . additionally , there was no method that significantly outperformed the word only baseline in classification tasks . on the other hand , the vector gate significantly outperformed every other method in the stsb task when trained in both datasets , and in the sts16 task when trained in snli .",
        "generated_description": "we can see that our model outperforms the baselines in all the tasks except for the sentence classification task on the mpqa dataset , where it is on par with the best baseline . for the entailment task , our model achieves the best performance on the sicke dataset , which is the only dataset that does not explicitly penalize the word embeddings for relatedness . for sts16 and stsb , which are semantic textual similarity tasks , we outperform the baseline by a large margin ."
    },
    {
        "table_id": "245",
        "table_info": {
            "table_caption": "Table 2: System accuracy (%) bucketed by gender and difficulty (so-called “gotchas,” shaded in purple). For female pronouns, a “gotcha” sentence is one where either (1) the correct answer is occupation but the occupation is <50% female (according to BLS); or (2) the occupation is ≥50% female but the correct answer is participant; this is reversed for male pronouns. Systems do uniformly worse on “gotchas.”",
            "table_column_names": [
                "System",
                "“Gotcha”?",
                "Female",
                "Male"
            ],
            "table_content_values": [
                [
                    "Rule",
                    "no",
                    "38.3",
                    "51.7"
                ],
                [
                    "Rule",
                    "[HTML]CBCEFByes",
                    "[HTML]CBCEFB10.0",
                    "[HTML]CBCEFB37.5"
                ],
                [
                    "Stat",
                    "no",
                    "50.8",
                    "61.7"
                ],
                [
                    "Stat",
                    "[HTML]CBCEFByes",
                    "[HTML]CBCEFB45.8",
                    "[HTML]CBCEFB40.0"
                ],
                [
                    "Neural",
                    "no",
                    "50.8",
                    "49.2"
                ],
                [
                    "Neural",
                    "[HTML]CBCEFByes",
                    "[HTML]CBCEFB36.7",
                    "[HTML]CBCEFB46.7"
                ]
            ]
        },
        "gold_description": "we also identify so - called \" gotcha \" sentences in which pronoun gender does not match the occupation ' s majority gender ( bls ) if occupation is the correct answer ; all systems perform worse on these \" gotchas . \" 8 ( see table 2 . )",
        "generated_description": "the rule - based and neural - based systems perform uniformly worse on “ gotchas . ” for female pronouns , bls assigns a slightly higher accuracy when the correct answer is occupation but the occupation is female ( according to bls ) ; this is reversed for male pronouns when they are asked to be “ male ” . for male pronouns , the accuracy is much higher when the occupation and the occupation are the same , but the gender of the person asking the question is female . the same pattern is observed for male and female pronouns in the same sentence ."
    },
    {
        "table_id": "246",
        "table_info": {
            "table_caption": "Table 1: Automatic evaluation results of different models. For a detailed explanation of the baseline models, please refer to Section 3.2. The best performing model for each column is highlighted in boldface.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] B-1",
                "[BOLD] B-2",
                "[BOLD] B-3",
                "[BOLD] B-4",
                "[BOLD] ROUGE-L",
                "[BOLD] METEOR",
                "[BOLD] CIDEr"
            ],
            "table_content_values": [
                [
                    "Facts-to-seq",
                    "0.404",
                    "0.324",
                    "0.274",
                    "0.242",
                    "0.433",
                    "0.214",
                    "1.627"
                ],
                [
                    "Facts-to-seq w. Attention",
                    "0.491",
                    "0.414",
                    "0.366",
                    "0.335",
                    "0.512",
                    "0.257",
                    "2.207"
                ],
                [
                    "Static Memory",
                    "0.374",
                    "0.298",
                    "0.255",
                    "0.223",
                    "0.383",
                    "0.185",
                    "1.328"
                ],
                [
                    "DMN+",
                    "0.281",
                    "0.234",
                    "0.236",
                    "0.234",
                    "0.275",
                    "0.139",
                    "0.912"
                ],
                [
                    "Our Model",
                    "[BOLD] 0.611",
                    "[BOLD] 0.535",
                    "[BOLD] 0.485",
                    "[BOLD] 0.461",
                    "[BOLD] 0.641",
                    "[BOLD] 0.353",
                    "[BOLD] 3.295"
                ]
            ]
        },
        "gold_description": "the results of the experiments are reported in table 1 . a facts - to - seq model exploiting our positional fact encoding performs adequately . with an additional attention mechanism ( facts - to - seq w . attention ) , the results are even better . the analysis of the static memory approach amounts to an ablation study , the dmn + is even outperformed by our facts - to - seq baseline .",
        "generated_description": "we can see that our model outperforms all the baselines in terms of all the automatic evaluation metrics . the facts - to - seq w . attention model improves the bleu - 4 and meteor scores of our model by a large margin , which demonstrates the effectiveness of the attention mechanism . the static memory model performs better than the dmn + model , which indicates the importance of the sequential information in our model . however , our model still outperforms the static memory - augmented dmn + . this is because our model is capable of capturing long - term dependencies in the sequence of facts , which is beneficial for generating a coherent and informative summary ."
    },
    {
        "table_id": "247",
        "table_info": {
            "table_caption": "Table 2: Accuracies for the approaches. Baseline refers to the unmodified, non-adversarial InferSent.",
            "table_column_names": [
                "Model",
                "Val",
                "Test",
                "Hard"
            ],
            "table_content_values": [
                [
                    "Baseline",
                    "84.25",
                    "84.22",
                    "68.02"
                ],
                [
                    "AdvCls",
                    "84.58",
                    "83.56",
                    "66.27"
                ],
                [
                    "AdvDat",
                    "78.45",
                    "78.30",
                    "55.60"
                ]
            ]
        },
        "gold_description": "table 2 reports the results on snli , with the configurations that performed best on the validation set for each of the adversarial methods . both training methods perform worse than our unmodified , non - adversarial infersent baseline on snli ' s test set , since they remove biases that may be useful for performing this task . the difference for advcls is minimal , and it even slightly outperforms infersent on the validation set . while advdat ' s results are noticeably lower than the non - adversarial infersent , the drops are still less than 6 % points .",
        "generated_description": "we can see that both advcls and advdat perform significantly worse than the baseline on the test set , indicating that the adversarial examples generated by infersent are indeed harder to classify than those generated by the baseline . this is not surprising , as the model is more likely to classify a sentence as adversarial if it has seen similar patterns in the training data . we can also see that advdat performs significantly worse on the hard split of the dataset , suggesting that the dataset is more difficult than the other two approaches ."
    },
    {
        "table_id": "248",
        "table_info": {
            "table_caption": "Table 3: Indicator words and how correlated they are with CONTRADICTION predictions. The parentheses indicate hyper-parameter values: (λLoss,λEnc) for AdvCls and (λRand,λEnc) for AdvDat. Baseline refers to the unmodified InferSent.",
            "table_column_names": [
                "Word",
                "Count",
                "Score ^ [ITALIC] p( [ITALIC] l| [ITALIC] w)",
                "Score Baseline",
                "Percentage decrease from baseline AdvCls (1,1)",
                "Percentage decrease from baseline AdvDat (0.4,1)",
                "Percentage decrease from baseline AdvDat (1,1)"
            ],
            "table_content_values": [
                [
                    "sleeping",
                    "108",
                    "0.88",
                    "0.24",
                    "15.63",
                    "53.13",
                    "-81.25"
                ],
                [
                    "driving",
                    "53",
                    "0.81",
                    "0.32",
                    "-8.33",
                    "50",
                    "-66.67"
                ],
                [
                    "Nobody",
                    "52",
                    "1",
                    "0.42",
                    "14.29",
                    "42.86",
                    "14.29"
                ],
                [
                    "alone",
                    "50",
                    "0.9",
                    "0.32",
                    "0",
                    "83.33",
                    "0"
                ],
                [
                    "cat",
                    "49",
                    "0.84",
                    "0.31",
                    "7.14",
                    "57.14",
                    "-85.71"
                ],
                [
                    "asleep",
                    "43",
                    "0.91",
                    "0.39",
                    "-18.75",
                    "50",
                    "12.5"
                ],
                [
                    "no",
                    "31",
                    "0.84",
                    "0.36",
                    "0",
                    "52.94",
                    "-52.94"
                ],
                [
                    "empty",
                    "28",
                    "0.93",
                    "0.3",
                    "-16.67",
                    "83.33",
                    "-16.67"
                ],
                [
                    "eats",
                    "24",
                    "0.83",
                    "0.3",
                    "37.5",
                    "87.5",
                    "-25"
                ],
                [
                    "naked",
                    "20",
                    "0.95",
                    "0.46",
                    "0",
                    "83.33",
                    "-33.33"
                ]
            ]
        },
        "gold_description": "for each of the most biased words in snli associated with the contradiction label , we computed the probability that a model predicts an example as a contradiction , given that the hypothesis contains the word . table 3 shows the top 10 examples in the training set . for each word w , we give its frequency in snli , its empirical correlation with the label and with infersent ' s prediction , and the percentage decrease in correlations with contradiction predictions by three configurations of our methods . generally , the baseline correlations are more uniform than the empirical ones ( ˆp ( l | w ) ) , however , we still observed small skews towards contradiction . thus , we investigate whether our methods reduce the probability of predicting contradiction when a hypothesis contains an indicator word . the model trained with advdat ( where λrand = 0 . 4 , λenc = 1 ) predicts contradiction much less frequently than infersent on examples with these words .",
        "generated_description": "we observe that the advdat model with ( 0 . 4 , 1 ) has a significantly higher score than advcls and advdat with ( 1 , 1 ) , which is consistent with our previous analysis . we also observe that advdat has a higher score for “ driving ” , “ nostive ” and “ insensitive ” words ."
    },
    {
        "table_id": "249",
        "table_info": {
            "table_caption": "Table 1: NEI F1 scores. There are two language models: one for entity, and one for non-entity. All LMs are trained on the standard Train split. At test time, the tag associated with the language model which gives the lowest perplexity is used as prediction. Consecutive tokens with the same tag are joined into a phrase. Scores are Phrase-level F1.",
            "table_column_names": [
                "Model",
                "amh",
                "ara",
                "ben",
                "fas",
                "hin",
                "hun",
                "orm",
                "rus",
                "som",
                "tgl",
                "tir",
                "uig",
                "yor",
                "avg"
            ],
            "table_content_values": [
                [
                    "Cap.",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "SRILM",
                    "43.9",
                    "30.9",
                    "59.8",
                    "38.2",
                    "50.1",
                    "64.3",
                    "50.1",
                    "53.1",
                    "68.3",
                    "68.0",
                    "62.5",
                    "35.5",
                    "66.5",
                    "53.1"
                ],
                [
                    "Skip-gram",
                    "25.9",
                    "10.5",
                    "20.4",
                    "15.4",
                    "16.1",
                    "46.8",
                    "31.5",
                    "36.4",
                    "36.2",
                    "44.3",
                    "35.3",
                    "13.4",
                    "43.0",
                    "28.9"
                ],
                [
                    "CBOW",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "BiLSTM",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ]
            ]
        },
        "gold_description": "our datasets vary in size of entity and non - entity tokens , as shown in table 1 . the smallest , farsi , has 4 . 5k entity and 50k non - entity tokens ; the largest , english , has 29k entity and 170k nonentity tokens .",
        "generated_description": "we can see that our model outperforms the baselines by a large margin , achieving an average improvement of 6 . 3 % over the best baselines ( srilm and skip - gram ) and 6 . 6 % over cbow ."
    },
    {
        "table_id": "250",
        "table_info": {
            "table_caption": "Table 2: Comparison with existing datasets. (D documents or news clusters; L labeled documents or news clusters; T event types; S slots.)",
            "table_column_names": [
                "[BOLD] Dataset",
                "[BOLD] #D",
                "[BOLD] #L",
                "[BOLD] #T",
                "[BOLD] #S"
            ],
            "table_content_values": [
                [
                    "MUC 4",
                    "1700",
                    "400",
                    "4",
                    "4"
                ],
                [
                    "ACE 2005",
                    "599",
                    "599",
                    "33",
                    "36"
                ],
                [
                    "ERE",
                    "562",
                    "562",
                    "38",
                    "27"
                ],
                [
                    "ASTRE",
                    "1038",
                    "100",
                    "12",
                    "18"
                ],
                [
                    "[BOLD] GNBusiness",
                    "12,985",
                    "680",
                    "–",
                    "8"
                ]
            ]
        },
        "gold_description": "a comparison with existing event extraction and event schema induction datasets , including astre ( nguyen et al . , 2016a ) , muc 4 , ace 20052 and ere3 , is shown in table 2 . compared with the other datasets , gnbusiness has a much larger number of documents ( i . e . , news clusters in gnbusiness ) , and a comparable number of labeled documents .",
        "generated_description": "our dataset contains 12 , 985 labeled documents and news clusters from 12 different domains ( e . g . , business and public sector ) . the documents are categorized into three types : document ( d documents ) , news clusters ( l labeled documents or news clusters ; t event types ) , and slots ( s slots ) . the dataset is split into 80 % training , 10 % development and 10 % test set . the development set is used to tune the hyper - parameters of our model , and the test set is only used to evaluate the performance of our method ."
    },
    {
        "table_id": "251",
        "table_info": {
            "table_caption": "Table 3: Varying MILk’s λ with and without mass preservation on the DeEn development set.",
            "table_column_names": [
                "[ITALIC] λ",
                "unpreserved BLEU",
                "unpreserved DAL",
                "preserved BLEU",
                "preserved DAL"
            ],
            "table_content_values": [
                [
                    "0.0",
                    "27.7",
                    "21.0",
                    "27.7",
                    "27.9"
                ],
                [
                    "0.1",
                    "27.0",
                    "13.6",
                    "27.6",
                    "10.5"
                ],
                [
                    "0.2",
                    "25.7",
                    "11.6",
                    "27.5",
                    "8.7"
                ]
            ]
        },
        "gold_description": "before preservation , milk with a latency weight λ = 0 still showed a substantial reduction in latency from the maximum value of 27 . 9 , indicating an intrinsic latency incentive . furthermore , training quickly destabilized , resulting in very poor trade - offs for λs as low as 0 . 2 .",
        "generated_description": "in this section , we investigate the effect of the milk ’ s λ , i . e . , the trade - off between the quality of the alignment loss and the diversity of the latent space , on the deen development set . we observe that the best performance is achieved with λ = 0 . 1 , which corresponds to the case where all the training data is in the domain of the training set . this indicates that the choice of the λ balances the balance between the diversity and the preservation of the unlabeled data ."
    },
    {
        "table_id": "252",
        "table_info": {
            "table_caption": "Table 4: Overall performance of schema matching.",
            "table_column_names": [
                "[BOLD] Method",
                "[BOLD] Schema Matching (%)  [ITALIC] P",
                "[BOLD] Schema Matching (%)  [ITALIC] R",
                "[BOLD] Schema Matching (%)  [ITALIC] F1"
            ],
            "table_content_values": [
                [
                    "DBLP:conf/acl/NguyenTFB15",
                    "41.5",
                    "53.4",
                    "46.7"
                ],
                [
                    "Clustering",
                    "41.2",
                    "50.6",
                    "45.4"
                ],
                [
                    "ODEE-F",
                    "41.7",
                    "53.2",
                    "46.8"
                ],
                [
                    "ODEE-FE",
                    "42.4",
                    "56.1",
                    "48.3"
                ],
                [
                    "ODEE-FER",
                    "[BOLD] 43.4",
                    "[BOLD] 58.3",
                    "[BOLD] 49.8"
                ]
            ]
        },
        "gold_description": "table 4 shows the overall performance of schema matching on gnbusinesstest . from the table , we can see that odee - fer achieves the best f1 scores among all the methods . by comparing nguyen et al . ( 2015 ) and odeef ( p = 0 . 01 ) , we can see that using continuous contextual features gives better performance than discrete features . among odee models , odee - fe gives a 2 % gain in f1 score against odee - f , there is a 1 % gain in f",
        "generated_description": "we can see that odee - f outperforms the previous state - of - the - art method dblp : conf / acl / nguyentfb15 by 1 . 8 % in terms of f1 score . we can also see that the performance of clustering is slightly worse than that of odee , which indicates that the clustering - based method is not suitable for this task . the reason is that in our dataset , there are a large number of entity types , which makes it hard for a clustering method to automatically find the optimal set of related entities ."
    },
    {
        "table_id": "253",
        "table_info": {
            "table_caption": "Table 5: Averaged slot coherence results.",
            "table_column_names": [
                "[BOLD] Method",
                "[BOLD] Ave Slot Coherence"
            ],
            "table_content_values": [
                [
                    "DBLP:conf/acl/NguyenTFB15",
                    "0.10"
                ],
                [
                    "ODEE-F",
                    "0.10"
                ],
                [
                    "ODEE-FE",
                    "0.16"
                ],
                [
                    "ODEE-FER",
                    "[BOLD] 0.18"
                ]
            ]
        },
        "gold_description": "table 5 shows the comparison of averaged slot coherence results over all the slots in the schemas . the averaged slot coherence of odee - fer is the highest , the averaged slot coherence of odee - f is comparable to that of nguyen et al . ( 2015 ) ( p = 0 . 3415 ) , the scores of odee - fe ( p = 0 . 06 ) and odee - fer ( p = 10 − 5 ) are both higher than that of odee - f ,",
        "generated_description": "table 5 shows the averaged slot coherence results . we can see that odee - fer outperforms all the other methods , and the improvement is statistically significant ( paired t - test with p - value < 0 . 01 ) ."
    },
    {
        "table_id": "254",
        "table_info": {
            "table_caption": "Table 2: Method Comparison (%).",
            "table_column_names": [
                "[BOLD] Method",
                "[BOLD] METEOR",
                "[BOLD] ROUGE-L",
                "[BOLD] HUMAN  [BOLD] PREFER-"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[BOLD] ENCE"
                ],
                [
                    "LSTM-LM",
                    "8.7",
                    "15.1",
                    "0"
                ],
                [
                    "Seq2seq",
                    "13.5",
                    "19.2",
                    "22"
                ],
                [
                    "ED(1)",
                    "13.3",
                    "[BOLD] 20.3",
                    "30"
                ],
                [
                    "ED(2)",
                    "[BOLD] 14.0",
                    "19.8",
                    "[BOLD] 48"
                ]
            ]
        },
        "gold_description": "table 2 presents meteor ( denkowski and lavie , 2014 ) and rouge - l ( lin , 2004 ) scores for each method , where we can see score gains on both metrics from the editing mechanism . table 2 shows that the human judges strongly favor the abstracts from our ed ( 2 ) method .",
        "generated_description": "the lstm - lm and seq2seq methods do not perform as well as the proposed method , which indicates that the sequential generation model is not able to generate high quality and grammatical sentences . our proposed method ed ( 1 ) and ed ( 2 ) outperform the other two methods in terms of meteor , rouge - l , and human preference metrics . the reason is that our proposed method has two decoders , one for each encoder - decoder pair , and the other for each decoder - encoder pair is trained independently . therefore , the encoders in our method are trained jointly with the decoder and decoder ."
    },
    {
        "table_id": "255",
        "table_info": {
            "table_caption": "Table 3: Plagiarism Check: Percentage (%) of n-grams in test abstracts generated by system/human which appeared in training data.",
            "table_column_names": [
                "[ITALIC] n",
                "[BOLD] 1",
                "[BOLD] 2",
                "[BOLD] 3",
                "[BOLD] 4",
                "[BOLD] 5",
                "[BOLD] 6"
            ],
            "table_content_values": [
                [
                    "[BOLD] System",
                    "100",
                    "94.4",
                    "67.3",
                    "35.0",
                    "15.9",
                    "6.6"
                ],
                [
                    "[BOLD] Human",
                    "98.2",
                    "78.5",
                    "42.2",
                    "17.9",
                    "7.7",
                    "4.1"
                ]
            ]
        },
        "gold_description": "we also conduct a plagiarism check in table 3 , which shows that 93 . 4 % of 6 - grams generated by ed ( 2 ) did not appear in the training data , indicating that our model is not simply copying .",
        "generated_description": "the table also shows the percentage of n - grams in test abstracts generated by system / human which appeared in training data . it can be seen that the system generates 100 % of the abstracts , while the human generates 78 . 5 % and 42 . 2 % for n = 1 and n = 3 , respectively . this suggests that most of the generated abstracts are not simply copied from the training data , and are in fact substantially different from the original text ."
    },
    {
        "table_id": "256",
        "table_info": {
            "table_caption": "Table 5: Iteration comparison (%)",
            "table_column_names": [
                "[ITALIC] n",
                "[BOLD] 1",
                "[BOLD] 2",
                "[BOLD] 3",
                "[BOLD] 4",
                "[BOLD] 5",
                "[BOLD] 6"
            ],
            "table_content_values": [
                [
                    "METEOR",
                    "13.3",
                    "[BOLD] 14.0",
                    "13.6",
                    "13.9",
                    "13.8",
                    "13.5"
                ],
                [
                    "ROUGE-L",
                    "[BOLD] 20.3",
                    "19.8",
                    "18.6",
                    "19.2",
                    "18.9",
                    "18.8"
                ]
            ]
        },
        "gold_description": "we trained and evaluated our editing approach with 1 - 6 iterations and the experimental results ( table 5 ) showed that the second iteration produced the best results .",
        "generated_description": "finally , we compare the performance of our method with the state - of - the - art methods in terms of meteor and rouge - l scores . we can see that our method outperforms all the other methods by a large margin . this is because our method is able to capture the semantic meaning of the words and the syntactic structure of the sentences ."
    },
    {
        "table_id": "257",
        "table_info": {
            "table_caption": "Table 4: Turing Test Passing Rates.",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] # Tests",
                "[BOLD] # Choices  [BOLD] per Test",
                "[BOLD] Non-expert  [BOLD] Non-CS",
                "[BOLD] Non-expert  [BOLD] CS",
                "[BOLD] NLP Expert  [BOLD] Junior",
                "[BOLD] NLP Expert  [BOLD] Senior"
            ],
            "table_content_values": [
                [
                    "Different Titles",
                    "50",
                    "2",
                    "30%",
                    "15%",
                    "12%",
                    "0%"
                ],
                [
                    "Different Titles",
                    "20",
                    "5",
                    "60%",
                    "20%",
                    "30%",
                    "20%"
                ],
                [
                    "Different Titles",
                    "10",
                    "10",
                    "80%",
                    "30%",
                    "30%",
                    "20%"
                ],
                [
                    "Same Title",
                    "50",
                    "2",
                    "54%",
                    "10%",
                    "4%",
                    "0%"
                ],
                [
                    "Same Title",
                    "20",
                    "5",
                    "75%",
                    "25%",
                    "5%",
                    "5%"
                ]
            ]
        },
        "gold_description": "as expected , table 4 shows that people with less domain knowledge are more easily deceived . specifically , non - cs human judges fail at more than half of the 1 - to - 1 sets for the same titles , which suggests that most of our system generated abstracts follow correct grammar and consistent writing style . domain experts fail on 1 or 2 sets , mostly because the human written abstracts in those sets don ' t seem very topically relevant . additionally , the more abstracts that we provided to human judges , the easier it is to conceal the system generated abstract amongst human generated ones .",
        "generated_description": "the turing test is a standard test for question - answering in which the questioner needs to decide whether a given sentence is either a character or a part of a sentence . for this test , the non - expert class consists of three categories : non - cs , junior , and senior . the nlp expert is a native english speaker , a native speaker of the cs major , and is a senior citizen . for each of these categories , a turing test is performed by reading the passage of the passage and comparing the choice of the sentence that was given as the answer to the question , and comparing it with the ground truth answer . the ceiling performance of the turing test for each category is defined as the percentage of questions for which the correct answer is not in the top - 5 choices of the given sentence . we compare the passing rates of the three categories of turing test questions for different test setups with the same title , and with different choices of sentences per test ."
    },
    {
        "table_id": "258",
        "table_info": {
            "table_caption": "Table 2: Unimodal sentiment analysis results on the CMU-MOSI test set. Numbers in bold are the best results on each modality.",
            "table_column_names": [
                "[BOLD] CC",
                "[BOLD] S",
                "[BOLD] S+P",
                "[BOLD] S+I",
                "[BOLD] S+P+I"
            ],
            "table_content_values": [
                [
                    "Random",
                    "–",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "Vocal",
                    "0.125",
                    "0.149",
                    "0.119",
                    "[BOLD] 0.153"
                ],
                [
                    "Visual",
                    "0.092",
                    "0.109",
                    "[BOLD] 0.116",
                    "0.106"
                ],
                [
                    "Verbal",
                    "0.404",
                    "[BOLD] 0.455",
                    "0.434",
                    "0.417"
                ],
                [
                    "Human",
                    "0.820",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[BOLD] MAE",
                    "[BOLD] S",
                    "[BOLD] S+P",
                    "[BOLD] S+I",
                    "[BOLD] S+P+I"
                ],
                [
                    "Random",
                    "1.880",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "Vocal",
                    "1.456",
                    "1.471",
                    "1.444",
                    "[BOLD] 1.431"
                ],
                [
                    "Visual",
                    "1.442",
                    "[BOLD] 1.439",
                    "1.453",
                    "1.460"
                ],
                [
                    "Verbal",
                    "1.196",
                    "[BOLD] 1.156",
                    "1.181",
                    "1.206"
                ],
                [
                    "Human",
                    "0.710",
                    "–",
                    "–",
                    "–"
                ]
            ]
        },
        "gold_description": "the results of unimodal sentiment prediction experiments are shown in table 2 . the verbal models have the best performance here , on each modality , the best performance is achieved by a multi - task learning model . all unimodal models have significantly different performance . p = 0 . 009 for s + p and s + p + i visual models , p < < 0 . 001 for visual and vocal s + i models . in multi - task learning , the main task gains additional information from the auxillary tasks . compared to the s model , the s + p model has increased focus on the polarity of sentiment , while the s + i model has increased focus on the intensity of sentiment . on the verbal modality , the s + p model achieved the best performance , while on the visual modality the s + i model achieved the best performance . for the vocal modality , the s + p + i model achieved the best performance , and the s + p model yielded improved performance over that of the s model .",
        "generated_description": "the results show that the visual modality is the most discriminative among the three modalities , and the combination of visual and acoustic modalities achieves the best performance in most cases . this is not surprising , as visual modalities are highly dependent on each other for their discriminability . however , the combination with acoustic modality does not always yield the best results . for example , in the s + p + i scenario , for the vocal modality , there is a significant drop in performance when using visual features , whereas the performance on the other modalities remains the same . overall , we see that the combination modality improves the overall performance of the system across all modalities ."
    },
    {
        "table_id": "259",
        "table_info": {
            "table_caption": "Table 3: Multimodal sentiment analysis results on the CMU-MOSI test set. Numbers in bold are the best results for each fusion strategy in each row.",
            "table_column_names": [
                "[BOLD] CC",
                "[BOLD] S",
                "[BOLD] S+P",
                "[BOLD] S+I",
                "[BOLD] S+P+I"
            ],
            "table_content_values": [
                [
                    "Random",
                    "–",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "EF",
                    "0.471",
                    "0.472",
                    "0.476",
                    "[BOLD] 0.482"
                ],
                [
                    "TFN",
                    "0.448",
                    "[BOLD] 0.461",
                    "0.446",
                    "0.429"
                ],
                [
                    "LF",
                    "[BOLD] 0.454",
                    "0.413",
                    "0.428",
                    "0.428"
                ],
                [
                    "HF",
                    "[BOLD] 0.469",
                    "0.424",
                    "0.458",
                    "0.432"
                ],
                [
                    "Human",
                    "0.820",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[BOLD] MAE",
                    "[BOLD] S",
                    "[BOLD] S+P",
                    "[BOLD] S+I",
                    "[BOLD] S+P+I"
                ],
                [
                    "Random",
                    "1.880",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "EF",
                    "1.197",
                    "1.181",
                    "1.193",
                    "[BOLD] 1.172"
                ],
                [
                    "TFN",
                    "1.186",
                    "1.181",
                    "[BOLD] 1.178",
                    "1.205"
                ],
                [
                    "LF",
                    "[BOLD] 1.179",
                    "1.211",
                    "1.204",
                    "1.201"
                ],
                [
                    "HF",
                    "[BOLD] 1.155",
                    "1.211",
                    "1.164",
                    "1.187"
                ],
                [
                    "Human",
                    "0.710",
                    "–",
                    "–",
                    "–"
                ]
            ]
        },
        "gold_description": "of results the multimodal the experiments are shown in table 3 . we find that ef > hf > tfn > lf . 4 unlike zadeh et al . ( 2017 ) , here the ef model outperforms the tfn model . however , the tfn model achieved the best performance on the training and validation sets . compared to the feature concatenation used in ef , the cartesian product used in tfn results in higher dimensionality of the multimodal input vector , 5 which in turn increases the complexity of the model . similarly , the hf model has worse performance than the ef model here , unlike in tian et al . ( 2016 ) . in general , the multimodal models have better performance than the unimodal models . in fact , the hf and lf models have better performance using single - task learning . for the tfn models , only the s + p model outperforms the s model , although the improvement is not significant . 7 for the ef models , multi - task learning results in better performance . dimension of the ef input is 420 , for tfn is 65 , 536 . 6except that the lf models often have worse performance than the verbal s + p model . p < < 0 . 001 for tfn s + p and verbal s + p , p = 0 . 017 for verbal s + p and lf s . 7p = 0 . 105 for s tfn and s + p tfn . 8p = 0 . 888 for s ef and s + p ef , p = 0 . 029 for s ef and s + i ef , p = 0 . 009 for s ef and s + p + i ef .",
        "generated_description": "we observe that the performance of all the models is significantly better than the random baseline ( p = 0 . 820 , mae = 1 . 880 ) for s , s + p , and s + i , and significantly better for s + s + p + i ( p < 0 . 001 ) for all the other combinations of s and p . the tfn and tfn - based models perform the best , with the exception of the lf model , which performs the worst ."
    },
    {
        "table_id": "260",
        "table_info": {
            "table_caption": "Table 2: The BioBERT performance on the MedNLI task. Each model is trained on three different combinations of PMC and PubMed datasets (top score marked as bold).",
            "table_column_names": [
                "[BOLD] Dataset",
                "[BOLD] Accuracy dev",
                "[BOLD] Accuracy test"
            ],
            "table_content_values": [
                [
                    "+PMC",
                    "80.50",
                    "78.97"
                ],
                [
                    "+PubMedd",
                    "81.14",
                    "78.83"
                ],
                [
                    "+PubMed+PMC",
                    "[BOLD] 82.15",
                    "[BOLD] 79.04"
                ]
            ]
        },
        "gold_description": "as shown in table 2 , biobert trained on pubmed + pmc performs the best .",
        "generated_description": "each model is trained on three different combinations of pmc and pubmed datasets ( pubmedd , pmc , and pubmed ) . the biobert model achieves the best performance when trained on the combined pmc / pubmed + pmc dataset , with 79 . 04 % accuracy on the test set ."
    },
    {
        "table_id": "261",
        "table_info": {
            "table_caption": "Table 2: Classification performance of the compared methods on various topics, measured by the averaged macro F1-score over ten runs on the test data.",
            "table_column_names": [
                "Topic",
                "BiLSTM",
                "DeAT",
                "BiMPM",
                "RCN (Our)"
            ],
            "table_content_values": [
                [
                    "CC",
                    "68.1±0.6",
                    "70.9±0.7",
                    "71.5±0.6",
                    "[BOLD] 73.0±0.5∗"
                ],
                [
                    "HC",
                    "52.5±0.6",
                    "56.9±0.4",
                    "56.4±0.7",
                    "[BOLD] 58.6±0.4∗∗"
                ],
                [
                    "FM",
                    "58.3±0.6",
                    "60.6±0,7",
                    "59.8±0.7",
                    "[BOLD] 64.4±0.5∗∗"
                ],
                [
                    "AT",
                    "67.5±0.4",
                    "69.5±0.5",
                    "70.3±0.6",
                    "[BOLD] 72.2±0.4∗"
                ],
                [
                    "LA",
                    "61.3±0.3",
                    "63.2±0.6",
                    "62.4±0.4",
                    "[BOLD] 64.5±0.4∗∗"
                ],
                [
                    "Two tailed t-test: ∗∗  [ITALIC] p<0.01; ∗  [ITALIC] p<0.05",
                    "Two tailed t-test: ∗∗  [ITALIC] p<0.01; ∗  [ITALIC] p<0.05",
                    "Two tailed t-test: ∗∗  [ITALIC] p<0.01; ∗  [ITALIC] p<0.05",
                    "Two tailed t-test: ∗∗  [ITALIC] p<0.01; ∗  [ITALIC] p<0.05",
                    "Two tailed t-test: ∗∗  [ITALIC] p<0.01; ∗  [ITALIC] p<0.05"
                ]
            ]
        },
        "gold_description": "table 2 shows the results of our method and all the baselines on tasks with different topics . we can first observe that the proposed rcn consistently outperformed all the baselines across all topics . despite being modest , all the improvements of rcn over the baselines are statistically significant at p < 0 . 05 with a two - tailed t - test . bilstm performed the worst , showing that only using the rnn encoder for sequence encoding is not sufficient for obtaining optimal results . deat and bimpm performed similarly well ; rcn performed the best , with relative improvements from 2 . 1 % to 10 . 4 % over the second best .",
        "generated_description": "we can see that our proposed rcn outperforms all the baselines on most of the topics , which indicates the effectiveness of our rcn . compared with deat , bimpm , and bilstm , rcn improves the average accuracy by 1 . 4 % , 2 . 0 % , and 1 . 6 % on average , respectively ."
    },
    {
        "table_id": "262",
        "table_info": {
            "table_caption": "Table 3: Accuracy on Test set.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Accuracy (±0.01)"
            ],
            "table_content_values": [
                [
                    "LSTM+Feed-Forward",
                    "0.518"
                ],
                [
                    "LSTM+Gated CNN+Feed-Forward",
                    "0.524"
                ],
                [
                    "BERT Features(512 tokens)+Feed-Forward",
                    "0.639"
                ],
                [
                    "BERT Classifier(30 tokens / 15 tokens from each paragraph)",
                    "0.681"
                ],
                [
                    "BERT Classifier(128 tokens / 64 tokens from each paragraph)",
                    "0.717"
                ],
                [
                    "BERT Classifier(256 tokens / 128 tokens from each paragraph)",
                    "0.843"
                ]
            ]
        },
        "gold_description": "different approaches have been used to solve this task . the best result belongs to classifying order of paragraphs using pre - trained bert model . it achieves around 84 % accuracy on test set which outperforms other models significantly . first , each paragraph is encoded with lstm . the hidden state at the end of each sentence is extracted , and the resulting matrix is going through gated cnn ( dauphin et al . , 2017 ) for extraction of single encoding for each paragraph . the accuracy is barely above 50 % , which depicts that this method is not very promising . we have used a pre - trained bert in two different ways . first , as a feature extractor without fine - tuning , and second , by fine - tuning the weights during training . in the case of fine - tuning , we have used different numbers for maximum sequence length to test the capability of bert in this task . we increased the number of tokens and accuracy respectively increases . we found this method very promising and the accuracy significantly increases with respect to previous methods ( table 3 ) . this result reveals fine - tuning pre - trained bert can approximately learn the order of the paragraphs and arrow of the time in the stories .",
        "generated_description": "the lstm + feed - forward model is a simple feed - forward model that concatenates the word embeddings of the first and second hidden states of a bilstm and the last hidden state of a cnn . the model is trained on the training set and tested on the test set . the bert classifier is a bert classifier that takes a subset of the pre - trained bert features as its input and predicts the class label for a paragraph based on the context of the whole paragraph . the best accuracy is achieved by taking the first 128 tokens of each paragraph as the input of the classifier and predicting the label for the rest of the paragraphs based on their context ."
    },
    {
        "table_id": "263",
        "table_info": {
            "table_caption": "Table 2: Average performance across all models depending on the window position.",
            "table_column_names": [
                "[BOLD] Window position",
                "[BOLD] SimLex999",
                "[BOLD] Analogies"
            ],
            "table_content_values": [
                [
                    "OS left",
                    "0.40",
                    "0.35"
                ],
                [
                    "OS right",
                    "0.43",
                    "0.35"
                ],
                [
                    "OS symmetric",
                    "0.43",
                    "[BOLD] 0.45"
                ],
                [
                    "GW left",
                    "0.43",
                    "0.64"
                ],
                [
                    "GW right",
                    "0.44",
                    "0.65"
                ],
                [
                    "GW symmetric",
                    "0.45",
                    "[BOLD] 0.68"
                ]
            ]
        },
        "gold_description": "table 2 shows how the position of the context window influences the average model performance . note that symmetric windows of , for instance , 10 are in fact 2 times larger than the ' left ' or ' right ' windows of the same size , as they consider 10 words both to the left and to the right of the focus word . this is most likely why symmetric windows consistently outperform ' single - sided ' ones on the analogy task , as they are able to include twice as much contextual input . however , the average performance on the semantic similarity task ( as indicated by the spearman correlation with the simlex999 test set ) does not exhibit the same trend . ' left ' windows are indeed worse than symmetric ones , but ' right ' windows are on par with the symmetric windows for opensubtitles and only one percent point behind them for gigaword . it means that in many cases ( at least with english texts ) taking into account only n context words to the right of the focus word is sufficient to achieve the same performance with simlex999 as by using a model which additionally considers n words to the left , and thus requires significantly more training time .",
        "generated_description": "we find that the symmetric version of our gw model outperforms the other variants on both datasets when using either left or right orientations of the window . we also find that using a window of size one order of magnitude larger than the average window size across all models results in better performance for both datasets ."
    },
    {
        "table_id": "264",
        "table_info": {
            "table_caption": "Table 3: Average performance across all models with and without cross-sentential contexts.",
            "table_column_names": [
                "[BOLD] Cross-sentential",
                "[BOLD] SimLex999",
                "[BOLD] Analogies"
            ],
            "table_content_values": [
                [
                    "OS False",
                    "[BOLD] 0.44",
                    "0.34"
                ],
                [
                    "OS True",
                    "0.40",
                    "[BOLD] 0.43"
                ],
                [
                    "GW False",
                    "0.44",
                    "0.66"
                ],
                [
                    "GW True",
                    "0.44",
                    "0.65"
                ]
            ]
        },
        "gold_description": "for similarity tasks , cross - sentential contexts do not seem useful , and can even be detrimental for large window sizes . however , for analogy tasks , crosssentential contexts lead to improved results thanks to the increased window it provides . this is especially pronounced for corpora with short sentences such as opensubtitles ( see table 3 ) .",
        "generated_description": "we evaluate the impact of cross - sentential contexts by comparing the average performance across all models when using or not using the context . we find that the model without contexts achieves the best performance on simlex999 and analogies , while the model with contexts outperforms the one with contexts on the analogies dataset . we hypothesize that this is due to the fact that analogies tend to be more similar to real analogies than to simlex999 , where analogies are constructed based on lexical similarity rather than semantic similarity ."
    },
    {
        "table_id": "265",
        "table_info": {
            "table_caption": "Table 4: Average performance across all models depending on the removal of stop words.",
            "table_column_names": [
                "[BOLD] Stop words removal",
                "[BOLD] SimLex999",
                "[BOLD] Analogies"
            ],
            "table_content_values": [
                [
                    "OS no removal",
                    "0.41",
                    "0.34"
                ],
                [
                    "OS with removal",
                    "0.42",
                    "[BOLD] 0.43"
                ],
                [
                    "GW no removal",
                    "0.44",
                    "0.64"
                ],
                [
                    "GW with removal",
                    "0.44",
                    "[BOLD] 0.68"
                ]
            ]
        },
        "gold_description": "as shown in table 4 , the removal of stop words does not really influence the average model performance for the semantic similarity task . the analogy task , however , benefits substantially from this filtering , for both corpora .",
        "generated_description": "in this section , we investigate the effect of stop words removal on the performance of all models . we remove stop words from the training data by removing the stop word list of words in the training set for both the semantic similarity task ( simlex999 ) and the analogy task ( analogies ) . we observe that removing stop words results in a significant drop in performance across all models , with the exception of the gw model on the analogies dataset ."
    },
    {
        "table_id": "266",
        "table_info": {
            "table_caption": "Table 1: Mean matched validation accuracies (%) broken down by type of pooling method and presence or absence of character embeddings. Confidence intervals are calculated at 95% confidence over 10 runs for each method.",
            "table_column_names": [
                "[BOLD] Method",
                "[BOLD] w/o. chars",
                "[BOLD] w. chars"
            ],
            "table_content_values": [
                [
                    "[ITALIC] mean",
                    "71.3 ± 1.2",
                    "71.3 ± 0.7"
                ],
                [
                    "[ITALIC] sum",
                    "70.7 ± 1.0",
                    "70.9 ± 0.8"
                ],
                [
                    "[ITALIC] last",
                    "70.9 ± 0.6",
                    "71.0 ± 1.2"
                ],
                [
                    "[ITALIC] max",
                    "70.6 ± 1.1",
                    "71.0 ± 1.1"
                ]
            ]
        },
        "gold_description": "table 1 presents the results of using different pooling strategies for generating a raw sentence representation vector from the word vectors . we can observe that that both the mean method , and picking the last hidden state for both directions performed slightly better than the two other strategies , however at 95 % confidence we cannot assert that any of these methods is statistically different from one another . another interesting result , as shown by table 1 and table 2 , is that the model seemed to be insensitive to the usage of character embeddings ,",
        "generated_description": "we observe that the mean pooling method outperforms the sum pooling and last pooling methods by a significant margin . we also observe that max pooling yields slightly better results than sum and last , but not as good as the mean . we believe that this is due to the fact that pooling at the last timestep of the sequence is more stable than at the max and sum ."
    },
    {
        "table_id": "267",
        "table_info": {
            "table_caption": "Table 3: Validation accuracies (%) for our best model broken down by genre. Both CBOW and ESIM results are reported as in (Williams et al., 2017).",
            "table_column_names": [
                "[BOLD] Genre",
                "[BOLD] CBOW",
                "[BOLD] ESIM",
                "[BOLD] InnerAtt"
            ],
            "table_content_values": [
                [
                    "Fiction",
                    "67.5",
                    "73.0",
                    "73.2"
                ],
                [
                    "Government",
                    "67.5",
                    "74.8",
                    "75.2"
                ],
                [
                    "Slate",
                    "60.6",
                    "67.9",
                    "67.2"
                ],
                [
                    "Telephone",
                    "63.7",
                    "72.2",
                    "73.0"
                ],
                [
                    "Travel",
                    "64.6",
                    "73.7",
                    "72.8"
                ],
                [
                    "9/11",
                    "63.2",
                    "71.9",
                    "70.5"
                ],
                [
                    "Face-to-face",
                    "66.3",
                    "71.2",
                    "74.5"
                ],
                [
                    "Letters",
                    "68.3",
                    "74.7",
                    "75.4"
                ],
                [
                    "Oup",
                    "62.8",
                    "71.7",
                    "71.5"
                ],
                [
                    "Verbatim",
                    "62.7",
                    "71.9",
                    "69.5"
                ],
                [
                    "[BOLD] MultiNLI Overall",
                    "[BOLD] 64.7",
                    "[BOLD] 72.2",
                    "[BOLD] 72.3"
                ]
            ]
        },
        "gold_description": "in table 3 we report the accuracies obtained by our best model in both matched ( first 5 genres ) and mismatched ( last 5 genres ) development sets . we can observe that our implementation performed like esim overall ,",
        "generated_description": "we further break down the results broken down by genre to see how our best model compares to the state - of - the - art models . we find that our model performs on par with cbow and esim on all genres except for the 9 / 11 genre ."
    },
    {
        "table_id": "268",
        "table_info": {
            "table_caption": "Table 1: GLUE task performance of BERT models with different initialization. We report the scores on the validation, rather than test data, so these results differ from the original BERT paper.",
            "table_column_names": [
                "[BOLD] Dataset",
                "[BOLD] Pre-trained",
                "[BOLD] Fine-tuned, initialized with  [BOLD] normal distr.",
                "[BOLD] Fine-tuned, initialized with  [BOLD] pre-trained",
                "[BOLD] Metric",
                "[BOLD] Size"
            ],
            "table_content_values": [
                [
                    "MRPC",
                    "0/31.6",
                    "81.2/68.3",
                    "87.9/82.3",
                    "F1/Acc",
                    "5.8K"
                ],
                [
                    "STS-B",
                    "33.1",
                    "2.9",
                    "82.7",
                    "Acc",
                    "8.6K"
                ],
                [
                    "SST-2",
                    "49.1",
                    "80.5",
                    "92",
                    "Acc",
                    "70K"
                ],
                [
                    "QQP",
                    "0/60.9",
                    "0/63.2",
                    "65.2/78.6",
                    "F1/Acc",
                    "400K"
                ],
                [
                    "RTE",
                    "52.7",
                    "52.7",
                    "64.6",
                    "Acc",
                    "2.7K"
                ],
                [
                    "QNLI",
                    "52.8",
                    "49.5",
                    "84.4",
                    "Acc",
                    "130K"
                ],
                [
                    "MNLI-m",
                    "31.7",
                    "61.0",
                    "78.6",
                    "Acc",
                    "440K"
                ]
            ]
        },
        "gold_description": "table 1 shows that finetuned bert outperforms pre - trained bert by a significant margin on all the tasks ( with an average of 35 . 9 points of absolute difference ) . bert with weights initialized from normal distribution and further fine - tuned for a given task consistently produces lower scores than the ones achieved with pre - trained bert . in fact , for some tasks ( sts - b and qnli ) , initialization with random weights yields worse performance than pre - trained bert without fine - tuning .",
        "generated_description": "we find that fine - tuning the bert model with pre - trained weights from the glue task dataset improves the performance of the model for all the tasks except for sst - 2 , qqp , and rte . however , the difference in performance is not statistically significant for any of the other datasets . we also find that the performance gap between fine - tune with the distillation loss and without distillation is larger for sts - b and qnli than for the other tasks . we hypothesize that this is due to the fact that these two tasks are different from those in glue that require explicit knowledge of word order between sentences ."
    },
    {
        "table_id": "269",
        "table_info": {
            "table_caption": "Table 3: Comparisons with some recent points in the literature. Scores are tokenized BLEU.",
            "table_column_names": [
                "Comparison Point Chen2018",
                "Comparison Point BPE",
                "Comparison Point EnFr",
                "Ref 41.0",
                "Ours 38.8"
            ],
            "table_content_values": [
                [
                    "Wu2016",
                    "BPE",
                    "EnFr",
                    "39.0",
                    "38.8"
                ],
                [
                    "Lee2017",
                    "Char",
                    "CsEn",
                    "22.5",
                    "25.9"
                ],
                [
                    "[EMPTY]",
                    "[EMPTY]",
                    "DeEn",
                    "25.8",
                    "31.6"
                ],
                [
                    "[EMPTY]",
                    "[EMPTY]",
                    "FiEn",
                    "13.1",
                    "19.3"
                ]
            ]
        },
        "gold_description": "first , from the enfr results in table 3 , we are in line with gnmt ( wu et al . , 2016 ) , and within 2 bleu points of the rnn and transformer models investigated by chen et al . ( 2018 ) . we compare quite favorably with lee et al . ( 2017 ) , exceeding their reported scores by 3 - 6 points ,",
        "generated_description": "we also compare our results with some recent points in the literature . chen2018 and wu2016 use character - level bpe and character - based models , respectively . lee2017 and lee2017 use bpe models . our results are tokenized bleu . our method outperforms these two methods by a large margin ."
    },
    {
        "table_id": "270",
        "table_info": {
            "table_caption": "Table 2: Character versus BPE translation.",
            "table_column_names": [
                "Language",
                "Tokenized BLEU BPE",
                "Tokenized BLEU Char",
                "Tokenized BLEU Delta",
                "SacreBLEU Char"
            ],
            "table_content_values": [
                [
                    "EnFr",
                    "38.8",
                    "39.2",
                    "0.4",
                    "38.1"
                ],
                [
                    "CsEn",
                    "24.8",
                    "25.9",
                    "1.1",
                    "25.6"
                ],
                [
                    "DeEn",
                    "29.7",
                    "31.6",
                    "1.9",
                    "31.6"
                ],
                [
                    "FiEn",
                    "17.5",
                    "19.3",
                    "1.8",
                    "19.5"
                ]
            ]
        },
        "gold_description": "table 2 clearly shows the characterlevel systems outperforming bpe for all language pairs .",
        "generated_description": "character vs bpe translation . we see that character - based translation performs better than the bpe - based one for all the languages except for csen and fien , where the differences are not statistically significant . we also see that the character - level translation performs slightly better than bpe for enfr , but worse for the other languages . we hypothesize that this is due to the fact that the amount of training data in these languages is smaller than that of english ."
    },
    {
        "table_id": "271",
        "table_info": {
            "table_caption": "Table 4: Error counts out of 100 randomly sampled examples from the DeEn test set.",
            "table_column_names": [
                "Error Type",
                "BPE",
                "Char"
            ],
            "table_content_values": [
                [
                    "Lexical Choice",
                    "19",
                    "8"
                ],
                [
                    "Compounds",
                    "13",
                    "1"
                ],
                [
                    "Proper Names",
                    "2",
                    "1"
                ],
                [
                    "Morphological",
                    "2",
                    "2"
                ],
                [
                    "Other lexical",
                    "2",
                    "4"
                ],
                [
                    "Dropped Content",
                    "7",
                    "0"
                ]
            ]
        },
        "gold_description": "bpe and character sys tems differ most in the number of lexical choice errors , and in the extent to which they drop content . regarding lexical choice , the two systems differ not only in the number of errors , but in the nature of those errors . in particular , the bpe model had more trouble handling german compound nouns . we also found that both systems occasionally mistranslate proper names .",
        "generated_description": "we randomly sampled 100 examples out of 100 randomly sampled examples from the deen test set and manually counted the error types . we find that bpe errors are the most common error types , followed by lexical choice and proper names . char - based errors are less common than bpe error types for lexical choices , which may be due to the fact that character - level models are better at handling lexical information . we also find that proper names and morphology errors are more common for bpe models than for character - based models . dropped content errors are much less common for both models ."
    },
    {
        "table_id": "272",
        "table_info": {
            "table_caption": "Table 6: Compression results on WMT15 DeEn. The Comp. column shows the ratio of total computations carried out in the encoder.",
            "table_column_names": [
                "Encoder",
                "BPE Size",
                "BLEU",
                "Comp."
            ],
            "table_content_values": [
                [
                    "BiLSTM",
                    "Char",
                    "31.6",
                    "1.00"
                ],
                [
                    "BiLSTM",
                    "1k",
                    "30.5",
                    "0.44"
                ],
                [
                    "BiLSTM",
                    "2k",
                    "30.4",
                    "0.35"
                ],
                [
                    "BiLSTM",
                    "4k",
                    "30.0",
                    "0.29"
                ],
                [
                    "BiLSTM",
                    "8k",
                    "29.6",
                    "0.25"
                ],
                [
                    "BiLSTM",
                    "16k",
                    "30.0",
                    "0.22"
                ],
                [
                    "BiLSTM",
                    "32k",
                    "29.7",
                    "0.20"
                ],
                [
                    "Lee et. al. reimpl",
                    "Char",
                    "28.0",
                    "0.20"
                ],
                [
                    "BiLSTM + pooling",
                    "Char",
                    "30.0",
                    "0.47"
                ],
                [
                    "HM, 3-layer",
                    "Char",
                    "31.2",
                    "0.77"
                ],
                [
                    "HM, 2-layer",
                    "Char",
                    "30.9",
                    "0.89"
                ]
            ]
        },
        "gold_description": "unfortunately , even at just 1k vocabulary items , bpe has already lost a bleu point with respect to the character model . comparing the performance of our pooled bilstm model against bpe , we notice that for a comparable level of compression ( bpe size of 1k ) , bpe out - performs the pooled model by around 0 . 5 bleu points . at a similar level of performance ( bpe size of 4k ) , bpe has significantly shorter sequences . as shown in table 6 , the 3 - hm configuration achieves much better compression even when this is accounted for , and also gives slightly better performance than 2 - hm . in general , hm gating results in less compression but better performance than the fixed - stride techniques .",
        "generated_description": "we can see that the best compression result is achieved by lee et . al . reimpl , with a bleu score of 28 . 0 . we also compare our results with the ones reported in the literature , which use a 3 - layer hm encoder and a 2 - layer bilstm encoder , which is the current state - of - the - art compression method lee et al . for comparison , we also report the performance of the best results from the literature on this dataset ."
    },
    {
        "table_id": "273",
        "table_info": {
            "table_caption": "Table 2: micro-F1 (μF1) and ensembled F1 (eF1) performance of each system on the PHEME dataset. Performance is averaged across the five splits of Zubiaga et al. (2017). Results show the mean, standard deviation, and ensembled score across 15 seeds. Bold indicates best performance, underline indicates second best.",
            "table_column_names": [
                "Method",
                "[ITALIC] μP",
                "[ITALIC] μR",
                "[ITALIC] μF1",
                "eP",
                "eR",
                "eF1"
            ],
            "table_content_values": [
                [
                    "Zubiaga et al.  2017",
                    "0.667",
                    "0.556",
                    "0.607",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "BiLSTM",
                    "0.623",
                    "0.564",
                    "0.590",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "BERT",
                    "0.699 ± 0.0165",
                    "0.608 ± 0.0257",
                    "0.650 ± 0.0134",
                    "0.713",
                    "0.619",
                    "0.663"
                ],
                [
                    "BERT + Wiki",
                    "0.693 ± 0.0159",
                    "0.614 ± 0.0263",
                    "0.651 ± 0.0121",
                    "0.707",
                    "0.622",
                    "0.662"
                ],
                [
                    "BERT + Wiki + PU",
                    "0.699 ± 0.0133",
                    "[BOLD] 0.625 ± 0.0164",
                    "[BOLD] 0.660 ± 0.0109",
                    "[BOLD] 0.722",
                    "[BOLD] 0.646",
                    "[BOLD] 0.682"
                ],
                [
                    "BERT + Wiki +  [ITALIC] PUC",
                    "[BOLD] 0.701 ± 0.0108",
                    "0.618 ± 0.0176",
                    "0.657 ± 0.0097",
                    "0.715",
                    "0.627",
                    "0.668"
                ]
            ]
        },
        "gold_description": "the results for the tested systems are given in table 2 . again we saw large gains from the bert based models over the baseline from ( zubiaga et al . , 2017 ) and the 2 - layer bilstm . compared to training solely on pheme , fine tuning from basic citation needed detection saw very little improvement ( 0 . 1 f1 points ) . however , fine tuning with a model trained using pu learning led to an increase of 1 f1 point over the non - pu learning model , indicating that pu learning enables the wikipedia data to be useful for transferring to rumour detection . for puc , we saw an improvement of 0 . 7 f1 points over the baseline and lower overall variance than vanilla pu learning , meaning that the results with puc are more consistent across runs . when models are ensembled , pretraining with vanilla pu learning improved over no pretraining by almost 2 f1 points .",
        "generated_description": "we can see that the bert + wiki + puc model achieves the best performance in terms of μp , er , and ef1 , and the proposed method outperforms the baselines in all the metrics by a large margin . in addition , the puc - enhanced bert model outperforms all the other models , including the baseline bert , by a significant margin ."
    },
    {
        "table_id": "274",
        "table_info": {
            "table_caption": "Table 3: Mean average precision (MAP) of models on political speeches. Bold indicates best performance, underline indicates second best.",
            "table_column_names": [
                "Method",
                "MAP"
            ],
            "table_content_values": [
                [
                    "Konstantinovskiy et al.  2018",
                    "0.267"
                ],
                [
                    "Hansen et al.  2019",
                    "0.302"
                ],
                [
                    "BERT",
                    "[BOLD] 0.346 ± 0.024"
                ],
                [
                    "BERT + Wiki",
                    "0.339 ± 0.025"
                ],
                [
                    "BERT + Wiki + PU",
                    "0.328 ± 0.027"
                ],
                [
                    "BERT + Wiki +  [ITALIC] PUC",
                    "0.321 ± 0.031"
                ]
            ]
        },
        "gold_description": "the results for political speech check - worthiness detection are given in table 3 . we found that the vanilla bert model performed the best of all models . as we added transfer learning and pu learning , the performance steadily dropped , with the worst performing model being the one using puc .",
        "generated_description": "we observe that bert outperforms all the baselines , including the state - of - the - art method by konstantinovskiy et al . we also observe that the combination of bert and wikitext - based embeddings , i . e . , bert + wiki + puc , achieves the best performance , outperforming the previous state of the art by a large margin . finally , we observe that combining bert with wiki and puc further improves the map by a small margin ."
    },
    {
        "table_id": "275",
        "table_info": {
            "table_caption": "Table 4: F1 score comparing manual relabelling of the top 100 predictions by PUC model with the original labels in each dataset by two different annotators. Italics are average value between the two annotators.",
            "table_column_names": [
                "Dataset",
                "P",
                "R",
                "F1"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "0.817",
                    "0.870",
                    "0.843"
                ],
                [
                    "Wikipedia",
                    "0.848",
                    "0.870",
                    "0.859"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] 0.833",
                    "[ITALIC] 0.870",
                    "[ITALIC] 0.851"
                ],
                [
                    "[EMPTY]",
                    "0.875",
                    "0.824",
                    "0.848"
                ],
                [
                    "Twitter",
                    "0.863",
                    "0.812",
                    "0.836"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] 0.869",
                    "[ITALIC] 0.818",
                    "[ITALIC] 0.842"
                ],
                [
                    "[EMPTY]",
                    "0.338",
                    "0.893",
                    "0.490"
                ],
                [
                    "Politics",
                    "0.311",
                    "1.0",
                    "0.475"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] 0.325",
                    "[ITALIC] 0.947",
                    "[ITALIC] 0.483"
                ]
            ]
        },
        "gold_description": "our results are given in table 4 . we found that the wikipedia and twitter datasets contained labels which were more general , evidenced by similar high f1 scores from both annotators ( > 0 . 8 ) . for political speeches , we observed that the human annotators both found many more examples to be check - worthy than were labelled in the dataset .",
        "generated_description": "in order to further evaluate the performance of the puc model , we compare the relabelling of the top 100 predictions by our model with the original labels in each dataset according to two different annotators . we observe that the f1 score for the wikipedia and twitter datasets is the highest among the three datasets ( 0 . 843 and 0 . 812 , respectively ) . the politics tweet dataset is the only one where the difference in f1 is statistically significant ( p < 0 . 005 ) ."
    },
    {
        "table_id": "276",
        "table_info": {
            "table_caption": "TABLE I: The comparison result of the number of corrected prediction, precision, recall, and f1-score",
            "table_column_names": [
                "[BOLD] dataset",
                "[BOLD] tool",
                "[BOLD] # correct prediction",
                "[BOLD] positive  [BOLD] precision",
                "[BOLD] positive  [BOLD] recall",
                "[BOLD] positive  [BOLD] F1",
                "[BOLD] neutral  [BOLD] precision",
                "[BOLD] neutral  [BOLD] recall",
                "[BOLD] neutral  [BOLD] F1",
                "[BOLD] negative  [BOLD] precision",
                "[BOLD] negative  [BOLD] recall",
                "[BOLD] negative  [BOLD] F1"
            ],
            "table_content_values": [
                [
                    "[BOLD] Stack Overflow",
                    "SentiStrength",
                    "1043",
                    "0.200",
                    "[BOLD] 0.359",
                    "0.257",
                    "0.858",
                    "0.772",
                    "0.813",
                    "0.397",
                    "0.433",
                    "0.414"
                ],
                [
                    "positive: 178",
                    "NLTK",
                    "1168",
                    "0.317",
                    "0.244",
                    "0.276",
                    "0.815",
                    "[BOLD] 0.941",
                    "0.873",
                    "[BOLD] 0.625",
                    "0.084",
                    "0.148"
                ],
                [
                    "neutral: 1,191",
                    "Standford CoreNLP",
                    "604",
                    "0.231",
                    "0.344",
                    "0.276",
                    "[BOLD] 0.884",
                    "0.344",
                    "0.495",
                    "0.177",
                    "[BOLD] 0.837",
                    "0.292"
                ],
                [
                    "negative: 131",
                    "SentiStrength-SE",
                    "1170",
                    "0.312",
                    "0.221",
                    "0.259",
                    "0.826",
                    "0.930",
                    "0.875",
                    "0.500",
                    "0.185",
                    "0.270"
                ],
                [
                    "sum: 1,500",
                    "Stanford CoreNLP SO",
                    "1139",
                    "0.317",
                    "0.145",
                    "0.199",
                    "0.836",
                    "0.886",
                    "0.860",
                    "0.365",
                    "0.365",
                    "0.365"
                ],
                [
                    "[EMPTY]",
                    "N-gram auto-sklearn",
                    "[BOLD] 1317",
                    "[BOLD] 0.667",
                    "0.316",
                    "[BOLD] 0.418",
                    "0.871",
                    "0.939",
                    "[BOLD] 0.904",
                    "0.600",
                    "0.472",
                    "[BOLD] 0.514"
                ],
                [
                    "[EMPTY]",
                    "N-gram auto-sklearn with SMOTE†",
                    "-",
                    "0.680",
                    "0.005",
                    "0.009",
                    "0.344",
                    "0.930",
                    "0.499",
                    "0.657",
                    "0.160",
                    "0.251"
                ],
                [
                    "[BOLD] App reviews",
                    "SentiStrength",
                    "213",
                    "0.745",
                    "0.866",
                    "0.801",
                    "0.113",
                    "0.320",
                    "0.167",
                    "0.815",
                    "0.338",
                    "0.478"
                ],
                [
                    "positive: 186",
                    "NLTK",
                    "184",
                    "0.751",
                    "0.812",
                    "0.780",
                    "0.093",
                    "[BOLD] 0.440",
                    "0.154",
                    "[BOLD] 1.000",
                    "0.169",
                    "0.289"
                ],
                [
                    "neutral: 25",
                    "Standford CoreNLP",
                    "237",
                    "0.831",
                    "0.715",
                    "0.769",
                    "[BOLD] 0.176",
                    "0.240",
                    "[BOLD] 0.203",
                    "0.667",
                    "0.754",
                    "0.708"
                ],
                [
                    "negative: 130",
                    "SentiStrength-SE",
                    "201",
                    "0.741",
                    "0.817",
                    "0.777",
                    "0.106",
                    "0.400",
                    "0.168",
                    "0.929",
                    "0.300",
                    "0.454"
                ],
                [
                    "sum: 341",
                    "Stanford CoreNLP SO",
                    "142",
                    "0.770",
                    "0.253",
                    "0.381",
                    "0.084",
                    "0.320",
                    "0.133",
                    "0.470",
                    "0.669",
                    "0.552"
                ],
                [
                    "[EMPTY]",
                    "N-gram auto-sklearn",
                    "[BOLD] 293",
                    "[BOLD] 0.822",
                    "[BOLD] 0.894",
                    "[BOLD] 0.853",
                    "0.083",
                    "0.066",
                    "0.073",
                    "0.823",
                    "[BOLD] 0.808",
                    "[BOLD] 0.807"
                ],
                [
                    "[EMPTY]",
                    "N-gram auto-sklearn with SMOTE†",
                    "-",
                    "0.520",
                    "0.885",
                    "0.641",
                    "0.100",
                    "0.058",
                    "0.073",
                    "0.648",
                    "0.622",
                    "0.607"
                ],
                [
                    "[BOLD] Jira issues",
                    "SentiStrength",
                    "714",
                    "0.850",
                    "[BOLD] 0.921",
                    "0.884",
                    "-",
                    "-",
                    "-",
                    "0.993",
                    "0.703",
                    "0.823"
                ],
                [
                    "positive: 290",
                    "NLTK",
                    "276",
                    "0.840",
                    "0.362",
                    "0.506",
                    "-",
                    "-",
                    "-",
                    "[BOLD] 1.000",
                    "0.269",
                    "0.424"
                ],
                [
                    "neutral: 0",
                    "Standford CoreNLP",
                    "626",
                    "0.726",
                    "0.621",
                    "0.669",
                    "-",
                    "-",
                    "-",
                    "0.945",
                    "0.701",
                    "0.805"
                ],
                [
                    "negative: 636",
                    "SentiStrength-SE",
                    "704",
                    "0.948",
                    "0.883",
                    "0.914",
                    "-",
                    "-",
                    "-",
                    "0.996",
                    "0.704",
                    "0.825"
                ],
                [
                    "sum: 926",
                    "Stanford CoreNLP SO",
                    "333",
                    "0.635",
                    "0.252",
                    "0.361",
                    "-",
                    "-",
                    "-",
                    "0.724",
                    "0.409",
                    "0.523"
                ],
                [
                    "[EMPTY]",
                    "N-gram auto-sklearn",
                    "[BOLD] 884",
                    "[BOLD] 0.960",
                    "0.839",
                    "[BOLD] 0.893",
                    "-",
                    "-",
                    "-",
                    "0.932",
                    "[BOLD] 0.982",
                    "[BOLD] 0.956"
                ],
                [
                    "[EMPTY]",
                    "N-gram auto-sklearn with SMOTE†",
                    "-",
                    "0.986",
                    "0.704",
                    "0.809",
                    "-",
                    "-",
                    "-",
                    "0.781",
                    "0.988",
                    "0.872"
                ],
                [
                    "† Applying SMOTE, a oversampling technique, for our method.",
                    "† Applying SMOTE, a oversampling technique, for our method.",
                    "† Applying SMOTE, a oversampling technique, for our method.",
                    "† Applying SMOTE, a oversampling technique, for our method.",
                    "† Applying SMOTE, a oversampling technique, for our method.",
                    "† Applying SMOTE, a oversampling technique, for our method.",
                    "† Applying SMOTE, a oversampling technique, for our method.",
                    "† Applying SMOTE, a oversampling technique, for our method.",
                    "† Applying SMOTE, a oversampling technique, for our method.",
                    "† Applying SMOTE, a oversampling technique, for our method.",
                    "† Applying SMOTE, a oversampling technique, for our method.",
                    "† Applying SMOTE, a oversampling technique, for our method."
                ]
            ]
        },
        "gold_description": "table shows the number of correct predictions , precision , recall , and f1 values with all tools including our method ( n - gram auto - sklearn ) . we can see that the number of correct predictions are higher with our method in all three datasets , and our method achieved the highest f1 values for all three positive , all three negative , and one neutral . in summary , our method using n - gram idf and automated machine learning ( auto - sklearn ) largely outperformed existing sentiment analysis tools .",
        "generated_description": "for the stack overflow and standford corenlp datasets , sentistrength outperforms nltk in terms of precision , recall and f1 - measure for both positive and negative classes . on the other hand , for the nsp dataset , the difference is not statistically significant . this is likely due to the small size of the training set and the fact that the datasets are highly imbalanced ."
    },
    {
        "table_id": "277",
        "table_info": {
            "table_caption": "Table 3: Correlation results for different configurations of our proposed approach and a competitor baseline based on cosine similarity of word embeddings.",
            "table_column_names": [
                "[EMPTY]",
                "rg  [BOLD] p",
                "rg  [BOLD] s",
                "rg  [BOLD] avg.",
                "wordsim  [BOLD] p",
                "wordsim  [BOLD] s",
                "wordsim  [BOLD] avg.",
                "mc  [BOLD] p",
                "mc  [BOLD] s",
                "mc  [BOLD] avg.",
                "semeval17  [BOLD] p",
                "semeval17  [BOLD] s",
                "semeval17  [BOLD] avg."
            ],
            "table_content_values": [
                [
                    "cosine",
                    "77.2",
                    "76.0",
                    "76.6",
                    "64.9",
                    "69.4",
                    "67.1",
                    "79.2",
                    "80.0",
                    "79.6",
                    "69.4",
                    "70.0",
                    "69.7"
                ],
                [
                    "10rv [ITALIC] w",
                    "78.1",
                    "77.0",
                    "77.5",
                    "66.0",
                    "69.6",
                    "67.8",
                    "79.7",
                    "80.7",
                    "[BOLD] 80.2",
                    "70.2",
                    "70.8",
                    "70.5"
                ],
                [
                    "10rv [ITALIC] r",
                    "77.4",
                    "75.5",
                    "76.4",
                    "65.8",
                    "69.5",
                    "67.6",
                    "78.8",
                    "77.9",
                    "78.3",
                    "70.0",
                    "70.7",
                    "70.3"
                ],
                [
                    "1800rv [ITALIC] w",
                    "79.5",
                    "80.6",
                    "[BOLD] 80.0",
                    "67.4",
                    "69.8",
                    "68.6",
                    "79.4",
                    "79.0",
                    "79.2",
                    "71.4",
                    "71.8",
                    "71.6"
                ],
                [
                    "1800rv [ITALIC] r",
                    "78.9",
                    "80.2",
                    "79.5",
                    "68.1",
                    "70.1",
                    "[BOLD] 69.1",
                    "79.2",
                    "79.7",
                    "79.4",
                    "72.2",
                    "73.0",
                    "[BOLD] 72.6"
                ]
            ]
        },
        "gold_description": "table 3 shows that the 10rvw variant consistently outperforms the word - level baseline .",
        "generated_description": "in this section , we show the results of our experiments on word similarity tasks . for each task , we report the p - score and the s - score , averaged over all wordsim , wordsim and semeval17 , and also the avg . score for all the other word similarity datasets . in all the cases , we observe that the cosine similarity model performs the worst , followed by the random vectors and then by the rbf and w - grams . the best results for each task are in bold , and in some cases , the results are statistically significantly better than those of the other models ."
    },
    {
        "table_id": "278",
        "table_info": {
            "table_caption": "Table 1: Results on the NIST Chinese-English translation task. “Params” denotes the number of model parameters. “Emb.” represents the number of parameters used for word representation. “Red.” represents the reduction rate of the standard size. The results of SMT* and RNNsearch* are reported by Kuang et al. Kuang et al. (2018) with the same datasets and vocabulary settings. “↑” indicates the result is significantly better than that of the vanilla Transformer (p<0.01), while “⇑” indicates the result is significantly better than that of all other Transformer models (p<0.01). All significance tests are measured by paired bootstrap resampling Koehn (2004).",
            "table_column_names": [
                "Architecture",
                "Zh⇒En",
                "Params",
                "Emb.",
                "Red.",
                "Dev.",
                "MT02",
                "MT03",
                "MT04",
                "MT08",
                "All"
            ],
            "table_content_values": [
                [
                    "SMT*",
                    "-",
                    "-",
                    "-",
                    "-",
                    "34.00",
                    "35.81",
                    "34.70",
                    "37.15",
                    "25.28",
                    "33.39"
                ],
                [
                    "RNNsearch*",
                    "Vanilla",
                    "74.8M",
                    "55.8M",
                    "0%",
                    "35.92",
                    "37.88",
                    "36.21",
                    "38.83",
                    "26.30",
                    "34.81"
                ],
                [
                    "RNNsearch*",
                    "Source bridging",
                    "78.5M",
                    "55.8M",
                    "0%",
                    "36.79",
                    "38.71",
                    "37.24",
                    "40.28",
                    "27.40",
                    "35.91"
                ],
                [
                    "RNNsearch*",
                    "Target bridging",
                    "76.6M",
                    "55.8M",
                    "0%",
                    "36.69",
                    "39.04",
                    "37.63",
                    "40.41",
                    "27.98",
                    "36.27"
                ],
                [
                    "RNNsearch*",
                    "Direct bridging",
                    "78.9M",
                    "55.8M",
                    "0%",
                    "36.97",
                    "39.77",
                    "38.02",
                    "40.83",
                    "27.85",
                    "36.62"
                ],
                [
                    "Transformer",
                    "Vanilla",
                    "90.2M",
                    "46.1M",
                    "0%",
                    "41.37",
                    "42.53",
                    "40.25",
                    "43.58",
                    "32.89",
                    "40.33"
                ],
                [
                    "Transformer",
                    "Direct bridging",
                    "90.5M",
                    "46.1M",
                    "0%",
                    "41.67",
                    "42.89",
                    "41.34",
                    "43.56",
                    "32.69",
                    "40.54"
                ],
                [
                    "Transformer",
                    "Decoder WT",
                    "74.9M",
                    "30.7M",
                    "33.4%",
                    "41.90",
                    "43.02",
                    "41.89",
                    "43.87",
                    "32.62",
                    "40.82"
                ],
                [
                    "Transformer",
                    "[ITALIC] Shared-private",
                    "62.8M",
                    "18.7M",
                    "59.4%",
                    "42.57↑",
                    "43.73↑",
                    "41.99↑",
                    "44.53↑",
                    "33.81⇑",
                    "41.61⇑"
                ]
            ]
        },
        "gold_description": "table 1 : results on the nist chinese - english translation task . \" params \" denotes the number of model parameters . \" emb . \" represents the number of parameters used for word representation . \" red . \" represents the reduction rate of the standard size . the results of smt * and rnnsearch * are reported by kuang et al . ( 2018 ) with the same datasets and vocabulary settings . \" ↑ \" indicates the result is significantly better than that of the vanilla transformer ( p < 0 . 01 ) , while \" ⇑ \" indicates the result is significantly better than that of all other transformer models ( p < 0 . 01 ) . all significance tests are measured by paired bootstrap resampling ( koehn , 2004 ) . table 1 reports the results on the nist chineseenglish test sets . it is observed that the transformer models significantly outperform smt and rnnsearch models . therefore , we decide to implement all of our experiments based on transformer architecture . the direct bridging model can further improve the translation quality of the transformer baseline . the decoder wt model improves the translation quality while reducing the number of parameters for the word representation . this improved performance happens because there are fewer model parameters , which prevents over - fitting ( press and wolf , 2017 ) . finally , the performance is further improved by the proposed method while using even fewer parameters than other models .",
        "generated_description": "in this section , we conduct experiments on the wmt zh - en parallel corpus to verify the effectiveness of the proposed bridging methods . we compare the proposed methods with the vanilla rnnsearch and smt systems . the proposed methods include : ( 1 ) source bridging , where the source and target sentences are substituted with the same source sentence as the target sentence , which is denoted as vanilla ; ( 2 ) direct bridging with the direct bridging method , where both the target and source sentences are replaced by the same target sentence ; and ( 3 ) target bridging which is the method of applying the direct method to the source sentence . we can see that the proposed method achieves the best performance among all the methods , which demonstrates the effectiveness and universality of our proposed methods . besides , the performance of target bridging is slightly worse than that of source bridging in terms of bleu score , which may be caused by the fact that the target sentences in the training data of the target language may not be the same as those in the source language ."
    },
    {
        "table_id": "279",
        "table_info": {
            "table_caption": "Table 2: Results on the WMT English-German translation task. “‡” indicates the result is significantly better than the vanilla Transformer model (p<0.05).",
            "table_column_names": [
                "En⇒De",
                "Params",
                "Emb.",
                "Red.",
                "BLEU"
            ],
            "table_content_values": [
                [
                    "Vanilla",
                    "98.7M",
                    "54.5M",
                    "0%",
                    "27.62"
                ],
                [
                    "Direct bridging",
                    "98.9M",
                    "54.5M",
                    "0%",
                    "27.79"
                ],
                [
                    "Decoder WT",
                    "80.4M",
                    "36.2M",
                    "33.6%",
                    "27.51"
                ],
                [
                    "Three-way WT",
                    "63.1M",
                    "18.9M",
                    "65.3%",
                    "27.39"
                ],
                [
                    "[ITALIC] Shared-private",
                    "65.0M",
                    "20.9M",
                    "63.1%",
                    "28.06‡"
                ]
            ]
        },
        "gold_description": "table 2 : results on the wmt english - german translation task . \" ‡ \" indicates the result is significantly better than the vanilla transformer model ( p < 0 . 05 ) . similar observations are obtained on the english - german translation task , as shown in table 2 .",
        "generated_description": "the vanilla transformer model achieves 27 . 62 bleu score on the wmt english - german translation task , outperforming the previous state - of - the - art by 0 . 05 . the shared - private model outperforms the vanilla model by a significant margin , improving the bleus from 27 . 79 to 28 . 06 ."
    },
    {
        "table_id": "280",
        "table_info": {
            "table_caption": "Table 3: Results on the IWSLT {Ar, Ja, Ko, Zh}-to-En translation tasks. These distant language pairs belonging to 5 different language families and written in 5 different alphabets.“↑” indicates the result is significantly better than that of the vanilla Transformer (p<0.01).",
            "table_column_names": [
                "[EMPTY]",
                "Model",
                "Emb.",
                "Red.",
                "BLEU"
            ],
            "table_content_values": [
                [
                    "Ar⇒ En",
                    "Vanilla",
                    "23.6M",
                    "0%",
                    "28.36"
                ],
                [
                    "Ar⇒ En",
                    "[ITALIC] Shared-private",
                    "11.8M",
                    "50%",
                    "29.71↑"
                ],
                [
                    "Ja⇒ En",
                    "Vanilla",
                    "25.6M",
                    "0%",
                    "10.94"
                ],
                [
                    "Ja⇒ En",
                    "[ITALIC] Shared-private",
                    "13.3M",
                    "48.0%",
                    "12.35↑"
                ],
                [
                    "Ko⇒ En",
                    "Vanilla",
                    "25.1M",
                    "0%",
                    "16.48"
                ],
                [
                    "Ko⇒ En",
                    "[ITALIC] Shared-private",
                    "13.2M",
                    "47.4%",
                    "17.84↑"
                ],
                [
                    "Zh⇒ En",
                    "Vanilla",
                    "27.4M",
                    "0%",
                    "19.36"
                ],
                [
                    "Zh⇒ En",
                    "[ITALIC] Shared-private",
                    "13.8M",
                    "49.6%",
                    "21.00↑"
                ]
            ]
        },
        "gold_description": "table 3 : results on the iwslt { ar , ja , ko , zh } - to - en translation tasks . these distant language pairs belonging to 5 different language families and written in 5 different alphabets . \" ↑ \" indicates the result is significantly better than that of the vanilla transformer ( p < 0 . 01 ) . table 3 shows the results on the small - scale iwslt translation tasks . we observe that the proposed method stays consistently better than the vanilla model on these distant language pairs .",
        "generated_description": "the iwslt dataset consists of parallel sentences from 5 different language families and written in 5 different alphabets . the training and test sets are disjoint . we use the publicly available code released by xiao et al . the results show that our proposed method outperforms the baseline by a large margin in terms of both reduscores and bleu scores for all distant language pairs ."
    },
    {
        "table_id": "281",
        "table_info": {
            "table_caption": "Table 4: Performance of models using different sharing coefficients on the validation set of the NIST Chinese-English translation task.",
            "table_column_names": [
                "Zh-En",
                "[ITALIC] λlm",
                "[ITALIC] λwf",
                "[ITALIC] λur",
                "Emb.",
                "BLEU"
            ],
            "table_content_values": [
                [
                    "Vanilla",
                    "-",
                    "-",
                    "-",
                    "46.1M",
                    "41.37"
                ],
                [
                    "Decoder WT",
                    "0",
                    "0",
                    "0",
                    "30.7M",
                    "41.90"
                ],
                [
                    "[ITALIC] Shared-private",
                    "0.5",
                    "0.7",
                    "0.9",
                    "21.2M",
                    "41.98"
                ],
                [
                    "[ITALIC] Shared-private",
                    "0.5",
                    "0.5",
                    "0.5",
                    "23.0M",
                    "42.26"
                ],
                [
                    "[ITALIC] Shared-private",
                    "0.9",
                    "0.7",
                    "0",
                    "21.0M",
                    "42.27"
                ],
                [
                    "[ITALIC] Shared-private",
                    "1",
                    "1",
                    "1",
                    "15.3M",
                    "42.36"
                ],
                [
                    "[ITALIC] Shared-private",
                    "0.9",
                    "0.7",
                    "0.5",
                    "18.7M",
                    "42.57"
                ]
            ]
        },
        "gold_description": "table 4 : performance of models using different sharing coefficients on the validation set of the nist chineseenglish translation task . as shown in table 4 , the decoder wt model can be seen as a kind of shared - private method where zero features are shared between the source and target word embeddings . for the proposed method , λ = ( 0 . 5 , 0 . 5 , 0 . 5 ) and λ = ( 1 , 1 , 1 ) are , respectively , used for sharing half and all features between the embeddings of all categories of words . this allows the model to significantly reduce the number of parameters and also improve the translation quality . for comparison purpose , we also consider sharing a large part of the features among the unrelated words by setting s3 to 0 . 9 , i . e . λ = ( 0 . 5 , 0 . 7 , 0 . 9 ) . we argue that it is hard for",
        "generated_description": "in the shared - private setting , we set the sharing coefficient λlm = 0 . 5 for zh - en and λwf = 0 for en - zh - en , which means that the shared parameters of the encoder and decoder are the same for all the encoders and decoders . when λur is set to 0 . 7 , the bleu score on the validation set of the nist chinese - english translation task increases from 41 . 37 to 42 . 27 , which is 1 . 5 points higher than that of the vanilla encoder - decoder model . the shared parameters also increase the embedding size of the decoder - wf model from 30 . 7m to 21 . 0m , which indicates that our shared parameters have a strong effect on the quality of the shared embeddings . however , when we use a small sharing coefficient ( λlm , λwf , λur ) of 0 . 5 , our model can still achieve comparable performance to the vanilla model with the same number of parameters ."
    },
    {
        "table_id": "282",
        "table_info": {
            "table_caption": "Table 2: Average time for users to set up the tool and identify verbs in a 623 word news article. Only one participant managed to install and use brat, taking 18 minutes on Ubuntu. The differences between GATE and either slate or YEDDA are significant at the 0.01 level according to a t-test.",
            "table_column_names": [
                "Tool",
                "Time (minutes) Ubuntu",
                "Time (minutes) macOS"
            ],
            "table_content_values": [
                [
                    "slate",
                    "10",
                    "16"
                ],
                [
                    "YEDDA",
                    "14",
                    "14"
                ],
                [
                    "GATE",
                    "21",
                    "22"
                ],
                [
                    "brat",
                    "-",
                    "-"
                ]
            ]
        },
        "gold_description": "table 2 presents the time required to install each tool and complete the first annotation task . slate and yedda are comparable in effort , which fits with their common design as simple tools with minimal dependencies . participants had great difficulty with brat , with only two managing to install it , one just as their time finished .",
        "generated_description": "the differences between gate and yedda are not statistically significant at the 0 . 01 level according to a t - test . only one participant was able to install and use brat , taking 18 minutes on ubuntu and 22 minutes on a machine with an intel i7 processor and 8mb of ram . the runtime of gate is significantly lower than the runtime of slate , and is comparable to the time it takes to set up and identify verbs on a linux machine ."
    },
    {
        "table_id": "283",
        "table_info": {
            "table_caption": "Table 1: Perplexity Scores",
            "table_column_names": [
                "No. of sentences",
                "node2vec",
                "syntree2vec",
                "word2vec"
            ],
            "table_content_values": [
                [
                    "0.01MB : 73",
                    "24.93",
                    "20.11",
                    "22"
                ],
                [
                    "0.03MB : 220",
                    "28.44",
                    "28.24",
                    "28.44"
                ],
                [
                    "0.07MB : 508",
                    "43.59",
                    "43.41",
                    "43.41"
                ],
                [
                    "0.15MB : 1070",
                    "71.20",
                    "71.01",
                    "71.01"
                ]
            ]
        },
        "gold_description": "since the loss , perplexity of syntree2vec is lower than word2vec , node2vec over most of the data sizes given below we say that the syntree2vec performs slightly better than both of them . there is a clear margin of difference between the perplexity scores of node2vec and syntree2vec .",
        "generated_description": "in order to evaluate the performance of the proposed method on a real - world dataset , we used the penn treebank ( ptb ) corpus [ pennington2014neural ] , which is a collection of short sentences extracted from academic papers . the dataset contains 73 , 220 , 508 , and 1070 sentences for training , development , and test respectively . for each of these datasets , we randomly selected a subset of sentences as the training set and kept the rest as the test set . we used the same parameters for all the methods . the results show that node2vec outperforms syntree2vec and word2vec when the size of training data is small . however , when the training data size is large , the difference is not as large as for the ptb corpus ."
    },
    {
        "table_id": "284",
        "table_info": {
            "table_caption": "Table 1: Label description for ASNQ. Here S, LA, SA refer to answer sentence, long answer passage and short answer phrase respectively.",
            "table_column_names": [
                "Label",
                "S ∈ LA",
                "SA ∈ S",
                "# Train",
                "# Dev"
            ],
            "table_content_values": [
                [
                    "1",
                    "No",
                    "No",
                    "19,446,120",
                    "870,404"
                ],
                [
                    "2",
                    "No",
                    "Yes",
                    "428,122",
                    "25,814"
                ],
                [
                    "3",
                    "Yes",
                    "No",
                    "442,140",
                    "29,558"
                ],
                [
                    "4",
                    "Yes",
                    "Yes",
                    "61,186",
                    "4,286"
                ]
            ]
        },
        "gold_description": "for each question in asnq , the positive candidate answers are those sentences that occur in the long answer paragraphs in nq and contain annotated short answers . the remaining sentences from the document are labeled as negative for the target question . while the asnq statistics are reported in table 1 . asnq contains 57 , 242 distinct questions in the training set and 2 , 672 distinct questions in the dev . set ,",
        "generated_description": "the dataset is split into three parts : training set ( 80 % ) , development set ( 10 % ) and test set ( 20 % ) . the training set is used to fine - tune the model and the development set to evaluate the performance on the test set . the model is trained on the entire training set and evaluated on the part of the dev set that contains the answer sentences and long answer passage ."
    },
    {
        "table_id": "285",
        "table_info": {
            "table_caption": "Table 3: Performance of different models on WikiQA dataset. Here Comp-Agg + LM + LC refers to a Compare-Aggregate model with Language Modeling and Latent Clustering as proposed by Yoon et al. DBLP:journals/corr/abs-1905-12897. TL(QNLI) refers to Transfer Learning from the QNLI corpus. L and B stand for Large and Base, respectively.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] MAP",
                "[BOLD] MRR"
            ],
            "table_content_values": [
                [
                    "Comp-Agg + LM + LC",
                    "0.764",
                    "0.784"
                ],
                [
                    "Comp-Agg + LM + LC+ TL(QNLI)",
                    "0.834",
                    "0.848"
                ],
                [
                    "BERT-B FT WikiQA",
                    "0.813",
                    "0.828"
                ],
                [
                    "BERT-B FT ASNQ",
                    "0.884",
                    "0.898"
                ],
                [
                    "BERT-B TandA (ASNQ → WikiQA )",
                    "0.893",
                    "0.903"
                ],
                [
                    "BERT-L FT WikiQA",
                    "0.836",
                    "0.853"
                ],
                [
                    "BERT-L FT ASNQ",
                    "0.892",
                    "0.904"
                ],
                [
                    "BERT-L TandA (ASNQ → WikiQA)",
                    "0.904",
                    "0.912"
                ],
                [
                    "RoBERTa-B FT ASNQ",
                    "0.882",
                    "0.894"
                ],
                [
                    "RoBERTa-B TandA (ASNQ → WikiQA)",
                    "0.889",
                    "0.901"
                ],
                [
                    "RoBERTa-L FT ASNQ",
                    "0.910",
                    "0.919"
                ],
                [
                    "RoBERTa-L TandA (ASNQ → WikiQA )",
                    "[BOLD] 0.920",
                    "[BOLD] 0.933"
                ]
            ]
        },
        "gold_description": "table 3 : performance of different models on wikiqa dataset . here comp - agg + lm + lc refers to a compareaggregate model with language modeling and latent clustering as proposed by yoon et al . ( 2019 ) . tl ( qnli ) refers to transfer learning from the qnli corpus . l and b stand for large and base , respectively . table 3 reports the map and mrr of different pre - trained transformers models for two methods : standard fine - tuning ( ft ) and tanda . the latter takes two arguments that we indicate as transfer dataset → adapt dataset .",
        "generated_description": "the comp - agg + lm + lc + tl model ( qnli + lc ) is a baseline model that takes the original qnli sentence representation as the input of a multi - label logistic regression ( mlp ) classifier , and then finetunes it with the asnq dataset . we can see that fine - tuning bert - b and roberta - b with the tanda task improves the performance of the original bert model , but the improvement is not as large as the one obtained with the wikiqa task . we conjecture that the reason is that the sentence representations learned by bert are already good enough for the sentence classification task , and that fine tuning the bert language model may not help to further improve the performance . we also observe that the performance is slightly better when we finetune the model with the same training data ."
    },
    {
        "table_id": "286",
        "table_info": {
            "table_caption": "Table 4: Performance of different models on TREC-QA dataset. Here Comp-Agg + LM + LC refers to a Compare-Aggregate model with Language Modeling and Latent Clustering as proposed in [25]. TL(QNLI) refers to Transfer Learning from the QNLI corpus. L and B stand for Large and Base, respectively.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] MAP",
                "[BOLD] MRR"
            ],
            "table_content_values": [
                [
                    "Comp-Agg + LM + LC",
                    "0.868",
                    "0.928"
                ],
                [
                    "Comp-Agg + LM + LC + TL(QNLI)",
                    "0.875",
                    "0.940"
                ],
                [
                    "BERT-B FT TREC-QA",
                    "0.857",
                    "0.937"
                ],
                [
                    "BERT-B FT ASNQ",
                    "0.823",
                    "0.872"
                ],
                [
                    "BERT-B TandA (ASNQ → TREC-QA)",
                    "0.912",
                    "0.951"
                ],
                [
                    "BERT-L FT TREC-QA",
                    "0.904",
                    "0.946"
                ],
                [
                    "BERT-L FT ASNQ",
                    "0.824",
                    "0.872"
                ],
                [
                    "BERT-L TandA (ASNQ → TREC-QA )",
                    "0.912",
                    "0.967"
                ],
                [
                    "RoBERTa-B FT ASNQ",
                    "0.849",
                    "0.907"
                ],
                [
                    "RoBERTa-B TandA (ASNQ →TREC-QA )",
                    "0.914",
                    "0.952"
                ],
                [
                    "RoBERTa-L FT ASNQ",
                    "0.880",
                    "0.928"
                ],
                [
                    "RoBERTa-L TandA (ASNQ → TREC-QA)",
                    "[BOLD] 0.943",
                    "[BOLD] 0.974"
                ]
            ]
        },
        "gold_description": "table 4 : performance of different models on trec - qa dataset . here comp - agg + lm + lc refers to a compareaggregate model with language modeling and latent clustering as proposed in ( yoon et al . 2019 ) . tl ( qnli ) refers to transfer learning from the qnli corpus . l and b stand for large and base , respectively . table 4 reports the results of our experiments with trec - qa .",
        "generated_description": "we can see that fine - tuning bert - b and roberta - l on the trec - qa dataset improves the performance of the comp - agg + lm + lc baseline by 0 . 868 and 0 . 928 , respectively . we can also see that the performance improves when we fine - tune the model on the asnq dataset , but the improvement is not as significant as the one on the qnli dataset . we conjecture that the reason is that the size of the training set of the qsquad dataset is much smaller than that of the quora dataset , which makes it more difficult for the model to generalize well ."
    },
    {
        "table_id": "287",
        "table_info": {
            "table_caption": "Table 5: Model accuracy when noise is injected into WikiQA and TREC-QA datasets. ∗ indicates the target dataset for the second step of fine-tuning (adapt step).",
            "table_column_names": [
                "[BOLD] BERT-base",
                "WikiQA MAP",
                "WikiQA % Drop",
                "WikiQA MRR",
                "WikiQA % Drop",
                "TREC-QA MAP",
                "TREC-QA % Drop",
                "TREC-QA MRR",
                "TREC-QA % Drop"
            ],
            "table_content_values": [
                [
                    "No noise Fine-tuning",
                    "0.813",
                    "-",
                    "0.828",
                    "-",
                    "0.857",
                    "-",
                    "0.937",
                    "-"
                ],
                [
                    "10% noise Fine-tuning",
                    "0.775",
                    "4.67%",
                    "0.793",
                    "4.22%",
                    "0.826",
                    "3.62%",
                    "0.902",
                    "3.73%"
                ],
                [
                    "20% noise Fine-tuning",
                    "0.629",
                    "[BOLD] 22.63%",
                    "0.645",
                    "22.10%",
                    "0.738",
                    "[BOLD] 13.88%",
                    "0.843",
                    "10.03%"
                ],
                [
                    "No noise TandA (ASNQ → *)",
                    "0.893",
                    "-",
                    "0.903",
                    "-",
                    "0.912",
                    "-",
                    "0.951",
                    "-"
                ],
                [
                    "10% noise TandA (ASNQ → *)",
                    "0.876",
                    "1.90%",
                    "0.889",
                    "1.55%",
                    "0.896",
                    "1.75%",
                    "0.941",
                    "1.05%"
                ],
                [
                    "20% noise TandA (ASNQ → *)",
                    "0.870",
                    "[BOLD] 2.57%",
                    "0.886",
                    "1.88%",
                    "0.891",
                    "[BOLD] 2.30%",
                    "0.937",
                    "1.47%"
                ]
            ]
        },
        "gold_description": "table 5 : model accuracy when noise is injected into wikiqa and trec - qa datasets . ∗ indicates the target dataset for the second step of fine - tuning ( adapt step ) . table 5 shows the map and mrr of bertbase using ft and tanda , also indicating the drop percentage ( % ) in accuracy due to the injection of noise .",
        "generated_description": "we can see that fine - tuning the bert - base model with noisy training data results in a significant drop in map and mrr on both datasets . the drop is more significant for the trec - qa dataset , where the mrr drops by 13 . 88 % and the map drops by 22 . 63 % when the noise level is increased from 10 % to 20 % . in the case of the asnq dataset , the drop is only 1 . 90 % in terms of map and 1 . 9 % in mrr . we can also see that the performance of bert degrades significantly when the amount of noise increases . for example , the map on wikiqa drops from 0 . 813 ( without noise ) to 0 . 629 ( 20 % ) with 20 % added noise ."
    },
    {
        "table_id": "288",
        "table_info": {
            "table_caption": "Table 6: Impact of different labels of ASNQ on fine-tuning BERT for answer sentence selection. Neg and Pos refers to question-answer (QA) pairs of that particular label being chosen for fine-tuning.",
            "table_column_names": [
                "Model",
                "WikiQA MAP",
                "WikiQA MRR",
                "TREC-QA MAP",
                "TREC-QA MRR"
            ],
            "table_content_values": [
                [
                    "Neg: 1 Pos: 4",
                    "0.870",
                    "0.880",
                    "0.808",
                    "0.847"
                ],
                [
                    "Neg: 2 Pos: 4",
                    "0.751",
                    "0.763",
                    "0.662",
                    "0.751"
                ],
                [
                    "Neg: 3 Pos: 4",
                    "0.881",
                    "0.895",
                    "0.821",
                    "0.869"
                ],
                [
                    "Neg: 2,3 Pos: 4",
                    "0.883",
                    "0.898",
                    "0.823",
                    "0.871"
                ],
                [
                    "Neg: 1,2,3 Pos: 4",
                    "0.884",
                    "0.898",
                    "0.823",
                    "0.872"
                ]
            ]
        },
        "gold_description": "table 6 : impact of different labels of asnq on fine - tuning bert for answer sentence selection . neg and pos refers to question - answer ( qa ) pairs of that particular label being chosen for fine - tuning . we carried out experiments by fine - tuning bertbase on asnq with specific label categories assigned to the negative class . table 6 shows the results : label 3 is the most effective negative type of the three ,",
        "generated_description": "we further investigate the impact of different labels of asnq on fine - tuning bert for answer sentence selection . the model with the best performance on the validation set is chosen to fine - tune on the training set of the wikiqa dataset ( i . e . , neg : 1 , 2 , 3 pos : 4 ) . however , the model with a combination of neg and pos achieves the best results on the trec - qa test set . we conjecture that the reason for this is that the question - answer pairs of a particular label are more similar to each other than the question pairs of other labels ."
    },
    {
        "table_id": "289",
        "table_info": {
            "table_caption": "Table 7: Comparison of TandA with ASNQ and QNLI",
            "table_column_names": [
                "[BOLD] BERT-Base",
                "[BOLD] WikiQA MAP",
                "[BOLD] WikiQA MRR",
                "[BOLD] TREC-QA MAP",
                "[BOLD] TREC-QA MRR"
            ],
            "table_content_values": [
                [
                    "FT QNLI",
                    "0.760",
                    "0.766",
                    "0.820",
                    "0.890"
                ],
                [
                    "FT ASNQ",
                    "0.884",
                    "0.898",
                    "0.823",
                    "0.872"
                ],
                [
                    "TandA (QNLI →)",
                    "0.832",
                    "0.852",
                    "0.863",
                    "0.906"
                ],
                [
                    "TandA (ASNQ →)",
                    "0.893",
                    "0.903",
                    "0.912",
                    "0.951"
                ]
            ]
        },
        "gold_description": "table 7 shows that both ft and tanda using asnq provide significantly better performance than qnli on the wikiqa dataset .",
        "generated_description": "we also compare the performance of tanda with qnli and asnq on the wikiqa and trec - qa datasets . we use bert - base as the pre - trained bert model and fine - tune it on the same datasets . the results are shown in table 7 . we can see that the performance improvement of tanda is more significant than that of bert . for example , the mean average precision ( map ) and mean reciprocal rank ( mrr ) are improved from 0 . 760 to 0 . 840 and 0 . 898 respectively when fine - tuning bert on the wikipediaqa dataset . similarly , the map and mrr are improved by 0 . 766 and 1 . 0 % respectively when finetuning on the trec dataset ."
    },
    {
        "table_id": "290",
        "table_info": {
            "table_caption": "Table 8: Comparison between FT and TandA on real-world datasets derived from Alexa Virtual Assistant traffic",
            "table_column_names": [
                "MODEL",
                "MODEL",
                "MODEL",
                "Sample 1 Prec@1",
                "Sample 1 MAP",
                "Sample 1 MRR",
                "Sample 2 Prec@1",
                "Sample 2 MAP",
                "Sample 2 MRR",
                "Sample 3 Prec@1",
                "Sample 3 MAP",
                "Sample 3 MRR"
            ],
            "table_content_values": [
                [
                    "BERT",
                    "Base",
                    "NAD",
                    "49.80",
                    "0.506",
                    "0.638",
                    "52.69",
                    "0.432",
                    "0.629",
                    "41.86",
                    "0.352",
                    "0.543"
                ],
                [
                    "BERT",
                    "Base",
                    "ASNQ",
                    "55.06",
                    "0.557",
                    "0.677",
                    "44.31",
                    "0.395",
                    "0.567",
                    "44.19",
                    "0.369",
                    "0.561"
                ],
                [
                    "BERT",
                    "Base",
                    "TANDA (ASNQ → NAD)",
                    "58.70",
                    "0.585",
                    "0.703",
                    "58.68",
                    "0.474",
                    "0.683",
                    "49.42",
                    "0.391",
                    "0.613"
                ],
                [
                    "BERT",
                    "Large",
                    "NAD",
                    "53.85",
                    "0.537",
                    "0.671",
                    "53.29",
                    "0.469",
                    "0.629",
                    "43.61",
                    "0.395",
                    "0.558"
                ],
                [
                    "BERT",
                    "Large",
                    "ASNQ",
                    "57.49",
                    "0.552",
                    "0.686",
                    "50.89",
                    "0.440",
                    "0.630",
                    "45.93",
                    "0.399",
                    "0.585"
                ],
                [
                    "BERT",
                    "Large",
                    "TANDA (ASNQ → NAD)",
                    "61.54",
                    "0.607",
                    "0.725",
                    "63.47",
                    "0.514",
                    "0.727",
                    "51.16",
                    "0.439",
                    "0.616"
                ],
                [
                    "RoBERTa",
                    "Base",
                    "NAD",
                    "59.11",
                    "0.563",
                    "0.699",
                    "56.29",
                    "0.511",
                    "0.670",
                    "48.26",
                    "0.430",
                    "0.612"
                ],
                [
                    "RoBERTa",
                    "Base",
                    "ASNQ",
                    "58.70",
                    "0.587",
                    "0.707",
                    "54.50",
                    "0.473",
                    "0.656",
                    "45.35",
                    "0.437",
                    "0.608"
                ],
                [
                    "RoBERTa",
                    "Base",
                    "TANDA (ASNQ → NAD)",
                    "65.59",
                    "0.623",
                    "0.757",
                    "62.87",
                    "0.537",
                    "0.714",
                    "56.98",
                    "0.473",
                    "0.679"
                ],
                [
                    "RoBERTa",
                    "Large",
                    "NAD",
                    "70.81",
                    "0.654",
                    "0.796",
                    "63.47",
                    "0.581",
                    "0.734",
                    "52.91",
                    "0.490",
                    "0.651"
                ],
                [
                    "RoBERTa",
                    "Large",
                    "ASNQ",
                    "64.37",
                    "0.627",
                    "0.750",
                    "59.88",
                    "0.526",
                    "0.705",
                    "54.65",
                    "0.478",
                    "0.674"
                ],
                [
                    "RoBERTa",
                    "Large",
                    "TANDA (ASNQ → NAD)",
                    "71.26",
                    "0.680",
                    "0.805",
                    "74.85",
                    "0.625",
                    "0.821",
                    "58.14",
                    "0.514",
                    "0.699"
                ]
            ]
        },
        "gold_description": "table 8 : comparison between ft and tanda on real - world datasets derived from alexa virtual assistant traffic in these experiments , we used , as usual , asnq for the transfer step , and nad as our target dataset for the adapt step . table 8 reports the comparative results using simple ft on nad ( denoted simply by nad ) and tested on samples 1 , 2 and 3 .",
        "generated_description": "for bert and xlnet , we report the performance of the base model and the xlnet large model , which are fine - tuned on the training set of the iwslt dataset . we observe that the proposed tanda consistently outperforms the nad baseline and the asnq baseline in terms of all the evaluation metrics for all the three sample sizes . for example , for sample 1 and 2 , the performance improvement is over 10 % for both the base and the large bert models . for sample 3 , we observe similar trends for the bert base and large models , with the large model performing slightly better than the other two . we also observe that for the baseline model , the proposed method significantly outperforms asnsq ."
    },
    {
        "table_id": "291",
        "table_info": {
            "table_caption": "Table 5: Top ten and bottom ten features used in successful IC classifications using vocabulary features. Differentiation and integration terms are prefixed with dif and int, while has_dif and has_int are the binary features for whether any differentiation/integration terms are present at all. The bias term is the averaged sum of the value associated with each root node in the ensemble.",
            "table_column_names": [
                "IC = 1 Feature",
                "IC = 1 Value",
                "IC = 1 Contribution",
                "IC = 2 Feature",
                "IC = 2 Value",
                "IC = 2 Contribution",
                "IC = 3 Feature",
                "IC = 3 Value",
                "IC = 3 Contribution"
            ],
            "table_content_values": [
                [
                    "has_diff",
                    "0.0",
                    "+0.953",
                    "dif_too",
                    "1.0",
                    "+1.155",
                    "Bias term",
                    "1.0",
                    "+0.872"
                ],
                [
                    "Bias term",
                    "1.0",
                    "+0.419",
                    "Bias term",
                    "1.0",
                    "+0.594",
                    "has_int",
                    "0.0",
                    "+0.450"
                ],
                [
                    "dif_but",
                    "0.0",
                    "+0.114",
                    "dif_consider",
                    "1.0",
                    "+0.491",
                    "dif_may",
                    "1.0",
                    "+0.393"
                ],
                [
                    "dif_because",
                    "0.0",
                    "+0.058",
                    "dif_however",
                    "1.0",
                    "+0.186",
                    "dif_but",
                    "1.0",
                    "+0.306"
                ],
                [
                    "dif_how",
                    "0.0",
                    "+0.033",
                    "dif_how",
                    "1.0",
                    "+0.092",
                    "dif_hope",
                    "1.0",
                    "+0.215"
                ],
                [
                    "dif_yet",
                    "0.0",
                    "+0.033",
                    "dif_hope",
                    "0.0",
                    "+0.027",
                    "dif_while",
                    "0.0",
                    "+0.060"
                ],
                [
                    "int_unity",
                    "0.0",
                    "+0.029",
                    "dif_perhaps",
                    "0.0",
                    "+0.019",
                    "dif_rather",
                    "0.0",
                    "+0.058"
                ],
                [
                    "dif_depend",
                    "0.0",
                    "+0.024",
                    "dif_almost",
                    "0.0",
                    "+0.018",
                    "dif_too",
                    "0.0",
                    "+0.033"
                ],
                [
                    "dif_hope",
                    "0.0",
                    "+0.022",
                    "dif_sometimes",
                    "0.0",
                    "+0.012",
                    "dif_seem",
                    "0.0",
                    "+0.030"
                ],
                [
                    "dif_rather",
                    "0.0",
                    "+0.022",
                    "dif_although",
                    "0.0",
                    "+0.011",
                    "dif_differ",
                    "0.0",
                    "+0.026"
                ],
                [
                    "has_int",
                    "0.0",
                    "-0.009",
                    "dif_while",
                    "0.0",
                    "-0.032",
                    "int_remain",
                    "0.0",
                    "-0.024"
                ],
                [
                    "dif_close_to",
                    "0.0",
                    "-0.009",
                    "dif_rather",
                    "0.0",
                    "-0.033",
                    "dif_separate",
                    "0.0",
                    "-0.026"
                ],
                [
                    "dif_seem",
                    "0.0",
                    "-0.010",
                    "dif_different",
                    "0.0",
                    "-0.050",
                    "int_weigh",
                    "0.0",
                    "-0.028"
                ],
                [
                    "dif_consider",
                    "0.0",
                    "-0.011",
                    "dif_often",
                    "0.0",
                    "-0.050",
                    "dif_possible",
                    "0.0",
                    "-0.029"
                ],
                [
                    "int_account",
                    "0.0",
                    "-0.012",
                    "dif_each",
                    "0.0",
                    "-0.050",
                    "int_unity",
                    "0.0",
                    "-0.031"
                ],
                [
                    "dif_secret",
                    "0.0",
                    "-0.013",
                    "dif_either",
                    "0.0",
                    "-0.069",
                    "dif_however",
                    "0.0",
                    "-0.036"
                ],
                [
                    "dif_differ",
                    "0.0",
                    "-0.018",
                    "dif_about",
                    "0.0",
                    "-0.078",
                    "dif_often",
                    "0.0",
                    "-0.037"
                ],
                [
                    "dif_usually",
                    "0.0",
                    "-0.019",
                    "dif_both",
                    "0.0",
                    "-0.079",
                    "dif_about",
                    "0.0",
                    "-0.068"
                ],
                [
                    "int_remain",
                    "0.0",
                    "-0.024",
                    "dif_because",
                    "0.0",
                    "-0.284",
                    "dif_though",
                    "0.0",
                    "-0.073"
                ],
                [
                    "dif_may",
                    "0.0",
                    "-0.036",
                    "dif_but",
                    "1.0",
                    "-0.575",
                    "dif_because",
                    "0.0",
                    "-0.102"
                ]
            ]
        },
        "gold_description": "the vocabulary model correctly classified test items in three ic bands only ( table 5 ) .",
        "generated_description": "we can see that the inclusion of the bias term generally leads to an improvement in the classification accuracy . for example , the most informative features are dif_too and has_int with an improvement of 0 . 953 and 0 . 872 for ic = 1 and ic = 2 , respectively . the other features that do not lead to an increase in classification accuracy for any of the ics are the bias terms . for instance , the feature that leads to the largest improvement for the ic with the highest number of features is dif_ { hope } ."
    },
    {
        "table_id": "292",
        "table_info": {
            "table_caption": "Figure 1, Listing 1 & Table 1: (Right code snippet) Implementation of Kiperwasser and Goldberg (2016)’s neural parser in only a few lines using UniParse. (Right table and left figure) Seconds a decoder takes to decode an entire dataset, given a set of scores. Score matrix entries are generated uniformly on [0, 1]. The random generated data has an impact on CLE since worst-case performance depends on the sorting bottleneck; the figure demonstrates this by the increasingly broad standard deviation band. Experiments are run on an Ubuntu machine with an Intel Xeon E5-2660, 2.60GHz CPU.",
            "table_column_names": [
                "[BOLD] Algorithm",
                "[BOLD] en_ud",
                "[BOLD] en_ptb",
                "[BOLD] sents/s"
            ],
            "table_content_values": [
                [
                    "Eisner (generic)",
                    "96.35",
                    "479.1",
                    "∼ 80"
                ],
                [
                    "Eisner (ours)",
                    "1.496",
                    "6.31",
                    "∼ 6009"
                ],
                [
                    "CLE (generic)",
                    "19.12",
                    "93.8",
                    "∼ 404"
                ],
                [
                    "CLE (ours)",
                    "1.764",
                    "6.98",
                    "∼ 5436"
                ]
            ]
        },
        "gold_description": "seconds a decoder takes to decode an entire dataset , given a set of scores . score matrix entries are we compare cython implementations in table 1 and figure 1 over randomised score input . note that our implementations are significantly faster .",
        "generated_description": "as expected , cle is slower than eisner ’ s method by a factor of approximately two orders of magnitude . however , the difference in speed between eisner and cle is not statistically significant . this is due to the fact that the sorting bottleneck for cle is the same as the one for eisner , and the difference between the two methods is negligible ."
    },
    {
        "table_id": "293",
        "table_info": {
            "table_caption": "Table 2: Results of form clustering, measured in % of 1−vmeasure (expressing the error, i.e. lower is better). Baseline (either full form or prefix of form of length 5), our system, and oracle upper bound. Last column is error reduction on the scale from baseline to upper bound, in %.",
            "table_column_names": [
                "Treebank ar_padt",
                "Baseline form",
                "Baseline 4.19",
                "Our 3.90",
                "Upp. 2.93",
                "Err.red. 23.1"
            ],
            "table_content_values": [
                [
                    "ca_ancora",
                    "form",
                    "4.65",
                    "4.35",
                    "3.32",
                    "22.3"
                ],
                [
                    "cs_cac",
                    "form5",
                    "3.56",
                    "2.25",
                    "1.14",
                    "54.0"
                ],
                [
                    "cs_fictree",
                    "form5",
                    "4.82",
                    "4.08",
                    "2.68",
                    "34.6"
                ],
                [
                    "cs_pdt",
                    "form5",
                    "4.93",
                    "3.41",
                    "1.65",
                    "46.6"
                ],
                [
                    "da_ddt",
                    "form",
                    "2.32",
                    "2.16",
                    "1.55",
                    "21.2"
                ],
                [
                    "en_ewt",
                    "form",
                    "2.29",
                    "2.22",
                    "1.78",
                    "13.8"
                ],
                [
                    "es_ancora",
                    "form",
                    "3.99",
                    "3.38",
                    "2.25",
                    "34.7"
                ],
                [
                    "et_edt",
                    "form5",
                    "4.78",
                    "4.31",
                    "2.54",
                    "20.9"
                ],
                [
                    "fa_seraji",
                    "form",
                    "8.99",
                    "8.76",
                    "7.44",
                    "14.8"
                ],
                [
                    "fr_gsd",
                    "form",
                    "4.12",
                    "3.81",
                    "2.70",
                    "22.0"
                ],
                [
                    "hi_hdtb",
                    "form",
                    "4.18",
                    "3.58",
                    "2.83",
                    "44.3"
                ],
                [
                    "hr_set",
                    "form5",
                    "4.04",
                    "2.87",
                    "1.71",
                    "50.2"
                ],
                [
                    "it_isdt",
                    "form",
                    "4.27",
                    "3.71",
                    "2.78",
                    "37.8"
                ],
                [
                    "it_postwita",
                    "form",
                    "3.60",
                    "4.07",
                    "2.37",
                    "-38.0"
                ],
                [
                    "ja_gsd",
                    "form",
                    "1.64",
                    "1.93",
                    "1.41",
                    "-123.1"
                ],
                [
                    "ko_kaist",
                    "form",
                    "0.14",
                    "2.41",
                    "0.11",
                    "-6392.8"
                ],
                [
                    "la_ittb",
                    "form5",
                    "6.53",
                    "6.97",
                    "3.85",
                    "-16.4"
                ],
                [
                    "la_proiel",
                    "form5",
                    "6.92",
                    "7.42",
                    "4.20",
                    "-18.4"
                ],
                [
                    "lv_lvtb",
                    "form5",
                    "3.90",
                    "3.39",
                    "2.10",
                    "28.0"
                ],
                [
                    "no_bokmaal",
                    "form",
                    "2.79",
                    "2.22",
                    "1.48",
                    "43.6"
                ],
                [
                    "no_nynorsk",
                    "form",
                    "2.73",
                    "2.52",
                    "1.48",
                    "16.7"
                ],
                [
                    "pl_lfg",
                    "form5",
                    "3.68",
                    "3.06",
                    "1.84",
                    "33.6"
                ],
                [
                    "pt_bosque",
                    "form",
                    "3.57",
                    "3.17",
                    "2.55",
                    "39.0"
                ],
                [
                    "ro_nonstd",
                    "form5",
                    "8.13",
                    "7.95",
                    "5.64",
                    "7.2"
                ],
                [
                    "sk_snk",
                    "form5",
                    "2.87",
                    "2.01",
                    "0.63",
                    "38.2"
                ],
                [
                    "uk_iu",
                    "form",
                    "2.66",
                    "1.94",
                    "0.88",
                    "40.7"
                ],
                [
                    "ur_udtb",
                    "form",
                    "3.95",
                    "3.79",
                    "2.65",
                    "12.3"
                ],
                [
                    "Average",
                    "[EMPTY]",
                    "4.08",
                    "3.77",
                    "2.45",
                    "-210.3"
                ],
                [
                    "Median",
                    "[EMPTY]",
                    "3.97",
                    "3.40",
                    "2.31",
                    "22.7"
                ]
            ]
        },
        "gold_description": "our experiments on 23 languages show our approach to be promising , surpassing the baseline on 23 of the 28 evaluation datasets . we evaluate our setup on 28 datasets for 23 languages , finding that it outperforms the baseline on 23 of the datasets , this results in a set of 28 treebanks for 23 languages listed in table 2 . the results are listed in table 2 . the oracle does not reach 100 % ; we also express the performance of our method as error reduction on the scale from baseline ( 0 % ) to upper bound ( 100 % ) . for 23 of the 28 datasets , our method achieves a positive error reduction ; the median error reduction is 23 % . because of the extreme result for korean , the average does not make much sense here . the results are worst for korean and japanese , the \" form \" baseline very close to the upper bound our results are very low here . we also observe deteriorations for a treebank of italian tweets and for treebanks of historical latin , on all other datasets , we observe an improvement over the baseline , with an error reduction typically between 10 % and 35 % . the performance is especially good for slavic languages ( cs , hr , pl , sk , uk ) , where the error reduction is often around 50 % . the evaluation showed the approach to be promising , surpassing the baseline on most of the evaluation datasets .",
        "generated_description": "we can see that our approach improves the bleu scores on all treebanks , with the largest improvement on the treebanks with the smallest treebanks ( cs_cac , cs_fictree , en_ewt , es_ancora , et_edt , fa_seraji ) and smallest improvement on those with larger trees ( ca_padt and cs_pdt ) . the only treebank where our approach does not improve over the baseline model is cs_ct with form5 ."
    },
    {
        "table_id": "294",
        "table_info": {
            "table_caption": "Table 3: Comparison of the word form similarities, in % of 1−vmeasure of the clustering. Average and median over the 28 datasets.",
            "table_column_names": [
                "Distance",
                "Average",
                "Median"
            ],
            "table_content_values": [
                [
                    "[ITALIC] JW",
                    "8.17",
                    "7.92"
                ],
                [
                    "[ITALIC] cos",
                    "4.39",
                    "3.87"
                ],
                [
                    "[ITALIC] JW⋅ [ITALIC] cos",
                    "3.77",
                    "3.40"
                ]
            ]
        },
        "gold_description": "in table 3 , we compare the combined distance measure with each of the two components used alone . the results show that combining the edit distance with the embedding similarity is stronger than using any of the measures alone . the embedding similarity alone performs much better than the edit distance alone .",
        "generated_description": "we see that the cosine similarity is the most dominant , with 8 . 17 % of the similarities being jw , 7 . 92 % being cos , and 4 . 39 % being the jw ⋅ cos . the average and median over the 28 datasets are 3 . 87 % and 3 . 40 % , respectively . these differences are statistically significant ( p < 0 . 01 ) ."
    },
    {
        "table_id": "295",
        "table_info": {
            "table_caption": "TABLE II: Performance comparison of different models with pre-trained embedding",
            "table_column_names": [
                "#of Authors",
                "6",
                "6",
                "8",
                "10",
                "12",
                "14"
            ],
            "table_content_values": [
                [
                    "samples/author",
                    "350",
                    "1100",
                    "931",
                    "849",
                    "562",
                    "469"
                ],
                [
                    "Char-CNN",
                    "83",
                    "96",
                    "92",
                    "86",
                    "75",
                    "69"
                ],
                [
                    "W2V(CBOW)",
                    "65.3",
                    "97",
                    "82.8",
                    "83.3",
                    "76.4",
                    "71.8"
                ],
                [
                    "fastText(CBOW)",
                    "65",
                    "73",
                    "58",
                    "35.7",
                    "37.31",
                    "40.3"
                ],
                [
                    "W2V(Skip)",
                    "79",
                    "94",
                    "91.1",
                    "85.4",
                    "[BOLD] 82.2",
                    "78.6"
                ],
                [
                    "fastText(Skip)",
                    "[BOLD] 86",
                    "[BOLD] 98",
                    "[BOLD] 95.2",
                    "[BOLD] 86.35",
                    "80.9",
                    "[BOLD] 81.2"
                ]
            ]
        },
        "gold_description": "various subsets of authors were chosen and the dataset was truncated to each author having the same number of samples . the classification was carried out with 2 author attribution datasets , one with 6 authors and our dataset with maximum 14 authors . the larger dataset was trained with 6 , 8 , 10 , 12 and 14 authors to analyze the effects of increasing classes on the proposed model . we evaluate the performance of the proposed architecture in terms of accuracy , we also try to infer how the character - level model compares with the word level models . all models are compared for the increasing number of authors ( classes ) on the corpus mentioned to assess the quality of the models . both word and character levels are summarized in table ii . from the accuracy comparisons shown in table ii we see that skip - gram implemented by fasttext performs well in the given datasets . character level model performs reasonably well in competition with subword level as long as the dataset is big enough . with larger datasets , this model will be able to perform significantly better compare character embeddings with word embeddings showing that character embeddings perform almost as good as the best word embedding model .",
        "generated_description": "the pre - trained word2vec embeddings are then used to initialize the char - cnn model and the w2v model . we can see that the skip - gram model outperforms the other two models with a large margin . fasttext with skip - gram embedding also performs better than the original fasttext ."
    },
    {
        "table_id": "296",
        "table_info": {
            "table_caption": "Table 3: Comparison of the Label accuracy on Development set.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Label Accuracy ( [ITALIC] ϕ = 0.76)",
                "[BOLD] Label Accuracy ( [ITALIC] ϕ = 0.67)"
            ],
            "table_content_values": [
                [
                    "HexaF - UCL",
                    "80.18",
                    "80.18"
                ],
                [
                    "Our Model (BERT)",
                    "[BOLD] 80.20",
                    "[BOLD] 86.7"
                ]
            ]
        },
        "gold_description": "although our unsupervised model doesn ' t support all the labels , to show the effectiveness of the approach , we compare the label accuracy of \" supports \" label against a supervised approach – hexaf . results from table 3 suggests that our approach is comparable to hexaf4 for φ = 0 . 76 .",
        "generated_description": "from the table , we can see that hexaf - ucl performs worse than our model . the reason is that our model is based on bert , which is pre - trained on a large amount of unlabeled data , and is more robust to the noise in the data ."
    },
    {
        "table_id": "297",
        "table_info": {
            "table_caption": "Table 1: Performance of the question generation system on FEVER Dataset.",
            "table_column_names": [
                "[BOLD] Type of FEVER Set",
                "[BOLD] Total Claims",
                "[BOLD] Claims Converted to Questions",
                "[BOLD] Conversion Accuracy",
                "[BOLD] Total Questions",
                "[BOLD] Questions per claim (Median)"
            ],
            "table_content_values": [
                [
                    "Training Set",
                    "145449",
                    "131969",
                    "90.73",
                    "395717",
                    "3"
                ],
                [
                    "Development Set",
                    "19998",
                    "17749",
                    "88.75",
                    "54422",
                    "3"
                ],
                [
                    "Test Set",
                    "9999",
                    "8863",
                    "88.63",
                    "27359",
                    "3"
                ]
            ]
        },
        "gold_description": "for the subtask of question generation , the results in table 1 show that the system is able to generate questions given a claim with considerably good accuracy . the conversion accuracy is defined as the ratio of the number of claims in which the named entities are extracted to the number of claims . the results also support our assumption that the claims generally feature information about one or more entities . ta",
        "generated_description": "the fever dataset contains a total of 145449 claims from the fever training , development , and test sets . the claims in the test set are converted to questions and the accuracy is 88 . 63 % with a median of 27359 questions per claim ( 3 per claim ) . we observe that 90 . 73 % of these claims are converted into questions and 88 . 75 % of them are correctly converted to the correct answer by our system ."
    },
    {
        "table_id": "298",
        "table_info": {
            "table_caption": "Table 2: Performance of the question generation system on FEVER Dataset.",
            "table_column_names": [
                "[BOLD] Type of Set",
                "[BOLD] Label Accuracy ( [ITALIC] ϕ = 0.76)",
                "[BOLD] Label Accuracy ( [ITALIC] ϕ = 0.67)"
            ],
            "table_content_values": [
                [
                    "Training Set",
                    "81.52",
                    "88.05"
                ],
                [
                    "Development Set",
                    "80.20",
                    "86.7"
                ],
                [
                    "Test Set",
                    "80.25",
                    "87.04"
                ]
            ]
        },
        "gold_description": "table 2 shows the performance of our fact checking system on the \" supports \" label , the output of our system . we compare the results against two different classification thresholds . here , φ = 0 . 76 suggests that at least 3 out of the 4 questions have to be answered correctly while φ = 0 . 67 suggests that at least 2 out of the 3 questions has to be answered correctly for the claim to be classified as \" supports \" . in contrast to the results reported in table 2 , here we consider φ = 0 . 76 to be a better classification threshold as it improvises over false positives considerably over the entire dataset . from the results , we conclude that it is possible to verify the facts with the right kind of factoid questions .",
        "generated_description": "the fever dataset was used to evaluate the question generation system . the system was trained on the fever training set , the development set and the test set , and evaluated on the original fever test set . the model achieved 81 . 52 % and 88 . 05 % label accuracy on the training set and development set , respectively . the test set achieved 87 . 04 % accuracy with ϕ = 0 . 67 . from the table , we can see that the model achieved the best performance on the testing set , which indicates that the system was able to answer the question correctly ."
    },
    {
        "table_id": "299",
        "table_info": {
            "table_caption": "Table 1: Evaluation of trained models on all test sets. Gap and WinoBias (abbreviated WB) are additionally split into subsets, as introduced in Section 5. Double lines in the table separate results from three different scenarios: when no training data is available, when additional training data exists, and the transductive scenario. The table is further split into sections separated with single horizontal lines. Each section contains a model that has been trained on WikiCREM and models that have not been. The best result in each section is in bold. The best overall result is underlined. Scores on Gap are measured as F1-scores, while the performance on other datasets is given in accuracy. The source of each SOTA is listed in Section 5.",
            "table_column_names": [
                "[EMPTY]",
                "Transductive scenario Gap  [ITALIC] F1",
                "Transductive scenario Gap  [ITALIC] FF1",
                "Transductive scenario Gap  [ITALIC] FM1",
                "Transductive scenario Bias  [ITALIC] FF1 [ITALIC] FM1",
                "Dpr",
                "Wsc",
                "Wnli",
                "[EMPTY]"
            ],
            "table_content_values": [
                [
                    "SOTA",
                    "72.1%",
                    "71.4%",
                    "72.8%",
                    "0.98",
                    "76.4%",
                    "[BOLD] 72.5%–––––––",
                    "[BOLD] 74.7%–––––––",
                    "[EMPTY]"
                ],
                [
                    "Bert",
                    "50.0%",
                    "47.2%",
                    "52.7%",
                    "0.90",
                    "59.8%",
                    "61.9%",
                    "65.8%",
                    "no train data"
                ],
                [
                    "Bert_WikiRand",
                    "55.1%",
                    "51.8%",
                    "58.2%",
                    "0.89",
                    "59.2%",
                    "59.3%",
                    "65.8%",
                    "no train data"
                ],
                [
                    "Bert_WikiCREM",
                    "[BOLD] 59.0%",
                    "[BOLD] 57.5%",
                    "[BOLD] 60.5%",
                    "[BOLD] 0.95",
                    "[BOLD] 67.4%",
                    "[BOLD] 63.4%",
                    "[BOLD] 67.1%",
                    "no train data"
                ],
                [
                    "Bert_Gap",
                    "75.2%",
                    "75.1%",
                    "75.3%",
                    "[BOLD] 1.00–––––",
                    "66.8%",
                    "63.0%",
                    "68.5%",
                    "existing train data"
                ],
                [
                    "Bert_WikiCREM_Gap",
                    "[BOLD] 77.4%",
                    "[BOLD] 78.4%",
                    "[BOLD] 76.4%",
                    "1.03",
                    "[BOLD] 71.1%",
                    "[BOLD] 64.1%",
                    "[BOLD] 70.5%",
                    "existing train data"
                ],
                [
                    "Bert_Dpr",
                    "60.9%",
                    "61.3%",
                    "60.6%",
                    "1.01",
                    "[BOLD] 83.3%",
                    "67.0%",
                    "71.9%",
                    "existing train data"
                ],
                [
                    "Bert_Gap_Dpr",
                    "[BOLD] 70.0%",
                    "[BOLD] 70.4%",
                    "[BOLD] 69.5%",
                    "1.01",
                    "79.4%",
                    "65.6%",
                    "72.6%",
                    "existing train data"
                ],
                [
                    "Bert_WikiCREM_Dpr",
                    "64.2%",
                    "64.2%",
                    "64.1%",
                    "[BOLD] 1.00–––––",
                    "80.0%",
                    "[BOLD] 71.8%",
                    "[BOLD] 74.7%–––––––",
                    "existing train data"
                ],
                [
                    "Bert_all",
                    "76.0%",
                    "77.4%",
                    "74.7%",
                    "[BOLD] 1.04",
                    "80.1%",
                    "[BOLD] 70.0%",
                    "74.0%",
                    "existing train data"
                ],
                [
                    "Bert_WikiCREM_all",
                    "[BOLD] 78.0%–––––––",
                    "[BOLD] 79.4%–––––––",
                    "[BOLD] 76.7%–––––––",
                    "[BOLD] 1.04",
                    "[BOLD] 84.8%–––––––",
                    "[BOLD] 70.0%",
                    "[BOLD] 74.7%–––––––",
                    "existing train data"
                ]
            ]
        },
        "gold_description": "the results of the evaluation of the models on the test sets are shown in table 1 . we notice that additional training on wikicrem consistently improves the performance of the models in all scenarios and on most tests . due to the small size of some test sets , some of the results are subject to deviation . this especially applies to pdp ( 60 test samples ) and wnli ( 145 test samples ) . we observe that bert wikirand generally performs worse than bert , with gap and pdp being notable exceptions . this shows that bert is a strong baseline and that improved performance of bert wikicrem is not a consequence of training on shorter sentences or with different loss function . bert wikicrem consistently outperforms both baselines on all tests , showing that wikicrem can be used as a standalone dataset . we observe that training on the data from the target distribution improves the performance the most . models trained on gap - train usually show more than a 20 % increase in their f1 - score on gap - test . still , bert wikicrem gap shows a consistent improvement over bert gap on all subsets of the gap test set . this confirms that wikicrem works not just as a standalone dataset , but also as an additional pre - training in the transductive scenario . similarly , bert wikicrem dpr outpertasks , forms bert dpr on the majority of showing the applicability of wikicrem to the scenario where additional training data is available . however , good results of bert gap dpr show that additional training on a manually constructed dataset , such as gap , can yield similar results as additional training on wikicrem . the reason behind this difference is the impact of the data distribution . gap , dpr , and wikicrem contain data that",
        "generated_description": "in the transductive scenario , the sota model achieves 72 . 1 % in terms of f1 score , while bert achieves 71 . 4 % and bert_wikirand achieves 58 . 2 % and 57 . 5 % respectively . in the adversarial scenario , bert achieves 68 . 8 % and 63 . 3 % for f1 and fm1 respectively . we can see that our models outperform sota by a large margin in all the metrics . in addition , we can also see that wikicrem achieves the best performance in the dpr , wsc , and wnli metrics , while sota is the best in the wsc metric ."
    },
    {
        "table_id": "300",
        "table_info": {
            "table_caption": "TABLE III: pretrained vs non-pretrained comparison",
            "table_column_names": [
                "#of Authors",
                "6",
                "6",
                "8",
                "10",
                "12",
                "14"
            ],
            "table_content_values": [
                [
                    "#of samples/class",
                    "350",
                    "1100",
                    "931",
                    "849",
                    "562",
                    "469"
                ],
                [
                    "Pretrained Embedding",
                    "83",
                    "96",
                    "92",
                    "86",
                    "75",
                    "69"
                ],
                [
                    "Not pretrained",
                    "71",
                    "95",
                    "82",
                    "83",
                    "66",
                    "59.5"
                ]
            ]
        },
        "gold_description": "various subsets of authors were chosen and the dataset was truncated to each author having the same number of samples . with and without pre - training character level embedding and comparing the proposed architectures on the held - out dataset . to illustrate the need of pre - trained character embeddings , we see from iii that using a pre - trained embedding increases the accuracy across datasets and the different number of authors , regardless of the amount of data for each author . increase the performance a few degrees . we analyzed the importance of pretrained character embedding for author attribution and showed that pre - training can result in better performances .",
        "generated_description": "in this experiment , we compare the performance of the proposed method with the non - pretrained and the pretrained embeddings . we randomly select 350 authors from the total of 14 authors in the conll - 2009 dataset . the authors that did not use any form of pre - training were not considered for this comparison . for each author , we randomly choose a subset of their samples to train the embedding and test the model on . the results show that the proposed approach outperforms the non pretrained method by a large margin . this shows that the use of a pre - trained word embedding can improve the performance significantly ."
    },
    {
        "table_id": "301",
        "table_info": {
            "table_caption": "Table 1: Accuracy for cross-lingual Wikipedia title linking, with the transfer HRL shown in parentheses. The best accuracy among input representations with graphemes, phonemes or articulatory features for Encode and PBEL is presented here. Complete results for each representation are in the supplementary material.",
            "table_column_names": [
                "Model",
                "bn",
                "jv",
                "lo",
                "mr",
                "pa",
                "te",
                "ti",
                "uk",
                "ug",
                "Avg."
            ],
            "table_content_values": [
                [
                    "[BOLD] Exact",
                    ".00",
                    ".63",
                    ".02",
                    ".00",
                    ".00",
                    ".00",
                    ".02",
                    ".02",
                    ".03",
                    ".08"
                ],
                [
                    "[BOLD] Trans",
                    ".00",
                    ".63",
                    ".02",
                    ".17",
                    ".00",
                    ".00",
                    ".46",
                    ".02",
                    ".03",
                    ".15"
                ],
                [
                    "[BOLD] Encode",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Manual",
                    ".36 (hi)",
                    ".70 (id)",
                    ".07 (th)",
                    ".46 (hi)",
                    ".31 (hi)",
                    ".20 (ta)",
                    ".44 (am)",
                    ".25 (ru)",
                    ".16 (tr)",
                    ".33"
                ],
                [
                    "Best-53",
                    ".38 (ms)",
                    ".70 (id)",
                    ".07 (th)",
                    ".46 (hi)",
                    ".36 (te)",
                    ".36 (pa)",
                    ".44 (am)",
                    ".41 (kk)",
                    ".16 (tr)",
                    ".37"
                ],
                [
                    "[BOLD] Pbel",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Manual",
                    ".48 (hi)",
                    ".86 (id)",
                    "[BOLD] .28 (th)",
                    "[BOLD] .62 (hi)",
                    "[BOLD] .49 (hi)",
                    ".33 (ta)",
                    "[BOLD] .69 (am)",
                    ".50 (ru)",
                    ".32 (tr)",
                    ".51"
                ],
                [
                    "Best-53",
                    ".48 (hi)",
                    ".86 (id)",
                    "[BOLD] .28 (th)",
                    "[BOLD] .62 (hi)",
                    "[BOLD] .49 (hi)",
                    "[BOLD] .47 (hi)",
                    "[BOLD] .69 (am)",
                    ".54 (kk)",
                    ".32 (tr)",
                    ".53"
                ],
                [
                    "Multi",
                    "[BOLD] .53",
                    "[BOLD] .87",
                    "[BOLD] .28",
                    "[BOLD] .62",
                    ".48",
                    ".46",
                    "[BOLD] .69",
                    "[BOLD] .56",
                    "[BOLD] .40",
                    "[BOLD] .54"
                ]
            ]
        },
        "gold_description": "the entity linking accuracy on the wikipedia test set are summarized in table 1 . on average , our proposed pbel method performs significantly better than the baselines , with significant accuracy gains in all nine test languages . the exact baseline , which is most often used for monolingual el ( sil et al . 2017 ) , performs reasonably only when the test language is in the same script as english ( i . e . , javanese ) . similarly trans , the current state - of - the - art retrieval method in cross - lingual el ( pan et al . 2017 ) , fails when zero data is available in the test language , unless the hrl is very closely - related to the lrl ( as with jv , mr and am ) . on the other hand , encode presents relatively strong zero - shot transfer results . pbel offers stronger performance than encode as seen in the best - 53 results , the hrl that performs best is closely - related to the respective test lrl we also observe that using multiple pivot hrls leads to better average accuracy , with considerable improvement for some languages . in most cases , the manual hrl is also the best performing in best - 53 . however , we see that the dravidian telugu ( te ) seems to obtain higher accuracy with indo - aryan hrls – punjabi ( pa ) or hindi ( hi ) . we also see that the ukrainian ( uk ) test set has better performance with another cyrillic script language , kazakh ( kk ) , rather than russian ( ru ) .",
        "generated_description": "the exact baseline is the same as in the xnli experiments , except that it is trained on the full training set rather than just the development set . the trans and exact baselines perform similarly , with the exact baseline having slightly higher bleu scores than the trans baseline . the encode model outperforms both the exact and trans baselines by a substantial margin , with an average improvement of . 15 and . 15 , respectively ."
    },
    {
        "table_id": "302",
        "table_info": {
            "table_caption": "Table 2: Entity linking accuracy on non-Wikipedia data",
            "table_column_names": [
                "Lang.",
                "Tigrinya",
                "Oromo"
            ],
            "table_content_values": [
                [
                    "Exact",
                    "0.00",
                    "0.01"
                ],
                [
                    "Trans Supervised",
                    "0.21",
                    "0.05"
                ],
                [
                    "Trans Unsupervised",
                    "0.21",
                    "0.01"
                ],
                [
                    "Encode",
                    "0.16",
                    "0.10"
                ],
                [
                    "Pbel",
                    "[BOLD] 0.33",
                    "[BOLD] 0.11"
                ]
            ]
        },
        "gold_description": "entity linking accuracies on the lorelei dataset are shown in table 2 . pbel has considerably higher accuracy than the other methods . however , we see relatively lower improvement in accuracy with somali - oromo than amharic - tigrinya . the supervised trans model , which uses wikipedia parallel data in the lrl itself as a lexicon , does not perform better than the zero - shot pbel . the pbel model results for our test set with each input representation are presented in table 3 .",
        "generated_description": "we observe that pbel significantly outperforms all the other methods , including the transvised and unsupervised baselines . the encode method performs slightly better than the trans - supervised method , but is still far behind pbel . this shows that the use of unlabeled data is crucial for entity linking ."
    },
    {
        "table_id": "303",
        "table_info": {
            "table_caption": "Table 3: Entity linking accuracy with PBEL, using Graphemes, Phonemes or Articulatory features as input. The HRL used for training and pivoting is shown in parentheses in the first row. The pairs with the different scripts are marked with a “*”.",
            "table_column_names": [
                "Input",
                "*bn (hi)",
                "jv (id)",
                "*lo (th)",
                "mr (hi)",
                "*pa (hi)",
                "*te (ta)",
                "ti (am)",
                "*uk (ru)",
                "*ug (tr)"
            ],
            "table_content_values": [
                [
                    "Grapheme",
                    ".00",
                    "[BOLD] .86",
                    ".02",
                    "[BOLD] .62",
                    ".00",
                    ".00",
                    ".61",
                    "[BOLD] .50",
                    ".08"
                ],
                [
                    "Phoneme",
                    "[BOLD] .48",
                    ".84",
                    ".20",
                    ".58",
                    ".18",
                    ".10",
                    "[BOLD] .69",
                    ".23",
                    ".21"
                ],
                [
                    "Articulatory",
                    ".45",
                    ".82",
                    "[BOLD] .28",
                    ".56",
                    "[BOLD] .49",
                    "[BOLD] .33",
                    ".63",
                    ".42",
                    "[BOLD] .32"
                ]
            ]
        },
        "gold_description": "see we that using phonological representations ( phonemes and articulatory features ) offers the ability to map between languages that use different orthographies , explaining the convincing improvement over graphemes for hrl - lrl pairs that are written in different scripts ( table 3 ) . with graphemes , the experiments on these languages achieve ≈ 0 accuracy because the character vocabulary of the hrl encoder simply does not contain the low - resource test language characters . this is the case with lao - thai ( lo - th ) , telugu - tamil ( te - ta ) and bengali - hindi ( bn - hi ) . in contrast , we observe that the grapheme representation offers strong transfer performance when the lrl and hrl share orthography , notably javanese - indonesian ( jv - id ) , marathi - hindi ( mr - hi ) and ukrainian - russian ( uk - ru ) .",
        "generated_description": "we can see that using graphemes is slightly better than using phonemes or articulatory features for entity linking , with the exception of gujarati - english where the former slightly outperforms the latter . we hypothesize that this is due to the fact that gujarati is an agglutinative language , and therefore it is easier for the model to learn representations that generalize better to unseen entities ."
    },
    {
        "table_id": "304",
        "table_info": {
            "table_caption": "Table 1: Proportions of correctly answered questions.",
            "table_column_names": [
                "[EMPTY]",
                "Textbooks",
                "Wikipedia"
            ],
            "table_content_values": [
                [
                    "IR",
                    "25.24",
                    "25.14"
                ],
                [
                    "PMI",
                    "26.22",
                    "25.19"
                ],
                [
                    "ESIM w/o scenario",
                    "25.85",
                    "25.41"
                ],
                [
                    "ESIM w/ scenario",
                    "24.34",
                    "24.41"
                ],
                [
                    "DIIN w/o scenario",
                    "24.15",
                    "25.20"
                ],
                [
                    "DIIN w/ scenario",
                    "25.11",
                    "24.89"
                ],
                [
                    "BERT [ITALIC] NLI w/o scenario",
                    "24.29",
                    "24.17"
                ],
                [
                    "BERT [ITALIC] NLI w/ scenario",
                    "24.97",
                    "24.68"
                ],
                [
                    "BiMPM w/o scenario",
                    "24.13",
                    "24.51"
                ],
                [
                    "BiMPM w/ scenario",
                    "24.76",
                    "23.81"
                ],
                [
                    "BERT [ITALIC] RC w/o scenario",
                    "24.81",
                    "24.78"
                ],
                [
                    "BERT [ITALIC] RC w/ scenario",
                    "23.66",
                    "23.01"
                ]
            ]
        },
        "gold_description": "the results are summarized in table almost all the methods performed similar to random guess , showing that sqa on our dataset has its unique challenges .",
        "generated_description": "the proportion of correctly answered questions is defined as the proportion of questions for which the model predicts the answer that is not supported by the scenario . from the table , we can see that ir , pmi , esim , diin , and bertnli all perform better than ir and pmi when they do not consider the scenario information . the performance of bert with scenario information is slightly better than that without scenario information , which indicates that bert is able to utilize scenario information to improve its ability to predict the answer ."
    },
    {
        "table_id": "305",
        "table_info": {
            "table_caption": "Table 1: Experiment 1: Caption retrieval on the coco dataset. We compare the different reminders of the different methods first in English and then by adding new languages. We also evaluate variations of dsve method with different word embedding.",
            "table_column_names": [
                "Embedding",
                "lang.",
                "r@1",
                "r@5",
                "r@10"
            ],
            "table_content_values": [
                [
                    "vse ",
                    "en",
                    "64.6",
                    "∅",
                    "95.7"
                ],
                [
                    "dsve ",
                    "en",
                    "69.8",
                    "91.9",
                    "96.6"
                ],
                [
                    "dsve w/ w2v",
                    "en",
                    "63.48",
                    "89.48",
                    "95.64"
                ],
                [
                    "dsve w/ FastText",
                    "en",
                    "66.08",
                    "90.7",
                    "96.2"
                ],
                [
                    "Ours w/ bv",
                    "en",
                    "65.58",
                    "90.52",
                    "96.1"
                ],
                [
                    "[EMPTY]",
                    "en+fr",
                    "67.78",
                    "91.58",
                    "96.92"
                ],
                [
                    "Ours w/ muse",
                    "en",
                    "63.1",
                    "89.58",
                    "95.56"
                ],
                [
                    "[EMPTY]",
                    "en+fr",
                    "63.88",
                    "89.2",
                    "95.24"
                ],
                [
                    "[EMPTY]",
                    "en+fr+de",
                    "62.4",
                    "89.18",
                    "95.16"
                ],
                [
                    "[EMPTY]",
                    "all",
                    "63.28",
                    "88.3",
                    "94.6"
                ]
            ]
        },
        "gold_description": "the table 1 shows the caption retrieval recall on coco dataset . the first two lines show the state - of - the - art results . the second pair of lines present the results of our model , with w2v and fasttext embeddings used as the baseline . we can see that our model is close to the deep semanticvisual embedding ( dsve ) method while the w2v method is slightly worst , as the representation power of the word embedding is reduced . the bivec english - french method is used in english and on both languages simultaneously . if trained only on english , i . e . only on the coco dataset like the two previous methods , it shows performance similar to the one of the state - of - the - art . this means training using bivec does not weaken the english representation . when trained on english and french together , the recall is increased by 3 . 35 % , going from 65 . 58 % to 67 . 78 % . we can also see an improvement for recall @ 5 and recall @ 10 , with respectively 1 . 17 % and 0 . 85 % of increase . this implies that the similarity learning with french captions increases english recognition when using bivec . first of all , when training with muse for english only , we can see a sharp decrease in performance , with a recall going from 66 . 08 % to 63 . 10 % . by comparing the model trained with w2v , we obtain similar results . this could come from the fact that both muse and w2v embeddings do not have representation for out of vocabulary words like the fasttext ones . moreover , rare words have much more chance to be wrongly projected because of space transformation . when we train the model with additional languages , we can see a slight decrease in performance in english . the maximum decrease is 1 . 01",
        "generated_description": "we compare the performance of our method with the state - of - the - art caption retrieval results on the coc coc and dsve baselines . our method with bv and w2v embeddings outperforms all the baselines by a large margin , and our reimplementation of vse achieves the best performance among all the methods . this shows that the visual features learned by our method are more discriminative than those learned by vse . we also observe that using the concatenation of all the language pairs leads to the best results ."
    },
    {
        "table_id": "306",
        "table_info": {
            "table_caption": "Table 2: Experiment 2: Image retrieval on the coco dataset. The methods are the same as in table 1.",
            "table_column_names": [
                "Embedding",
                "lang.",
                "r@1",
                "r@5",
                "r@10"
            ],
            "table_content_values": [
                [
                    "vse ",
                    "en",
                    "52.00",
                    "∅",
                    "92.0"
                ],
                [
                    "dsve ",
                    "en",
                    "55.9",
                    "86.9",
                    "94.0"
                ],
                [
                    "dsve w/ w2v",
                    "en",
                    "51.87",
                    "84.31",
                    "92.48"
                ],
                [
                    "dsve w/ FastText",
                    "en",
                    "54.12",
                    "85.74",
                    "92.93"
                ],
                [
                    "Ours w/ bv",
                    "en",
                    "55.57",
                    "86.92",
                    "93.86"
                ],
                [
                    "[EMPTY]",
                    "en+fr",
                    "56.09",
                    "87.22",
                    "94.03"
                ],
                [
                    "Ours w/ muse",
                    "en",
                    "51.81",
                    "84.70",
                    "92.82"
                ],
                [
                    "[EMPTY]",
                    "en+fr",
                    "52.25",
                    "84.72",
                    "92.74"
                ],
                [
                    "[EMPTY]",
                    "en+fr+de",
                    "51.17",
                    "84.09",
                    "92.22"
                ],
                [
                    "[EMPTY]",
                    "all",
                    "50.44",
                    "83.39",
                    "91.80"
                ]
            ]
        },
        "gold_description": "given a sentence , in any language , we evaluate the rank of the corresponding image . the evaluation is again made by batches of 1000 . the results are presented in table 2 . the first two lines of the table present the state - of - the - art results , with w2v and fasttext embeddings . we can see similar results as in the previous experiment . with bivec , we have results close to the fasttext embeddings when training only in english . this time , the recall is better with an increase of 2 . 68 % for recall @ 1 . when trained with english and french , the recall @ 1 is increased by 3 . 65 % . this implies , again , that we can improve performance by learning on an additional language . our model is able to use the multi - language representing the effectiveness of muse embeddings . we train the model with english , and different combinations of french , german and czech . on english only , we have similar results to the w2v approach . when adding new languages , we can see a decrease in performance for english . we obtain a maximum decrease of 2 . 62 % for recall @ 1 when the models saw english , french , german and czech . for image retrieval from a caption in 4 languages , we obtain a 49 . 38 % recall @ 10 on the multi30k dataset .",
        "generated_description": "we compare the performance of our method with the state - of - the - art results on the dataset . we report the mean recall @ k ( r @ k = k ∈ { 1 , 5 , 10 } ) on the test set . our method with bv and w2v embeddings outperforms the dsve embedding by a large margin . we also compare the results with fasttext fasttext the results show that our method outperforms fasttext by a significant margin in all cases ."
    },
    {
        "table_id": "307",
        "table_info": {
            "table_caption": "Table 3: Image Recall@10 on the Multi30k dataset with different languages with muse.",
            "table_column_names": [
                "train. lang.",
                "en",
                "fr",
                "de",
                "cs",
                "all"
            ],
            "table_content_values": [
                [
                    "en",
                    "56.60",
                    "46.05",
                    "44.18",
                    "38.75",
                    "46.40"
                ],
                [
                    "en+fr",
                    "50.93",
                    "43.69",
                    "41.61",
                    "34.02",
                    "42.43"
                ],
                [
                    "en+fr+de",
                    "54.63",
                    "46.94",
                    "45.07",
                    "38.26",
                    "46.22"
                ],
                [
                    "all",
                    "55.32",
                    "49.30",
                    "46.84",
                    "46.06",
                    "49.38"
                ]
            ]
        },
        "gold_description": "the model is trained with english only , then with english and french ( en + fr ) , with english , french , and german ( en + fr + de ) and with english , french , german and czech ( all ) . we can see a decrease in performance when adding french that is not present with other languages . otherwise , every time we add a new language the recall for this language logically increase . the best performance is achieved with english + french + german + czech , with an increase of 6 . 42 % for multilingual retrieval . by using muse embeddings , we are able to embed more languages in the same model . we showed that adding other languages decrease performance for english , but increase the recall in a multilingual environment .",
        "generated_description": "image recall @ 10 ( imr @ 10 ) is the percentage of images for which the correct answer was in the top 10 retrieved images . we can see that the multi30k dataset is more challenging than flickr30k , where the number of possible candidate images per description is much smaller than that of other datasets . we also observe that the model trained on all the languages achieves the best performance , outperforming the models trained on only one language by a large margin ."
    },
    {
        "table_id": "308",
        "table_info": {
            "table_caption": "Table 4: Image Recall@10 on Multi30k dataset with different languages with bv Embeddings.",
            "table_column_names": [
                "train. lang.",
                "en",
                "fr",
                "de",
                "en+fr",
                "en+de"
            ],
            "table_content_values": [
                [
                    "en",
                    "53.35",
                    "26.13",
                    "22.96",
                    "39.74",
                    "34.57"
                ],
                [
                    "en+fr",
                    "59.76",
                    "55.22",
                    "∅",
                    "57.50",
                    "∅"
                ],
                [
                    "en+de",
                    "61.44",
                    "∅",
                    "43.59",
                    "∅",
                    "52.51"
                ]
            ]
        },
        "gold_description": "with bivec embeddings , we learn two languages at the same time , and test retrieval on one or two of these languages . results are shown in table 4 . trained in english alone , the model gives worse performance than muse for languages not seen previously . for example , with english - german bivec and a model trained only in english , and test on german , we obtain only 22 . 96 % recall @ 10 , where muse embeddings obtain 44 . 18 % . but when train on english and french , we obtain 55 . 22 % recall , an increase of 26 . 39 % compared to muse . with german and english training , we have an increase of 15 . 16 % on english only recall , with a recall of 61 . 44 % . meaning that , once again , learning a new language with bivec enables better results in english , as the same kind of results is visible with french as well .",
        "generated_description": "the multi30k dataset contains 30 , 000 images in three languages : english ( en ) , french ( fr ) and german ( de ) extracted from multi30k dataset . the first row shows the performance of our model when trained with different language pairs , i . e . , en = fr , en = de and en = en + fr . the second and third rows show the performance when we train our model with different languages and use bv embeddings . the fourth and fifth rows are the results when we use different languages for training and the sixth and seventh rows are our results when using the same language for both training and inference . we can see that using different languages to train the embedding model improves the performance significantly . however , the improvement is not as large as the one in the previous experiment . this is probably because the multi - lingual dataset is too small to train a good embedding space for a single language . in future work , we will try to train embedding spaces for different languages in a more suitable manner ."
    },
    {
        "table_id": "309",
        "table_info": {
            "table_caption": "Table 1: Non-expert human performance results for a randomly-selected validator per question.",
            "table_column_names": [
                "[BOLD] Resource",
                "[ITALIC] Dev  [ITALIC] EM",
                "[ITALIC] Dev  [ITALIC] F1",
                "[ITALIC] Test  [ITALIC] EM",
                "[ITALIC] Test  [ITALIC] F1"
            ],
            "table_content_values": [
                [
                    "DBiDAF",
                    "63.0",
                    "76.9",
                    "62.6",
                    "78.5"
                ],
                [
                    "DBERT",
                    "59.2",
                    "74.3",
                    "63.9",
                    "76.9"
                ],
                [
                    "DRoBERTa",
                    "58.1",
                    "72.0",
                    "58.7",
                    "73.7"
                ]
            ]
        },
        "gold_description": "we select a randomly chosen validator ' s answer to each question and compute exact match ( em ) and word overlap f1 scores with the original to calculate non - expert human performance ; table 1 shows the result . we observe a clear trend : the stronger the model in the loop used to construct the dataset , the harder the resulting questions become for humans .",
        "generated_description": "the non - expert human performance results for a randomly - selected validator per question are shown in tab . we observe that droberta slightly outperforms dbidaf and dbert in terms of both em and f1 , but the difference is not statistically significant ."
    },
    {
        "table_id": "310",
        "table_info": {
            "table_caption": "Table 1: Abstractive summarization results.",
            "table_column_names": [
                "[BOLD] Method",
                "[BOLD] F1 R-1",
                "[BOLD] F1 R-2",
                "[BOLD] F1 R-L",
                "[BOLD] Recall R-1",
                "[BOLD] Recall R-2",
                "[BOLD] Recall R-L",
                "[BOLD] Precision R-1",
                "[BOLD] Precision R-2",
                "[BOLD] Precision R-L"
            ],
            "table_content_values": [
                [
                    "PG",
                    "36.82",
                    "15.92",
                    "33.57",
                    "37.36",
                    "16.10",
                    "34.05",
                    "38.72",
                    "16.86",
                    "35.32"
                ],
                [
                    "+M1-latent",
                    "37.76",
                    "16.51",
                    "34.48",
                    "[BOLD] 40.15",
                    "[BOLD] 17.52",
                    "36.65",
                    "37.90",
                    "16.64",
                    "34.61"
                ],
                [
                    "+M1-shallow",
                    "37.45",
                    "16.23",
                    "34.22",
                    "[BOLD] 40.15",
                    "17.38",
                    "[BOLD] 36.68",
                    "37.34",
                    "16.24",
                    "34.13"
                ],
                [
                    "+M2-latent",
                    "[BOLD] 38.04",
                    "[BOLD] 16.73",
                    "[BOLD] 34.83",
                    "38.92",
                    "17.05",
                    "35.62",
                    "[BOLD] 39.54",
                    "[BOLD] 17.51",
                    "[BOLD] 36.23"
                ],
                [
                    "+M2-shallow",
                    "37.15",
                    "16.13",
                    "33.96",
                    "38.52",
                    "16.68",
                    "35.21",
                    "38.19",
                    "16.67",
                    "34.91"
                ],
                [
                    "+M3-latent",
                    "37.04",
                    "16.05",
                    "33.86",
                    "37.52",
                    "16.22",
                    "34.29",
                    "38.95",
                    "16.98",
                    "35.63"
                ],
                [
                    "+M3-shallow",
                    "37.09",
                    "16.15",
                    "33.95",
                    "39.05",
                    "16.97",
                    "35.73",
                    "37.62",
                    "16.46",
                    "34.45"
                ],
                [
                    "PG+Cov",
                    "39.32",
                    "17.22",
                    "36.02",
                    "40.33",
                    "17.61",
                    "36.93",
                    "[BOLD] 40.82",
                    "[BOLD] 17.99",
                    "[BOLD] 37.42"
                ],
                [
                    "+M1-latent",
                    "[BOLD] 40.06",
                    "[BOLD] 17.63",
                    "36.70",
                    "[BOLD] 44.44",
                    "[BOLD] 19.53",
                    "[BOLD] 40.69",
                    "38.60",
                    "17.05",
                    "35.39"
                ],
                [
                    "+M1-shallow",
                    "39.78",
                    "17.50",
                    "36.50",
                    "43.50",
                    "19.08",
                    "39.89",
                    "38.94",
                    "17.22",
                    "35.75"
                ],
                [
                    "+M2-latent",
                    "40.00",
                    "17.62",
                    "[BOLD] 36.72",
                    "43.53",
                    "19.17",
                    "39.94",
                    "39.28",
                    "17.37",
                    "36.09"
                ],
                [
                    "+M2-shallow",
                    "39.58",
                    "17.30",
                    "36.36",
                    "44.00",
                    "19.19",
                    "40.38",
                    "38.40",
                    "16.87",
                    "35.31"
                ],
                [
                    "+M3-latent",
                    "39.23",
                    "17.00",
                    "36.00",
                    "42.95",
                    "18.54",
                    "39.37",
                    "38.29",
                    "16.69",
                    "35.16"
                ],
                [
                    "+M3-shallow",
                    "39.57",
                    "17.31",
                    "36.28",
                    "43.85",
                    "19.14",
                    "40.17",
                    "38.37",
                    "168.6",
                    "35.20"
                ]
            ]
        },
        "gold_description": "we assess unigram ( r - 1 ) , bigram ( r - 2 ) , and longest - commonsubsequence ( r - l ) overlap , and present f1 , recall and precision scores in table 1 . for the first baseline ( pg ) , we see that incorporating discourse features consistently improves recall and f1 . we see similar observations for the second baseline ( pg + cov ) : recall is generally improved at the expense of precision . observing that our model generally has better recall ( table 1 )",
        "generated_description": "we further investigate the impact of the two types of latent representations by adding them to our model . we observe that both latent representations ( m1 - latent and m1 - shallow ) improve over the pg baseline in terms of f1 and recall , and that the latent representations from m1 and m2 are complementary to each other . in particular , we observe that the addition of the m2 latent representations leads to an increase in recall and precision for both rouge - 1 and - l ."
    },
    {
        "table_id": "311",
        "table_info": {
            "table_caption": "Table 2: Average petition regression performance over 3 runs (noting that lower is better for both MAE and MAPE). One-sided t-tests show that both (1) and (2) are significantly better than the baseline (p<0.05 and p<0.005, resp.).",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] MAE",
                "[BOLD] MAPE"
            ],
            "table_content_values": [
                [
                    "CNN w/ GloVe",
                    "1.16",
                    "14.38"
                ],
                [
                    "+ M1-latent",
                    "1.15",
                    "14.66"
                ],
                [
                    "+ M1-shallow",
                    "[BOLD] 1.12(1) 14.19",
                    "[EMPTY]"
                ],
                [
                    "Bi-LSTM w/ GloVe",
                    "1.14",
                    "14.57"
                ],
                [
                    "+ M1-latent",
                    "1.13",
                    "14.39"
                ],
                [
                    "+ M1-shallow",
                    "1.13",
                    "14.25"
                ],
                [
                    "+ M2-latent",
                    "1.12",
                    "14.02"
                ],
                [
                    "+ M2-shallow",
                    "1.13",
                    "14.20"
                ],
                [
                    "Bi-LSTM w/ latent",
                    "[BOLD] 1.11(2) 13.91",
                    "[EMPTY]"
                ],
                [
                    "Bi-LSTM w/ shallow",
                    "1.15",
                    "14.67"
                ]
            ]
        },
        "gold_description": "we present the test results in table 2 . we are able to reproduce the performance of the baseline model ( \" cnn w / glove \" ) , and find that once again , adding the shallow discourse features improves results . interestingly , we found that replacing the cnn with an lstm results in improved mae , but worse mape . adding discourse features to this model generally has marginal improvement in all cases . when we replace the word sequence with edus ( \" bi - lstm w / latent \" and \" bi - lstm w / shallow \" ) , we see that the latent features outperform the shallow features .",
        "generated_description": "the baseline is a simple convolutional neural network with glove embeddings , which we use for our task . we see that both m1 - latent and m2 - shallow improve over the baseline , with m1 slightly better for mae and m1 better for mape . the best results are achieved by the bi - lstm model with latent features , followed by m1 with shallow features , both of which outperform the baseline ."
    },
    {
        "table_id": "312",
        "table_info": {
            "table_caption": "Table 2: Results on IMDb dataset over different teacher sizes. BERTSDV(K=1) is same as BERTSDA(K=1). For IMDb and AG’s News, we report test error rate (%). For SNLI, we report accuracy (%). T denotes the total number of iterations.",
            "table_column_names": [
                "Model",
                "[ITALIC] K",
                "IMDb",
                "AG’s",
                "SNLI"
            ],
            "table_content_values": [
                [
                    "Model",
                    "[ITALIC] K",
                    "IMDb",
                    "News",
                    "SNLI"
                ],
                [
                    "BERTSDV",
                    "1",
                    "5.39",
                    "[BOLD] 5.38",
                    "[BOLD] 91.2"
                ],
                [
                    "BERTSDV",
                    "2",
                    "5.44",
                    "5.39",
                    "91.1"
                ],
                [
                    "BERTSDV",
                    "3",
                    "5.40",
                    "5.50",
                    "[BOLD] 91.2"
                ],
                [
                    "BERTSDV",
                    "4",
                    "5.47",
                    "5.49",
                    "[BOLD] 91.2"
                ],
                [
                    "[EMPTY]",
                    "5",
                    "[BOLD] 5.35",
                    "5.55",
                    "91.1"
                ],
                [
                    "BERTSDA",
                    "[ITALIC] T−1",
                    "5.41",
                    "[BOLD] 5.29",
                    "91.0"
                ],
                [
                    "BERTSDA",
                    "2",
                    "5.46",
                    "5.49",
                    "[BOLD] 91.2"
                ],
                [
                    "BERTSDA",
                    "3",
                    "5.48",
                    "5.55",
                    "91.1"
                ],
                [
                    "BERTSDA",
                    "4",
                    "5.44",
                    "5.52",
                    "91.1"
                ],
                [
                    "[EMPTY]",
                    "5",
                    "[BOLD] 5.29",
                    "5.41",
                    "91.1"
                ]
            ]
        },
        "gold_description": "we choose different teacher size k and evaluate our models in three datasets . table 2 shows that teacher size is sensitive to datasets . therefore , we select the best teacher size for each dataset in the following experiment .",
        "generated_description": "we can see that the bertsdv model with k = 1 achieves the best results on all the three datasets . the best results are achieved when k = 3 on imdb and news , and k = 4 on ag ’ s and snli . on the other hand , the best result is achieved by k = 5 on the news dataset , which is not surprising since the dataset is the most imbalanced in terms of the number of positive and negative examples per class ."
    },
    {
        "table_id": "313",
        "table_info": {
            "table_caption": "Table 3: Effects on fine-tuning the BERT-base model (BERTBASE). ‘*’ indicates using extra fine-tuning strategies and data preprocessing. ‘/’ means no available reported result. We implemented a “BERTBASE” without any extra fine-tuning strategy as our baseline. “BERTVOTE” and “BERTAVG” means ensemble BERT (See section 3.1). “BERTSE” means self-ensemble BERT (See section 3.2). “BERTSDV” and “BERTSDA” means self-distillation BERT (See section 3.3). ‘Avg. Δ’ means the average of relative change, respectively. We bold the better self-distillation results.",
            "table_column_names": [
                "Model",
                "IMDb",
                "AG’s News",
                "DBPedia",
                "Yelp P.",
                "Yelp F.",
                "Avg. Δ",
                "SNLI",
                "MNLI (m/mm)",
                "Avg. Δ"
            ],
            "table_content_values": [
                [
                    "Model",
                    "Test Error Rate (%)",
                    "Test Error Rate (%)",
                    "Test Error Rate (%)",
                    "Test Error Rate (%)",
                    "Test Error Rate (%)",
                    "Avg. Δ",
                    "Accuracy (%)",
                    "Accuracy (%)",
                    "Avg. Δ"
                ],
                [
                    "ULMFiT ",
                    "4.60",
                    "5.01",
                    "0.80",
                    "2.16",
                    "29.98",
                    "/",
                    "/",
                    "/",
                    "/"
                ],
                [
                    "BERTBASE *",
                    "5.40",
                    "5.25",
                    "0.71",
                    "2.28",
                    "30.06",
                    "/",
                    "/",
                    "/",
                    "/"
                ],
                [
                    "BERTBASE",
                    "5.80",
                    "5.71",
                    "0.71",
                    "2.25",
                    "30.37",
                    "-",
                    "90.7",
                    "84.6/83.3",
                    "-"
                ],
                [
                    "BERTVOTE ( [ITALIC] K=4)",
                    "5.60",
                    "5.41",
                    "0.67",
                    "2.03",
                    "29.44",
                    "5.44%",
                    "91.2",
                    "85.3/84.4",
                    "5.50%"
                ],
                [
                    "BERTAVG ( [ITALIC] K=4)",
                    "5.68",
                    "5.53",
                    "0.68",
                    "2.03",
                    "30.03",
                    "4.07%",
                    "90.8",
                    "85.1/84.2",
                    "3.24%"
                ],
                [
                    "BERTSE (ours)",
                    "5.82",
                    "5.59",
                    "0.65",
                    "2.19",
                    "30.48",
                    "2.50%",
                    "90.8",
                    "84.2/83.3",
                    "-0.51%"
                ],
                [
                    "BERTSDV (ours)",
                    "5.35",
                    "5.38",
                    "[BOLD] 0.68",
                    "2.05",
                    "[BOLD] 29.88",
                    "5.65%",
                    "[BOLD] 91.2",
                    "[BOLD] 85.3/84.3",
                    "[BOLD] 5.30%"
                ],
                [
                    "BERTSDA (ours)",
                    "[BOLD] 5.29",
                    "[BOLD] 5.29",
                    "[BOLD] 0.68",
                    "[BOLD] 2.04",
                    "[BOLD] 29.88",
                    "[BOLD] 6.26%",
                    "91.2",
                    "85.0/84.3",
                    "4.65%"
                ]
            ]
        },
        "gold_description": "table 3 shows the results of fine - tuning the bert - base model on five text classification datasets and two nli datasets . for ensemble bert , both the voted bert ( bertvote ) and averaged bert ( bertavg ) outperform the single bert ( bertbase ) . the average improvement of bertvote is 5 . 44 % ( for text clas sification ) and 5 . 50 % ( for nli ) , while bertavg follows closely with 4 . 07 % and 3 . 24 % . bertvote outperforms bertavg on all tasks , which adheres to our intuition since bertvote is more complicated . the self - ensemble bert ( bertse ) has a slight improvement in classification tasks of 2 . 50 % , but it does not work on nli tasks . this is also a reason why we need self - distillation to improve the base models . overall , self - distillation model has significant improvement on both classification and nli tasks . table 3 shows that bertsda and bertsdv outperform bertbase on all datasets . generally speaking , bertsda performs better than bertsdv on text classification tasks with the improvement of 6 . 26 % vs . 5 . 65 % , but the latter performs better on nli tasks ( bertsda vs . bertsdv is 4 . 65 % vs . 5 . 30 % ) . our proposed fine - tuning strategies also outperform the previous method in [ sun et al . , 2019 ] on text classification tasks , which makes extensive efforts to find sophisticated hyperparameters .",
        "generated_description": "we compare bertvote with bertbase and ulmfit , which are the previous state - of - the - art models . we use the same hyperparameter settings as in the original bert paper devlin et al . we set the number of attention heads to k = 4 for all the tasks , since it gives the best performance on most of the datasets . we can see that our model consistently outperforms the bert baseline on all the datasets , which shows the effectiveness of our model on text classification ."
    },
    {
        "table_id": "314",
        "table_info": {
            "table_caption": "Table 4: Effects on fine-tuning the BERT-large model (BERT-L). For IMDb and AG’s News, we report test error rate (%). For SNLI, we report accuracy (%). MT-DNN fine-tunes BERT with multi-task learning.",
            "table_column_names": [
                "Model",
                "IMDb",
                "AG’s",
                "Avg. Δ",
                "SNLI",
                "Δ"
            ],
            "table_content_values": [
                [
                    "Model",
                    "IMDb",
                    "News",
                    "Avg. Δ",
                    "SNLI",
                    "Δ"
                ],
                [
                    "MT-DNN ",
                    "/",
                    "/",
                    "/",
                    "91.6",
                    "/"
                ],
                [
                    "BERT-L",
                    "4.98",
                    "5.45",
                    "-",
                    "90.9",
                    "-"
                ],
                [
                    "(our implementation)",
                    "4.98",
                    "5.45",
                    "-",
                    "90.9",
                    "-"
                ],
                [
                    "BERT-LSDA( [ITALIC] K=1)",
                    "4.66",
                    "5.21",
                    "5.62%",
                    "[BOLD] 91.5",
                    "[BOLD] 6.59%"
                ],
                [
                    "BERT-LSDA( [ITALIC] K= [ITALIC] T−1)",
                    "[BOLD] 4.58",
                    "[BOLD] 5.15",
                    "[BOLD] 7.02%",
                    "91.4",
                    "5.49%"
                ]
            ]
        },
        "gold_description": "we also investigate whether self - distillation has similar findings for the bertlarge model ( bert - l ) , which contains 24 transformer layers . due to the limitation of our devices , we only conduct an experiment on two text classification datasets and one nli datasets and evaluate strategy bertsda , namely self - distillation with averaged bert as a teacher . we set two different teacher sizes for comparison . as shown in table 4 , self - distillation also gets a significant gain while fine - tuning the bert - large model . on two text classification tasks , bert - lsda ( k = − 1 ) gives better results and the average improvement is 7 . 02 % . for nli task , bert - lsda ( k = 1 ) gives better result and the improvement is 6 . 59 % .",
        "generated_description": "we fine - tune the bert - large model ( bert - l ) on the imdb and ag ’ s news datasets , and evaluate the performance on the snli and imdb test sets . we use the same hyperparameters as in the original bert paper . we can see that the proposed lda fine - tuning method achieves a 6 . 59 % and 7 . 02 % relative improvement on the test error rate on the two datasets , compared to the previous state - of - the - art multi - task learning method mt - dnn ."
    },
    {
        "table_id": "315",
        "table_info": {
            "table_caption": "Table 2: Automatic evaluation with perplexity.",
            "table_column_names": [
                "Model",
                "Overall",
                "High",
                "Medium",
                "Low",
                "OOV"
            ],
            "table_content_values": [
                [
                    "Seq2Seq",
                    "47.02",
                    "42.41",
                    "47.25",
                    "48.61",
                    "49.96"
                ],
                [
                    "MemNet",
                    "46.85",
                    "41.93",
                    "47.32",
                    "48.86",
                    "49.52"
                ],
                [
                    "CopyNet",
                    "40.27",
                    "36.26",
                    "40.99",
                    "42.09",
                    "42.24"
                ],
                [
                    "CCM",
                    "39.18",
                    "35.36",
                    "39.64",
                    "40.67",
                    "40.87"
                ],
                [
                    "PostKS",
                    "43.56",
                    "40.65",
                    "44.06",
                    "46.36",
                    "49.32"
                ],
                [
                    "TransDG",
                    "[BOLD] 37.53",
                    "[BOLD] 32.18",
                    "[BOLD] 36.12",
                    "[BOLD] 38.46",
                    "[BOLD] 40.75"
                ]
            ]
        },
        "gold_description": "as shown in table 2 , transdg achieves the lowest perplexity on all the datasets , indicating that the generated responses are more grammatical .",
        "generated_description": "our transdg model outperforms all the baseline models on the overall perplexity , and achieves the best performance on medium , low and out - of - vocabulary words ( oov ) rates ."
    },
    {
        "table_id": "316",
        "table_info": {
            "table_caption": "Table 3: Automatic evaluation with entity score.",
            "table_column_names": [
                "Model",
                "Overall",
                "High",
                "Medium",
                "Low",
                "OOV"
            ],
            "table_content_values": [
                [
                    "Seq2Seq",
                    "0.717",
                    "0.713",
                    "0.740",
                    "0.721",
                    "0.669"
                ],
                [
                    "MemNet",
                    "0.761",
                    "0.764",
                    "0.788",
                    "0.760",
                    "0.706"
                ],
                [
                    "CopyNet",
                    "0.960",
                    "0.910",
                    "0.970",
                    "0.960",
                    "0.960"
                ],
                [
                    "CCM",
                    "1.180",
                    "1.156",
                    "1.191",
                    "1.196",
                    "1.162"
                ],
                [
                    "PostKS",
                    "1.041",
                    "1.007",
                    "1.028",
                    "0.993",
                    "0.978"
                ],
                [
                    "TransDG",
                    "[BOLD] 1.207",
                    "[BOLD] 1.195",
                    "[BOLD] 1.204",
                    "[BOLD] 1.232",
                    "[BOLD] 1.182"
                ]
            ]
        },
        "gold_description": "table 3 demonstrates that the models leveraging external knowledge achieve better performance than the standard seq2seq model in generating meaningful entity words and diverse responses . in particular , our model outperforms all the baselines significantly with highest entity score .",
        "generated_description": "overall , transdg outperforms the other models with an overall score of 1 . 207 , 1 . 195 , and 1 . 182 , indicating that our model generates more diverse and grammatical responses with higher consistency with human judgments . in particular , our model achieves the best performance on medium - high , medium - low , and out - of - vocabulary ( oov ) categories , which demonstrates its ability to generate more diverse responses ."
    },
    {
        "table_id": "317",
        "table_info": {
            "table_caption": "Table 4: Automatic evaluation with BLEU.",
            "table_column_names": [
                "Model",
                "BLEU-1",
                "BLEU-2",
                "BLEU-3",
                "BLEU-4"
            ],
            "table_content_values": [
                [
                    "Seq2Seq",
                    "0.0977",
                    "0.0098",
                    "0.0012",
                    "0.0002"
                ],
                [
                    "MemNet",
                    "0.1652",
                    "0.0174",
                    "0.0028",
                    "0.0004"
                ],
                [
                    "CopyNet",
                    "0.1715",
                    "[BOLD] 0.0181",
                    "0.0029",
                    "0.0005"
                ],
                [
                    "CCM",
                    "0.1625",
                    "0.0175",
                    "0.0030",
                    "0.0005"
                ],
                [
                    "PostKS",
                    "0.1683",
                    "0.0165",
                    "0.0029",
                    "0.0004"
                ],
                [
                    "TransDG",
                    "[BOLD] 0.1807",
                    "0.0178",
                    "[BOLD] 0.0031",
                    "[BOLD] 0.0006"
                ]
            ]
        },
        "gold_description": "the bleu values shown in table 4 demonstrates the comparison results from word - level overlaps . transdg tends to generate responses that are more similar to the gold responses than baselines in most cases .",
        "generated_description": "automatic evaluation . we use bleu papineni et al . we compare our model with the following baselines : seq2seq , memnet , copynet , ccm , postks , and transdg . copynet and postks are the three variants of our model . it can be seen that our model outperforms all the baselines in all the automatic evaluation metrics , which demonstrates the effectiveness of our method ."
    },
    {
        "table_id": "318",
        "table_info": {
            "table_caption": "Table 5: Human evaluation result.",
            "table_column_names": [
                "Model",
                "Fluency",
                "Relevance",
                "Correctness"
            ],
            "table_content_values": [
                [
                    "Seq2Seq",
                    "1.67",
                    "0.68",
                    "0.80"
                ],
                [
                    "MemNet",
                    "1.83",
                    "0.89",
                    "1.32"
                ],
                [
                    "CopyNet",
                    "2.36",
                    "1.13",
                    "1.08"
                ],
                [
                    "CCM",
                    "2.27",
                    "1.35",
                    "1.22"
                ],
                [
                    "PostKS",
                    "2.32",
                    "1.36",
                    "1.31"
                ],
                [
                    "TransDG",
                    "[BOLD] 2.41",
                    "[BOLD] 1.52",
                    "[BOLD] 1.34"
                ]
            ]
        },
        "gold_description": "the human evaluation results are reported in table 5 . as shown in table 5 , transdg tends to generate more appropriate and informative responses in terms of human annotation . specifically , the responses generated by transdg have higher knowledge relevance than other models , indicating that transdg is effective to incorporate appropriate commonsense knowledge .",
        "generated_description": "the human evaluation results are shown in table 5 . the transdg model outperforms all the other models in terms of all three aspects , which demonstrates the effectiveness of our model in generating diversified and informative responses ."
    },
    {
        "table_id": "319",
        "table_info": {
            "table_caption": "Table 7: Ablation results of TransDG on the test set. Here, Entity represents entity score.",
            "table_column_names": [
                "Model",
                "Perplexity",
                "Entity",
                "BLEU-1",
                "BLEU-2"
            ],
            "table_content_values": [
                [
                    "TransDG",
                    "37.53",
                    "1.207",
                    "0.1807",
                    "0.0178"
                ],
                [
                    "w/o QRT",
                    "42.17",
                    "1.076",
                    "0.1604",
                    "0.0171"
                ],
                [
                    "w/o KST",
                    "43.05",
                    "0.774",
                    "0.1643",
                    "0.0158"
                ],
                [
                    "w/o QRT+KST",
                    "44.15",
                    "0.772",
                    "0.1612",
                    "0.0170"
                ],
                [
                    "w/o RGA",
                    "38.62",
                    "1.106",
                    "0.1712",
                    "0.0170"
                ],
                [
                    "w/o SSD",
                    "38.18",
                    "1.114",
                    "0.1804",
                    "0.0178"
                ]
            ]
        },
        "gold_description": "the ablation test results are reported in table 7 . from the results , we can observe that the performance of transdg drops sharply when we discard the question representation module and the knowledge selection module transferred from kbqa . response guiding attention also has noticeable impact on the performance of transdg , especially on bleu scores . in addition , the second - step decoder can improve the ability of transdg to generate relevant entities per response .",
        "generated_description": "to show the effectiveness of each component of transdg , we conduct ablation study on the test set . we first remove qrt , kst and qrt + kst , and then remove rga and ssd , respectively . we can see that the perplexity drops dramatically when qrt and kst are removed , which indicates that the two modules are complementary to each other . besides , the entity score also drops a lot when rga is removed . this is because rga can help the model to generate more diverse and grammatical responses , which leads to a higher entity score . then we replace qrt with kst , which also leads to an entity score drop , which suggests that qrt is helpful to generate diverse responses ."
    },
    {
        "table_id": "320",
        "table_info": {
            "table_caption": "Table 3: Test accuracy for all models on OVERNIGHT dataset, which has eight domains: Basketball, Blocks, Calendar, Housing, Publications, Recipes, Restaurants, and Social. We use the generator-reranker (G-R) architecture with different options. Beam-n: Beam search is applied with size n, pQ: The critic is pre-trained over the Quora dataset, TH1: rerank if there is at least one score above 0.5, TH2: rerank if best score−second best score>0.001. The candidate logical forms are processed with templated expansions method (Section 3.2.3) in this experiment.",
            "table_column_names": [
                "[BOLD] Method",
                "Bas.",
                "Blo.",
                "Cal.",
                "Hou.",
                "Pub.",
                "Rec.",
                "Res.",
                "Soc.",
                "[BOLD] Avg."
            ],
            "table_content_values": [
                [
                    "[BOLD] Previous Methods",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Han ( 2018 )",
                    "88.2",
                    "61.4",
                    "81.5",
                    "74.1",
                    "80.7",
                    "82.9",
                    "80.7",
                    "82.1",
                    "79.0"
                ],
                [
                    "Su and Yan ( 2017 )",
                    "88.2",
                    "62.2",
                    "82.1",
                    "78.8",
                    "80.1",
                    "86.1",
                    "83.7",
                    "83.1",
                    "80.6"
                ],
                [
                    "Herzig and Berant ( 2017 )",
                    "86.2",
                    "62.7",
                    "82.1",
                    "78.3",
                    "80.7",
                    "82.9",
                    "82.2",
                    "81.7",
                    "79.6"
                ],
                [
                    "[BOLD] Our Methods",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Shaw et al. ( 2019 )",
                    "[BOLD] 89.3",
                    "63.7",
                    "81.5",
                    "82.0",
                    "80.7",
                    "85.6",
                    "89.5",
                    "84.8",
                    "82.1"
                ],
                [
                    "G-R (Beam-10)",
                    "88.7",
                    "66.4",
                    "83.3",
                    "82.5",
                    "78.9",
                    "86.6",
                    "89.8",
                    "83.7",
                    "82.5"
                ],
                [
                    "G-R (Beam-10 & pQ)",
                    "89.0",
                    "65.2",
                    "83.3",
                    "83.6",
                    "78.3",
                    "87.5",
                    "89.5",
                    "85.5",
                    "82.7"
                ],
                [
                    "G-R (Beam-25)",
                    "89.0",
                    "[BOLD] 67.7",
                    "83.3",
                    "[BOLD] 84.1",
                    "[BOLD] 82.6",
                    "87.5",
                    "89.4",
                    "83.9",
                    "83.4"
                ],
                [
                    "G-R (Beam-25 & pQ)",
                    "[BOLD] 89.3",
                    "66.7",
                    "84.5",
                    "83.6",
                    "80.1",
                    "[BOLD] 88.0",
                    "[BOLD] 91.0",
                    "85.2",
                    "83.5"
                ],
                [
                    "G-R (Beam-25 & pQ & TH1)",
                    "89.0",
                    "65.7",
                    "[BOLD] 85.1",
                    "83.6",
                    "81.4",
                    "[BOLD] 88.0",
                    "[BOLD] 91.0",
                    "[BOLD] 86.0",
                    "[BOLD] 83.7"
                ],
                [
                    "G-R (Beam-25 & pQ & TH2)",
                    "88.7",
                    "66.4",
                    "82.7",
                    "83.1",
                    "82.0",
                    "87.0",
                    "89.8",
                    "85.8",
                    "83.2"
                ]
            ]
        },
        "gold_description": "we compare our model with the state - of - the - art models in table 3 . as table 3 shows , this model alone ( without any reranking ) improves the state - of - the - art performance from 79 . 6 % to 82 . 15 % accuracy increasing the beam size improves the performance as expected . using a pre - trained model improves the performance as well . reranking with a threshold rule may be helpful for the overall architecture . we observe that reranking by the critic at all times may not be the best approach . we note that choosing not to rerank when all scores are below 0 . 5 increases the performance further . on the other hand , reranking if the difference between the best score and second best score is above the threshold we set does not help in this case . the overall architecture improves the performance of the generator ( 82 . 1 % accuracy ) to 83 . 7 % accuracy .",
        "generated_description": "in this section , we compare our proposed methods with the previous state - of - the - art methods on the conll - 2005 dataset . we can see that our proposed method outperforms all the previous methods in most of the categories . for example , our method improves the average accuracy from 80 . 6 % to 82 . 2 % on the pubmed dataset , which is an absolute improvement of 1 . 0 % ."
    },
    {
        "table_id": "321",
        "table_info": {
            "table_caption": "Table 1: The performances of the IM2LATEX-100K Bi-LSTM model. We discover that the look-ahead improves the model from the greedy search method — noted that LA is more directly comparable to the greedy search because of their same beam size. We also show the scores of the beam search for the reference",
            "table_column_names": [
                "Search Strategy",
                "BLEU"
            ],
            "table_content_values": [
                [
                    "Greedy Search",
                    "86.24"
                ],
                [
                    "2-LA",
                    "86.65"
                ],
                [
                    "3-LA",
                    "86.71"
                ],
                [
                    "4-LA",
                    "86.77"
                ],
                [
                    "5-LA",
                    "[BOLD] 86.79"
                ],
                [
                    "Beam Search (B=10)",
                    "86.28"
                ]
            ]
        },
        "gold_description": "table 1 : the performances of the im2latex - 100k bi - lstm model . we discover that the look - ahead improves the model from the greedy search method — noted that la is more directly comparable to the greedy search because of their same beam size . we also show the scores of the beam search for the reference",
        "generated_description": "we also show the scores of the greedy search and the results of the beam search with b = 10 . we observe that la search is more directly comparable to greedy search because of their same beam size . we also observe that the look - ahead improves over greedy search by a small amount when using 5 latent variables ."
    },
    {
        "table_id": "322",
        "table_info": {
            "table_caption": "Table 3: Average number of words per question and answer, and average longest n-gram overlap between passage and question.",
            "table_column_names": [
                "[EMPTY]",
                "DSQuAD",
                "DBiDAF",
                "DBERT",
                "DRoBERTa"
            ],
            "table_content_values": [
                [
                    "Question length",
                    "10.3",
                    "9.8",
                    "9.8",
                    "10.0"
                ],
                [
                    "Answer length",
                    "2.6",
                    "2.9",
                    "3.0",
                    "3.2"
                ],
                [
                    "N-gram overlap",
                    "3.0",
                    "2.2",
                    "2.1",
                    "2.0"
                ]
            ]
        },
        "gold_description": "the average number of words in questions and answers , as well as the average longest n - gram overlap between passage and question are furthermore given in table 3 . we can again observe two clear trends : from weaker towards stronger models used in the annotation loop , the average length of answers increases , and the largest n - gram overlap drops from 3 to 2 tokens .",
        "generated_description": "the average number of words per question and answer for dsquad , dbidaf , dbert , and droberta are 9 . 3 , 9 . 8 , and 10 . 0 , respectively . the average n - gram overlap between passage and question is 2 . 2 for dblp : journals / corr / abs - 1909 - 00686 , and 2 . 1 for droroberta . the answer length of questions and answers are on the same order of magnitude for all models , and the average length of the answer is slightly longer than that of the passage . however , the difference is not statistically significant . the difference in the number of tokens in the answer and passage is smaller than for the question , which may be due to the fact that the passages in the questions are longer than those in the passages ."
    },
    {
        "table_id": "323",
        "table_info": {
            "table_caption": "Table 2: The performances of the LSTM model trained on the WMT16 multimodal translation dataset with different LA steps. We show the look-ahead module is able to improve the model on the entire testing set. However, either the LA module or the beam search method harm the models when the length of the target sentences is longer than 25 words.",
            "table_column_names": [
                "Search Strategy",
                "BLEU",
                "BLEU (Target len≥25)"
            ],
            "table_content_values": [
                [
                    "Greedy Search",
                    "31.67",
                    "[BOLD] 23.86"
                ],
                [
                    "2-LA",
                    "32.07",
                    "21.50"
                ],
                [
                    "3-LA",
                    "32.20",
                    "22.78"
                ],
                [
                    "4-LA",
                    "[BOLD] 32.42",
                    "22.45"
                ],
                [
                    "5-LA",
                    "32.41",
                    "23.30"
                ],
                [
                    "Beam Search (B=10)",
                    "33.83",
                    "22.45"
                ]
            ]
        },
        "gold_description": "table 2 : the performances of the lstm model trained on the wmt16 multimodal translation dataset with different la steps . we show the look - ahead module is able to improve the model on the entire testing set . however , either the la module or the beam search method harm the models when the length of the target sentences is longer than 25 words .",
        "generated_description": "however , either the la module or the beam search method harm the model when the length of the target sentences is longer than 25 words . the greedy search strategy outperforms the greedy search when the target length is short , but the bleu score drops significantly when the sentence length is greater than 25 . the results show that the look - ahead module is able to improve the performance of the lstm model on the entire testing set with different la steps . however , the model is not able to do so on the long sentences ."
    },
    {
        "table_id": "324",
        "table_info": {
            "table_caption": "Table 3: We show the results of applying LA module to the transformer model trained on the WMT14 dataset. We find that the LA module slightly improves the original model but harms the performance when the LA time step is 5. We suggest one of the reasons of these results are caused by the EOS problem.",
            "table_column_names": [
                "Search Strategy",
                "BLEU"
            ],
            "table_content_values": [
                [
                    "Greedy Search",
                    "27.50"
                ],
                [
                    "2-LA",
                    "[BOLD] 27.71"
                ],
                [
                    "3-LA",
                    "27.62"
                ],
                [
                    "4-LA",
                    "27.56"
                ],
                [
                    "5-LA",
                    "27.35"
                ],
                [
                    "Beam Search (B=10)",
                    "28.21"
                ]
            ]
        },
        "gold_description": "table 3 : we show the results of applying la module to the transformer model trained on the wmt14 dataset . we find that the la module slightly improves the original model but harms the performance when the la time step is 5 . we suggest one of the reasons of these results are caused by the eos problem .",
        "generated_description": "we apply the la module to the transformer model trained on the wmt14 dataset . we use greedy search and beam search with b = 10 to find the best hyperparameters . we find that applying 2 - la improves the bleu score by 0 . 06 over greedy search , but this improvement plateaus at 5 la time steps . we hypothesize one of the reasons for these results is caused by the eos problem . when the la time step increases from 2 to 5 , we observe that the model starts to overfit and performance starts to drop ."
    },
    {
        "table_id": "325",
        "table_info": {
            "table_caption": "Table 4: We show the results of integrating auxiliary EOS loss into the training state. γ is the weight of the auxiliary EOS loss. We find the EOS loss not only boosts the performance of the model when using the greedy search, the model is more robust to the larger Look-ahead steps with reasonable weights of auxiliary EOS loss.",
            "table_column_names": [
                "Search Strategy",
                "[ITALIC] γ 0.0",
                "[ITALIC] γ 0.25",
                "[ITALIC] γ 0.50",
                "[ITALIC] γ 0.75",
                "[ITALIC] γ 1.0",
                "[ITALIC] γ 1.25"
            ],
            "table_content_values": [
                [
                    "Greedy",
                    "27.50",
                    "27.81",
                    "27.74",
                    "27.75",
                    "[BOLD] 27.90",
                    "27.71"
                ],
                [
                    "2-LA",
                    "27.71",
                    "28.05",
                    "27.95",
                    "27.99",
                    "[BOLD] 28.20",
                    "27.85"
                ],
                [
                    "3-LA",
                    "27.89",
                    "27.82",
                    "27.87",
                    "27.82",
                    "[BOLD] 28.10",
                    "27.68"
                ],
                [
                    "4-LA",
                    "27.56",
                    "27.81",
                    "[BOLD] 27.87",
                    "27.74",
                    "27.84",
                    "27.68"
                ],
                [
                    "5-LA",
                    "27.35",
                    "27.71",
                    "27.74",
                    "27.63",
                    "[BOLD] 27.87",
                    "27.55"
                ]
            ]
        },
        "gold_description": "table 4 : we show the results of integrating auxiliary eos loss into the training state . γ is the weight of the auxiliary eos loss . we find the eos loss not only boosts the performance of the model when using the greedy search , the model is more robust to the larger look - ahead steps with reasonable weights of auxiliary eos loss .",
        "generated_description": "we find the auxiliary eos loss is more effective when the model is trained with the greedy search strategy . the model is more robust when the auxiliary loss is incorporated into the training state . we can see that the model trained with γ = 1 . 0 obtains 27 . 50 bleu score , which is better than the best performing model using γ = 0 . 0 ."
    },
    {
        "table_id": "326",
        "table_info": {
            "table_caption": "Table 1: Translation quality evaluation (BLEU scores).",
            "table_column_names": [
                "Model",
                "WMT’14 EN-DE",
                "WMT’14 EN-FR",
                "IWSLT’14 DE-EN"
            ],
            "table_content_values": [
                [
                    "vaswani2017transformer",
                    "28.4",
                    "41.0",
                    "34.4"
                ],
                [
                    "ahmed2018weighted",
                    "28.9",
                    "41.4",
                    "-"
                ],
                [
                    "chen2018combining",
                    "28.5",
                    "41.0",
                    "-"
                ],
                [
                    "shaw2018relative",
                    "29.2",
                    "41.5",
                    "-"
                ],
                [
                    "ott2018scaling",
                    "29.3",
                    "43.2",
                    "-"
                ],
                [
                    "wu2018dynconv",
                    "[BOLD] 29.7",
                    "43.2",
                    "35.2"
                ],
                [
                    "he2018layerwise",
                    "29.0",
                    "-",
                    "35.1"
                ],
                [
                    "Joint Self-attention",
                    "[BOLD] 29.7",
                    "43.2",
                    "35.3"
                ],
                [
                    "Local Joint Self-attention",
                    "[BOLD] 29.7",
                    "[BOLD] 43.3",
                    "[BOLD] 35.7"
                ]
            ]
        },
        "gold_description": "the entry joint self - attention corresponds to the results of our implementation of ( he et al . , 2018 ) , that significantly improves the original results by 0 . 7 bleu point on the wmt14 de - en benchmark , and 0 . 2 on iwslt . the same architecture with the proposed locality constraints ( local joint self - attention ) establishes a new state of the art in iwslt ' 14 de - en with 35 . 7 bleu , surpassing all previous published results by at least in 0 . 5 bleu , and our results with the unconstrained version by 0 . 4 . the table 1 presents a comparison of the translation quality measured via bleu score between the currently dominant transformer ( vaswani et al . , 2017 ) and dynamic convolutions ( wu et al . , 2019 ) models , as well as the work by he et al . ( 2018 ) , which also proposes a joint encoderdecoder structure , and also other refinements over the transformer architecture like ( ahmed et al . , 2017 ) , ( chen et al . , 2018 ) , ( shaw et al . , 2018 ) and ( ott et al . , 2018 ) . the joint self - attention model obtains the same sota bleu score of ( wu et al . , 2019 ) on wmt ' 14 en - de , and the same sota score of ( ott et al . , 2018 ) and ( wu et al . , 2019 ) on wmt ' 14 enfr . the local attention constraints do not provide a significant gain on these bigger models , but it improves the bleu score on wmt ' 14 en - fr to a new sota of 43 . 3 .",
        "generated_description": "for wmt ’ 14 en - de and en - fr , the proposed local joint self - attention model achieves 29 . 7 and 43 . 3 bleu scores , respectively , which outperforms the previous state - of - the - art by 0 . 8 and 0 . 5 bleus , respectively . for iwslt - 14 de - en , our model also achieves the best performance on all the three datasets , outperforming the previous best result by 1 . 0 and 1 . 1 , respectively ( 29 . 7 v . s . 28 . 4 and 34 . 4 for wmt and en - fr , respectively ) ."
    },
    {
        "table_id": "327",
        "table_info": {
            "table_caption": "TABLE I: Results of text-line extraction on the DIVA-HisDB dataset (see Section III-A measured with the competition tool(see Section IV-A. Our proposed method outperforms state-of-the-art results by reducing the error by 80.7% and achieving nearly perfect results. Methods with * notation use semantic segmentation at pixel-level as pre-processing step.",
            "table_column_names": [
                "Method",
                "Line iu %",
                "Pixel iu %"
            ],
            "table_content_values": [
                [
                    "wavelength [seuret2017wavelength]",
                    "68.58",
                    "79.13"
                ],
                [
                    "Brigham Young University [simistira2017icdar2017]",
                    "81.50",
                    "83.07"
                ],
                [
                    "CITlab Argus LineDetect [gruuening2017robust]",
                    "96.99",
                    "93.01"
                ],
                [
                    "wavelength* (tight polygons) [simistira2017icdar2017]",
                    "97.86",
                    "97.05"
                ],
                [
                    "proposed method*",
                    "[BOLD] 99.42",
                    "96.11"
                ]
            ]
        },
        "gold_description": "in table there are the results on the diva - hisdb dataset ( see section iii - a ) . our method achieves nearly perfect results ( 99 . 42 % ) and outperforms state - of - the - art ( 97 . 86 % ) resulting in a error reduction of 80 . 7 % . note that the lower end of the heatmap scale compares favourably with state - ofthe - art ( see table i ) meaning that regardless of the choice of parameters , our method produces excellent results .",
        "generated_description": "our proposed method outperforms the state - of - the - art by 80 . 7 % in line and 96 . 11 % in pixel - level error . the closest competitor is the method of wavelength * ( tight polygons ) [ simistira2017icdar2017 ] , which is based on spectral segmentation at pixel level followed by a post - processing step to detect long - distance text - lines ."
    },
    {
        "table_id": "328",
        "table_info": {
            "table_caption": "TABLE II: Results of the experiments shown in Table I with the difference that every method listed has received the ground truth of the semantic segmentation at pixel-level as input. Our proposed text-line extraction method is superior to state-of-the-art even if both methods run on the same perfect input. Moreover, in our experience, an algorithm which is not designed to take advantage of this pre-processing step will not benefit from it.",
            "table_column_names": [
                "Method from gt",
                "Line iu %",
                "Pixel iu %"
            ],
            "table_content_values": [
                [
                    "wavelength [seuret2017wavelength]",
                    "66.44",
                    "81.52"
                ],
                [
                    "wavelength (tight polygons) [simistira2017icdar2017]",
                    "99.25",
                    "98.95"
                ],
                [
                    "proposed method",
                    "[BOLD] 100.0",
                    "97.22"
                ]
            ]
        },
        "gold_description": "the answer is in table ii where we performed the same task , but this time we swapped our semantic segmentation network with the pixel - level ground - truth provided along with the data . this represents the upper - bound performances , as no tool will produce a better segmentation than the ground - truth . in this scenario our method performed at 100 % line iu , reinforcing our previous observation that our text - line extraction method has made the mistakes only in the presence of wrong results from the semantic segmentation step .",
        "generated_description": "moreover , an algorithm which is not designed to take advantage of this pre - processing step will not benefit from it . our proposed text - line extraction method is superior to the state - of - the - art even if both methods run on the same perfect input . this is because the ground truth segmentation at pixel - level is not available for the proposed method ."
    },
    {
        "table_id": "329",
        "table_info": {
            "table_caption": "Table 1: Word Embedding Comparison Across Vision Language Tasks. (a) contains the results of learning an embedding from scratch random initialization with fine-tuning during training. The remaining sections compare (b) Word2Vec, (c) FastText, and (d) sentence level embeddings InferSent and BERT. All experiments show three model variants: Average Embedding, Self-Attention, and LSTM, with and without fine-tuning during training. Average Embedding and Self-Attention are not used in generation tasks for Image Captioning and VQA as they are known to show worse performance; sentence level embeddings are not applicable for these tasks. See text for discussion.",
            "table_column_names": [
                "[EMPTY]",
                "Task Dataset",
                "Image-Sentence Retrieval Flickr30K ",
                "Image-Sentence Retrieval MSCOCO ",
                "Phrase Grounding Flickr30K",
                "Phrase Grounding ReferIt ",
                "Text-to-Clip DiDeMo ",
                "Image Captioning MSCOCO ",
                "Image Captioning MSCOCO ",
                "VQA VQA "
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "Dataset",
                    "Flickr30K ",
                    "MSCOCO ",
                    "Entities ",
                    "ReferIt ",
                    "DiDeMo ",
                    "[EMPTY]",
                    "[EMPTY]",
                    "VQA "
                ],
                [
                    "[EMPTY]",
                    "Method",
                    "Embedding Network ",
                    "Embedding Network ",
                    "CITE ",
                    "CITE ",
                    "CITE ",
                    "ARNet ",
                    "ARNet ",
                    "EtEMN "
                ],
                [
                    "[EMPTY]",
                    "Metric",
                    "Mean Recall",
                    "Mean Recall",
                    "Accuracy",
                    "Accuracy",
                    "Average",
                    "BLEU-4",
                    "CIDEr",
                    "Accuracy"
                ],
                [
                    "[BOLD] (a)",
                    "[BOLD] Training from scratch",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "[EMPTY]",
                    "Average Embedding",
                    "44.3",
                    "73.7",
                    "70.46",
                    "51.70",
                    "33.02",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "Self-Attention",
                    "44.6",
                    "77.6",
                    "70.68",
                    "52.39",
                    "33.48",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "LSTM",
                    "60.0",
                    "77.5",
                    "70.47",
                    "51.57",
                    "32.83",
                    "26.7",
                    "89.7",
                    "60.95"
                ],
                [
                    "[BOLD] (b)",
                    "[BOLD] Word2Vec ",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "[EMPTY]",
                    "Average Embedding",
                    "62.5",
                    "75.0",
                    "70.03",
                    "52.51",
                    "32.95",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "Average Embedding + ft",
                    "71.5",
                    "78.2",
                    "70.85",
                    "53.29",
                    "32.58",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "Self-Attention",
                    "63.6",
                    "75.6",
                    "70.19",
                    "52.41",
                    "33.23",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "Self-Attention + ft",
                    "71.9",
                    "79.9",
                    "70.94",
                    "53.54",
                    "33.26",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "LSTM",
                    "68.5",
                    "72.5",
                    "69.83",
                    "52.86",
                    "33.73",
                    "[BOLD] 28.5",
                    "92.7",
                    "61.40"
                ],
                [
                    "[EMPTY]",
                    "LSTM + ft",
                    "69.0",
                    "78.2",
                    "70.55",
                    "53.58",
                    "[BOLD] 33.94",
                    "[BOLD] 28.5",
                    "[BOLD] 94.0",
                    "61.35"
                ],
                [
                    "[BOLD] (c)",
                    "[BOLD] FastText ",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "[EMPTY]",
                    "Average Embedding",
                    "69.2",
                    "78.5",
                    "69.75",
                    "51.27",
                    "32.45",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "Average Embedding + ft",
                    "73.0",
                    "[BOLD] 80.7",
                    "70.62",
                    "53.24",
                    "32.01",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "Self-Attention",
                    "69.5",
                    "78.6",
                    "69.87",
                    "52.49",
                    "33.31",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "Self-Attention + ft",
                    "[BOLD] 73.1",
                    "80.6",
                    "[BOLD] 71.23",
                    "53.87",
                    "33.17",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "LSTM",
                    "69.1",
                    "76.9",
                    "69.76",
                    "52.21",
                    "33.06",
                    "[BOLD] 28.5",
                    "92.7",
                    "[BOLD] 61.86"
                ],
                [
                    "[EMPTY]",
                    "LSTM + ft",
                    "68.5",
                    "80.1",
                    "71.09",
                    "[BOLD] 53.95",
                    "32.51",
                    "28.3",
                    "93.2",
                    "61.66"
                ],
                [
                    "[BOLD] (d)",
                    "[BOLD] Sentence-Level",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "[EMPTY]",
                    "InferSent ",
                    "71.2",
                    "76.4",
                    "57.83",
                    "52.29",
                    "31.87",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "BERT ",
                    "71.8",
                    "75.4",
                    "69.38",
                    "50.37",
                    "32.46",
                    "–",
                    "–",
                    "–"
                ]
            ]
        },
        "gold_description": "the datasets and vision - language task models are described in the appendix , but are referenced in table 1 . unsurprisingly , when comparing the first lines of table 1 ( a , b ) , we find that using word2vec rather than an embedding trained from scratch tends to improve performance . this is more important when considering a larger vocabulary as seen comparing phrase grounding experiments on didemo and referit , whose embeddings trained from scratch using their smaller vocabulary compare favorably to word2vec . word2vec only falls behind within a point or two across all tasks , and even outperforms or performs equally as well as fasttext for certain tasks ( e . g . text - to - clip , image captioning ) . table 1 also contains a comparison of language model variants across the five vision - language tasks we evaluate on . we see that fine - tuning a word embedding on a visionlanguage task can have dramatic effects on the performance of the language model ( e . g . 5 - 10 % increase to mean recall on image - sentence retrieval ) . when comparing the architecture choices from figure 3 we see that for retrieval - based tasks ( i . e . where the output is not free - form text ) the average embedding and selfattention models perform better than a simple lstm - based approach , with self - attention being best on average . the only apparent exception to this is the text - to - clip task . infersent and bert reach comparable values to the best word2vec models for image - sentence retrieval on flickr30k , performing more poorly for the mscoco dataset . for the remaining retrieval tasks , metrics are below the best performing model and embedding combination within 1 - 3 points , again noting the unusual exception of infersent on phrase grounding of flickr30k entities , which significantly drops",
        "generated_description": "for the image - sentence retrieval task , we report the mean recall , mean f1 score , and the standard deviation of bleu - 4 and cider scores . for the phrase - grounding task , our method outperforms all the baselines on both flickr30k and mscoco datasets . our method also achieves the best performance on the vqa dataset , which demonstrates the effectiveness of our method on the challenging task of phrase - level semantic textual entailment ."
    },
    {
        "table_id": "330",
        "table_info": {
            "table_caption": "Table 2: Modifications of Word2Vec. (a) contains Word2Vec retrofitted results using only the WordNet (wn) lexicon from [14]. Next, (b) is our baseline embedding which includes the new Visual Genome relational graph. Visual Word2Vec results are provided in (c), and (d), (e) are Fisher vectors on top of Word2Vec. See text for discussion.",
            "table_column_names": [
                "[EMPTY]",
                "Task Dataset",
                "Image-Sentence Retrieval Flickr30K",
                "Image-Sentence Retrieval MSCOCO",
                "Phrase Grounding Flickr30K",
                "Phrase Grounding ReferIt",
                "Text-to-Clip DiDeMo",
                "Image Captioning MSCOCO",
                "Image Captioning MSCOCO",
                "VQA"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "Dataset",
                    "Flickr30K",
                    "MSCOCO",
                    "Entities",
                    "ReferIt",
                    "DiDeMo",
                    "[EMPTY]",
                    "[EMPTY]",
                    "VQA"
                ],
                [
                    "[EMPTY]",
                    "Metric",
                    "Mean Recall",
                    "Mean Recall",
                    "Accuracy",
                    "Accuracy",
                    "Average",
                    "BLEU-4",
                    "CIDEr",
                    "Accuracy"
                ],
                [
                    "[BOLD] (a)",
                    "[BOLD] Word2Vec + wn ",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "[EMPTY]",
                    "Average Embedding + ft",
                    "72.0",
                    "79.2",
                    "70.51",
                    "53.93",
                    "33.24",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "Self-Attention + ft",
                    "72.4",
                    "80.0",
                    "70.70",
                    "53.81",
                    "33.65",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "LSTM + ft",
                    "69.3",
                    "78.9",
                    "70.80",
                    "53.67",
                    "34.16",
                    "28.6",
                    "93.3",
                    "61.06"
                ],
                [
                    "[BOLD] (b)",
                    "[BOLD] GrOVLE",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "[EMPTY]",
                    "Average Embedding + ft",
                    "72.3",
                    "80.2",
                    "70.77",
                    "[BOLD] 53.99",
                    "33.71",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "Self-Attention + ft",
                    "72.1",
                    "80.5",
                    "70.95",
                    "53.75",
                    "33.14",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "LSTM + ft",
                    "69.7",
                    "78.8",
                    "70.18",
                    "[BOLD] 53.99",
                    "34.47",
                    "28.3",
                    "92.5",
                    "61.22"
                ],
                [
                    "[BOLD] (c)",
                    "[BOLD] Visual Word2Vec ",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "[EMPTY]",
                    "Average Embedding + ft",
                    "66.8",
                    "78.7",
                    "70.61",
                    "53.14",
                    "31.73",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "Self-Attention + ft",
                    "68.8",
                    "79.2",
                    "[BOLD] 71.07",
                    "53.26",
                    "31.15",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "LSTM + ft",
                    "66.7",
                    "74.5",
                    "70.70",
                    "53.19",
                    "32.29",
                    "[BOLD] 28.8",
                    "[BOLD] 94.0",
                    "61.15"
                ],
                [
                    "[BOLD] (d)",
                    "[BOLD] HGLMM (300-D) ",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "[EMPTY]",
                    "Average Embedding + ft",
                    "71.0",
                    "79.8",
                    "70.64",
                    "53.71",
                    "32.62",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "Self-Attention + ft",
                    "71.8",
                    "80.4",
                    "70.51",
                    "53.83",
                    "33.44",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "LSTM + ft",
                    "69.5",
                    "77.9",
                    "70.37",
                    "53.10",
                    "33.85",
                    "28.7",
                    "[BOLD] 94.0",
                    "[BOLD] 61.44"
                ],
                [
                    "[BOLD] (e)",
                    "[BOLD] HGLMM (6K-D) ",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "[EMPTY]",
                    "Average Embedding + ft",
                    "73.5",
                    "[BOLD] 80.9",
                    "70.83",
                    "53.36",
                    "32.66",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "Self-Attention + ft",
                    "[BOLD] 75.1",
                    "80.6",
                    "71.02",
                    "53.43",
                    "33.57",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "[EMPTY]",
                    "LSTM + ft",
                    "68.0",
                    "79.4",
                    "70.38",
                    "53.89",
                    "[BOLD] 34.62",
                    "28.0",
                    "92.8",
                    "60.58"
                ]
            ]
        },
        "gold_description": "we see a small , but consistent improvement across most of the vision - language tasks using grovle as seen in table 2 ( b ) . these changes result in an embedding with comparable performance to the hglmm 6k - d features , which are reported in table 2 ( e ) . however , our word embedding tends to perform better when embeddings are the same size ( i . e . 300 - d ) . for the generation - based tasks ( i . e . captioning and vqa ) , the benefits of using adapted embeddings are less clear . this may simply be an artifact of the challenges in evaluating these tasks ( i . e . , the captions are improving in a way the metrics don ' t capture ) . visual word2vec performs comparably amongst results for generation tasks ( i . e . image captioning and vqa ) , but these tasks have little variance in results , with less than a point of difference across the adapted embeddings . the small gain provided in generation tasks by visual word2vec does not out - weight the drops in performance across other tasks such as the significant mean recall drop of 6 . 3 compared to hglmm ' s 6k - d self - attention result in line two of table 2 ( c ) and table 2 ( e ) for image - sentence retrieval of flickr30k . for comparison , grovle ' s self - attention result in table 2 ( b ) is only 3 points lower . finally , we report results using hglmm of different dimension . hglmm 300 - d features are used for a more fair comparison to other embeddings . while the hglmm 6k - d representation primarily results in the highest performance , it performs more poorly on generation tasks and also results in high variance . for example , column one in table 2 ( e ) shows a range of 7 . 1",
        "generated_description": "for flickr30k , we report the mean recall , mean accuracy , and the average of bleu - 4 and cider scores , along with the per - word accuracy for referit and didemo . for mscoco and vqa , we also report per - sentence accuracy , as well as the mean per - cubic accuracy for the entities and text - to - clip datasets . we observe that our model consistently outperforms all the baselines across all the tasks and datasets . for the phrase - grounding task , our model outperforms the previous state - of - the - art by a large margin , achieving a mean recall of 79 . 2 % and an accuracy of 70 . 51 % , which is a significant improvement over the previous best result by \\ newcitedblp : journals / corr / abs - 1909 - 00686 . we also observe that the performance of our model on the image - captioning task is comparable to that of the current state of the art for both datasets ."
    },
    {
        "table_id": "331",
        "table_info": {
            "table_caption": "Table 4: We include results with additional models to verify trends. See text for discussion and the appendix for more.",
            "table_column_names": [
                "Task Additional Models",
                "Image-Sentence Retrieval SCAN ",
                "Image-Sentence Retrieval SCAN ",
                "Phrase Grounding QA R-CNN ",
                "Phrase Grounding QA R-CNN ",
                "Text-to-Clip TGN ",
                "Image Captioning BUTD ",
                "Image Captioning BUTD ",
                "VQA BAN"
            ],
            "table_content_values": [
                [
                    "Metric",
                    "Mean Recall",
                    "Mean Recall",
                    "Accuracy",
                    "Accuracy",
                    "Average",
                    "BLEU-4",
                    "CIDEr",
                    "Accuracy"
                ],
                [
                    "Training from scratch",
                    "72.8",
                    "83.2",
                    "68.56",
                    "50.23",
                    "43.91",
                    "35.2",
                    "109.8",
                    "68.98"
                ],
                [
                    "FastText + ft",
                    "72.5",
                    "83.8",
                    "69.27",
                    "53.01",
                    "44.21",
                    "35.2",
                    "110.3",
                    "69.91"
                ],
                [
                    "GrOVLE (w/o multi-task pretraining) + ft",
                    "72.7",
                    "84.1",
                    "70.03",
                    "53.88",
                    "[BOLD] 45.26",
                    "35.1",
                    "110.4",
                    "69.36"
                ],
                [
                    "+ multi-task pretraining w/ target task + ft",
                    "[BOLD] 76.2",
                    "[BOLD] 84.7",
                    "[BOLD] 71.08",
                    "[BOLD] 54.10",
                    "43.61",
                    "[BOLD] 35.7",
                    "[BOLD] 111.6",
                    "[BOLD] 69.97"
                ]
            ]
        },
        "gold_description": "to address this , we fine - tune grovle across the five vl tasks . we provide results for a four and five multi - task trained embedding . the four task experiments are performed with the final task embedding fixed to demonstrate how well the embeddings would generalize to new tasks . we also provide results for pretraining on five tasks with and without finetuning during the last task . this multi - task variant is the best performing across all tasks , thus we release this embedding for public use . to verify that the multi - task grovle performance improvements generalize across task model architecture , we provide results using additional task models in table 4 . table 4 provides more models per task and demonstrates consistent results : embeddings can significantly affect performance and grovle variants are still the best embedding overall . as we move down the table we find even larger performance improvements made by using the five - task pretrained grovle with fine - tuning than in table 3 .",
        "generated_description": "for the image - sentence retrieval task , we report the mean recall , mean cider score , and the average of bleu - 4 , meteor , and accuracy . we also report the average score of the phrase - grounding and image - captioning metrics on the test set to evaluate the overall performance . we can see that our model with multi - task pretraining significantly outperforms the baselines on all the three tasks , which demonstrates the effectiveness of our model in learning a common representation across multiple tasks ."
    },
    {
        "table_id": "332",
        "table_info": {
            "table_caption": "Table 3: Comparison of training our word embeddings on four tasks and testing on the fifth, as well as training on all five tasks.",
            "table_column_names": [
                "Task Metric",
                "Image-Sentence Retrieval Mean Recall",
                "Image-Sentence Retrieval Mean Recall",
                "Phrase Grounding Accuracy",
                "Phrase Grounding Accuracy",
                "Text-to-Clip Average",
                "Image Captioning BLEU-4",
                "Image Captioning CIDEr",
                "VQA Accuracy"
            ],
            "table_content_values": [
                [
                    "GrOVLE w/o multi-task pretraining",
                    "64.7",
                    "75.0",
                    "70.53",
                    "52.15",
                    "34.45",
                    "28.5",
                    "92.7",
                    "61.46"
                ],
                [
                    "+ multi-task pretraining w/o target task",
                    "65.8",
                    "76.4",
                    "70.82",
                    "52.21",
                    "34.57",
                    "[BOLD] 28.8",
                    "[BOLD] 93.3",
                    "61.47"
                ],
                [
                    "+ multi-task pretraining w/ target task",
                    "66.2",
                    "80.2",
                    "70.87",
                    "52.64",
                    "34.82",
                    "28.5",
                    "92.7",
                    "[BOLD] 61.53"
                ],
                [
                    "+ multi-task pretraining w/ target task + ft",
                    "[BOLD] 72.6",
                    "[BOLD] 81.3",
                    "[BOLD] 71.57",
                    "[BOLD] 54.51",
                    "[BOLD] 35.09",
                    "28.7",
                    "93.2",
                    "61.46"
                ]
            ]
        },
        "gold_description": "table 3 reports results of the multi - task training procedure described above . we use the best performing language model in our comparisons for each task , i . e . self - attention for image - sentence retrieval and phrase grounding , and the lstm language model for text - to - clip , image captioning , and vqa . the first lines of table 3 report the results of the original fixed grovle embedding , which should be considered the baseline . the second line of table 3 reports performance when the four - task pretrained grovle is fixed when used in the target task , i . e . the task currently being run . the third and fourth line of table 3 report the results of our embedding when they were trained on all five tasks , and kept fixed or fine - tuned for the target task , respectively . the results of line three and four demonstrate that our improved embedding tends to transfer better when applied with fine - tuning during the target task . we find similar trends in performance improvements across tasks : larger gains occur for image - sentence retrieval with + 7 . 9 mean recall for the flickr30k dataset and + 6 . 3 for mscoco . all other tasks have performance improvements under one point , showing that while the vision - language tasks appear to transfer well without harming performance , they are leveraged most in image - sentence retrieval , with an exception of phrase grounding accuracy on referit ( + 2 . 36 % ) .",
        "generated_description": "effectiveness of multi - task pretraining . we observe that with the help of multi - task pretraining , the image - sentence retrieval , phrase grounding , and captioning tasks are improved , while the text - to - clip task remains the same . we conjecture that the reason is that the image captioning task is more challenging than the phrase grounding task as it requires the model to learn to retrieve words that are semantically related to the image content , which is harder to be learned by a single task model ."
    },
    {
        "table_id": "333",
        "table_info": {
            "table_caption": "Table 4: Consistency of the adversarial effect (or lack thereof) for different models in the loop when retraining the model on the same data again, but with a new random seed.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Resource",
                "[ITALIC] Seed 1  [ITALIC] EM",
                "[ITALIC] Seed 1  [ITALIC] F1",
                "[ITALIC] Seed 2  [ITALIC] EM",
                "[ITALIC] Seed 2  [ITALIC] F1"
            ],
            "table_content_values": [
                [
                    "BiDAF",
                    "DBiDAF [ITALIC] -dev",
                    "0.0",
                    "5.3",
                    "10.3",
                    "19.4"
                ],
                [
                    "BERT",
                    "DBERT [ITALIC] -dev",
                    "0.0",
                    "4.9",
                    "20.5",
                    "30.3"
                ],
                [
                    "RoBERTa",
                    "DRoBERTa [ITALIC] -dev",
                    "0.0",
                    "6.1",
                    "16.5",
                    "26.4"
                ],
                [
                    "BiDAF",
                    "DBiDAF [ITALIC] -test",
                    "0.0",
                    "5.5",
                    "12.2",
                    "21.7"
                ],
                [
                    "BERT",
                    "DBERT [ITALIC] -test",
                    "0.0",
                    "5.3",
                    "18.6",
                    "29.6"
                ],
                [
                    "RoBERTa",
                    "DRoBERTa [ITALIC] -test",
                    "0.0",
                    "5.9",
                    "16.2",
                    "27.3"
                ]
            ]
        },
        "gold_description": "our annotation pipeline is designed to reject any samples where the model correctly predicts the answer . how reproducible is this when retraining the same model with the same data ? to measure this , we evaluate the performance of two models of identical setup for each respective architecture , which differ only in their random initialisation and data order during sgd sampling . we can thus isolate how strongly the resulting dataset depends on the particular random initialisation and order of data points used to train the model . the results of this experiment are shown in table 4 .",
        "generated_description": "s4ss3sss0px2 consistency of the adversarial effect . to better understand the consistency of our findings , we perform an additional experiment where we retrain the models on the development set but evaluate them on the held - out test set . we see that for both the bidaf and the bert model , the difference in performance between the development and test sets is very small . this indicates that the model does not rely on external knowledge to improve its robustness to adversarial attacks . for the roberta model , however , we see a substantial drop in the performance when retraining on dbert - test ."
    },
    {
        "table_id": "334",
        "table_info": {
            "table_caption": "Table 1: Overall performance in terms of personality (C Score), quality (Perplexity, BLEU), diversity (Distinct-1), structure similarity of different users (Diff Score (×10−10)), model change after adaptation (Δ score (×10−10)) .",
            "table_column_names": [
                "[BOLD] Method",
                "[BOLD] Perplexity",
                "[BOLD] C Score",
                "[BOLD] BLEU",
                "[BOLD] Distinct-1",
                "[BOLD] Diff Score",
                "Δ [BOLD]  Score"
            ],
            "table_content_values": [
                [
                    "Seq2seq",
                    "37.90",
                    "-0.16",
                    "1.29",
                    "0.0018",
                    "0.00",
                    "0.00"
                ],
                [
                    "Seq2seq-F",
                    "[BOLD] 34.42",
                    "-0.13",
                    "1.47",
                    "0.0033",
                    "63.44",
                    "32.73"
                ],
                [
                    "Speaker",
                    "40.17",
                    "-0.14",
                    "1.14",
                    "0.0039",
                    "0.00",
                    "0.00"
                ],
                [
                    "Speaker-F",
                    "36.33",
                    "-0.05",
                    "1.36",
                    "0.0048",
                    "53.36",
                    "27.92"
                ],
                [
                    "PAML",
                    "37.60",
                    "0.07",
                    "1.52",
                    "0.0067",
                    "36.59",
                    "37.36"
                ],
                [
                    "ATAML",
                    "40.27",
                    "[BOLD] 0.12",
                    "0.52",
                    "0.0074",
                    "105.87",
                    "50.35"
                ],
                [
                    "CMAML−",
                    "37.41",
                    "[BOLD] 0.13",
                    "[BOLD] 1.59",
                    "0.0076",
                    "379.72",
                    "193.23"
                ],
                [
                    "CMAML",
                    "35.88",
                    "[BOLD] 0.12",
                    "[BOLD] 1.57",
                    "[BOLD] 0.0089",
                    "[BOLD] 412.77",
                    "[BOLD] 210.07"
                ]
            ]
        },
        "gold_description": "we present our results in table 1 . as shown in table 1 , our model cmaml achieves good performance on quality , personality , and diversity .",
        "generated_description": "the results show that cmaml − performs the best in terms of perplexity , c score , bleu , distinct - 1 , and diff score , but suffers from the largest difference in δ score , which is defined as the absolute difference between the best and second - best performing model . the other baselines , i . e . , seq2seq , paml and ataml , also suffer from a large difference in the δ score . this is due to the fact that these baselines do not consider the temporal dependencies among words in the responses , which leads to a large discrepancy between the generated responses and the ground - truth responses . in contrast , our proposed method performs significantly better than all the baselines in all the evaluation metrics . the results also show that our method outperforms the baseline models in all evaluation metrics , which indicates that our model can generate more diverse responses ."
    },
    {
        "table_id": "335",
        "table_info": {
            "table_caption": "Table 5: Training models on various datasets, each with 10,000 samples, and measuring their generalisation to different evaluation datasets. Results in bold indicate the best result per model.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Trained On",
                "[BOLD] Evaluation (Test) Dataset DSQuAD",
                "[BOLD] Evaluation (Test) Dataset DSQuAD",
                "[BOLD] Evaluation (Test) Dataset DBiDAF",
                "[BOLD] Evaluation (Test) Dataset DBiDAF",
                "[BOLD] Evaluation (Test) Dataset DBERT",
                "[BOLD] Evaluation (Test) Dataset DBERT",
                "[BOLD] Evaluation (Test) Dataset DRoBERTa",
                "[BOLD] Evaluation (Test) Dataset DRoBERTa",
                "[BOLD] Evaluation (Test) Dataset DDROP",
                "[BOLD] Evaluation (Test) Dataset DDROP",
                "[BOLD] Evaluation (Test) Dataset DNQ",
                "[BOLD] Evaluation (Test) Dataset DNQ"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "[EMPTY]",
                    "[ITALIC] EM",
                    "[ITALIC] F1",
                    "[ITALIC] EM",
                    "[ITALIC] F1",
                    "[ITALIC] EM",
                    "[ITALIC] F1",
                    "[ITALIC] EM",
                    "[ITALIC] F1",
                    "[ITALIC] EM",
                    "[ITALIC] F1",
                    "[ITALIC] EM",
                    "[ITALIC] F1"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] DSQuAD(10K)",
                    "[BOLD] 40.6",
                    "[BOLD] 54.6",
                    "[BOLD] 7.0",
                    "[BOLD] 15.1",
                    "5.3",
                    "12.8",
                    "5.7",
                    "13.2",
                    "4.5",
                    "9.3",
                    "[BOLD] 26.7",
                    "[BOLD] 40.6"
                ],
                [
                    "[ITALIC] BiDAF",
                    "[ITALIC] DBiDAF",
                    "12.1",
                    "22.1",
                    "5.7",
                    "12.9",
                    "6.4",
                    "13.6",
                    "6.0",
                    "13.2",
                    "6.1",
                    "12.0",
                    "14.1",
                    "26.7"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] DBERT",
                    "9.9",
                    "18.8",
                    "6.4",
                    "13.3",
                    "8.5",
                    "15.6",
                    "8.8",
                    "15.7",
                    "8.3",
                    "14.5",
                    "14.9",
                    "27.5"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] DRoBERTa",
                    "10.9",
                    "20.8",
                    "6.6",
                    "13.8",
                    "[BOLD] 10.1",
                    "[BOLD] 18.0",
                    "[BOLD] 9.7",
                    "[BOLD] 16.7",
                    "[BOLD] 14.8",
                    "[BOLD] 23.3",
                    "13.3",
                    "26.0"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] DSQuAD(10K)",
                    "[BOLD] 70.5",
                    "[BOLD] 83.6",
                    "36.4",
                    "50.3",
                    "15.0",
                    "26.5",
                    "10.6",
                    "21.2",
                    "20.0",
                    "31.3",
                    "54.9",
                    "69.5"
                ],
                [
                    "[ITALIC] BERT",
                    "[ITALIC] DBiDAF",
                    "67.9",
                    "81.6",
                    "[BOLD] 46.5",
                    "[BOLD] 62.4",
                    "[BOLD] 37.5",
                    "[BOLD] 49.0",
                    "[BOLD] 32.3",
                    "[BOLD] 44.2",
                    "[BOLD] 41.1",
                    "[BOLD] 51.5",
                    "[BOLD] 55.8",
                    "[BOLD] 71.0"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] DBERT",
                    "60.9",
                    "75.2",
                    "42.2",
                    "57.8",
                    "36.4",
                    "46.6",
                    "28.3",
                    "39.6",
                    "35.7",
                    "44.4",
                    "50.7",
                    "65.4"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] DRoBERTa",
                    "57.6",
                    "71.8",
                    "36.8",
                    "50.9",
                    "34.1",
                    "44.9",
                    "31.0",
                    "41.7",
                    "37.6",
                    "45.9",
                    "48.2",
                    "63.8"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] DSQuAD(10K)",
                    "[BOLD] 70.0",
                    "[BOLD] 83.7",
                    "39.4",
                    "55.4",
                    "21.5",
                    "33.7",
                    "11.1",
                    "22.1",
                    "20.3",
                    "30.9",
                    "[BOLD] 48.0",
                    "64.8"
                ],
                [
                    "[ITALIC] RoBERTa",
                    "[ITALIC] DBiDAF",
                    "65.0",
                    "80.4",
                    "[BOLD] 46.6",
                    "[BOLD] 62.3",
                    "[BOLD] 38.9",
                    "[BOLD] 50.8",
                    "25.1",
                    "36.0",
                    "[BOLD] 40.0",
                    "[BOLD] 51.3",
                    "46.9",
                    "[BOLD] 65.3"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] DBERT",
                    "58.7",
                    "74.1",
                    "42.5",
                    "58.0",
                    "34.8",
                    "45.6",
                    "24.7",
                    "34.6",
                    "37.8",
                    "48.5",
                    "42.7",
                    "60.4"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] DRoBERTa",
                    "55.4",
                    "71.4",
                    "37.9",
                    "53.5",
                    "37.5",
                    "48.6",
                    "[BOLD] 28.2",
                    "[BOLD] 38.9",
                    "39.5",
                    "49.0",
                    "38.8",
                    "57.9"
                ]
            ]
        },
        "gold_description": "we next conduct a series of experiments in which we train on dbidaf , dbert , and droberta , and observe how well models can then learn to generalise on the respective test portions of these datasets . table 5 shows the results , and there is a multitude of observations . first , one clear trend we observe across all training data setups is a clear negative performance progression when evaluated against datasets constructed with a stronger model in the loop . this trend holds true for all but the bidaf model , in each of the training configurations , and for each of the evaluation datasets . for example , roberta trained on droberta achieves 71 . 4 , 53 . 5 , 48 . 6 and 38 . 9 f1 when evaluated on dsquad , dbidaf , dbert and droberta , respectively . second , we observe that the bidaf model is not able to generalise well to datasets constructed with a model in the loop , independent of its training setup . in particular it is unable to learn from dbidaf , thus failing to overcome some of its own blind spots through adversarial training . both when training only on dbidaf , as well as when adding dsquad to dbidaf during training ( cf . table 6 ) , bidaf performs poorly across all the adversarial datasets . results in table 5 , where training on dbidaf in several cases led to better generalisation than training on droberta . we further train each of our three models on either dbidaf , dbert , or droberta and test on dsquad , with results in the dsquad columns of table 5 . first , we observe clear generalisation improvements towards ddrop across all models compared to training on dsquad ( 10k ) when using any of the",
        "generated_description": "in this section , we investigate the effect of the amount of training data on the model ’ s performance . we train the model on the dsquad dataset with 10k training samples and evaluate it on the 10k test samples of the same dataset . the results show that the model trained on the full training set ( 40 . 6m ) outperforms the baseline in terms of em and f1 score by a large margin . the same trend can also be observed on the dbert and droberta models . this indicates that the size of the training data used in our experiments is sufficient for the model to generalize well on the test set ."
    },
    {
        "table_id": "336",
        "table_info": {
            "table_caption": "Table 4: Corpus-level BLEU scores on the validation sets for the same model architecture trained on different data.",
            "table_column_names": [
                "↓train/eval→",
                "WebSplit 1.0",
                "WikiSplit"
            ],
            "table_content_values": [
                [
                    "Source",
                    "58.0",
                    "73.4"
                ],
                [
                    "SplitHalf",
                    "54.9",
                    "71.7"
                ],
                [
                    "WebSplit",
                    "35.3",
                    "4.2"
                ],
                [
                    "WikiSplit",
                    "59.4",
                    "76.0"
                ],
                [
                    "Both",
                    "[BOLD] 61.4",
                    "[BOLD] 76.1"
                ]
            ]
        },
        "gold_description": "we compare three training configurations : websplit only , wikisplit only , and both , which is simply their concatenation . the websplit model scores 35 . 3 bleu on the websplit validation set but fails to generalize beyond its narrow domain , as evidenced by reaching only 4 . 2 bleu on the wikisplit validation set . in contrast , the wikisplit model achieves 59 . 4 bleu on the websplit validation set , reintroducing the downsampled , in - domain training data ( both ) further improves performance on the websplit evaluation .",
        "generated_description": "we find that the model trained on websplit 1 . 0 performs slightly better on the wikisplit test set than on the websplit development set . we hypothesize that this is due to the fact that wikisplit is more similar to websplit than it is to the splithalf dataset , and thus the model is less forced to rely on the split - and - rephrase strategy ."
    },
    {
        "table_id": "337",
        "table_info": {
            "table_caption": "Table 6: Manual evaluation results, as counts over the simple sentences predicted by each model for a random sample of 50 inputs from WebSplit 1.0 validation set.",
            "table_column_names": [
                "[ITALIC] Training",
                "Unsupported",
                "Missing",
                "Repeated",
                "Correct"
            ],
            "table_content_values": [
                [
                    "AG18",
                    "82",
                    "45",
                    "12",
                    "26/119 (22%)"
                ],
                [
                    "WebSplit",
                    "58",
                    "47",
                    "13",
                    "32/100 (32%)"
                ],
                [
                    "WikiSplit",
                    "8",
                    "5",
                    "0",
                    "91/100 (91%)"
                ],
                [
                    "Both",
                    "[BOLD] 4",
                    "[BOLD] 4",
                    "[BOLD] 0",
                    "[BOLD] 95/100 (95%)"
                ]
            ]
        },
        "gold_description": "as shown in table 6 , the both model produced the most accurate output ( 95 % correct simple sentences ) , with the lowest incidence of missed or unsupported statements . outputs from aharoni and goldberg ( 2018 ) ( ag18 ) , which were 22 % accurate .",
        "generated_description": "for each model , we randomly sampled 50 sentences from the websplit 1 . 0 validation set and manually classified them into four categories : unsupported , missing , repeated , and correct . unsurprisingly , the wikisplit model performs better than the ag18 model in terms of the unsupported category , indicating that it is able to generalize better to unseen sentences . in the missing category , websplit outperforms ag18 by a large margin ( 32 % ) and wikisplit by a small margin ( 91 % ) . the correct category is the category in which both models predicted the same answer , i . e . , the answer is missing , repeating , or both ."
    },
    {
        "table_id": "338",
        "table_info": {
            "table_caption": "Table 5: Results on the WebSplit v1.0 test set when varying the training data while holding model architecture fixed: corpus-level BLEU, sentence-level BLEU (to match past work), simple sentences per complex sentence, and tokens per simple sentence (micro-average). AG18 is the previous best model by aharoni:2018, which used the full WebSplit training set, whereas we downsampled it.",
            "table_column_names": [
                "[EMPTY]",
                "BLEU",
                "sBLEU",
                "#S/C",
                "#T/S"
            ],
            "table_content_values": [
                [
                    "Reference",
                    "[EMPTY]",
                    "–",
                    "2.5",
                    "10.9"
                ],
                [
                    "Source",
                    "58.7",
                    "56.1",
                    "1.0",
                    "20.5"
                ],
                [
                    "SplitHalf",
                    "55.7",
                    "53.0",
                    "2.0",
                    "10.8"
                ],
                [
                    "AG18",
                    "30.5",
                    "25.5",
                    "2.3",
                    "11.8"
                ],
                [
                    "WebSplit",
                    "34.2",
                    "30.5",
                    "2.0",
                    "8.8"
                ],
                [
                    "WikiSplit",
                    "60.4",
                    "58.0",
                    "2.0",
                    "11.2"
                ],
                [
                    "Both",
                    "[BOLD] 62.4",
                    "[BOLD] 60.1",
                    "2.0",
                    "11.0"
                ]
            ]
        },
        "gold_description": "we relate our approach to prior work on web - split v1 . 0 by reporting scores on its test set in table 5 . our best performance in bleu is again obtained by combining the proposed wikisplit dataset with the downsampled websplit , yielding a 32 point improvement over the prior best result .",
        "generated_description": "ag18 is the previous state - of - the - art model by aharoni : 2018 , which used the full websplit training set , but we downsampled it to match the size of the training set of the websplit dataset . we see that the split - half setting does slightly better than the full training set on all three metrics , with the largest gains coming from the sentence - level bleu . we also see that using the wikisplit split only slightly hurts performance compared to using both splits , suggesting that there is some benefit to fine - tuning on more complex sentences ."
    },
    {
        "table_id": "339",
        "table_info": {
            "table_caption": "Table 2: Quality results for local embeddings.",
            "table_column_names": [
                "[EMPTY]",
                "Basic: no walks MA",
                "Basic: no walks MR",
                "Basic: no walks MC",
                "Basic: no walks Avg",
                "EmbDI walks MA",
                "EmbDI walks MR",
                "EmbDI walks MC",
                "EmbDI walks Avg"
            ],
            "table_content_values": [
                [
                    "Movie",
                    "[BOLD] .80",
                    ".54",
                    ".41",
                    ".59",
                    ".55",
                    "[BOLD] .80",
                    "[BOLD] .90",
                    "[BOLD] .75"
                ],
                [
                    "RefS",
                    ".39",
                    ".40",
                    ".24",
                    ".34",
                    "[BOLD] .90",
                    "[BOLD] .59",
                    "[BOLD] .62",
                    "[BOLD] .70"
                ],
                [
                    "RefL",
                    "[BOLD] .63",
                    ".50",
                    ".29",
                    ".47",
                    "[BOLD] .63",
                    "[BOLD] .69",
                    "[BOLD] .78",
                    "[BOLD] .70"
                ]
            ]
        },
        "gold_description": "we report the quality results in table 2 , where each number represents the fraction of tests passed . while on average the local embeddings for embdi are largely superior to the baseline , our solution is beaten once for ma . by increasing the percentage of row permutations in basic , results for mr improve but decrease for ma , without significant benefit for mc .",
        "generated_description": "next , we evaluate the quality of our local embeddings when used in combination with our embdi approach . for each of the four datasets , we report the mean micro - averaged f1 - scores over the 10 runs , averaged over all the embedding types . the best results are highlighted in bold . overall , we see that our embedding with embdi outperforms the baseline in all cases , with the exception of the movie embedding , where the meta - embedding with no walks performs slightly better ."
    },
    {
        "table_id": "340",
        "table_info": {
            "table_caption": "Table 3: Quality results for SM.",
            "table_column_names": [
                "[EMPTY]",
                "EmbDI P",
                "EmbDI R",
                "EmbDI F",
                "Seep [ITALIC] P P",
                "Seep [ITALIC] P R",
                "Seep [ITALIC] P F",
                "Seep [ITALIC] L P",
                "Seep [ITALIC] L R",
                "Seep [ITALIC] L F"
            ],
            "table_content_values": [
                [
                    "Movie",
                    "[BOLD] .75",
                    "[BOLD] .86",
                    "[BOLD] .80",
                    "[BOLD] .75",
                    ".62",
                    ".68",
                    "[BOLD] .75",
                    ".75",
                    ".75"
                ],
                [
                    "RefS",
                    "[BOLD] 1",
                    "[BOLD] 1",
                    "[BOLD] 1",
                    ".75",
                    ".75",
                    ".75",
                    ".88",
                    ".75",
                    ".81"
                ],
                [
                    "RefL",
                    "[BOLD] .71",
                    ".83",
                    "[BOLD] .77",
                    ".50",
                    ".75",
                    ".60",
                    ".63",
                    "[BOLD] .88",
                    ".73"
                ]
            ]
        },
        "gold_description": "we test an unsupervised setting using ( 1 ) the algorithm proposed in section 4 . 4 with embdi local embeddings , and ( 2 ) an existing matching system with both pre - trained embeddings ( seepp ) and our local embeddings ( seepl ) . pre - trained embeddings for tokens and tuples have been obtained from glove . table 3 reports the results w . r . t . manually defined attribute matches . the simple unsupervised method with embdi local embeddings outperforms the baseline in terms of fmeasure in all scenarios . results of refs are the best because of the high overlap between its datasets . the baseline improves when it is executed with embdi local embeddings , showing their superior quality w . r . t . pre - trained ones . the basic local embeddings lead to 0 attribute matches . we also observe that results for seeppretrain depend on the quality of the original attribute labels . if we replace the original ( expressive and correct ) labels with synthetic ones , seep - pretrain obtains f - measure values between . 30 and . 38 . local embeddings from embdi do not depend on the presence of the attribute labels . similarly , decreasing the size of the walks to 5 for the sm task raises the f - measure for refl to . 92 ( from . 77 ) .",
        "generated_description": "next , we evaluate the quality of the embeddings obtained from the seepp , seepl , and embdi classifiers . the quality is measured by precision ( p ) , recall ( r ) and f - measure ( f ) , where the latter is defined as the harmonic mean of precision and recall . the best results are highlighted in bold . we can see that our classifiers outperform the baseline in all cases ."
    },
    {
        "table_id": "341",
        "table_info": {
            "table_caption": "Table 4: F-Measure results for ER.",
            "table_column_names": [
                "[EMPTY]",
                "Unsupervised. Basic",
                "Unsupervised. Glove",
                "Unsupervised. EmbDI",
                "Supervised DeepER [ITALIC] P",
                "Supervised DeepER [ITALIC] L"
            ],
            "table_content_values": [
                [
                    "Movie",
                    "0",
                    ".43",
                    "[BOLD] .78",
                    ".82",
                    "[BOLD] .88"
                ],
                [
                    "RefS",
                    "0",
                    ".84",
                    "[BOLD] .95",
                    ".84",
                    "[BOLD] .89"
                ],
                [
                    "RefL",
                    "0",
                    ".73",
                    "[BOLD] .80",
                    ".80",
                    "[BOLD] .87"
                ]
            ]
        },
        "gold_description": "as baseline , we use our unsupervised algorithm with embdi embeddings and pre - trained embeddings . we also test our local embeddings in the supervised setting with a state of the art er system ( deeperl ) , comparing its results to the ones obtained with pre - trained embeddings ( deeperp ) . results in table 4 show that embdi embeddings obtain better quality results in all scenarios in both settings . as observed in the sm experiments , using local embeddings instead of pre - trained ones increases significantly the quality of an existing system . in this case , supervised deeper shows an average 6 % absolute improvement in f - measure in the tested setting with 5 % of the ground truth passed as training data . the improvements decreases to 4 % with more training data ( 10 % ) . also for er , the local embeddings obtained with the basic method lead to 0 row matched . execut",
        "generated_description": "we can see that deeperp and deeperl outperform all the unsupervised baselines on the movie and refs datasets , and perform comparably to embdi on the refl dataset . for the refs dataset , the difference in f - measure is smaller than for the movie dataset , which we believe is due to the fact that refs is a smaller dataset with fewer training examples ."
    },
    {
        "table_id": "342",
        "table_info": {
            "table_caption": "Table 6: Training models on SQuAD, as well as SQuAD combined with different adversarially created datasets. Results in bold indicate the best result per model.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Training Dataset",
                "[BOLD] Evaluation (Test) Dataset DSQuAD",
                "[BOLD] Evaluation (Test) Dataset DSQuAD",
                "[BOLD] Evaluation (Test) Dataset DBiDAF",
                "[BOLD] Evaluation (Test) Dataset DBiDAF",
                "[BOLD] Evaluation (Test) Dataset DBERT",
                "[BOLD] Evaluation (Test) Dataset DBERT",
                "[BOLD] Evaluation (Test) Dataset DRoBERTa",
                "[BOLD] Evaluation (Test) Dataset DRoBERTa"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "[EMPTY]",
                    "[ITALIC] EM",
                    "[ITALIC] F1",
                    "[ITALIC] EM",
                    "[ITALIC] F1",
                    "[ITALIC] EM",
                    "[ITALIC] F1",
                    "[ITALIC] EM",
                    "[ITALIC] F1"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] DSQuAD",
                    "[BOLD] 58.7",
                    "[BOLD] 71.9",
                    "0.0",
                    "5.5",
                    "8.9",
                    "17.6",
                    "8.3",
                    "17.0"
                ],
                [
                    "[ITALIC] BiDAF",
                    "[ITALIC] DSQuAD + DBiDAF",
                    "57.3",
                    "70.6",
                    "14.9",
                    "25.8",
                    "16.9",
                    "25.5",
                    "15.3",
                    "24.2"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] DSQuAD + DBERT",
                    "57.0",
                    "70.4",
                    "[BOLD] 16.3",
                    "[BOLD] 26.5",
                    "14.5",
                    "24.1",
                    "14.7",
                    "24.1"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] DSQuAD + DRoBERTa",
                    "55.9",
                    "69.6",
                    "16.2",
                    "25.6",
                    "[BOLD] 17.3",
                    "[BOLD] 26.2",
                    "[BOLD] 15.6",
                    "[BOLD] 25.0"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] DSQuAD",
                    "70.7",
                    "84.0",
                    "36.7",
                    "50.2",
                    "0.0",
                    "5.3",
                    "15.2",
                    "25.8"
                ],
                [
                    "[ITALIC] BERT",
                    "[ITALIC] DSQuAD + DBiDAF",
                    "[BOLD] 74.5",
                    "[BOLD] 85.9",
                    "47.2",
                    "[BOLD] 61.1",
                    "33.7",
                    "43.6",
                    "29.1",
                    "39.4"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] DSQuAD + DBERT",
                    "74.3",
                    "85.8",
                    "[BOLD] 48.1",
                    "[BOLD] 61.1",
                    "[BOLD] 37.8",
                    "[BOLD] 47.3",
                    "[BOLD] 31.1",
                    "[BOLD] 41.5"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] DSQuAD + DRoBERTa",
                    "73.2",
                    "85.2",
                    "47.3",
                    "60.5",
                    "36.8",
                    "46.2",
                    "30.1",
                    "39.7"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] DSQuAD",
                    "74.1",
                    "86.8",
                    "50.4",
                    "64.9",
                    "31.9",
                    "44.1",
                    "0.0",
                    "5.9"
                ],
                [
                    "[ITALIC] RoBERTa",
                    "[ITALIC] DSQuAD + DBiDAF",
                    "75.2",
                    "87.6",
                    "56.3",
                    "71.2",
                    "47.8",
                    "58.0",
                    "31.3",
                    "42.8"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] DSQuAD + DBERT",
                    "[BOLD] 76.2",
                    "[BOLD] 88.0",
                    "56.3",
                    "70.8",
                    "48.3",
                    "58.2",
                    "33.4",
                    "44.4"
                ],
                [
                    "[EMPTY]",
                    "[ITALIC] DSQuAD + DRoBERTa",
                    "75.1",
                    "87.5",
                    "[BOLD] 58.2",
                    "[BOLD] 73.2",
                    "[BOLD] 52.8",
                    "[BOLD] 62.7",
                    "[BOLD] 36.4",
                    "[BOLD] 47.2"
                ]
            ]
        },
        "gold_description": "for example , roberta trained on droberta reaches 38 . 9f1 on droberta , and this number further increases to 47 . 2f1 when including squad during training ( cf . table 6 ) . in table 6 we show experimental results for the same models and training datasets , but now including squad as additional training data . in this training setup we generally see improved generalisation to dbidaf , dbert , and droberta . interestingly , the relative differences between dbidaf , dbert , and droberta as training set used in conjunction with squad are now much diminished , and especially droberta as ( part of the ) training set now generalises substantially better . roberta achieves the strongest results on any of the dbidaf , dbert , and droberta evaluation sets , in particular when trained on dsquad + droberta . we identify a risk of datasets constructed with weaker models in the loop becoming outdated . for example , roberta achieves 58 . 2em / 73 . 2f1 on dbidaf , in contrast to 0 . 0em / 5 . 5f1 for bidaf – which is not far from non - expert human performance of 62 . 6em / 78 . 5f1 . we furthermore observe a gradual decrease in generalisation to squad when training on dbidaf towards training on droberta . this suggests that the stronger the model used in the annotation loop , the more dissimilar the data distribution becomes from the original squad distribution . we will later find further support for this explanation in a qualitative analysis ( section 5 ) . it may however also be due to a limitation of bert and roberta – similar to bidaf – in learning from a data",
        "generated_description": "the results show that adding dsquad training data to the pre - training dataset results in a significant boost in the performance of all the models . the bidaf model , on the other hand , does not perform as well as dbert and droberta . we hypothesize that this is due to the fact that the dataset is too small for training a large - scale language model that is as good as or better than a small - scale one ."
    },
    {
        "table_id": "343",
        "table_info": {
            "table_caption": "Table 4: Results of the automatic evaluation procedure on a random sample of 1000 sentences.",
            "table_column_names": [
                "[EMPTY]",
                "#T/S",
                "#S/C",
                "% SAME",
                "LDSC",
                "SAMSA",
                "SAMSAabl"
            ],
            "table_content_values": [
                [
                    "Complex",
                    "30.75",
                    "1.18",
                    "100",
                    "0.00",
                    "0.36",
                    "0.94"
                ],
                [
                    "MinWikiSplit",
                    "12.12",
                    "3.84",
                    "0.00",
                    "17.73",
                    "0.40",
                    "0.48"
                ]
            ]
        },
        "gold_description": "the results are provided in table 4 . the scores demonstrate that on average our proposed sentence splitting corpus contains four simplified target sentences per complex source sentence , with every target proposition consisting of 12 tokens . moreover , no input is simply copied to the output , but split into smaller components .",
        "generated_description": "we randomly sampled a random sample of 1000 sentences from the test set of the semeval evaluators . for both the complex and minwikisplit datasets , ldsc and samsaabl outperform the other two methods in terms of both # t / s and % same . however , for the complex dataset , the ratio of same is only 1 . 18 % and 3 . 84 % for the ldsc method and the samsa method , respectively . this indicates that there is still a significant room for improvement in the quality of the sentences produced by the different methods ."
    },
    {
        "table_id": "344",
        "table_info": {
            "table_caption": "Table 6: Averaged human evaluation ratings on a random sample of 300 sentences from MinWikiSplit. Grammaticality (G), meaning preservation (M) and structural simplicity (S) are measured using a 1 (very bad) to 5 (very good) scale.",
            "table_column_names": [
                "G",
                "M",
                "S"
            ],
            "table_content_values": [
                [
                    "[BOLD] 4.36",
                    "[BOLD] 4.10",
                    "[BOLD] 3.43"
                ]
            ]
        },
        "gold_description": "the results of the human evaluation are displayed in table 6 . these scores show that we succeed in producing output sequences that reach a high level of grammatical soundness and almost always perfectly preserve the original meaning of the input . the third dimension under consideration , structural simplicity , which captures the degree of minimality in the simplified sentences , scores high values , too .",
        "generated_description": "we randomly sampled a random sample of 300 sentences from minwikisplit and asked annotators to evaluate the quality of these sentences based on grammaticality , meaning preservation , and structural simplicity . for each sentence , the annotators were asked to score it on a scale from 1 ( very bad ) to 5 ( very good ) based on the following criteria : grammaticality : the sentence is grammatically correct ; meaning preservation : the meaning is preserved ; structural simplicity : the structural structure is preserved ."
    },
    {
        "table_id": "345",
        "table_info": {
            "table_caption": "Table 1: Comparative table of some of the available hate speech and abusive language corpora in terms of labels and sizes.",
            "table_column_names": [
                "Dataset",
                "# Tweets",
                "Labels",
                "Annotators/Tweet"
            ],
            "table_content_values": [
                [
                    "Chatzakou:2017:MBD:3091478.3091487",
                    "9,484",
                    "aggressive, bullying, spam, normal",
                    "5"
                ],
                [
                    "DBLP:conf/naacl/WaseemH16",
                    "16, 914",
                    "racist, sexist, normal",
                    "1"
                ],
                [
                    "DavidsonWMW17",
                    "24, 802",
                    "hateful, offensive (but not hateful), neither",
                    "3 or more"
                ],
                [
                    "Golbeck2017",
                    "35,000",
                    "the worst, threats, hate speech, direct",
                    "2 to 3"
                ],
                [
                    "Golbeck2017",
                    "35,000",
                    "harassment, potentially offensive, non-harassment",
                    "2 to 3"
                ],
                [
                    "FountaDCLBSVSK18",
                    "80, 000",
                    "offensive, abusive, hateful speech,",
                    "5 to 20"
                ],
                [
                    "FountaDCLBSVSK18",
                    "80, 000",
                    "aggressive, cyberbullying, spam, normal",
                    "5 to 20"
                ],
                [
                    "hatelingo",
                    "28,608",
                    "directed, generalized + target = archaic, class, disability,",
                    "3"
                ],
                [
                    "hatelingo",
                    "28,608",
                    "ethnicity, gender, nationality, religion, sexual orientation",
                    "3"
                ],
                [
                    "Ours",
                    "13,000",
                    "Labels for five different aspects",
                    "5"
                ]
            ]
        },
        "gold_description": "we use amazon mechanical turk to label around 13 , 000 potentially derogatory tweets table 1 compares different labelsets that exist in the literature . for instance , waseem and hovy ( 2016 ) use racist , sexist , and normal as labels ; davidson et al . ( 2017 ) label their data as hateful , offensive ( but not hateful ) , and neither , while elsherief et al . ( 2018 ) present an english dataset that records the target category based on which hate speech discriminates against people , such as ethnicity , gender , or sexual orientation and ask human annotators to classify the tweets as hate and non hate . founta et al . ( 2018 ) label their data as offensive , abusive , hateful , aggressive , cyberbullying , spam , and normal .",
        "generated_description": "our dataset contains 13 , 000 annotated tweets , each annotated with one of the five different aspects of hate speech ( harassment , offensive , hateful speech , etc . ) from the tweetscoco dataset of golbeck et al . our dataset is the only publicly available dataset that annotates all the five aspects . the other three datasets are collected by davidsonwmw17 , golbeck2017 and fountadclbsvsk18 . for our dataset , we use the same annotation process as they do . the annotation process is the same as the ones used in the previous datasets , except that we are not limited to annotators who have performed the same amount of annotations . we use the official annotation guidelines provided by the task ’ s organizers ."
    },
    {
        "table_id": "346",
        "table_info": {
            "table_caption": "Table 1: Development set sentence retrieval performance. * We calculated the scores using the official code, and for ** we used the F1 formula to calculate the score.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Precision(%)",
                "[BOLD] Recall@5(%)",
                "[BOLD] F1(%)"
            ],
            "table_content_values": [
                [
                    "UNC [unc]",
                    "36.39",
                    "86.79",
                    "51.38"
                ],
                [
                    "UCL [ucl]",
                    "22.74**",
                    "84.54",
                    "35.84"
                ],
                [
                    "UKP-Athene [athene]",
                    "23.67*",
                    "85.81*",
                    "37.11*"
                ],
                [
                    "DREAM-XLNet [xlnetgraph]",
                    "26.60",
                    "87.33",
                    "40.79"
                ],
                [
                    "DREAM-RoBERTa [xlnetgraph]",
                    "26.67",
                    "87.64",
                    "40.90"
                ],
                [
                    "Pointwise",
                    "25.14",
                    "88.25",
                    "39.13"
                ],
                [
                    "Pointwise + Threshold",
                    "[BOLD] 38.18",
                    "88.00",
                    "[BOLD] 53.25"
                ],
                [
                    "Pointwise + HNM",
                    "25.13",
                    "88.29",
                    "39.13"
                ],
                [
                    "Pairwise Ranknet",
                    "24.97",
                    "88.20",
                    "38.93"
                ],
                [
                    "Pairwise Ranknet + HNM",
                    "24.97",
                    "[BOLD] 88.32",
                    "38.93"
                ],
                [
                    "Pairwise Hinge",
                    "24.94",
                    "88.07",
                    "38.88"
                ],
                [
                    "Pairwise Hinge + HNM",
                    "25.01",
                    "88.28",
                    "38.98"
                ]
            ]
        },
        "gold_description": "table 1 compares the development set performance of different variants of the proposed sentence retrieval method with the state of the art results on the fever dataset . the results indicate that both pointwise and pairwise bert sentence retrieval improve the recall . the unc and dream precision scores are better than our methods without a decision threshold , however , a threshold can regulate the trade - off between the recall and precision , and achieve the best precision and f1 scores .",
        "generated_description": "pointwise and pairwise ranknet with hnm achieve competitive performance compared to the state - of - the - art models . pointwise + threshold achieves the best f1 score among all the compared models . pairwise hingenet + hnm outperforms the pointwise baseline by 0 . 8 % in recall @ 5 and 0 . 7 % in f1 . the performance of pointwise hinge net is slightly worse than that of pairwise ranknet ."
    },
    {
        "table_id": "347",
        "table_info": {
            "table_caption": "Table 3: Full evaluation scores of the only binary classification task where the single task single language model consistently outperforms multilingual multitask models.",
            "table_column_names": [
                "Attribute",
                "Model",
                "Macro-F1 EN",
                "Macro-F1 FR",
                "Macro-F1 AR",
                "Macro-F1 Avg",
                "Micro-F1 EN",
                "Micro-F1 FR",
                "Micro-F1 AR",
                "Micro-F1 Avg"
            ],
            "table_content_values": [
                [
                    "Directness",
                    "Majority",
                    "0.50",
                    "0.11",
                    "0.50",
                    "0.47",
                    "0.79",
                    "0.41",
                    "0.54",
                    "0.58"
                ],
                [
                    "Directness",
                    "LR",
                    "0.52",
                    "0.50",
                    "0.53",
                    "0.52",
                    "0.79",
                    "0.50",
                    "0.56",
                    "0.62"
                ],
                [
                    "Directness",
                    "STSL",
                    "[BOLD] 0.94",
                    "[BOLD] 0.80",
                    "[BOLD] 0.84",
                    "[BOLD] 0.86",
                    "[BOLD] 0.89",
                    "[BOLD] 0.69",
                    "[BOLD] 0.72",
                    "[BOLD] 0.76"
                ],
                [
                    "Directness",
                    "MTSL",
                    "[BOLD] 0.94",
                    "0.65",
                    "0.76",
                    "0.78",
                    "[BOLD] 0.89",
                    "0.58",
                    "0.65",
                    "0.70"
                ],
                [
                    "Directness",
                    "STML",
                    "[BOLD] 0.94",
                    "0.79",
                    "0.83",
                    "0.85",
                    "0.88",
                    "0.66",
                    "[BOLD] 0.72",
                    "0.75"
                ],
                [
                    "Directness",
                    "MTML",
                    "[BOLD] 0.94",
                    "0.78",
                    "0.74",
                    "0.82",
                    "0.88",
                    "0.66",
                    "0.65",
                    "0.73"
                ]
            ]
        },
        "gold_description": "single task single language ( stsl ) , single task multilingual ( stml ) , and multitask multilingual models ( mtml ) on our dataset . stsl performs the best among all models on the directness classification , and it is also consistent in both micro and macro - f1 scores . due to the fact that the directness has only two labels and multilabeling is not allowed in this task . tasks involving imbalanced data , multiclass and multilabel annotations harm the performance of the directness in multitask settings . since macro - f1 is the average of all f1 scores of individual labels , all deep learning models have high macro - f1 scores in english which indicates that they are particularly good at classifying the direct class . stsl is also comparable or better than traditional bow feature - based classifiers when performed on other tasks in terms of microf1 and for most of the macro - f1 scores . this shows the power of the deep learning approach . except for the directness , mtsl usually outperforms stsl or is comparable to it . mtml settings do not lead to a big improvement which may be due to the class imbalance , multilabel tasks , and the difference in the nature of the tasks .",
        "generated_description": "we can see that stsl and mtsl outperform lr and majority baseline significantly for all the three languages , which is consistent with our findings in the previous experiment . stsl performs the best for macro - f1 score for english and macro for fr and ar languages , while it performs the worst for the rest of the languages . this may be due to the fact that the average number of directness scores for the ar language is higher than that for the en and fr languages . however , stsl outperforms the majority baseline for the average score for the other languages ."
    },
    {
        "table_id": "348",
        "table_info": {
            "table_caption": "Table 4: Full evaluation of tasks where multilingual and multitask models outperform on average single task single language model on four different tasks.",
            "table_column_names": [
                "Attribute",
                "Model",
                "Macro-F1 EN",
                "Macro-F1 FR",
                "Macro-F1 AR",
                "Macro-F1 Avg",
                "Micro-F1 EN",
                "Micro-F1 FR",
                "Micro-F1 AR",
                "Micro-F1 Avg"
            ],
            "table_content_values": [
                [
                    "Tweet",
                    "Majority",
                    "0.24",
                    "0.19",
                    "0.20",
                    "0.21",
                    "0.41",
                    "0.27",
                    "0.27",
                    "0.32"
                ],
                [
                    "Tweet",
                    "LR",
                    "0.14",
                    "0.20",
                    "0.25",
                    "0.20",
                    "0.54",
                    "0.56",
                    "[BOLD] 0.48",
                    "0.53"
                ],
                [
                    "Tweet",
                    "STSL",
                    "0.24",
                    "0.12",
                    "0.31",
                    "0.23",
                    "0.49",
                    "0.51",
                    "0.47",
                    "0.49"
                ],
                [
                    "Tweet",
                    "MTSL",
                    "0.09",
                    "0.20",
                    "0.33",
                    "0.21",
                    "[BOLD] 0.55",
                    "[BOLD] 0.59",
                    "0.46",
                    "[BOLD] 0.54"
                ],
                [
                    "Tweet",
                    "STML",
                    "0.04",
                    "0.07",
                    "[BOLD] 0.35",
                    "0.16",
                    "0.54",
                    "0.47",
                    "0.37",
                    "0.46"
                ],
                [
                    "Tweet",
                    "MTML",
                    "[BOLD] 0.30",
                    "[BOLD] 0.28",
                    "[BOLD] 0.35",
                    "[BOLD] 0.31",
                    "0.45",
                    "0.48",
                    "0.44",
                    "0.46"
                ],
                [
                    "Target Attribute",
                    "Majority",
                    "0.15",
                    "0.13",
                    "0.28",
                    "0.19",
                    "0.25",
                    "0.32",
                    "0.40",
                    "0.32"
                ],
                [
                    "Target Attribute",
                    "LR",
                    "0.41",
                    "0.35",
                    "0.47",
                    "0.41",
                    "0.52",
                    "0.55",
                    "0.53",
                    "0.53"
                ],
                [
                    "Target Attribute",
                    "STSL",
                    "0.42",
                    "0.18",
                    "[BOLD] 0.63",
                    "0.41",
                    "[BOLD] 0.68",
                    "0.71",
                    "0.50",
                    "0.63"
                ],
                [
                    "Target Attribute",
                    "MTSL",
                    "0.41",
                    "[BOLD] 0.43",
                    "0.41",
                    "[BOLD] 0.42",
                    "[BOLD] 0.68",
                    "0.67",
                    "[BOLD] 0.56",
                    "[BOLD] 0.64"
                ],
                [
                    "Target Attribute",
                    "STML",
                    "0.39",
                    "0.09",
                    "0.24",
                    "0.24",
                    "0.67",
                    "0.62",
                    "0.53",
                    "0.61"
                ],
                [
                    "Target Attribute",
                    "MTML",
                    "[BOLD] 0.43",
                    "0.24",
                    "0.16",
                    "0.28",
                    "0.66",
                    "[BOLD] 0.72",
                    "0.51",
                    "0.63"
                ],
                [
                    "Target Group",
                    "Majority",
                    "0.07",
                    "0.06",
                    "0.08",
                    "0.07",
                    "0.18",
                    "0.14",
                    "0.35",
                    "0.22"
                ],
                [
                    "Target Group",
                    "LR",
                    "[BOLD] 0.18",
                    "0.33",
                    "[BOLD] 0.40",
                    "[BOLD] 0.30",
                    "0.34",
                    "0.40",
                    "0.62",
                    "0.46"
                ],
                [
                    "Target Group",
                    "STSL",
                    "0.04",
                    "0.21",
                    "0.04",
                    "0.10",
                    "0.48",
                    "[BOLD] 0.59",
                    "0.58",
                    "0.55"
                ],
                [
                    "Target Group",
                    "MTSL",
                    "0.04",
                    "0.27",
                    "0.15",
                    "0.15",
                    "[BOLD] 0.50",
                    "0.54",
                    "0.55",
                    "0.53"
                ],
                [
                    "Target Group",
                    "STML",
                    "0.11",
                    "[BOLD] 0.37",
                    "0.13",
                    "0.20",
                    "0.49",
                    "0.57",
                    "[BOLD] 0.64",
                    "[BOLD] 0.56"
                ],
                [
                    "Target Group",
                    "MTML",
                    "0.06",
                    "0.19",
                    "0.10",
                    "0.11",
                    "[BOLD] 0.50",
                    "0.54",
                    "0.56",
                    "0.53"
                ],
                [
                    "Annotator’s Sentiment",
                    "Majority",
                    "0.42",
                    "0.21",
                    "0.17",
                    "0.27",
                    "0.46",
                    "0.31",
                    "0.32",
                    "0.39"
                ],
                [
                    "Annotator’s Sentiment",
                    "LR",
                    "0.29",
                    "0.15",
                    "0.14",
                    "0.19",
                    "0.45",
                    "0.30",
                    "0.46",
                    "0.40"
                ],
                [
                    "Annotator’s Sentiment",
                    "STSL",
                    "[BOLD] 0.57",
                    "[BOLD] 0.30",
                    "0.12",
                    "[BOLD] 0.33",
                    "0.57",
                    "0.39",
                    "[BOLD] 0.48",
                    "0.48"
                ],
                [
                    "Annotator’s Sentiment",
                    "MTSL",
                    "[BOLD] 0.57",
                    "0.17",
                    "0.17",
                    "0.30",
                    "0.57",
                    "[BOLD] 0.50",
                    "0.45",
                    "0.51"
                ],
                [
                    "Annotator’s Sentiment",
                    "STML",
                    "0.47",
                    "0.22",
                    "0.13",
                    "0.27",
                    "[BOLD] 0.59",
                    "0.49",
                    "[BOLD] 0.48",
                    "[BOLD] 0.52"
                ],
                [
                    "Annotator’s Sentiment",
                    "MTML",
                    "0.55",
                    "0.20",
                    "[BOLD] 0.21",
                    "0.32",
                    "0.58",
                    "0.45",
                    "0.45",
                    "0.49"
                ]
            ]
        },
        "gold_description": "when we jointly train each task on the three languages , the performance decreases in most cases , other than the target group classification tasks . yet , multilingual training of the target group classification task improves in all languages . since the target group classification task involves 16 labels , the amount of data annotated for each label is lower than in other tasks . hence , when aggregating annotated data in different languages , the size of the training data also increases , due to the relative regularity of identification words of different groups in all three languages in comparison to other tasks .",
        "generated_description": "we can see that our proposed method outperforms all baselines across all the three languages in terms of both macro - f1 and micro - f1 . for the en and ar datasets , our method achieves the best results in all the cases . the results for the en dataset are not as good as for the ar dataset , but our method is still able to outperform the majority baseline by a large margin . we can also see that stsl , mtsl , and stml perform worse than our method in most cases ."
    },
    {
        "table_id": "349",
        "table_info": {
            "table_caption": "Table 1: Comparison of Exact Match and F1-score of multilingual BERT and the baseline on French and Japanese SQuAD. F1 and EM are the two official metrics of the SQuAD benchmark. EM measures the percentage of predictions that match exactly the ground-truth location of the answer. F1 measures the average overlap between the prediction and ground truth answer.",
            "table_column_names": [
                "[EMPTY]",
                "French F1",
                "French EM",
                "Japanese F1",
                "Japanese EM"
            ],
            "table_content_values": [
                [
                    "Baseline",
                    "61.88",
                    "40.67",
                    "52.19",
                    "37.00"
                ],
                [
                    "Multilingual BERT",
                    "[BOLD] 76.65",
                    "[BOLD] 61.77",
                    "[BOLD] 61.83",
                    "[BOLD] 59.94"
                ]
            ]
        },
        "gold_description": "a sample of the squad v1 . 1 test set ( only the first paragraph of each of the 48 wikipedia pages ) has been translated by humans in french and japanese . we here evaluate the performance of the fine - tuned multilingual bert on them and compare the results to a baseline . table 1 displays the exact match ( em ) and f1 - score of the baseline and multilingual bert on the selected datasets . we can observe that multilingual bert is able to significantly outperform the baseline on both the japanese and the french question answering task . was already noted in the public benchmarks and we add here that bert has a high ability for qa zero - shot transfer . it is even able to significantly outperform the baseline",
        "generated_description": "our multilingual bert model outperforms the baseline model in terms of exact match and f1 - score for both languages . we also measure the average overlap between the prediction and ground - truth answer by f1 score , which measures the percentage of predictions that exactly match the ground truth location of the answer . we observe that our multilingual model achieves higher f1 and em scores than the baseline in both languages , indicating that our model is better at locating the correct answer when making predictions ."
    },
    {
        "table_id": "350",
        "table_info": {
            "table_caption": "Table 2: Exact Match and F1-score of multilingual BERT on each of the cross-lingual SQuAD datasets. The row language is the one of the paragraph and the column language is the one of the question. The figures in bold are the best exact match, for each language, among the datasets where they occur.",
            "table_column_names": [
                "[EMPTY]",
                "Question",
                "En F1",
                "En EM",
                "Fr F1",
                "Fr EM",
                "Jap F1",
                "Jap EM"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "En",
                    "90.57",
                    "[BOLD] 81.96",
                    "78.55",
                    "[BOLD] 67.28",
                    "66.22",
                    "52.91"
                ],
                [
                    "Context",
                    "Fr",
                    "81.10",
                    "65.14",
                    "76.65",
                    "61.77",
                    "60.28",
                    "42.20"
                ],
                [
                    "[EMPTY]",
                    "Jap",
                    "58.95",
                    "57.49",
                    "47.19",
                    "45.26",
                    "61.83",
                    "[BOLD] 59.93"
                ]
            ]
        },
        "gold_description": "to run cross - lingual tests , we build six additional datasets from the existing ones by mixing context in one language with question in another language . the mixed datasets will be made available online in a github repository . the performance of bert on all datasets is displayed in table 2 . the performance is the best for the en - en dataset . the performance on fr - fr and jap - jap is also very good as noted in the first experiment . we additionally note here that results on cross - lingual sets are close to monolingual results : either as good , or slightly worse or slightly better . for instance , the exact match on the en - fr dataset is higher than the exact match on the fr - fr dataset . we also observe that , in general , the exact match and f1 - score are close together when the context is in japanese whereas there is generally a larger gap for the other two languages . the performance on jap - en is lower than on jap - jap whereas the performance on en - fr is higher than on fr - fr , results for the jap - jap dataset are better than results for the jap - en dataset",
        "generated_description": "for each question , the best exact match and f1 - score is shown in bold , among the datasets where they occur . for the context questions , we see that the multilingual bert performs better than the english model for all the languages except for japanese , where it is the worst . for english questions , the difference is less pronounced , but still considerable . for japanese , the gap is even larger ."
    },
    {
        "table_id": "351",
        "table_info": {
            "table_caption": "Table 2: Development set verification scores.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] FEVER Score(%)",
                "[BOLD] Label Accuracy(%)"
            ],
            "table_content_values": [
                [
                    "UNC [unc]",
                    "66.14",
                    "69.60"
                ],
                [
                    "UCL [ucl]",
                    "65.41",
                    "69.66"
                ],
                [
                    "UKP-Athene [athene]",
                    "64.74",
                    "-"
                ],
                [
                    "BERT & UKP-Athene",
                    "69.79",
                    "71.70"
                ],
                [
                    "BERT Large & UKP-Athene",
                    "70.64",
                    "72.72"
                ],
                [
                    "BERT & BERT (Pointwise)",
                    "71.38",
                    "73.51"
                ],
                [
                    "BERT & BERT (Pointwise + HNM)",
                    "71.33",
                    "73.54"
                ],
                [
                    "BERT (Large) & BERT (Pointwise)",
                    "[BOLD] 72.42",
                    "74.58"
                ],
                [
                    "BERT (Large) & BERT (Pointwise + HNM)",
                    "[BOLD] 72.42",
                    "[BOLD] 74.59"
                ],
                [
                    "BERT & BERT (Pairwise Ranknet)",
                    "71.02",
                    "73.22"
                ],
                [
                    "BERT & BERT (Pairwise Ranknet + HNM)",
                    "70.99",
                    "73.02"
                ],
                [
                    "BERT & BERT (Pairwise Hinge)",
                    "71.60",
                    "72.74"
                ],
                [
                    "BERT & BERT (Pairwise Hinge + HNM)",
                    "70.70",
                    "72.76"
                ]
            ]
        },
        "gold_description": "in table 2 , we compare the development set results of the state of the art methods with the bert model trained on different retrieved evidence sets . the bert claim verification system even if it is trained on the ukp - athene sentence retrieval component ( hanselowski et al . , 2018 ) , the state of the art method with the highest recall , improves both label accuracy and fever score . training based on the bert sentence retrieval predictions significantly enhances the verification results because while it explicitly improves the fever score by providing more correct evidence sentences , it provides a better training set for the verification system . the large berts are only trained on the best retrieval systems , and as expected significantly improve the performance .",
        "generated_description": "the best fever score of 71 . 38 % is achieved by combining bert with ukp - athene [ athene ] and the pointwise embeddings obtained by fine - tuning bert large [ bert ] on the conll - 2012 dataset . when we fine - tune bert on the same dataset , the fever scores of bert & bert ( large ) are 71 . 42 % and 72 . 42 % , respectively , which are higher than the previous state - of - the - art results . we also observe that when we combine bert and ukp with the original bert , we obtain 71 . 70 % and 71 . 72 % in terms of fever score and label accuracy , respectively . this is a significant improvement over the previous best result , i . e . , 71 . 74 % from the point - wise embedding model [ unc ] ."
    },
    {
        "table_id": "352",
        "table_info": {
            "table_caption": "Table 3: Doc-level BLEU scores on the DGT valid and test sets of our submitted models in all tracks.",
            "table_column_names": [
                "Track",
                "Target",
                "Constrained",
                "Valid",
                "Test"
            ],
            "table_content_values": [
                [
                    "NLG",
                    "EN",
                    "no",
                    "23.5",
                    "20.5"
                ],
                [
                    "MT",
                    "EN",
                    "yes",
                    "60.2",
                    "58.2"
                ],
                [
                    "MT",
                    "EN",
                    "no",
                    "64.2",
                    "62.2"
                ],
                [
                    "MT+NLG",
                    "EN",
                    "yes",
                    "64.4",
                    "62.2"
                ],
                [
                    "NLG",
                    "DE",
                    "no",
                    "16.9",
                    "16.1"
                ],
                [
                    "MT",
                    "DE",
                    "yes",
                    "49.8",
                    "48.0"
                ],
                [
                    "MT+NLG",
                    "DE",
                    "yes",
                    "49.4",
                    "48.2"
                ]
            ]
        },
        "gold_description": "for each track , we selected the best models according to their bleu score on dgt - valid . the scores are shown in table 3 , we see that in the same data conditions ( unconstrained mode ) , the mt + nlg models are not better than the pure mt models .",
        "generated_description": "we observe that the best results are obtained for the mt and mt + nlg models with the multi - track combination of parallel and parallel data , where we have access to parallel sentences from both sides of the parallel corpus . interestingly , we observe that adding parallel data to the mt model leads to a small but consistent improvement in terms of document - level bleu in all cases . the best results for the nlg model are obtained with parallel data from english and german , while the best performance for mt is obtained with the combined data from all three languages ."
    },
    {
        "table_id": "353",
        "table_info": {
            "table_caption": "Table 6: English NLG comparison against state-of-the-art on Rotowire-test. BLEU of submitted NLG (EN) model, averaged over 3 runs. Because Rotowire tokenization is slightly different, we apply a set of fixes to the model outputs (e.g., 1-of-3 → 1 - of - 3).",
            "table_column_names": [
                "Model",
                "Rotowire test"
            ],
            "table_content_values": [
                [
                    "Wiseman et al. ( 2017 )",
                    "14.5"
                ],
                [
                    "Puduppully et al. ( 2019 )",
                    "16.5"
                ],
                [
                    "Ours (4-player)",
                    "22.2"
                ]
            ]
        },
        "gold_description": "table 6 shows a 5 . 7 bleu improvement on rotowire - test by our english nlg model compared to the previous state of the art .",
        "generated_description": "we submitted a 4 - player model to the rotowire nlg challenge and achieved a bleu score of 22 . 2 on the official test set . our submission outperforms the current state - of - the - art by a significant margin of 3 . 8 bleus ."
    },
    {
        "table_id": "354",
        "table_info": {
            "table_caption": "Table 7: English NLG ablation study, starting from a 3 best player baseline (the submitted NLG model has 4 players). BLEU averages over 3 runs. Standard deviation ranges between 0.1 and 0.4.",
            "table_column_names": [
                "Model",
                "Valid",
                "Test"
            ],
            "table_content_values": [
                [
                    "Baseline (3 players, sorted)",
                    "[BOLD] 22.7",
                    "20.4"
                ],
                [
                    "No player",
                    "20.1",
                    "18.8"
                ],
                [
                    "All players, sorted",
                    "[BOLD] 22.7",
                    "20.9"
                ],
                [
                    "All players, shuffled",
                    "22.0",
                    "20.0"
                ],
                [
                    "(1) No next game",
                    "22.0",
                    "19.9"
                ],
                [
                    "(2) No week day",
                    "22.2",
                    "20.5"
                ],
                [
                    "(3) No player position",
                    "22.6",
                    "20.5"
                ],
                [
                    "(4) No team-level sums",
                    "22.5",
                    "20.5"
                ],
                [
                    "(5) Remove most tags",
                    "22.6",
                    "20.8"
                ],
                [
                    "(1) to (5)",
                    "21.3",
                    "19.7"
                ]
            ]
        },
        "gold_description": "from table 7 , we see that sorting players helps , but only slightly . using only team - level information , and no information about players gives worse but still decent bleu scores . week day , player position or team - level aggregated scores can be removed without hurting bleu . however , information about next games seems useful . interestingly , relying on position only and removing most tags ( e . g . , , ) seems to be fine . in this case , we also print all - zero stats , for the position of each statistic to be consistent across players and games .",
        "generated_description": "we perform an ablation study by starting from a 3 best player baseline ( the submitted nlg model has 4 players ) . we find that removing the player or the position of the player improves bleu by a small amount , but removing the team - level sums results in a substantial drop in performance . removing the week day and / or the player position results in worse performance than removing the next game , but not the player . we also find that shuffling the positions of the players is slightly better than using all player positions , but the overall performance is substantially worse ."
    },
    {
        "table_id": "355",
        "table_info": {
            "table_caption": "Table 3: F1 score on the development set for low-resource training setups (none, tiny 5k or small 10k labeled Danish sentences). Transfer via multilingual embeddings from Medium (3.2k sentences, 51k tokens) or Large English source data (14k sentences/203k tokens).",
            "table_column_names": [
                "[EMPTY]",
                "TnT",
                "neural in-lang. plain",
                "neural in-lang. +Poly",
                "neural transfer +Medium src",
                "neural transfer +Large src",
                "neural transfer FineTune"
            ],
            "table_content_values": [
                [
                    "zero-shot",
                    "—",
                    "—",
                    "—",
                    "58.29",
                    "61.18",
                    "—"
                ],
                [
                    "Tiny",
                    "37.48",
                    "36.17",
                    "56.05",
                    "67.14",
                    "67.49",
                    "62.07"
                ],
                [
                    "Small",
                    "44.30",
                    "51.90",
                    "67.18",
                    "[BOLD] 70.82",
                    "70.01",
                    "65.63"
                ]
            ]
        },
        "gold_description": "cross - lingual transfer is powerful ( rq1 ) . zero - shot learning reaches an f1 score of 58 % in the medium setup , which outperforms training the neural tagger on very limited gold data ( plain ) . neural ner is better than traditional hmm - based tagging ( tnt ) ( brants , 2000 ) and greatly improves by unsupervised word embedding initialization ( + poly ) . it is noteworthy that zero - shot transfer benefits only to a limiting degree from more source data ( f1 increases by almost 3 % when training on all english conll data ) . to compare cross - lingual transfer to limited gold data ( rq2 ) , we observe that training the neural system on the small amount of data together with polyglot embeddings is close to the tiny - shot transfer setup . few - shot learning greatly improves over zero - shot learning . the most beneficial way is to add the target data to the source , in comparison to fine - tuning . in both medium and large setups are further gains obtained by adding tiny or small amounts of danish gold data . interestingly , a ) finetuning is less effective ; b ) it is better to transfer from a medium - sized setup than from the entire conll source data .",
        "generated_description": "we observe that transfer via multilingual embeddings from medium ( 3 . 2k sentences , 51k tokens ) or large ( 14k sentences / 203k tokens , 14k sentences per language ) source data is effective in all low - resource settings , with the exception of finetune fine - tuning on the 5k and 10k labeled danish sentences . this is consistent with the findings of \\ newciteluong - etal : 2019 : acl - ijcnlp , where transfer from medium - resource to large - resource is effective for both zero - shot and fine - tune on the target language ."
    },
    {
        "table_id": "356",
        "table_info": {
            "table_caption": "Table 4: F1 score for Danish NER.",
            "table_column_names": [
                "Dev",
                "All",
                "PER",
                "LOC",
                "ORG",
                "MISC"
            ],
            "table_content_values": [
                [
                    "Majority",
                    "44.4",
                    "61.8",
                    "0.0",
                    "0.0",
                    "—"
                ],
                [
                    "DKIE",
                    "58.9",
                    "68.9",
                    "63.6",
                    "23.3",
                    "—"
                ],
                [
                    "Polyglot",
                    "64.5",
                    "73.7",
                    "[BOLD] 73.4",
                    "36.8",
                    "—"
                ],
                [
                    "Bilstm",
                    "[BOLD] 70.8",
                    "[BOLD] 83.3",
                    "71.8",
                    "[BOLD] 60.0",
                    "23.9"
                ],
                [
                    "Test",
                    "All",
                    "PER",
                    "LOC",
                    "ORG",
                    "MISC"
                ],
                [
                    "Polyglot",
                    "61.6",
                    "78.4",
                    "[BOLD] 69.7",
                    "24.7",
                    "—"
                ],
                [
                    "Bilstm",
                    "[BOLD] 66.0",
                    "[BOLD] 86.6",
                    "63.6",
                    "[BOLD] 42.5",
                    "24.8"
                ]
            ]
        },
        "gold_description": "existing systems ( rq3 ) are evaluated and results polyglot ( al - rfou et al . , 2013 ) overall performs better than dkie ( derczynski et al . , 2014 ) . 2 the best system is our cross - lingual transfer ner from medium source data paired with small amounts of gold data . per - entity evaluation shows that the neural bilstm tagger outperforms polyglot except for location , which is consistent across evaluation sets .",
        "generated_description": "the bilstm parser outperforms both the majority baseline and the polyglot parser by a significant margin . the difference between the two parsers is smaller for the per category , but the difference is statistically significant ( p < 0 . 01 ) ."
    },
    {
        "table_id": "357",
        "table_info": {
            "table_caption": "Table 2: Results of present keyphrase prediction on five datasets. Suffix “-2RF1” denotes that a model is trained by our reinforcement learning approach.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Inspec  [ITALIC] F1@ [ITALIC] M",
                "[BOLD] Inspec  [ITALIC] F1@5",
                "[BOLD] Krapivin  [ITALIC] F1@ [ITALIC] M",
                "[BOLD] Krapivin  [ITALIC] F1@5",
                "[BOLD] NUS  [ITALIC] F1@ [ITALIC] M",
                "[BOLD] NUS  [ITALIC] F1@5",
                "[BOLD] SemEval  [ITALIC] F1@ [ITALIC] M",
                "[BOLD] SemEval  [ITALIC] F1@5",
                "[BOLD] KP20k  [ITALIC] F1@ [ITALIC] M",
                "[BOLD] KP20k  [ITALIC] F1@5"
            ],
            "table_content_values": [
                [
                    "catSeq",
                    "0.262",
                    "0.225",
                    "0.354",
                    "0.269",
                    "0.397",
                    "0.323",
                    "0.283",
                    "0.242",
                    "0.367",
                    "0.291"
                ],
                [
                    "catSeqD",
                    "0.263",
                    "0.219",
                    "0.349",
                    "0.264",
                    "0.394",
                    "0.321",
                    "0.274",
                    "0.233",
                    "0.363",
                    "0.285"
                ],
                [
                    "catSeqCorr",
                    "0.269",
                    "0.227",
                    "0.349",
                    "0.265",
                    "0.390",
                    "0.319",
                    "0.290",
                    "0.246",
                    "0.365",
                    "0.289"
                ],
                [
                    "catSeqTG",
                    "0.270",
                    "0.229",
                    "0.366",
                    "0.282",
                    "0.393",
                    "0.325",
                    "0.290",
                    "0.246",
                    "0.366",
                    "0.292"
                ],
                [
                    "catSeq-2 [ITALIC] RF1",
                    "0.300",
                    "0.250",
                    "0.362",
                    "0.287",
                    "0.426",
                    "0.364",
                    "0.327",
                    "0.285",
                    "0.383",
                    "0.310"
                ],
                [
                    "catSeqD-2 [ITALIC] RF1",
                    "0.292",
                    "0.242",
                    "0.360",
                    "0.282",
                    "0.419",
                    "0.353",
                    "0.316",
                    "0.272",
                    "0.379",
                    "0.305"
                ],
                [
                    "catSeqCorr-2 [ITALIC] RF1",
                    "0.291",
                    "0.240",
                    "[BOLD] 0.369",
                    "0.286",
                    "0.414",
                    "0.349",
                    "0.322",
                    "0.278",
                    "0.382",
                    "0.308"
                ],
                [
                    "catSeqTG-2 [ITALIC] RF1",
                    "[BOLD] 0.301",
                    "[BOLD] 0.253",
                    "[BOLD] 0.369",
                    "[BOLD] 0.300",
                    "[BOLD] 0.433",
                    "[BOLD] 0.375",
                    "[BOLD] 0.329",
                    "[BOLD] 0.287",
                    "[BOLD] 0.386",
                    "[BOLD] 0.321"
                ]
            ]
        },
        "gold_description": "the evaluation results of different models on predicting present keyphrases are shown in table 2 . we observe that our reinforcement learning algorithm catseqtg - 2 [ italic ] rf1 consistently improves the keyphrase extraction ability of all baseline generative models by a large margin .",
        "generated_description": "for inspec , krapivin , nus and semeval , the best f1 - measure is achieved by the catseqcorr model . on the other hand , on the kp20k dataset , the catseqd model achieves f1 @ 5 score of 0 . 264 , 0 . 271 , 0271 and 0 . 269 , respectively . the results are consistent with our previous findings on the inspec dataset ."
    },
    {
        "table_id": "358",
        "table_info": {
            "table_caption": "Table 4: The abilities of predicting the correct number of keyphrases on the KP20k dataset. MAE denotes the mean absolute error (the lower the better), Avg. # denotes the average number of generated keyphrases per document.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Present MAE",
                "[BOLD] Present Avg. #",
                "[BOLD] Absent MAE",
                "[BOLD] Absent Avg. #"
            ],
            "table_content_values": [
                [
                    "oracle",
                    "0.000",
                    "2.837",
                    "0.000",
                    "2.432"
                ],
                [
                    "catSeq",
                    "2.271",
                    "3.781",
                    "1.943",
                    "0.659"
                ],
                [
                    "catSeqD",
                    "2.225",
                    "3.694",
                    "1.961",
                    "0.629"
                ],
                [
                    "catSeqCorr",
                    "2.292",
                    "3.790",
                    "1.914",
                    "0.703"
                ],
                [
                    "catSeqTG",
                    "2.276",
                    "3.780",
                    "1.956",
                    "0.638"
                ],
                [
                    "catSeq-2 [ITALIC] RF1",
                    "2.118",
                    "3.733",
                    "1.494",
                    "1.574"
                ],
                [
                    "catSeqD-2 [ITALIC] RF1",
                    "[BOLD] 2.087",
                    "[BOLD] 3.666",
                    "1.541",
                    "1.455"
                ],
                [
                    "catSeqCorr-2 [ITALIC] RF1",
                    "2.107",
                    "3.696",
                    "1.557",
                    "1.409"
                ],
                [
                    "catSeqTG-2 [ITALIC] RF1",
                    "2.204",
                    "3.865",
                    "[BOLD] 1.439",
                    "[BOLD] 1.749"
                ]
            ]
        },
        "gold_description": "we also report the average number of generated keyphrases per document , denoted as \" avg . # \" . the results are shown in table 4 , where oracle is a model that always generates the ground - truth keyphrases . the resultant maes demonstrate that our deep reinforced models notably outperform the baselines on predicting the number of absent keyphrases and slightly outperform the baselines on predicting the number of present keyphrases . moreover , our deep reinforced models generate significantly more absent keyphrases than the baselines besides , the baseline models and our reinforced models generate similar numbers of present keyphrases , while our reinforced models achieve notably higher f - measures , implying that our methods generate present keyphrases more accurately than the baselines .",
        "generated_description": "for both present and absent splits , the best performing model is the catseqd model with an mae of 2 . 087 for the present split and 3 . 666 for the absent split . the best performing method for present split is the proposed catsezed - 2rf1 , with the best performance on present split achieved by the proposed two - stage model . for absent split , the performance of the proposed models is similar to that of the oracle split . for both splits , we can see that the performance gap between the two best performing models is smaller for the two stage models compared to the best single stage model ."
    },
    {
        "table_id": "359",
        "table_info": {
            "table_caption": "Table 5: Ablation study on the KP20k dataset. Suffix “-2RF1” denotes our full RL approach. Suffix “-2F1” denotes that we replace our adaptive RF1 reward function in the full approach by an F1 reward function. Suffix “-RF1” denotes that we replace the two separate RF1 reward signals in our full approach with only one RF1 reward signal for all the generated keyphrases.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Present  [ITALIC] F1@ [ITALIC] M",
                "[BOLD] Present  [ITALIC] F1@5",
                "[BOLD] Absent  [ITALIC] F1@ [ITALIC] M",
                "[BOLD] Absent  [ITALIC] F1@5"
            ],
            "table_content_values": [
                [
                    "catSeq",
                    "0.367",
                    "0.291",
                    "0.032",
                    "0.015"
                ],
                [
                    "catSeq- [ITALIC] RF1",
                    "0.380",
                    "0.336",
                    "0.006",
                    "0.003"
                ],
                [
                    "catSeq-2 [ITALIC] F1",
                    "0.378",
                    "0.278",
                    "0.042",
                    "0.020"
                ],
                [
                    "catSeq-2 [ITALIC] RF1",
                    "0.383",
                    "0.310",
                    "0.047",
                    "0.024"
                ]
            ]
        },
        "gold_description": "we conduct an ablation study to further analyze our reinforcement learning algorithm . the results are reported in table 5 . as seen in table 5 , although the performance of catseq - rf1 is competitive to catseq - 2rf1 on predicting present keyphrases , it yields an extremely poor performance on absent keyphrase prediction . by comparing the last two rows in table 5 , we observe that our rf1 reward function slightly outperforms the f1 reward function .",
        "generated_description": "we perform an ablation study on the kp20k dataset to evaluate the contribution of the two separate rf1 reward signals in our full approach . specifically , we replace the adaptive reward function with an f1 reward function , and the catseq - 2f1 model with the same two separate reward functions . we can see that both the present and absent keyphrases are benefited from the use of a more expressive reward function . however , the present keyphrase extractor is more sensitive to the change in the reward signal ."
    },
    {
        "table_id": "360",
        "table_info": {
            "table_caption": "Table 6: Keyphrase prediction results on the KP20k dataset with our new evaluation method.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Present  [ITALIC] F1@ [ITALIC] M",
                "[BOLD] Present  [ITALIC] F1@ [ITALIC] M",
                "[BOLD] Absent  [ITALIC] F1@ [ITALIC] M",
                "[BOLD] Absent  [ITALIC] F1@ [ITALIC] M"
            ],
            "table_content_values": [
                [
                    "[BOLD] Model",
                    "old",
                    "new",
                    "old",
                    "new"
                ],
                [
                    "catSeq",
                    "0.367",
                    "0.376",
                    "0.032",
                    "0.034"
                ],
                [
                    "catSeqD",
                    "0.363",
                    "0.372",
                    "0.031",
                    "0.033"
                ],
                [
                    "catSeqCorr",
                    "0.365",
                    "0.375",
                    "0.032",
                    "0.034"
                ],
                [
                    "catSeqTG",
                    "0.366",
                    "0.374",
                    "0.032",
                    "0.033"
                ],
                [
                    "catSeq-2 [ITALIC] RF1",
                    "0.383",
                    "0.396",
                    "0.047",
                    "0.054"
                ],
                [
                    "catSeqD-2 [ITALIC] RF1",
                    "0.379",
                    "0.390",
                    "0.046",
                    "0.052"
                ],
                [
                    "catSeqCorr-2 [ITALIC] RF1",
                    "0.382",
                    "0.393",
                    "0.045",
                    "0.051"
                ],
                [
                    "catSeqTG-2 [ITALIC] RF1",
                    "0.386",
                    "0.398",
                    "0.050",
                    "0.056"
                ]
            ]
        },
        "gold_description": "table 6 shows that for all generative models , the evaluation scores computed by our method are higher than those computed by prior method .",
        "generated_description": "for the present split , the best performing model is catseqcorr - 2rf1 , with an f1 @ m score of 0 . 382 for present and 0 . 390 for absent . for the new split , we see that the performance of all the models is similar , with the exception of the absent class , where the gap between the best and worst performing models is larger ."
    },
    {
        "table_id": "361",
        "table_info": {
            "table_caption": "Table 1: Automatic Metrics Evaluation for Different Models.",
            "table_column_names": [
                "Model",
                "BLEU",
                "distinct-1",
                "distinct-2",
                "Avg.length",
                "Stopword",
                "adv succ"
            ],
            "table_content_values": [
                [
                    "Human",
                    "-",
                    "16.8%",
                    "58.1%",
                    "14.2",
                    "69.8%",
                    "[EMPTY]"
                ],
                [
                    "AR",
                    "1.64",
                    "3.7%",
                    "9.5%",
                    "6.4",
                    "82.3%",
                    "2.7%"
                ],
                [
                    "AR+MMI",
                    "2.10",
                    "10.6%",
                    "20.5%",
                    "7.2",
                    "76.4%",
                    "6.3%"
                ],
                [
                    "AR+MMI+diverse",
                    "2.16",
                    "16.0%",
                    "27.3%",
                    "7.5",
                    "72.1%",
                    "6.4%"
                ],
                [
                    "AR+MMI+RL",
                    "2.34",
                    "13.7%",
                    "25.2%",
                    "7.3",
                    "73.0%",
                    "8.0%"
                ],
                [
                    "NonAR",
                    "1.54",
                    "8.9%",
                    "14.6%",
                    "7.1",
                    "77.9%",
                    "2.4%"
                ],
                [
                    "NonAR+MMI",
                    "2.68",
                    "15.9%",
                    "27.0%",
                    "7.4",
                    "71.9%",
                    "9.2%"
                ]
            ]
        },
        "gold_description": "results are shown in table 1 . when comparing ar with ar + mmi , ar + mmi significantly outperforms ar across all metrics , lookahead strategy to estimate for the variants of ar + mmi , ar + mmi + diverse generates a more diverse n - best list for reranking , and thus outperforms ar + mmi ; ar + mmi + rl uses future and thus outperforms backward probability , ar + mmi as well . it ' s hard to tell which model performs better , ar or non - ar : ar performs better than non - ar for bleu and adversarial success , but worse for the other metrics . this means comparing with ar model , non - ar model tends to generate more diverse responses , but might be less coherent . when comparing non - ar with ar + mmi + diverse , non - ar has relatively lower distinct score , but significantly higher scores bleu and adversarial success .",
        "generated_description": "our model outperforms the baseline in terms of bleu and distinct - 1 / 2 / distinct - 2 measures , but underperforms on average length and stopword count . we also observe that the adversarial success rate of our model is significantly higher than that of the baseline , indicating that our model generates more diverse and end - to - end responses . in addition , we observe that ar + mmi + rl outperforms ar and nonar by a large margin , indicating the effectiveness of the mmi objective ."
    },
    {
        "table_id": "362",
        "table_info": {
            "table_caption": "Table 3: Human judgments for Coherence and Content Richeness of the different models.",
            "table_column_names": [
                "Model",
                "disagr (%)",
                "un(%)",
                "agr(%)"
            ],
            "table_content_values": [
                [
                    "Coherence",
                    "Coherence",
                    "Coherence",
                    "Coherence"
                ],
                [
                    "Human",
                    "17.4",
                    "20.8",
                    "61.8"
                ],
                [
                    "AR",
                    "28.6",
                    "29.5",
                    "41.9"
                ],
                [
                    "AR+MMI",
                    "25.3",
                    "27.9",
                    "46.8"
                ],
                [
                    "AR+MMI+diverse",
                    "24.8",
                    "27.8",
                    "47.4"
                ],
                [
                    "AR+MMI+RL",
                    "24.1",
                    "26.5",
                    "49.4"
                ],
                [
                    "nonAR",
                    "29.9",
                    "28.7",
                    "41.4"
                ],
                [
                    "nonAR+MMI",
                    "23.1",
                    "24.0",
                    "52.9"
                ],
                [
                    "Content Richness",
                    "Content Richness",
                    "Content Richness",
                    "Content Richness"
                ],
                [
                    "Human",
                    "14.0",
                    "16.6",
                    "69.4"
                ],
                [
                    "AR",
                    "38.2",
                    "30.4",
                    "31.4"
                ],
                [
                    "AR+MMI",
                    "30.6",
                    "26.2",
                    "43.2"
                ],
                [
                    "AR+MMI+diverse",
                    "23.9",
                    "21.3",
                    "54.8"
                ],
                [
                    "AR+MMI+RL",
                    "26.4",
                    "24.9",
                    "48.7"
                ],
                [
                    "NonAR",
                    "31.4",
                    "25.0",
                    "44.6"
                ],
                [
                    "NonAR+MMI",
                    "24.2",
                    "20.5",
                    "55.3"
                ]
            ]
        },
        "gold_description": "for dialogue coherence trend is 3 . that nonar + mmi than ar + mmi , followed by ar and non - ar . ar is slightly better than non - ar . for content richness , the is significantly better proposed nonar + mmi than ar + mmi , and the gap is greater than dialogue coherence . the output from the ar + mmi model is thus by far less diverse than nonar + mmi , which obtains the mmi score for each generated token .",
        "generated_description": "we can see that the content richness score of the generated responses is significantly higher than that of the ground - truth responses in all cases , which indicates that the responses generated by our model are more relevant to the context than those generated by the ground truth responses in terms of content richness ."
    },
    {
        "table_id": "363",
        "table_info": {
            "table_caption": "Table 4: The performances of NonAR+MMI methods on WMT14 En↔De and WMT16 Ro→En. Results from Gu et al. (2018); Lee et al. (2018); Ma et al. (2019) are copied from original papers for reference purposes.",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] WMT14 En→De",
                "[BOLD] WMT14 De→En",
                "[BOLD] WMT16 Ro→En"
            ],
            "table_content_values": [
                [
                    "NAT (Gu et al.,  2018 )",
                    "17.69",
                    "20.62",
                    "29.79"
                ],
                [
                    "iNAT (Lee et al.,  2018 )",
                    "21.54",
                    "25.43",
                    "29.32"
                ],
                [
                    "FlowSeq-large (raw data) (Ma et al.,  2019 )",
                    "20.85",
                    "25.40",
                    "29.86"
                ],
                [
                    "NAT (our implementation)",
                    "22.32",
                    "24.83",
                    "29.93"
                ],
                [
                    "NAT +MMI",
                    "23.80",
                    "26.05",
                    "30.50"
                ],
                [
                    "[EMPTY]",
                    "(+1.48)",
                    "(+1.22)",
                    "(+0.57)"
                ]
            ]
        },
        "gold_description": "results are shown in table 4 . as can be seen , the incorporation of mmi model significantly improves mt performances .",
        "generated_description": "we can see that our proposed nonar + mmi method outperforms the baseline nat by 1 . 48 , 1 . 22 , and 0 . 57 bleu points en → de , de → en , and ro → en on wmt14 en ↔ de and wmt16 en → en datasets , respectively . compared with the nat baseline , inat and flowseq - large , our method achieves better performance on all datasets , which demonstrates the effectiveness of our nonar framework ."
    },
    {
        "table_id": "364",
        "table_info": {
            "table_caption": "Table 3: Different weighting variations evaluated on the compounds dataset (32,246 nominal compounds). All variations use t=100 transformations, word representations with n=200 dimensions and the dropout rate that was observed to work best on the dev dataset (see Appendix B for details). Results on the 6442 compounds in the test set of the German compounds dataset.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] W param",
                "[BOLD] Cos-d",
                "[BOLD] Q1",
                "[BOLD] Q2",
                "[BOLD] Q3",
                "≤ [BOLD] 5"
            ],
            "table_content_values": [
                [
                    "TransWeight-feat",
                    "[ITALIC] n+ [ITALIC] n",
                    "0.344",
                    "2",
                    "5",
                    "28",
                    "50.82%"
                ],
                [
                    "TransWeight-trans",
                    "[ITALIC] t+ [ITALIC] n",
                    "0.338",
                    "2",
                    "5",
                    "24",
                    "52.90%"
                ],
                [
                    "TransWeight-mat",
                    "[ITALIC] tn+ [ITALIC] n",
                    "0.338",
                    "2",
                    "5",
                    "25",
                    "53.24%"
                ],
                [
                    "[BOLD] TransWeight",
                    "[ITALIC] tn2+ [ITALIC] n",
                    "[BOLD] 0.310",
                    "[BOLD] 1",
                    "[BOLD] 3",
                    "[BOLD] 11",
                    "[BOLD] 65.21%"
                ]
            ]
        },
        "gold_description": "table 3 compares the performance of the four weighting variants introduced in section 3 . 2 . transweight - feat , which sums the transformed representations and then weights each component of the summed representation , has the weakest performance , with only 50 . 82 % of the test compounds receiving a rank that is lower than 5 . a better performance – 52 . 90 % – is obtained by applying the same weighting for each column of the transformations matrix h . the results of transweight - trans are interesting in two respects : first , it outperforms the feature variation , transweight - feat , despite training a smaller number of parameters ( 300 vs . 400 in our setup ) . second , it performs on par with the transweight - mat variation , although the latter has a larger number of parameters ( 20 , 200 in our setup ) . this suggests that an effective combination method needs to take into account full transformations , i . e . entire rows of h and combine them in a systematic way . transweight builds on this insight by making each element of the final composed representation p dependent on each component of the transformed representation h . the result is a noteworthy increase in the quality of the predictions , with ∼ 12 % more of the test representations having a rank ≤ 5 . although this weighting does use significantly more parameters than the previous weightings ( 4 , 000 , 200 parameters ) , the number of parameters is relative to the number of transformations t and does not grow with the size of the vocabulary . as the results in the next subsection show , a relatively small number of transformations is sufficient even for larger training vocabularies .",
        "generated_description": "the compounds dataset contains a total of 32 , 246 nominal compounds , which we refer to as the german compounds dataset . we found that transweight consistently outperformed the other weighting methods on all three metrics on this dataset . the model with the best performance on q1 and q2 was transweight with tn2 + n , using t = 100 transformations , word representations with n = 200 dimensions , and a dropout rate of 0 . 1 ."
    },
    {
        "table_id": "365",
        "table_info": {
            "table_caption": "Table 4: Results for English, German and Dutch on the composition of nominal compounds, adjective-noun phrases and adverb-adjective phrases.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Nominal Compounds  [BOLD] Cos-d",
                "[BOLD] Nominal Compounds  [BOLD] Q1",
                "[BOLD] Nominal Compounds  [BOLD] Q2",
                "[BOLD] Nominal Compounds  [BOLD] Q3",
                "[BOLD] Nominal Compounds ≤ [BOLD] 5",
                "[BOLD] Adjective-Noun Phrases  [BOLD] Cos-d",
                "[BOLD] Adjective-Noun Phrases  [BOLD] Q1",
                "[BOLD] Adjective-Noun Phrases  [BOLD] Q2",
                "[BOLD] Adjective-Noun Phrases  [BOLD] Q3",
                "[BOLD] Adjective-Noun Phrases ≤ [BOLD] 5",
                "[BOLD] Adverb-Adjective Phrases  [BOLD] Cos-d",
                "[BOLD] Adverb-Adjective Phrases  [BOLD] Q1",
                "[BOLD] Adverb-Adjective Phrases  [BOLD] Q2",
                "[BOLD] Adverb-Adjective Phrases  [BOLD] Q3",
                "[BOLD] Adverb-Adjective Phrases ≤ [BOLD] 5"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "[BOLD] English",
                    "[BOLD] English",
                    "[BOLD] English",
                    "[BOLD] English",
                    "[BOLD] English",
                    "[BOLD] English",
                    "[BOLD] English",
                    "[BOLD] English",
                    "[BOLD] English",
                    "[BOLD] English",
                    "[BOLD] English",
                    "[BOLD] English",
                    "[BOLD] English",
                    "[BOLD] English",
                    "[BOLD] English"
                ],
                [
                    "Addition",
                    "0.408",
                    "2",
                    "7",
                    "38",
                    "46.14%",
                    "0.431",
                    "2",
                    "7",
                    "32",
                    "44.25%",
                    "0.447",
                    "2",
                    "5",
                    "15",
                    "53.01%"
                ],
                [
                    "SAddition",
                    "0.408",
                    "2",
                    "7",
                    "38",
                    "46.14%",
                    "0.421",
                    "2",
                    "5",
                    "26",
                    "50.95%",
                    "0.420",
                    "1",
                    "3",
                    "8",
                    "67.76%"
                ],
                [
                    "VAddition",
                    "0.403",
                    "2",
                    "6",
                    "33",
                    "47.95%",
                    "0.415",
                    "2",
                    "5",
                    "22",
                    "53.30%",
                    "0.410",
                    "1",
                    "2",
                    "6",
                    "71.94%"
                ],
                [
                    "Matrix",
                    "0.354",
                    "1",
                    "2",
                    "9",
                    "67.37%",
                    "0.365",
                    "1",
                    "2",
                    "6",
                    "74.38%",
                    "0.343",
                    "1",
                    "1",
                    "2",
                    "91.17%"
                ],
                [
                    "WMask+",
                    "0.344",
                    "1",
                    "2",
                    "7",
                    "71.53%",
                    "0.342",
                    "1",
                    "1",
                    "3",
                    "82.67%",
                    "0.335",
                    "1",
                    "1",
                    "2",
                    "93.27%"
                ],
                [
                    "BiLinear",
                    "0.335",
                    "1",
                    "2",
                    "6",
                    "73.63%",
                    "0.332",
                    "1",
                    "1",
                    "3",
                    "85.32%",
                    "0.331",
                    "1",
                    "1",
                    "1",
                    "93.59%"
                ],
                [
                    "FullLex+",
                    "0.338",
                    "1",
                    "2",
                    "7",
                    "72.82%",
                    "0.309",
                    "1",
                    "1",
                    "2",
                    "90.74%",
                    "0.327",
                    "1",
                    "1",
                    "1",
                    "94.28%"
                ],
                [
                    "[BOLD] TransWeight",
                    "[BOLD] 0.323",
                    "[BOLD] 1",
                    "[BOLD] 1",
                    "[BOLD] 4.5",
                    "[BOLD] 77.31%",
                    "[BOLD] 0.307",
                    "[BOLD] 1",
                    "[BOLD] 1",
                    "[BOLD] 2",
                    "[BOLD] 91.39%",
                    "[BOLD] 0.311",
                    "[BOLD] 1",
                    "[BOLD] 1",
                    "[BOLD] 1",
                    "[BOLD] 95.78%"
                ],
                [
                    "[EMPTY]",
                    "[BOLD] German",
                    "[BOLD] German",
                    "[BOLD] German",
                    "[BOLD] German",
                    "[BOLD] German",
                    "[BOLD] German",
                    "[BOLD] German",
                    "[BOLD] German",
                    "[BOLD] German",
                    "[BOLD] German",
                    "[BOLD] German",
                    "[BOLD] German",
                    "[BOLD] German",
                    "[BOLD] German",
                    "[BOLD] German"
                ],
                [
                    "Addition",
                    "0.439",
                    "9",
                    "48",
                    "363",
                    "17.49%",
                    "0.428",
                    "4",
                    "13",
                    "71",
                    "32.95%",
                    "0.500",
                    "4",
                    "19",
                    "215.5",
                    "29.87%"
                ],
                [
                    "SAddition",
                    "0.438",
                    "9",
                    "46",
                    "347",
                    "18.02%",
                    "0.414",
                    "2",
                    "8",
                    "53",
                    "42.80%",
                    "0.473",
                    "2",
                    "7",
                    "99.5",
                    "45.44%"
                ],
                [
                    "VAddition",
                    "0.430",
                    "8",
                    "39",
                    "273",
                    "19.02%",
                    "0.408",
                    "2",
                    "7",
                    "43",
                    "45.14%",
                    "0.461",
                    "2",
                    "5",
                    "52",
                    "51.12%"
                ],
                [
                    "Matrix",
                    "0.363",
                    "3",
                    "8",
                    "45",
                    "41.88%",
                    "0.355",
                    "1",
                    "2",
                    "8",
                    "68.67%",
                    "0.398",
                    "1",
                    "1",
                    "5",
                    "76.41%"
                ],
                [
                    "WMask+",
                    "0.340",
                    "2",
                    "5",
                    "25",
                    "52.05%",
                    "0.332",
                    "1",
                    "2",
                    "5",
                    "77.68%",
                    "0.387",
                    "1",
                    "1",
                    "3",
                    "80.94%"
                ],
                [
                    "BiLinear",
                    "0.339",
                    "2",
                    "5",
                    "26",
                    "53.46%",
                    "0.322",
                    "1",
                    "1",
                    "3",
                    "81.84%",
                    "0.383",
                    "1",
                    "1",
                    "3",
                    "83.02%"
                ],
                [
                    "FullLex+",
                    "0.329",
                    "2",
                    "4",
                    "20",
                    "56.83%",
                    "0.306",
                    "1",
                    "1",
                    "2",
                    "86.29%",
                    "0.383",
                    "1",
                    "1",
                    "3",
                    "83.13%"
                ],
                [
                    "[BOLD] TransWeight",
                    "[BOLD] 0.310",
                    "[BOLD] 1",
                    "[BOLD] 3",
                    "[BOLD] 11",
                    "[BOLD] 65.21%",
                    "[BOLD] 0.297",
                    "[BOLD] 1",
                    "[BOLD] 1",
                    "[BOLD] 2",
                    "[BOLD] 89.28%",
                    "[BOLD] 0.367",
                    "[BOLD] 1",
                    "[BOLD] 1",
                    "[BOLD] 2",
                    "[BOLD] 87.17%"
                ],
                [
                    "[EMPTY]",
                    "[BOLD] Dutch",
                    "[BOLD] Dutch",
                    "[BOLD] Dutch",
                    "[BOLD] Dutch",
                    "[BOLD] Dutch",
                    "[BOLD] Dutch",
                    "[BOLD] Dutch",
                    "[BOLD] Dutch",
                    "[BOLD] Dutch",
                    "[BOLD] Dutch",
                    "[BOLD] Dutch",
                    "[BOLD] Dutch",
                    "[BOLD] Dutch",
                    "[BOLD] Dutch",
                    "[BOLD] Dutch"
                ],
                [
                    "Addition",
                    "0.477",
                    "5",
                    "27",
                    "223.5",
                    "27.74%",
                    "0.476",
                    "3",
                    "13",
                    "87",
                    "35.63%",
                    "0.532",
                    "3",
                    "9",
                    "75",
                    "38.04%"
                ],
                [
                    "SAddition",
                    "0.477",
                    "5",
                    "27",
                    "221",
                    "27.71%",
                    "0.462",
                    "2",
                    "7",
                    "65",
                    "44.95%",
                    "0.503",
                    "2",
                    "4",
                    "34",
                    "55.57%"
                ],
                [
                    "VAddition",
                    "0.470",
                    "4",
                    "22",
                    "177",
                    "29.09%",
                    "0.454",
                    "2",
                    "6",
                    "47",
                    "48.13%",
                    "0.486",
                    "1",
                    "3",
                    "14",
                    "63.18%"
                ],
                [
                    "Matrix",
                    "0.411",
                    "2",
                    "5",
                    "26",
                    "52.19%",
                    "0.394",
                    "1",
                    "2",
                    "6",
                    "74.92%",
                    "0.445",
                    "1",
                    "1",
                    "4",
                    "78.39%"
                ],
                [
                    "WMask+",
                    "0.378",
                    "1",
                    "3",
                    "15",
                    "60.14%",
                    "0.378",
                    "1",
                    "1",
                    "4",
                    "80.78%",
                    "0.429",
                    "1",
                    "1",
                    "2",
                    "83.02%"
                ],
                [
                    "BiLinear",
                    "0.375",
                    "1",
                    "3",
                    "19",
                    "59.23%",
                    "0.375",
                    "1",
                    "1",
                    "3",
                    "81.50%",
                    "0.426",
                    "1",
                    "1",
                    "2",
                    "83.57%"
                ],
                [
                    "FullLex+",
                    "0.388",
                    "1",
                    "3",
                    "14",
                    "60.84%",
                    "0.362",
                    "1",
                    "1",
                    "2",
                    "85.24%",
                    "0.433",
                    "1",
                    "1",
                    "3",
                    "82.36%"
                ],
                [
                    "[BOLD] TransWeight",
                    "[BOLD] 0.376",
                    "[BOLD] 1",
                    "[BOLD] 2",
                    "[BOLD] 11",
                    "[BOLD] 66.61%",
                    "[BOLD] 0.349",
                    "[BOLD] 1",
                    "[BOLD] 1",
                    "[BOLD] 2",
                    "[BOLD] 88.55%",
                    "[BOLD] 0.423",
                    "[BOLD] 1",
                    "[BOLD] 1",
                    "[BOLD] 2",
                    "[BOLD] 84.01%"
                ]
            ]
        },
        "gold_description": "the results using the corrected rank eval transweight , the composition model proposed in this paper , delivers consistent results , being the best performing model across all languages and phrase types . the difference in performance to the runner - up model , fulllex + , translates into more of the test phrases being close to the original repachieving a rank ≤ 5 . this resentations , i . e . difference ranges from 8 % of the test phrases in the german compounds dataset to less than 1 % for english adjective - noun phrases . however , it is important to note the substantial difference in the number of parameters used by the two models : all transweight models use 100 transformations and have , therefore , a constant number of 12 , 020 , 200 parameters . in contrast the number of parameters used by fulllex + increases with the size of the training vocabulary , reaching 739 , 320 , 200 parameters in the case of the english adjective - noun dataset . the most difficult task for all the composition models in any of the three languages is compound composition . we believe this difficulty can be mainly attributed to the complexity introduced by the position . for example in adjective - noun composition , the adjective always takes the first position , and the noun the second . however , in compounds the same noun can occur in both positions throughout different training examples . consider for example the compounds boat house and house boat . in boat house – a house to store boats – the meaning of house is shifted towards shelter for an inanimate object , whereas house boat selects from house aspects related to human beings and their daily lives happening on the boat . these positionrelated differences can make it more challenging to create composed representations . that makes adverbadjective easier is the high dataset frequency of some of the adverbs / adjectives . for example , in the english and adjective - noun datasets another aspect the adjective - noun dataset a small subset of 52",
        "generated_description": "the first observation is that , for both languages , the cosine similarity model performs better than the bilstm in all cases , except for the nominal compounds in the english case . this is expected , as the compositional model is trained on a much larger training set , and hence is better able to generalise to new words that are not seen during training . the second observation is not as surprising as in the nominal compound case , but still encouraging , as we can see that the performance of the bilm degrades significantly as the number of nominal compounds increases . the fact that the bibert model is able to deal with nominal compounds almost as well as the baseline is surprising , as it was not trained specifically for these cases ."
    },
    {
        "table_id": "366",
        "table_info": {
            "table_caption": "Table 1: Results on DDI 2013",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] P",
                "[BOLD] R",
                "[BOLD] F1"
            ],
            "table_content_values": [
                [
                    "[ITALIC] CNN",
                    "[ITALIC] CNN",
                    "[ITALIC] CNN",
                    "[ITALIC] CNN"
                ],
                [
                    "+  [ITALIC] ENT-ONLY",
                    "52.7",
                    "43.1",
                    "47.4"
                ],
                [
                    "+  [ITALIC] ENT-SENT",
                    "75.8",
                    "60.7",
                    "67.3"
                ],
                [
                    "+  [ITALIC] ENT-DYM",
                    "66.5",
                    "70.6",
                    "68.5"
                ],
                [
                    "+  [ITALIC] ENT-DEP0",
                    "59.8",
                    "61.5",
                    "60.6"
                ],
                [
                    "+  [ITALIC] ENT-DEP1",
                    "67.6",
                    "65.1",
                    "66.3"
                ],
                [
                    "[ITALIC] BiLSTM",
                    "[ITALIC] BiLSTM",
                    "[ITALIC] BiLSTM",
                    "[ITALIC] BiLSTM"
                ],
                [
                    "+  [ITALIC] ENT-ONLY",
                    "74.0",
                    "69.4",
                    "71.6"
                ],
                [
                    "+  [ITALIC] ENT-SENT",
                    "74.8",
                    "71.7",
                    "73.1"
                ],
                [
                    "+  [ITALIC] ENT-DYM",
                    "71.5",
                    "73.4",
                    "72.4"
                ],
                [
                    "+  [ITALIC] ENT-DEP0",
                    "72.8",
                    "69.4",
                    "71.1"
                ],
                [
                    "+  [ITALIC] ENT-DEP1",
                    "71.6",
                    "76.4",
                    "[BOLD] 73.9"
                ],
                [
                    "[ITALIC] BiLSTM-CNN",
                    "[ITALIC] BiLSTM-CNN",
                    "[ITALIC] BiLSTM-CNN",
                    "[ITALIC] BiLSTM-CNN"
                ],
                [
                    "+  [ITALIC] ENT-ONLY",
                    "69.6",
                    "72.3",
                    "70.9"
                ],
                [
                    "+  [ITALIC] ENT-SENT",
                    "69.4",
                    "74.9",
                    "72.0"
                ],
                [
                    "+  [ITALIC] ENT-DYM",
                    "71.0",
                    "69.7",
                    "71.8"
                ],
                [
                    "+  [ITALIC] ENT-DEP0",
                    "72.2",
                    "69.5",
                    "70.8"
                ],
                [
                    "+  [ITALIC] ENT-DEP1",
                    "71.0",
                    "74.3",
                    "72.6"
                ],
                [
                    "[ITALIC] BiLSTM-GCNN",
                    "[ITALIC] BiLSTM-GCNN",
                    "[ITALIC] BiLSTM-GCNN",
                    "[ITALIC] BiLSTM-GCNN"
                ],
                [
                    "+  [ITALIC] ENT-ONLY",
                    "69.3",
                    "71.4",
                    "70.4"
                ],
                [
                    "+  [ITALIC] ENT-SENT",
                    "72.2",
                    "71.9",
                    "72.0"
                ],
                [
                    "+  [ITALIC] ENT-DYM",
                    "69.7",
                    "73.9",
                    "71.7"
                ],
                [
                    "+  [ITALIC] ENT-DEP0",
                    "70.1",
                    "71.1",
                    "70.6"
                ],
                [
                    "+  [ITALIC] ENT-DEP1",
                    "72.7",
                    "72.9",
                    "72.8"
                ]
            ]
        },
        "gold_description": "1 . comparing ent - sent , ent - dym and ent - only , we see that the pooling methods over the whole sentence ( i . e . , ent - sent and ent - dym ) are significantly better than ent - only that only focuses on the two entity mentions of interest in the ddi - 2013 dataset . this is true across different deep learning models in this work . comparing ent - sent and ent - dym , their performance are comparable in ddi - 2013 ( except for cnn where ent - dym is better ) . comparing the syntax - based pooling methods and the non - syntax pooling methods , the pooling based on dependency paths ( i . e . , ent - dep0 ) is worse than the non - syntax pooling methods ( i . e . , ent - sent and ent - dym ) and perform comparably with ent - only in the ddi - 2013 dataset over all the models ( except for the cnn model where ent - only is much worse ) .",
        "generated_description": "the results show that ent - dep0 , ent - sent , and ent - dym all outperform ent - only by a large margin for both the cnn and bilstm classifiers . for the cnn classifier , the best f1 - score is achieved with the combination of all three types of annotations ( + 1 . 3 % f1 for cnn , + 0 . 8 % for lstm ) , while for the bigru classifier ( + 0 . 7 % for cnn and + 1 . 6 % for bilstm ) , the best results are achieved with only one type of annotation ( + 2 . 0 % for both classifiers , + 2 . 1 % for the cnn , and + 2 % for all classifiers + 1 . 0 % ) ."
    },
    {
        "table_id": "367",
        "table_info": {
            "table_caption": "Table 2: Results of BERTbase in test set of five datasets with different epochs. The SOTA results are from Madabushi et al. (2018) (TrecQA), Sha et al. (2018) (WikiQA, SemEvalcQA-16), Tay et al. (2018b) (YahooQA), Nakov et al. (2017) (SemEvalcQA-17).",
            "table_column_names": [
                "[EMPTY]",
                "TrecQA MRR",
                "TrecQA MAP",
                "WikiQA MRR",
                "WikiQA MAP",
                "YahooQA MRR",
                "YahooQA MAP",
                "SemEvalcQA-16 MRR",
                "SemEvalcQA-16 MAP",
                "SemEvalcQA-17 MRR",
                "SemEvalcQA-17 MAP"
            ],
            "table_content_values": [
                [
                    "epoch=3",
                    "0.927",
                    "0.877",
                    "0.770",
                    "0.753",
                    "0.942",
                    "0.942",
                    "0.872",
                    "0.810",
                    "0.951",
                    "0.909"
                ],
                [
                    "epoch=5",
                    "0.944",
                    "0.883",
                    "0.784",
                    "0.769",
                    "0.942",
                    "0.942",
                    "0.890",
                    "0.816",
                    "0.953",
                    "0.908"
                ],
                [
                    "SOTA",
                    "0.865",
                    "0.904",
                    "0.758",
                    "0.746",
                    "-",
                    "0.801",
                    "0.872",
                    "0.801",
                    "0.926",
                    "0.887"
                ]
            ]
        },
        "gold_description": "we show the main result in table 2 and 3 . despite training on a fraction of the data available , the proposed bert - based models surpass the previous state - of - the - art models by a large margin on all datasets",
        "generated_description": "the sota results are from madabushi et al . the mrr and map of bertbase with epoch = 5 are better than that of sota on semevalcqa and yahooqa datasets , but they are slightly worse than those of the sota model with epochs = 3 and 4 . we can see that bert with different epochs can achieve different performance on different datasets . when we increase the training epoch to 5 , bert can achieve the best performance on all datasets , which shows that the bert model with more training steps can achieve better performance ."
    },
    {
        "table_id": "368",
        "table_info": {
            "table_caption": "Table 2: Results on BioNLP BB3",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] P",
                "[BOLD] R",
                "[BOLD] F1"
            ],
            "table_content_values": [
                [
                    "[ITALIC] CNN",
                    "[ITALIC] CNN",
                    "[ITALIC] CNN",
                    "[ITALIC] CNN"
                ],
                [
                    "+  [ITALIC] ENT-ONLY",
                    "54.2",
                    "65.7",
                    "59.1"
                ],
                [
                    "+  [ITALIC] ENT-SENT",
                    "55.0",
                    "62.5",
                    "59.1"
                ],
                [
                    "+  [ITALIC] ENT-DYM",
                    "54.6",
                    "53.3",
                    "53.5"
                ],
                [
                    "+  [ITALIC] ENT-DEP0",
                    "55.9",
                    "65.8",
                    "60.6"
                ],
                [
                    "+  [ITALIC] ENT-DEP1",
                    "55.7",
                    "67.7",
                    "61.1"
                ],
                [
                    "[ITALIC] BiLSTM",
                    "[ITALIC] BiLSTM",
                    "[ITALIC] BiLSTM",
                    "[ITALIC] BiLSTM"
                ],
                [
                    "+  [ITALIC] ENT-ONLY",
                    "58.9",
                    "59.6",
                    "59.2"
                ],
                [
                    "+  [ITALIC] ENT-SENT",
                    "60.7",
                    "59.2",
                    "59.9"
                ],
                [
                    "+  [ITALIC] ENT-DYM",
                    "50.2",
                    "66.0",
                    "56.9"
                ],
                [
                    "+  [ITALIC] ENT-DEP0",
                    "51.6",
                    "78.0",
                    "61.9"
                ],
                [
                    "+  [ITALIC] ENT-DEP1",
                    "54.7",
                    "72.6",
                    "62.4"
                ],
                [
                    "[ITALIC] BiLSTM-CNN",
                    "[ITALIC] BiLSTM-CNN",
                    "[ITALIC] BiLSTM-CNN",
                    "[ITALIC] BiLSTM-CNN"
                ],
                [
                    "+  [ITALIC] ENT-ONLY",
                    "56.4",
                    "66.2",
                    "60.8"
                ],
                [
                    "+  [ITALIC] ENT-SENT",
                    "53.6",
                    "69.2",
                    "60.5"
                ],
                [
                    "+  [ITALIC] ENT-DYM",
                    "47.1",
                    "78.0",
                    "58.7"
                ],
                [
                    "+  [ITALIC] ENT-DEP0",
                    "55.9",
                    "71.4",
                    "[BOLD] 62.5"
                ],
                [
                    "+  [ITALIC] ENT-DEP1",
                    "54.1",
                    "74.7",
                    "62.4"
                ],
                [
                    "[ITALIC] BiLSTM-GCNN",
                    "[ITALIC] BiLSTM-GCNN",
                    "[ITALIC] BiLSTM-GCNN",
                    "[ITALIC] BiLSTM-GCNN"
                ],
                [
                    "+  [ITALIC] ENT-ONLY",
                    "62.7",
                    "56.1",
                    "58.9"
                ],
                [
                    "+  [ITALIC] ENT-SENT",
                    "58.4",
                    "58.7",
                    "58.5"
                ],
                [
                    "+  [ITALIC] ENT-DYM",
                    "56.8",
                    "58.4",
                    "56.6"
                ],
                [
                    "+  [ITALIC] ENT-DEP0",
                    "55.6",
                    "67.4",
                    "60.8"
                ],
                [
                    "+  [ITALIC] ENT-DEP1",
                    "54.4",
                    "71.1",
                    "61.5"
                ]
            ]
        },
        "gold_description": "however , this comparison is reversed for the bb3 dataset where ent - only is in general better or comparable to ent - sent and ent - dym over different deep learning models . in the bb3 dataset , ent - sent singificantly outperforms ent - dym over all the models . when we switch to the bb3 dataset , it turns out thatent - dep0 is significantly better than all the non - syntax pooling methods ( i . e . , ent - only , ent - sent and ent - dym ) for all the comparing models .",
        "generated_description": "the results show that ent - dep0 and ent - sent outperform ent - only by a large margin for both the cnn and bilstm classifiers . the gain from combining the two types of annotations is more significant for the cnn classifier , which is probably due to the fact that it benefits more from the supervision of domain - specific domain knowledge . on the other hand , the gains from combining ent - dym with ent - only are smaller than those from combining both types of annotated data , which may be because the amount of training data in our dataset is small ."
    },
    {
        "table_id": "369",
        "table_info": {
            "table_caption": "Table 2: Statistics for different OPIEC corpora. All frequencies are in millions. We count triples with annotations (not annotations directly). Percentages refer to the respective subcorpus.",
            "table_column_names": [
                "Total triples (millions)",
                "OPIEC 341.0",
                "OPIEC",
                "OPIEC-Clean 104.0",
                "OPIEC-Clean",
                "OPIEC-Linked 5.8",
                "OPIEC-Linked"
            ],
            "table_content_values": [
                [
                    "Triples with semantic annotations",
                    "166.3",
                    "(49%)",
                    "51.46",
                    "(49%)",
                    "3.37",
                    "(58%)"
                ],
                [
                    "negative polarity",
                    "5.3",
                    "(2%)",
                    "1.33",
                    "(1%)",
                    "0.01",
                    "(0%)"
                ],
                [
                    "possibility modality",
                    "13.9",
                    "(4%)",
                    "3.27",
                    "(3%)",
                    "0.04",
                    "(1%)"
                ],
                [
                    "quantities",
                    "59.4",
                    "(17%)",
                    "15.91",
                    "(15%)",
                    "0.45",
                    "(8%)"
                ],
                [
                    "attribution",
                    "6.4",
                    "(2%)",
                    "1.44",
                    "(1%)",
                    "0.01",
                    "(0%)"
                ],
                [
                    "time",
                    "65.3",
                    "(19%)",
                    "19.66",
                    "(19%)",
                    "0.58",
                    "(1%)"
                ],
                [
                    "space",
                    "61.5",
                    "(18%)",
                    "22.11",
                    "(21%)",
                    "2.64",
                    "(45%)"
                ],
                [
                    "space OR time",
                    "111.3",
                    "(33%)",
                    "37.22",
                    "(36%)",
                    "3.01",
                    "(52%)"
                ],
                [
                    "space AND time",
                    "15.4",
                    "(5%)",
                    "4.54",
                    "(4%)",
                    "0.20",
                    "(4%)"
                ],
                [
                    "Triple length in tokens ( [ITALIC] μ± [ITALIC] σ)",
                    "7.66±4.25",
                    "7.66±4.25",
                    "6.06±2.82",
                    "6.06±2.82",
                    "6.45±2.65",
                    "6.45±2.65"
                ],
                [
                    "subject ( [ITALIC] μ± [ITALIC] σ)",
                    "2.12±2.12",
                    "2.12±2.12",
                    "1.48±0.79",
                    "1.48±0.79",
                    "1.92±0.94",
                    "1.92±0.94"
                ],
                [
                    "relation ( [ITALIC] μ± [ITALIC] σ)",
                    "3.01±2.47",
                    "3.01±2.47",
                    "3.10±2.56",
                    "3.10±2.56",
                    "2.77±2.14",
                    "2.77±2.14"
                ],
                [
                    "object ( [ITALIC] μ± [ITALIC] σ)",
                    "2.52±2.69",
                    "2.52±2.69",
                    "1.48±0.79",
                    "1.48±0.79",
                    "1.76±0.94",
                    "1.76±0.94"
                ],
                [
                    "Confidence score ( [ITALIC] μ± [ITALIC] σ)",
                    "0.53±0.23",
                    "0.53±0.23",
                    "0.59±0.23",
                    "0.59±0.23",
                    "0.61±0.26",
                    "0.61±0.26"
                ]
            ]
        },
        "gold_description": "basic statistics such as corpus sizes , frequency of various semantic annotations , and information about the length of the extracted triples of opiec and its subcorpora are shown in tab . 2 . roughly 30 % of the triples ( 104m ) in opiec are clean according to the above constraints . table 2 shows that clean triples are generally shorter on average and tend to have a higher confidence score than the full set of triples in opiec . about 49 % of all triples in opiec contain some sort of semantic annotation ( cf . tab . 2 ) ; in opiec - linked , the fraction increases to 58 % . most of the semantic annotations referred to quantities , space or time ; these annotations provide important context for the extractions . there is a significantly smaller amount of negative polarity and possibility modality annotations . one reason for the lack of such annotations may be in the nature of the wikipedia articles , which aim to contain encyclopedic , factual statements and are thus more rarely negated or hedged .",
        "generated_description": "in the opiec dataset , there is a significant difference in the amount of triples with semantic annotations between the two versions , with the linked version having a higher percentage of semantic annotations ( 49 % ) than the baseline ( 58 % ) . however , the difference is not statistically significant in most of the categories , except for space , time , and positive polarity . in the linked version , we see that the semantic annotation percentage is higher in the presence of semantic labels ( 58 % ) than in the absence of any labels ( 0 % ) ."
    },
    {
        "table_id": "370",
        "table_info": {
            "table_caption": "Table 4: The most frequent open relations aligned to the DBpedia relations location, associatedMusicalArtist, and spouse in OPEIC-Linked",
            "table_column_names": [
                "location  [ITALIC] “be in”",
                "location (43,842)",
                "associatedMusicalArtist  [ITALIC] “be”",
                "associatedMusicalArtist (6,273)",
                "spouse  [ITALIC] “be wife of”",
                "spouse (1,965)"
            ],
            "table_content_values": [
                [
                    "[ITALIC] “have”",
                    "(3,175)",
                    "[ITALIC] “have”",
                    "(3,600)",
                    "[ITALIC] “be”",
                    "(1,308)"
                ],
                [
                    "[ITALIC] “be”",
                    "(1,901)",
                    "[ITALIC] “be member of”",
                    "(740)",
                    "[ITALIC] “marry”",
                    "(702)"
                ],
                [
                    "[ITALIC] “be at”",
                    "(1,109)",
                    "[ITALIC] “be guitarist of”",
                    "(703)",
                    "[ITALIC] “be widow of”",
                    "(479)"
                ],
                [
                    "[ITALIC] “be of”",
                    "(706)",
                    "[ITALIC] “be drummer of”",
                    "(458)",
                    "[ITALIC] “have”",
                    "(298)"
                ],
                [
                    "[ITALIC] “be historic home",
                    "(491)",
                    "[ITALIC] “be feature”",
                    "(416)",
                    "[ITALIC] “be husband of”",
                    "(284)"
                ],
                [
                    "[ITALIC] located at”",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ]
            ]
        },
        "gold_description": "tab . 4 shows the most frequent open relations aligned to the dbpedia relations location , associatedmusicalartist , and spouse . the frequencies correspond to the number of oie triples that ( 1 ) have the specified open relation ( e . g . , \" be wife of \" ) and ( 2 ) have a kb hit with the specified kb relation ( e . g . , spouse ) . there is clearly no 1 : 1 correspondence between open relations and kb relations . on the one hand , open relations can be highly ambiguous ( e . g . , \" be \" has hits to location and associatedmusicalartits ) . on the other hand , open relations can also be more specific than kb relations ( e . g . , \" be guitarist of \" is more specific than associatedmusicalartist ) or semantically different ( e . g . , \" be widow of \" and spouse ) than the kb relations they align to .",
        "generated_description": "s4ss3sss0px1 co - occurrence of semantic types . we begin by analyzing the co - occurrences of the most frequent semantic types in the training data . for example , for the question “ location ” , the most common type is “ near ” ( 43 , 842 occurrences ) , while the second most frequent type is the synonym “ associatedmusicalartist ” with 6 , 273 ( 6 , 273 ) . for the more common type “ be , ” the number of occurrences is 3 , 600 ( 3 , 600 ) . for each of the above types , we also extracted the nearest neighbors based on the cosine similarity between the embeddings of the associatedmusicalmusicalids and the corresponding location entities . for each type , we extracted the top 100 most common semantic types for each of these entities . we observe that the semantic types associated with musical artist names are much more frequent than those associated with artist and artist - song names , with the exception of the synonyms “ mr ” and “ georhythmia ” that have the least number of instances ."
    },
    {
        "table_id": "371",
        "table_info": {
            "table_caption": "Table 2: Results with frame filtering",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] FrameNet 1.5  [BOLD] All",
                "[BOLD] FrameNet 1.5  [BOLD] Ambiguous",
                "[BOLD] FrameNet 1.7  [BOLD] All",
                "[BOLD] FrameNet 1.7  [BOLD] Ambiguous"
            ],
            "table_content_values": [
                [
                    "[ITALIC] Das’s Test Set ",
                    "[ITALIC] Das’s Test Set ",
                    "[ITALIC] Das’s Test Set ",
                    "[ITALIC] Das’s Test Set ",
                    "[ITALIC] Das’s Test Set "
                ],
                [
                    "SEMAFOR ",
                    "83.60",
                    "69.19",
                    "-",
                    "-"
                ],
                [
                    "Hermann et al. ",
                    "88.73",
                    "73.67",
                    "-",
                    "-"
                ],
                [
                    "Yang and Mitchell ",
                    "88.20",
                    "75.70",
                    "-",
                    "-"
                ],
                [
                    "Hartmann et al. ",
                    "87.63",
                    "73.80",
                    "-",
                    "-"
                ],
                [
                    "Botschen et al. ",
                    "88.82",
                    "75.28",
                    "-",
                    "-"
                ],
                [
                    "Peng et al. ",
                    "90.00",
                    "78.00",
                    "89.10",
                    "77.50"
                ],
                [
                    "[BOLD] PAFIBERT - Filtered by LUs",
                    "[BOLD] 92.22",
                    "[BOLD] 82.90",
                    "[BOLD] 91.44",
                    "[BOLD] 82.55"
                ],
                [
                    "[BOLD] PAFIBERT - Filtered by Targets",
                    "[BOLD] 91.39",
                    "[BOLD] 82.80",
                    "[BOLD] 90.15",
                    "[BOLD] 81.92"
                ],
                [
                    "[ITALIC] YAGS Test Set ",
                    "[ITALIC] YAGS Test Set ",
                    "[ITALIC] YAGS Test Set ",
                    "[ITALIC] YAGS Test Set ",
                    "[ITALIC] YAGS Test Set "
                ],
                [
                    "SEMAFOR (Reported by )",
                    "60.01",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "Hartmann et al. ",
                    "62.51",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "[BOLD] PAFIBERT - Filtered by LUs",
                    "[BOLD] 75.06",
                    "[BOLD] 69.07",
                    "[BOLD] -",
                    "[BOLD] -"
                ],
                [
                    "[BOLD] PAFIBERT - Filtered by Targets",
                    "[BOLD] 75.01",
                    "[BOLD] 69.07",
                    "[BOLD] -",
                    "[BOLD] -"
                ]
            ]
        },
        "gold_description": "table 2 and 3 compare the accuracies of our models to the results reported by several representative studies in frame - semantic parsing . as can be seen from the tables , pafibert outperformed other models on both the in - domain das ' s test set and the out - of - domain yags test set , yielding new state - of - the - art results for frame identification . as expected , the results obtained with lu - based frame filtering were slightly better than those produced using target - based frame filtering , suggesting that a realistic setup is crucial in measuring model performance more precisely . on das ' s test set , for example , pafibert achieved absolute improvements of 4 - 5 % and 9 % with frame filtering ( table 2 ) and without frame filtering ( table 3 ) respectively . as reported by , frame identification models usually suffer a drastic drop in performance when tested on out - of - domain data . the same trend was observed in our experiments for the yags test set . nevertheless , pafibert still outperformed existing methods by a large margin on this out - of - domain test set . besides , in the more challenging setup that involved no frame filtering , the results obtained by pafibert were on par with the prior state - of - the - art accuracies achieved with frame filtering .",
        "generated_description": "we compare pafibert with several state - of - the - art systems on the framenet 1 . 5 and 1 . 7 datasets . our method outperforms the previous best method by a significant margin on the ambiguous test set , showing that it is able to better deal with the ambiguities in the dataset ."
    },
    {
        "table_id": "372",
        "table_info": {
            "table_caption": "Table 3: Results of BERTbase and BERTlarge in test set of five datasets. The number of training epochs is 3.",
            "table_column_names": [
                "[EMPTY]",
                "TrecQA base",
                "TrecQA large",
                "WikiQA base",
                "WikiQA large",
                "YahooQA base",
                "YahooQA large",
                "SemEvalcQA-16 base",
                "SemEvalcQA-16 large",
                "SemEvalcQA-17 base",
                "SemEvalcQA-17 large"
            ],
            "table_content_values": [
                [
                    "MRR",
                    "0.927",
                    "[BOLD] 0.961",
                    "0.770",
                    "[BOLD] 0.875",
                    "[BOLD] 0.942",
                    "0.938",
                    "0.872",
                    "[BOLD] 0.911",
                    "0.951",
                    "[BOLD] 0.958"
                ],
                [
                    "MAP",
                    "0.877",
                    "[BOLD] 0.904",
                    "0.753",
                    "[BOLD] 0.860",
                    "[BOLD] 0.942",
                    "0.938",
                    "0.810",
                    "[BOLD] 0.844",
                    "[BOLD] 0.909",
                    "0.907"
                ]
            ]
        },
        "gold_description": "we show the main result in table 2 and 3 . despite training on a fraction of the data available , the proposed bert - based models surpass the previous state - of - the - art models by a large margin on all datasets",
        "generated_description": "bertbase and bertlarge are fine - tuned on the same training set of five datasets . the number of training epochs is set as 3 . we can see that the mrr and map values are improved on most of the datasets . in particular , the large dataset ( semevalcqa - 17 ) has the highest mrr value , which is 0 . 958 , while the small dataset ( yahooqa ) has a higher map value of 0 . 810 ."
    },
    {
        "table_id": "373",
        "table_info": {
            "table_caption": "Table 6: Hyperparameter tuning methods with original pre-processing and fixed CRCNN model. Test set results at the top with cross validated results (average with standard deviation) below. All cross validated results are statistically significant compared to Default with p<0.05 except those marked with a •. Note that hyperparameter tuning can involve much higher performance variation depending on the distribution of the data. Therefore, even though there is no statistical significance in the manual search case for the held out fold in the ddi dataset, there was statistical significance for the dev fold which drove those set of hyperparameters. For both ddi and i2b2 datasets, manual search is better than random search with p<0.05.",
            "table_column_names": [
                "[width=13em]Hyperparam TuningDataset",
                "semeval",
                "ddi Class",
                "ddi Detect",
                "i2b2 Class",
                "i2b2 Detect"
            ],
            "table_content_values": [
                [
                    "Default",
                    "81.55",
                    "62.55",
                    "80.29",
                    "55.15",
                    "81.98"
                ],
                [
                    "Default",
                    "80.85 (1.31)",
                    "81.62 (1.35)",
                    "87.76 (1.03)",
                    "67.28 (1.83)",
                    "86.57 (0.58)"
                ],
                [
                    "Manual Search",
                    "-",
                    "[BOLD] 65.53",
                    "[BOLD] 81.74",
                    "[BOLD] 59.75",
                    "[BOLD] 83.17"
                ],
                [
                    "Manual Search",
                    "[EMPTY]",
                    "82.23 (0.32)•",
                    "88.40 (0.48)•",
                    "70.10 (0.85)",
                    "86.45 (0.58)•"
                ],
                [
                    "Random Search",
                    "[BOLD] 82.2",
                    "62.29",
                    "79.04",
                    "55.0",
                    "80.77"
                ],
                [
                    "Random Search",
                    "81.10 (1.26)•",
                    "75.43 (1.48)",
                    "83.54 (0.60)",
                    "60.66 (1.43)",
                    "82.73 (0.49)"
                ]
            ]
        },
        "gold_description": "table 6 , where we compare hyperparameter tuning methodologies . perturbations on the hyperparameter search are listed in table 6 and compare performance with different hyperparameter values found using different tuning strategies . we tested how manual tuning , requiring less expert knowledge than bayesian optimization , would compare to the random search strategy in table 6 . for both i2b2 and ddi corpora , manual search outperformed random search .",
        "generated_description": "the hyperparameter tuning process is as follows . first , we perform a default search to determine the hyperparameters of the model on the training dataset . then we perform manual search to find the best set of parameters to tune on the validation dataset . finally , we tune these parameters on the test dataset using a random search . the results show that manual search achieves the best performance on the ddi dataset , but it does not perform as well on the i2b2 dataset . the reason is that the dataset is more balanced with respect to the class distribution , and manual search tends to favor the majority class . on the other hand , the performance of random search is worse than that of manual search . this is because random search does not take into account the distribution of the labels in the training set , which may lead to a biased classification towards majority classes ."
    },
    {
        "table_id": "374",
        "table_info": {
            "table_caption": "Table 4: Pre-processing techniques with CRCNN model. Row labels Original = simple tokenization and lower casing of words, Punct = punctuation removal, Digit = digit removal and Stop = stop word removal. Test set results at the top with cross validated results (average with standard deviation) below. All cross validated results are statistically significant compared to Original pre-processing (p<0.05) using a paired t-test except those marked with a •",
            "table_column_names": [
                "[width=10em]PreprocessDataset",
                "semeval",
                "ddi Class",
                "ddi Detect",
                "i2b2 Class",
                "i2b2 Detect"
            ],
            "table_content_values": [
                [
                    "Original",
                    "[BOLD] 81.55",
                    "65.53",
                    "81.74",
                    "59.75",
                    "83.17"
                ],
                [
                    "Original",
                    "80.85 (1.31)",
                    "82.23 (0.32)",
                    "88.40 (0.48)",
                    "70.10 (0.85)",
                    "86.45 (0.58)"
                ],
                [
                    "Entity Blinding",
                    "72.73",
                    "[BOLD] 67.02",
                    "[BOLD] 82.37",
                    "[BOLD] 68.76",
                    "[BOLD] 84.37"
                ],
                [
                    "Entity Blinding",
                    "71.31 (1.14)",
                    "83.56 (2.05)•",
                    "89.45 (1.05)•",
                    "76.59 (1.07)",
                    "88.41 (0.37)"
                ],
                [
                    "Punct and Digit",
                    "81.23",
                    "63.41",
                    "80.49",
                    "58.85",
                    "81.96"
                ],
                [
                    "Punct and Digit",
                    "80.95 (1.21)•",
                    "80.44 (1.77)",
                    "87.52 (0.98)",
                    "69.37 (1.43)•",
                    "85.82 (0.43)"
                ],
                [
                    "Punct, Digit and Stop",
                    "72.92",
                    "55.87",
                    "76.57",
                    "56.19",
                    "80.47"
                ],
                [
                    "Punct, Digit and Stop",
                    "71.61 (1.25)",
                    "78.52 (1.99)",
                    "85.65 (1.21)",
                    "68.14 (2.05)•",
                    "84.84 (0.77)"
                ],
                [
                    "NER Blinding",
                    "81.63",
                    "57.22",
                    "79.03",
                    "50.41",
                    "81.61"
                ],
                [
                    "NER Blinding",
                    "80.85 (1.07)•",
                    "78.06 (1.45)",
                    "86.79 (0.65)",
                    "66.26 (2.44)",
                    "86.72 (0.57)•"
                ]
            ]
        },
        "gold_description": "importance of pre - processing in performance improvements . experiments in table 4 reveal that they can cause larger variations in performance than modeling . punctuation and digits hold more importance for the ddi dataset , which is a biomedical dataset , compared to the other two datasets . we found that stop words seem to be important for relation extraction for all three datasets that we looked at , to a smaller degree for i2b2 compared to the other two datasets . entity blinding causes almost 9 % improvement in classification performance and 1 % improvement in detection performance . while entity blinding hurts performance for semeval , possibly due to the coarse - grained nature of the replacement , ner blinding does not hurt performance . entity blinding seems to help test set performance for ddi in table 4 , but shows no statistical significance .",
        "generated_description": "preprocessed datasets . the entity - blinding preprocessed dataset improves the performance of the classifier on the ddi and i2b2 datasets . however , it does not improve the performance on the semeval dataset . we hypothesize that this is due to the small size of the preprocess dataset that is not sufficient for the model to generalize to unseen entities . in addition , we observe that the performance degrades as the dataset is reduced to the original dataset ."
    },
    {
        "table_id": "375",
        "table_info": {
            "table_caption": "Table 5: Modeling techniques with original pre-processing. Test set results at the top with cross validated results (average with standard deviation) below. All cross validated results are statistically significant compared to CRCNN model (p<0.05) using a paired t-test except those marked with a •. In terms of statistical significance, comparing contextualized embeddings with each other reveals that BERT-tokens is equivalent to ELMo for i2b2, but for semeval BERT-tokens is better than ELMo and for ddi BERT-tokens is better than ELMo only for detection.",
            "table_column_names": [
                "[width=10em]ModelingDataset",
                "semeval",
                "ddi Class",
                "ddi Detect",
                "i2b2 Class",
                "i2b2 Detect"
            ],
            "table_content_values": [
                [
                    "CRCNN",
                    "81.55",
                    "65.53",
                    "81.74",
                    "59.75",
                    "83.17"
                ],
                [
                    "CRCNN",
                    "80.85 (1.31)",
                    "82.23 (0.32)",
                    "88.40 (0.48)",
                    "70.10 (0.85)",
                    "86.45 (0.58)"
                ],
                [
                    "Piecewise pool",
                    "81.59",
                    "63.01",
                    "80.62",
                    "60.85",
                    "83.69"
                ],
                [
                    "Piecewise pool",
                    "80.55 (0.99)•",
                    "81.99 (0.38)•",
                    "88.47 (0.48)•",
                    "73.79 (0.97)",
                    "89.29 (0.61)"
                ],
                [
                    "BERT-tokens",
                    "85.67",
                    "[BOLD] 71.97",
                    "[BOLD] 86.53",
                    "63.11",
                    "[BOLD] 84.91"
                ],
                [
                    "BERT-tokens",
                    "85.63 (0.83)",
                    "85.35 (0.53)",
                    "90.70 (0.46)",
                    "72.06 (1.36)",
                    "87.57 (0.75)"
                ],
                [
                    "BERT-CLS",
                    "82.42",
                    "61.3",
                    "79.63",
                    "56.79",
                    "81.91"
                ],
                [
                    "BERT-CLS",
                    "80.83 (1.18)•",
                    "82.71 (0.68)•",
                    "88.35 (0.77)•",
                    "67.37 (1.08)",
                    "85.43 (0.36)"
                ],
                [
                    "ELMo",
                    "[BOLD] 85.89",
                    "66.63",
                    "83.05",
                    "[BOLD] 63.18",
                    "84.54"
                ],
                [
                    "ELMo",
                    "84.79 (1.08)",
                    "84.53 (0.96)",
                    "90.11 (0.56)",
                    "72.53 (0.80)",
                    "87.81 (0.34)"
                ]
            ]
        },
        "gold_description": "no statistical significance is seen even when the test set result worsens in performance for bertcls and piecewise pool in table 5 where it hurts test set performance on ddi but is not statistically significant when cross validation is performed . in table 5 , we tested the generalizability of the commonly used piecewise pooling technique while piecewise pooling helps i2b2 by 1 % , it hurts test set performance on ddi and doesn ' t affect performance on semeval . we found elmo and ber tokens to boost performance significantly for all datasets , but that bert - cls hurt performance for the medical datasets . while bert - cls boosted test set performance for semeval , this was not found to be a statistically significant difference for cross validation .",
        "generated_description": "the results show that the bert - tokens model significantly outperforms the crcnn model on the ddi and i2b2 datasets in all cases . on the other hand , the results on the i2f2 dataset are slightly worse than the results obtained with the original crcnn . the reason may be that the dataset is too small to provide enough training data for the model to generalize well to unseen classes ."
    },
    {
        "table_id": "376",
        "table_info": {
            "table_caption": "Table 1: Machine translation tokenized BLEU test results on IWSLT 2017 de→en, KFTT ja→en, WMT 2016 ro→en and WMT 2014 en→de, respectively.",
            "table_column_names": [
                "activation",
                "de→en",
                "ja→en",
                "ro→en",
                "en→de"
            ],
            "table_content_values": [
                [
                    "softmax",
                    "29.79",
                    "21.57",
                    "32.70",
                    "26.02"
                ],
                [
                    "1.5-entmax",
                    "29.83",
                    "[BOLD] 22.13",
                    "[BOLD] 33.10",
                    "25.89"
                ],
                [
                    "[ITALIC] α-entmax",
                    "[BOLD] 29.90",
                    "21.74",
                    "32.89",
                    "[BOLD] 26.93"
                ]
            ]
        },
        "gold_description": "we report test set tokenized bleu ( papineni et al . , 2002 ) results in table 1 . we can see that replacing softmax by entmax does not hurt performance in any of the datasets ; indeed , sparse attention transformers tend to have slightly higher bleu , but their sparsity leads to a better potential for analysis . in the next section , we make use of this potential by exploring the learned internal mechanics of the self - attention heads .",
        "generated_description": "we observe that α - entmax leads to the best results for all the datasets and all the activation functions , and that the 1 . 5 - entmax performs slightly better than the softmax for most of the datasets ."
    },
    {
        "table_id": "377",
        "table_info": {
            "table_caption": "Table 6: Results for C-LSTM models trained with CC and arXiv embeddings on both subtasks.",
            "table_column_names": [
                "[EMPTY]",
                "subtask 1.1 macro F1",
                "subtask 1.1 micro F1",
                "subtask 1.2 macro F1",
                "subtask 1.2 micro F1"
            ],
            "table_content_values": [
                [
                    "CC",
                    "54.42",
                    "67.61",
                    "[BOLD] 74.42",
                    "[BOLD] 78.87"
                ],
                [
                    "arXiv",
                    "[BOLD] 67.49",
                    "[BOLD] 70.96",
                    "67.02",
                    "74.37"
                ]
            ]
        },
        "gold_description": "table 6 shows that the c - lstm model performs well on the scientific embeddings , but consistently worse than the svm model using handcrafted features and achieves a macro - f1 score of 67 . 49 and 67 . 02 for subtask 1 . 1 and subtask 1 . 2 respectively .",
        "generated_description": "we observe that the embeddings obtained from cc outperform arxiv for both subtask 1 . 1 and 1 . 2 . we hypothesize that this is due to the fact that the cc dataset is more similar to the corpus used for pre - training the c - lstm model , which is used for fine - tuning on both subtasks ."
    },
    {
        "table_id": "378",
        "table_info": {
            "table_caption": "Table 1: Comparison of segmentation performance with the state-of-the-art methods on four evaluation datasets in terms of IoU.",
            "table_column_names": [
                "[EMPTY]",
                "val",
                "UNC testA",
                "testB",
                "val",
                "UNC+ testA",
                "testB",
                "G-Ref val",
                "ReferIt test"
            ],
            "table_content_values": [
                [
                    "LSTM-CNN ",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "28.14",
                    "48.03"
                ],
                [
                    "RMI ",
                    "45.18",
                    "45.69",
                    "45.57",
                    "29.86",
                    "30.48",
                    "29.50",
                    "34.52",
                    "58.73"
                ],
                [
                    "DMN ",
                    "49.78",
                    "54.83",
                    "45.13",
                    "38.88",
                    "44.22",
                    "32.29",
                    "36.76",
                    "52.81"
                ],
                [
                    "KWA ",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "-",
                    "36.92",
                    "59.09"
                ],
                [
                    "RRN ",
                    "55.33",
                    "57.26",
                    "53.93",
                    "39.75",
                    "42.15",
                    "36.11",
                    "36.45",
                    "63.63"
                ],
                [
                    "Ours",
                    "[BOLD] 58.32",
                    "[BOLD] 60.61",
                    "[BOLD] 55.09",
                    "[BOLD] 43.76",
                    "[BOLD] 47.60",
                    "[BOLD] 37.89",
                    "[BOLD] 39.98",
                    "[BOLD] 63.80"
                ]
            ]
        },
        "gold_description": "table 1 presents comparisons of our method with existing state - of - the - art approaches . our proposed method consistently outperforms all other methods on all four datasets . the improvement is particularly significant on the more challenging datasets , such as unc + which has no location words and g - ref which contains longer and richer query expressions .",
        "generated_description": "our model outperforms the previous state - of - the - art methods on all the four datasets by a large margin . for referit dataset , our model achieves the best performance on the validation set and the test set . for g - ref dataset , we also achieve a significant improvement over the previous best result ."
    },
    {
        "table_id": "379",
        "table_info": {
            "table_caption": "Table 2: Ablation study of different attention methods for multimodal features on the UNC val set.",
            "table_column_names": [
                "Method",
                "IoU"
            ],
            "table_content_values": [
                [
                    "No attention",
                    "45.63"
                ],
                [
                    "Word attention",
                    "47.01"
                ],
                [
                    "Pixel attention",
                    "47.84"
                ],
                [
                    "Word-pixel pair attention",
                    "47.57"
                ],
                [
                    "Cross-modal self-attention",
                    "[BOLD] 50.12"
                ]
            ]
        },
        "gold_description": "as shown in table 2 , the proposed cross - modal self - attention outperforms all other attention methods significantly .",
        "generated_description": "we can see that cross - modal self - attention achieves the best performance , outperforming all the other attention methods by a significant margin . we also find that pixel attention and word - pixel pair attention perform slightly better than word attention , but the difference is not statistically significant ."
    },
    {
        "table_id": "380",
        "table_info": {
            "table_caption": "Table 3: Ablation study on the UNC val set. The top four methods compare results of different methods for multimodal feature representations. The bottom five results show comparisons of multi-level feature fusion methods. CMSA and GF denote the proposed cross-modal self-attention and gated multi-level fusion modules. All methods use the same base model (DeepLab-101) and DenseCRF for postprocessing. ∗The numbers for [15] are slightly higher than original numbers reported in their paper which did not use DenseCRF postprocessing.",
            "table_column_names": [
                "Method",
                "prec@0.5",
                "prec@0.6",
                "prec@0.7",
                "prec@0.8",
                "prec@0.9",
                "IoU"
            ],
            "table_content_values": [
                [
                    "RMI-LSTM ",
                    "42.99",
                    "33.24",
                    "22.75",
                    "12.11",
                    "2.23",
                    "45.18"
                ],
                [
                    "RRN-CNN ∗",
                    "47.59",
                    "38.76",
                    "26.53",
                    "14.79",
                    "3.17",
                    "46.95"
                ],
                [
                    "CMSA-S",
                    "51.19",
                    "41.31",
                    "29.57",
                    "14.99",
                    "2.61",
                    "48.53"
                ],
                [
                    "CMSA-W",
                    "[BOLD] 51.95",
                    "[BOLD] 43.11",
                    "[BOLD] 32.74",
                    "[BOLD] 19.28",
                    "[BOLD] 4.11",
                    "[BOLD] 50.12"
                ],
                [
                    "CMSA+PPM",
                    "58.25",
                    "49.82",
                    "39.09",
                    "24.76",
                    "5.73",
                    "53.54"
                ],
                [
                    "CMSA+Deconv",
                    "58.29",
                    "49.94",
                    "39.16",
                    "25.42",
                    "6.75",
                    "54.18"
                ],
                [
                    "CMSA+ConvLSTM",
                    "64.73",
                    "56.03",
                    "45.23",
                    "29.15",
                    "7.86",
                    "56.56"
                ],
                [
                    "CMSA+Gated",
                    "65.17",
                    "57.25",
                    "47.37",
                    "33.31",
                    "9.66",
                    "57.08"
                ],
                [
                    "CMSA+GF(Ours)",
                    "[BOLD] 66.44",
                    "[BOLD] 59.70",
                    "[BOLD] 50.77",
                    "[BOLD] 35.52",
                    "[BOLD] 10.96",
                    "[BOLD] 58.32"
                ]
            ]
        },
        "gold_description": "as shown in table 3 ( top 4 rows ) , the proposed crossmodal self - attentive feature based approaches achieve significantly better performance than other baselines . the word based method cmsa - w outperforms sentence based method cmsa - s for multimodal feature representation . as presented in the bottom 5 rows in table 3 , the proposed gated multi - level fusion outperforms these other multi - scale feature fusion methods .",
        "generated_description": "cmsa - w outperforms rmi - lstm and rrn - cnn by a large margin in terms of prec @ 0 . 5 , 0 . 6 , and 0 . 7 precision , and the improvement is statistically significant at the 0 . 05 level . the performance of cmsa + ppm is slightly better than cmsa , but it is still worse than our proposed cmsa . cmsa with ppm outperforms the previous state - of - the - art method by a significant margin of 2 . 61 % on the iou score . we can see that cmsa outperforms all the previous methods by a wide margin . the best performance is achieved when cmsa is equipped with both ppm and the deconvolutional features ( cmsa + deconv ) . we can also see that the performance of our model is slightly worse than that of the best previous method when using only the convolutional lstm as the feature extractor . this may be due to the fact that the lstms are not good at capturing the temporal dependencies among frames in the video , which makes it hard for the network to extract useful features for visual segmentation ."
    },
    {
        "table_id": "381",
        "table_info": {
            "table_caption": "Table 2: Experimental results of the evaluation metrics.",
            "table_column_names": [
                "[EMPTY]",
                "[ITALIC]  [BOLD] Model 1",
                "[ITALIC]  [BOLD] Model 2",
                "[ITALIC]  [BOLD] Model 3"
            ],
            "table_content_values": [
                [
                    "First metric",
                    "First metric",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "0.08 [ITALIC]  [BOLD] Disp.",
                    "[BOLD] 0.94",
                    "0.72",
                    "0"
                ],
                [
                    "0.08 [ITALIC]  [BOLD] Gen. perf.",
                    "0.68",
                    "0.63",
                    "1"
                ],
                [
                    "Second metric",
                    "Second metric",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "0.08 [ITALIC]  [BOLD] Disp.",
                    "0.93",
                    "[BOLD] 0.96",
                    "0"
                ],
                [
                    "0.08 [ITALIC]  [BOLD] Gen. perf.",
                    "0.68",
                    "0.68",
                    "1"
                ]
            ]
        },
        "gold_description": "we report metric results when grouping crowd workers into 5 bins using the full range of adr of the dataset . the adr - based bias measures ( tab . 2 ) follow the expected trend ( model 1 appears more biased than models 2 and 3 ) contrary to the protected attributes - based measures . model 1 trained with mv labels exhibits similar performance across demographic groups model 2 ' s performance is different across groups",
        "generated_description": "to evaluate the performance of the proposed system , we use the following two metrics : ( 1 ) the disp . , which measures the degree of gender discrepancy between the generated text and the reference text , and ( 2 ) the gen . , which is the ratio of the generations generated by the algorithm to the real texts in terms of the generation ratio . the results show that the proposed algorithm is able to achieve the highest values of both metrics . in particular , the disp . metric has a value of 0 . 94 , which means that the synthetic text generated by our system is more gender - balanced than that of the real text . in addition , the gen . metric also shows that our system has a higher gen . ratio compared with the other two metrics ."
    },
    {
        "table_id": "382",
        "table_info": {
            "table_caption": "Table 3: DA Classification Accuracy",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] SwDA",
                "[BOLD] MRDA"
            ],
            "table_content_values": [
                [
                    "TF-IDF GloVe",
                    "66.5",
                    "78.7"
                ],
                [
                    "Kalchbrenner and Blunsom ( 2013 )",
                    "73.9",
                    "-"
                ],
                [
                    "Lee and Dernoncourt ( 2016 )",
                    "73.9",
                    "84.6"
                ],
                [
                    "Khanpour et al. ( 2016 )",
                    "75.8",
                    "86.8"
                ],
                [
                    "Ji et al. ( 2016 )",
                    "77.0",
                    "-"
                ],
                [
                    "Shen and Lee ( 2016 )",
                    "72.6",
                    "-"
                ],
                [
                    "Li and Wu ( 2016 )",
                    "79.4",
                    "-"
                ],
                [
                    "Ortega and Vu ( 2017 )",
                    "73.8",
                    "84.3"
                ],
                [
                    "Tran et al. ( 2017 )",
                    "74.5",
                    "-"
                ],
                [
                    "Kumar et al. ( 2018 )",
                    "79.2",
                    "90.9"
                ],
                [
                    "Chen et al. ( 2018 )",
                    "81.3",
                    "[BOLD] 91.7"
                ],
                [
                    "[BOLD] Our Method",
                    "[BOLD] 82.9",
                    "91.1"
                ],
                [
                    "[BOLD] Human Agreement",
                    "84.0",
                    "-"
                ]
            ]
        },
        "gold_description": "we compare the classification accuracy of our model against several other recent methods ( table 3 ) . our model outperforms state - of - the - art methods by 1 . 6 % on swda , the primary dataset for this task , and comes within 0 . 6 % on mrda . it also beats a tf - idf glove baseline ( described in section 5 . 2 ) by 16 . 4 % and 12 . 2 % , respectively . the improvements that the model is able to make over the other methods are significant , however , the gains on mrda still fall short of the state - of - the - art by 0 . 6 % .",
        "generated_description": "our model outperforms all the previous state - of - the - art systems on both datasets . we also achieve the highest human agreement score of 84 . 0 % on swda and 91 . 1 % on mrda , both of which are higher than the human agreement scores reported in previous studies ."
    },
    {
        "table_id": "383",
        "table_info": {
            "table_caption": "Table 1: Present keyphrase prediction performance (F1-score) on four benchmark datasets. Dataset names are listed in the header followed by the average number of target phrases per document. The baseline One2One model is on the first row, followed by different One2Seq variants. Bold indicates best score in each column.",
            "table_column_names": [
                "[BOLD] Method",
                "[BOLD] Inspec (Avg=7.8)  [BOLD] F1@5",
                "[BOLD] Inspec (Avg=7.8)  [BOLD] F1@10",
                "[BOLD] Krapivin (Avg=3.4)  [BOLD] F1@5",
                "[BOLD] Krapivin (Avg=3.4)  [BOLD] F1@10",
                "[BOLD] NUS (Avg=6.1)  [BOLD] F1@5",
                "[BOLD] NUS (Avg=6.1)  [BOLD] F1@10",
                "[BOLD] SemEval (Avg=6.7)  [BOLD] F1@5",
                "[BOLD] SemEval (Avg=6.7)  [BOLD] F1@10",
                "[BOLD] Average  [BOLD] F1@5",
                "[BOLD] Average  [BOLD] F1@10"
            ],
            "table_content_values": [
                [
                    "[BOLD] One2One",
                    "0.244",
                    "0.289",
                    "0.305",
                    "[BOLD] 0.266",
                    "[BOLD] 0.376",
                    "[BOLD] 0.352",
                    "0.318",
                    "[BOLD] 0.318",
                    "0.311",
                    "[BOLD] 0.306"
                ],
                [
                    "[BOLD] Random",
                    "0.283",
                    "0.206",
                    "0.288",
                    "0.183",
                    "0.344",
                    "0.238",
                    "0.304",
                    "0.218",
                    "0.305",
                    "0.211"
                ],
                [
                    "[BOLD] Length",
                    "0.298",
                    "0.224",
                    "0.321",
                    "0.206",
                    "0.364",
                    "0.259",
                    "0.311",
                    "0.222",
                    "0.324",
                    "0.228"
                ],
                [
                    "[BOLD] No-Sort",
                    "0.323",
                    "0.253",
                    "0.317",
                    "0.209",
                    "[BOLD] 0.376",
                    "0.264",
                    "0.318",
                    "0.244",
                    "0.333",
                    "0.243"
                ],
                [
                    "[BOLD] Alpha",
                    "0.319",
                    "0.283",
                    "[BOLD] 0.329",
                    "0.238",
                    "[BOLD] 0.376",
                    "0.289",
                    "[BOLD] 0.343",
                    "0.266",
                    "[BOLD] 0.342",
                    "0.269"
                ],
                [
                    "[BOLD] Appear-Pre",
                    "0.320",
                    "0.307",
                    "0.322",
                    "0.245",
                    "0.369",
                    "0.302",
                    "0.327",
                    "0.291",
                    "0.334",
                    "0.286"
                ],
                [
                    "[BOLD] Appear-Ap",
                    "[BOLD] 0.344",
                    "[BOLD] 0.333",
                    "0.320",
                    "0.236",
                    "0.367",
                    "0.295",
                    "0.324",
                    "0.286",
                    "0.339",
                    "0.287"
                ]
            ]
        },
        "gold_description": "we report experimental results on four common benchmark datasets ( totalling 1241 testing data points ) in table 1 . as shown in table 1 , the average performance increases from random to appear - ap : a trend that becomes particularly obvious for f1 @ 10 .",
        "generated_description": "we can see that our method outperforms one2one and random baselines on all the four datasets in terms of f1 @ 5 and the average f1 - score . for inspec , krapivin , nus and semeval , our method achieves the best performance among all the baselines . for the inspec dataset , the performance of our method is slightly worse than one 2one , but it is still better than the random baseline . for all the other datasets , the proposed method is either the best or close to the second best ."
    },
    {
        "table_id": "384",
        "table_info": {
            "table_caption": "Table 4: F1 scores on present keyphrase generation of One2Seq models with different model complexities (BeamWidth=50).",
            "table_column_names": [
                "[BOLD] Model  [BOLD] #(Param)",
                "[BOLD] BaseRNN 13M",
                "[BOLD] BaseRNN 13M",
                "[BOLD] BigRNN 37M",
                "[BOLD] BigRNN 37M",
                "[BOLD] Transformer 80M",
                "[BOLD] Transformer 80M"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "[BOLD] F@5",
                    "[BOLD] F@10",
                    "[BOLD] F@5",
                    "[BOLD] F@10",
                    "[BOLD] F@5",
                    "[BOLD] F@10"
                ],
                [
                    "[BOLD] Random",
                    "0.358",
                    "0.304",
                    "0.356",
                    "0.305",
                    "0.359",
                    "0.289"
                ],
                [
                    "[BOLD] Length",
                    "0.351",
                    "0.319",
                    "0.349",
                    "0.321",
                    "[BOLD] 0.361",
                    "0.318"
                ],
                [
                    "[BOLD] No-Sort",
                    "[BOLD] 0.364",
                    "0.325",
                    "[BOLD] 0.361",
                    "0.329",
                    "0.358",
                    "0.329"
                ],
                [
                    "[BOLD] Alpha",
                    "0.354",
                    "0.341",
                    "0.358",
                    "0.341",
                    "0.353",
                    "0.336"
                ],
                [
                    "[BOLD] Appear-Pre",
                    "0.337",
                    "0.345",
                    "0.339",
                    "0.341",
                    "0.352",
                    "0.343"
                ],
                [
                    "[BOLD] Appear-Ap",
                    "0.339",
                    "[BOLD] 0.347",
                    "0.344",
                    "[BOLD] 0.346",
                    "0.357",
                    "[BOLD] 0.345"
                ]
            ]
        },
        "gold_description": "as shown in table 4 , bigrnn and transformer are not able to outperform basernn .",
        "generated_description": "for both the basernn and the bigrnn models , the best performance is achieved by the length - based baseline . for the transformer model , the no - sort model achieves the best f @ 5 and f @ 10 scores for the 13m and the 37m and 80m parameter settings respectively ."
    },
    {
        "table_id": "385",
        "table_info": {
            "table_caption": "Table 2: Per-token macro-F1 scores. For ADR, the F1 scores are for chunks via approximate matching (Nikfarjam et al., 2015; Tsai et al., 2006). ‘rand-LSTM’ is an LSTM with randomly initialized word vectors. ‘ELMo-LSTM’ is an LSTM initialized with pretrained ELMo embeddings. ‘HB’ signals sparse, high-dimensional feature representations based on hand-built feature functions. The mean values and standard deviations are calculated using F1 scores of three runs of repeated experiments, as discussed in section 3. Statistical significance notation for the last two rows (two top-performing models) is ∗: p<0.05; ∗∗: p<0.01; ∗∗∗: p<0.001.",
            "table_column_names": [
                "[EMPTY]",
                "Diagnosis",
                "Prescription",
                "Penn Adverse Drug",
                "Chemical–Disease",
                "Drug–Disease"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "Detection",
                    "Reasons",
                    "Reactions (ADR)",
                    "Relations (CDR)",
                    "Relations"
                ],
                [
                    "rand-LSTM-CRF",
                    "77.3 ± 0.05",
                    "69.6 ± 0.25",
                    "53.8 ± 0.88",
                    "85.1 ± 0.10",
                    "48.2 ± 1.12"
                ],
                [
                    "HB-CRF",
                    "82.0 ± 0.05",
                    "78.5 ± 0.01",
                    "58.8 ± 0.12",
                    "86.2 ± 0.02",
                    "42.3 ± 0.30"
                ],
                [
                    "ELMo-LSTM-CRF",
                    "83.9 ± 0.35",
                    "81.0 ± 0.20",
                    "65.7 ± 0.35",
                    "88.2 ± 0.34",
                    "50.6 ± 0.64"
                ],
                [
                    "ELMo-LSTM-CRF-HB",
                    "[BOLD] 85.3 ± 0.24∗∗∗",
                    "[BOLD] 82.0 ± 0.03∗∗∗",
                    "[BOLD] 68.5 ± 1.67∗",
                    "[BOLD] 89.9 ± 0.12∗∗∗",
                    "[BOLD] 51.9 ± 0.52∗∗"
                ]
            ]
        },
        "gold_description": "the power these features bring to the model , beyond what is captured in the elmo - lstm representations , is evident in table 2 , column 1 . the results in table 2 , column 2 , clearly favor the combined model elmo - lstm - crf - hb that uses both these features and the elmo - lstm . our test - set results , given in table 2 , column 3 , show the power of our combined model elmo - lstm - crf - hb . we report results for the standard test set . the power of the combined model elmo - lstm - crf - hb is again evident in the results in table 2 , column 4 . our results for this experiment are given in table 2 , column 5 , and point to the superiority of our combined model elmo - lstm - crf - hb . our discussion seeks to show that the combined model elmo - lstm - crf - hb , which shows superior performance in all tasks ( table 2 ) , is making meaningful use of both kinds of features ( hand - built and elmo ) and both of the major model components ( lstm and crf ) . we note also that , where the performance of the two base models is very similar ( table 2 ) , the potential scores in the combined model are also more similar .",
        "generated_description": "the proposed elmo - lstm - crf - hb outperforms the other models in all the tasks . the reason for the improvement is that the proposed model is able to better capture the sequential dependencies in the data . for example , in the drug – disease task , the hb model achieves an improvement of 2 . 3 % in terms of f1 score compared to the rand model . this is because the drug - disease relationship is more closely related to the diagnosis and prescription than the other relations ."
    },
    {
        "table_id": "386",
        "table_info": {
            "table_caption": "Table 3: Relative F1 score improvements of different labels. For each label, we give the number of supporting examples (Support), the F1 score of our combined model, and the relative improvements over the HB-CRF model. The F1 scores of minor labels suffer from insufficient training data, and thus have lower values. However, the combined model shows the largest relative improvements in these categories. ADR results are shown in table A4.",
            "table_column_names": [
                "Diagnosis Detection Label",
                "Diagnosis Detection Support",
                "Diagnosis Detection F1 score",
                "Diagnosis Detection Improvement",
                "Prescription Reasons Label",
                "Prescription Reasons Support",
                "Prescription Reasons F1 score",
                "Prescription Reasons Improvement"
            ],
            "table_content_values": [
                [
                    "Other",
                    "74888",
                    "95.3",
                    "1.4%",
                    "Other",
                    "83618",
                    "95.8",
                    "0.9%"
                ],
                [
                    "Positive",
                    "24489",
                    "86.1",
                    "4.4%",
                    "Reason",
                    "9114",
                    "64.7",
                    "8.6%"
                ],
                [
                    "Ruled-out",
                    "2797",
                    "86.4",
                    "3.6%",
                    "Prescribed",
                    "5967",
                    "84.7",
                    "4.4%"
                ],
                [
                    "Concern",
                    "2780",
                    "72.1",
                    "5.6%",
                    "Discontinued",
                    "2754",
                    "82.7",
                    "5.6%"
                ],
                [
                    "Chemical–Disease Relations (CDR)",
                    "Chemical–Disease Relations (CDR)",
                    "Chemical–Disease Relations (CDR)",
                    "Chemical–Disease Relations (CDR)",
                    "Drug–Disease Relations",
                    "Drug–Disease Relations",
                    "Drug–Disease Relations",
                    "Drug–Disease Relations"
                ],
                [
                    "Label",
                    "Support",
                    "F1 score",
                    "Improvement",
                    "Label",
                    "Support",
                    "F1 score",
                    "Improvement"
                ],
                [
                    "Other",
                    "104530",
                    "98.3",
                    "0.5%",
                    "Other",
                    "10634",
                    "90.8",
                    "2.3%"
                ],
                [
                    "Disease",
                    "6887",
                    "84.2",
                    "6.3%",
                    "Treats",
                    "3671",
                    "76.0",
                    "5.7%"
                ],
                [
                    "Chemical",
                    "6270",
                    "87.0",
                    "6.7%",
                    "Unrelated",
                    "1145",
                    "53.8",
                    "71.3%"
                ],
                [
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "Prevents",
                    "320",
                    "41.1",
                    "103.5%"
                ],
                [
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "Contraindicated-for",
                    "69",
                    "0",
                    "–"
                ]
            ]
        },
        "gold_description": "table 3 suggests that the combined model does make progress here , in that the largest gains , across all relevant datasets , tend to be for the smallest categories .",
        "generated_description": "the overall f1 score for diagnosis detection increases from 95 . 3 % to 86 . 1 % for diagnosis labels and from 84 . 7 % to 95 . 8 % for prescription reasons . the f1 scores for drug – disease relations increase from 80 . 4 % to 82 . 7 and from 5 . 6 % to 8 . 6 % . the reason increases from 64 . 7 for reason to 85 . 4 for diagnosis label and from 3 . 6 for prescription reason to 4 . 4 % . the overall trend is similar for all the labels . the reason improvement is smaller for the diagnosis label than for the prescription reason label . we believe this is because the diagnoses and prescriptions in our dataset are often accompanied by a large number of “ non - specific ” reasons ( e . g . , “ not my diagnosis ” , “ discontinued ” and “ ruled - out ” ) , which makes it hard for the model to infer the correct reason for each of them ."
    },
    {
        "table_id": "387",
        "table_info": {
            "table_caption": "Table 2: Corpus statistics and label distributions of Friends and EmotionPush datasets.",
            "table_column_names": [
                "[BOLD] Dataset Friends",
                "[BOLD] Dataset Training",
                "#Dialogues / #Utterances 4,000 / 58,012",
                "#Avg. utterances per dialogue 14.50",
                "#Avg. length of dialogues 160.92",
                "Neutral 45.0%",
                "Joy 11.8%",
                "Sadness 3.4%",
                "Anger 5.2%",
                "Out-Of-Domain 34.6%"
            ],
            "table_content_values": [
                [
                    "Friends",
                    "Test",
                    "240 / 3296",
                    "13.73",
                    "156.38",
                    "31.4%",
                    "15.3%",
                    "3.7%",
                    "4.3%",
                    "45.3%"
                ],
                [
                    "EmotionPush",
                    "Training",
                    "4,000 / 58,968",
                    "14.74",
                    "114.96",
                    "66.8%",
                    "14.2%",
                    "3.5%",
                    "0.9%",
                    "14.6%"
                ],
                [
                    "EmotionPush",
                    "Test",
                    "240 / 3536",
                    "14.73",
                    "92.43",
                    "60.7%",
                    "17.0%",
                    "3.1%",
                    "0.8%",
                    "18.4%"
                ]
            ]
        },
        "gold_description": "we describe data and label distribution of friends and emotionpush datasets . in terms of label distribution for both datasets , neutral are the most common class , followed by joy , sadness , and anger . both datasets have imbalanced class distribution , and especially the ratio of sadness and anger is very small . for instance , they account for only 3 . 4 % and 5 . 2 % , respectively in the friends dataset . in the case of emotionpush , anger label accounts for less than 1 % of the training set .",
        "generated_description": "datasets . the friends and emotionpush datasets are versions of karpathy and lapata ’ s ( karpathy et al . , 2018 ) curated dialog datasets . the dataset contains 4 , 000 conversations between 8 , 000 randomly selected friends and 58 , 012 conversations between 5 , 012 randomly selected subjects from the friends training and test sets . the labels are chosen based on the percentage of positive and negative labels in the training set . for the friends dataset , we randomly select 240 / 3296 / 3536 utterances from the training and validation sets for training and the rest for testing . the label distribution is similar to that in the original dataset , except for the out - of - domain data , which is skewed towards positive labels . for example , in the test set of friends , we observe that more than 60 % of the utterances in the dataset are labeled as “ joy ” , and more than 20 % are labeled with “ sadness ” and less than 5 % with anger . on the other hand , the label distribution of the emotion push dataset is skewed toward neutral and anger ."
    },
    {
        "table_id": "388",
        "table_info": {
            "table_caption": "Table 1: Comparison between Essentia and FSA baseline on paraphrase extraction",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] Dataset",
                "[BOLD] # of extracted pairs",
                "[BOLD] # of valid pairs",
                "[BOLD] Precision"
            ],
            "table_content_values": [
                [
                    "Essentia",
                    "Snips",
                    "173",
                    "84",
                    "48.55%"
                ],
                [
                    "Essentia",
                    "HotelQA",
                    "2221",
                    "642",
                    "28.91%"
                ],
                [
                    "FSA",
                    "Snips",
                    "18",
                    "15",
                    "83.33%"
                ],
                [
                    "FSA",
                    "HotelQA",
                    "342",
                    "185",
                    "54.09 %"
                ]
            ]
        },
        "gold_description": "table 1 compares the performance of essentia with the fsa baseline for paraphrase mining . specifically , we show the number of phrase pairs extracted by essentia and fsa from both datasets ( \" # of extracted pairs \" column ) , number of valid paraphrases within these pairs ( \" # of valid pairs \" column ) , and precision ( \" precision \" column ) . although fsa has higher precision due to conservative sentence alignment , essentia extracts significantly more paraphrases , improving the recall by 460 % ( snips ) and 247 % ( hotelqa ) over the baseline .",
        "generated_description": "we extracted 173 pairs from snips dataset and 84 pairs from hotelqa dataset for the essentia and the fsa baselines , respectively . the number of extracted pairs and the number of valid pairs for each dataset are shown in tab . we can see that the cosine similarity between question and answer pairs extracted by our system is better than that of the fsa baseline . this is due to the fact that our system does not rely on paraphrasing to extract paraphrases , while the fsa system relies on the paraphrase extraction itself to obtain the answer ."
    },
    {
        "table_id": "389",
        "table_info": {
            "table_caption": "Table 5: Classification test scores for classifying R vs U in the BR, US, and combined BR + US dataset. The baseline score is 50%.",
            "table_column_names": [
                "[BOLD] BR",
                "[BOLD] US",
                "[BOLD] BR + US"
            ],
            "table_content_values": [
                [
                    "85%",
                    "72%",
                    "70%"
                ]
            ]
        },
        "gold_description": "the classification of br and us datasets used the 60 and 49 most relevant features , respectively . the test accuracy for the br and us datasets were 85 % and 72 % , respectively , with a baseline score of 50 % . the combined dataset used a reduced set of features consisting of an intersection of the most relevant features observed in both br and us , achieving a test score of 70 % using only 18 features . classes . we have shown that these features may be used to classify news articles in a language other than english .",
        "generated_description": "the br , us , and combined br + us datasets are further split into a training set ( 70 % ) , a validation set ( 25 % ) , and a test set ( 15 % ) . the test set is used to evaluate the performance of the classifier for all three datasets . the baseline score for classifying r is 50 % ."
    },
    {
        "table_id": "390",
        "table_info": {
            "table_caption": "Table 1: Storage size(MB) comparison of full archive sync between geth and ethanos from 7M+1 to 8M block.",
            "table_column_names": [
                "2 Data type",
                "geth",
                "ethanos",
                "Diff"
            ],
            "table_content_values": [
                [
                    "Headers",
                    "316.68",
                    "348.16",
                    "+31.48"
                ],
                [
                    "Bodies",
                    "11,110.00",
                    "12,750.00",
                    "+1,640.00"
                ],
                [
                    "Receipts",
                    "3,578.97",
                    "3,605.66",
                    "+26.69"
                ],
                [
                    "Difficulties",
                    "15.57",
                    "15.33",
                    "-0.24"
                ],
                [
                    "Block number -> hash",
                    "39.66",
                    "39.35",
                    "-0.31"
                ],
                [
                    "Block hash -> number",
                    "39.10",
                    "39.10",
                    "0"
                ],
                [
                    "Transaction Index",
                    "3,650.00",
                    "3,650.00",
                    "0"
                ],
                [
                    "Bloombit index",
                    "20.49",
                    "20.49",
                    "0"
                ],
                [
                    "Trie nodes",
                    "183,100.00",
                    "165,140.00",
                    "-17,960.00"
                ],
                [
                    "Trie preimages",
                    "857.00",
                    "888.11",
                    "+31.11"
                ],
                [
                    "total",
                    "202,727.47",
                    "186,496.20",
                    "-16,231.27"
                ],
                [
                    "2",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ]
            ]
        },
        "gold_description": "table 1 gives full archive sync size of each data type for geth and ethanos at the 8m block . ethanos reduces the total blockchain size about 16gb compared to geth . especially , it reduces the size of trie nodes about 18gb , because ethanos only maintains the state trie only with active accounts during a month which are only 10 % of the total accounts . however , hash field of bloom filter in block header slightly increases headers , and restore transactions increment bodies and receipts about 1 . 6gb . as a result , ethanos reduced full archive node by about 8 % compared to ethereum .",
        "generated_description": "for the 2 - dataset analysis , we split the data into a training set ( 80 % ) and a test set ( 20 % ) set ( 10 % ) . the training set is split into 80 % for training , 10 % for development , and 20 % for testing . the test set is used to evaluate the performance of the classifier on the development set . we did not perform any fine - tuning of the parameters of the model ."
    },
    {
        "table_id": "391",
        "table_info": {
            "table_caption": "Table 2: Storage size(MB) comparison of fast sync and compact sync between geth and ethanos from 7M+1 to 7M+864K (5th checkpoint) block.",
            "table_column_names": [
                "2 Data type",
                "fast sync geth",
                "fast sync ethanos",
                "compact sync geth",
                "compact sync ethanos"
            ],
            "table_content_values": [
                [
                    "Headers",
                    "276.66",
                    "303.83",
                    "276.66",
                    "303.83"
                ],
                [
                    "Bodies",
                    "9,260.00",
                    "10,130.00",
                    "8.12",
                    "13.02"
                ],
                [
                    "Receipts",
                    "2,973.66",
                    "2,979.81",
                    "10.43",
                    "10.44"
                ],
                [
                    "Difficulties",
                    "11.49",
                    "11.48",
                    "11.49",
                    "11.48"
                ],
                [
                    "Block number -> hash",
                    "31.86",
                    "31.88",
                    "31.86",
                    "31.88"
                ],
                [
                    "Block hash -> number",
                    "33.79",
                    "33.79",
                    "33.79",
                    "33.79"
                ],
                [
                    "Transaction Index",
                    "3,020.00",
                    "3,020.00",
                    "0.19",
                    "0.19"
                ],
                [
                    "Bloombit index",
                    "0",
                    "0",
                    "0",
                    "0"
                ],
                [
                    "Trie nodes",
                    "2,220.00",
                    "804.79",
                    "2,220.00",
                    "802.33"
                ],
                [
                    "Trie preimages",
                    "0",
                    "0.28",
                    "0",
                    "0"
                ],
                [
                    "total",
                    "17,827.46",
                    "17,315.86",
                    "2,592.54",
                    "1,206.97"
                ],
                [
                    "2",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ]
            ]
        },
        "gold_description": "table 2 shows storage size of geth and ethanos for each bootstrapping mode . ethanos reduces trie nodes size of geth from 2 , 220mb to 804 . 79mb ; however , it increases the transaction size ( bodies , receipts ) with block headers ( headers ) . therefore , ethanos did not reduce the size of fast sync much , but it significantly reduced compact sync from 2 , 592 . 54mb of geth to 1 , 206 . 97mb , which is less than 50 % . our result shows that the trie node size of each checkpoint is about 800mb ,",
        "generated_description": "in the first set of experiments , we compared the performance of our system with the state - of - the - art sync - based system of \\ newcitegeth ( “ sync2syncs ” ) and \\ newcitepress - etal - 2019 - synchronous . in both systems , we used the same training , validation , and test sets . for the sync2synth system , we split the data into a training set ( 80 % ) and a test set ( 20 % ) . the training set is composed of 80 % of the data and the test set is the remaining 20 % . the test set consists of the remaining 10 % of all the data . the performance of sync2synth is better than syncsync for all the types of entities and relations in both systems ."
    },
    {
        "table_id": "392",
        "table_info": {
            "table_caption": "Table 3: Experiment results. Note that sequence length for word level system is shorter, thus we search by ratio 0.3 which shares similar chrF1 with search on subword level system with ratio 0.4. An ideal adversarial sample generation must achieve degradation with respect to higher semantic similarity with origin inputs (HE).",
            "table_column_names": [
                "[EMPTY]",
                "Avg MT02 – 08 BLEU",
                "Avg MT02 – 08 HE",
                "Avg MT02 – 08 chrF1",
                "Avg MT02 – 08 RD"
            ],
            "table_content_values": [
                [
                    "Transformer-word",
                    "39.75",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Search (0.2)",
                    "32.42",
                    "3.22",
                    "0.82",
                    "0.184"
                ],
                [
                    "Search (0.3)",
                    "28.83",
                    "2.45",
                    "0.77",
                    "0.275"
                ],
                [
                    "Ours",
                    "[BOLD] 33.28",
                    "[BOLD] 3.69",
                    "[BOLD] 0.80",
                    "[BOLD] 0.163"
                ],
                [
                    "Transformer-BPE",
                    "43.38",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Search (0.2)",
                    "34.27",
                    "3.87",
                    "0.89",
                    "0.210"
                ],
                [
                    "Search (0.4)",
                    "27.27",
                    "2.91",
                    "0.80",
                    "0.371"
                ],
                [
                    "Ours",
                    "[BOLD] 31.35",
                    "[BOLD] 3.66",
                    "[BOLD] 0.80",
                    "[BOLD] 0.277"
                ],
                [
                    "RNN-search-BPE",
                    "39.38",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Search (0.2)",
                    "31.83",
                    "3.83",
                    "0.89",
                    "0.192"
                ],
                [
                    "Search (0.4)",
                    "26.13",
                    "2.82",
                    "0.79",
                    "0.336"
                ],
                [
                    "Ours",
                    "[BOLD] 31.18",
                    "[BOLD] 3.60",
                    "[BOLD] 0.83",
                    "[BOLD] 0.208"
                ]
            ]
        },
        "gold_description": "our model can stably generate adversarial samples without significant change in semantics with the same training setting for different models ,",
        "generated_description": "the results show that our approach outperforms all the baselines by a large margin in bleu , he , and dirichlet similarity ( rd ) and chrf1 scores . in particular , our approach achieves a he score of 3 . 69 and 0 . 80 compared to the transformer - bpe baseline with bpe of 32 . 42 and 28 . 83 , respectively ."
    },
    {
        "table_id": "393",
        "table_info": {
            "table_caption": "Table 1: Sentence-level (left) and fragment-level experiments (right). All-propaganda is a baseline that always output the propaganda class.",
            "table_column_names": [
                "Model",
                "Task SLC P",
                "Task SLC R",
                "Task SLC F1",
                "Task FLC P",
                "Task FLC R",
                "Task FLC F1"
            ],
            "table_content_values": [
                [
                    "All-Propaganda",
                    "23.92",
                    "100.0",
                    "38.61",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "BERT",
                    "[BOLD] 63.20",
                    "53.16",
                    "57.74",
                    "21.48",
                    "[BOLD] 21.39",
                    "21.39"
                ],
                [
                    "Joint",
                    "62.84",
                    "55.46",
                    "58.91",
                    "20.11",
                    "19.74",
                    "19.92"
                ],
                [
                    "Granu",
                    "62.80",
                    "55.24",
                    "58.76",
                    "23.85",
                    "20.14",
                    "21.80"
                ],
                [
                    "Multi-Granularity",
                    "Multi-Granularity",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "ReLU",
                    "60.41",
                    "[BOLD] 61.58",
                    "[BOLD] 60.98",
                    "23.98",
                    "20.33",
                    "21.82"
                ],
                [
                    "Sigmoid",
                    "62.27",
                    "59.56",
                    "60.71",
                    "[BOLD] 24.42",
                    "21.05",
                    "[BOLD] 22.58"
                ]
            ]
        },
        "gold_description": "the left side of table 1 shows the performance for the three baselines and for our multi - granularity network on the flc task . table 1 ( right ) shows that using additional information from the sentence - level for the token - level classification ( bert - granularity ) yields small improvements . the multi - granularity models outperform all baselines thanks to their higher precision . this shows the effect of the model excluding sentences that it determined to be non - propagandistic from being considered for token - level classification . the right side of table 1 shows the results for the slc task . we apply our multi - granularity network model to the sentence - level classification task to see its effect on low granularity when we train the model with a high granularity task . interestingly , it yields huge performance improvements on the sentence - level classification result . compared to the bert baseline , it increases the recall by 8 . 42 % , resulting in a 3 . 24 % increase of the f1 score .",
        "generated_description": "for the slc task , the multi - granularity model outperforms the bert baseline by a large margin , achieving an f1 - score of 21 . 39 . the multi - granularity model also performs better than the joint baseline by about 1 . 5 points in terms of f1 . the bert model also outperforms all the other models in the flc task by a significant margin , but the difference is not statistically significant ."
    },
    {
        "table_id": "394",
        "table_info": {
            "table_caption": "Table 2: Results on CQA dev-random-split with CoS-E used during training.",
            "table_column_names": [
                "[BOLD] Method",
                "[BOLD] Accuracy (%)"
            ],
            "table_content_values": [
                [
                    "BERT (baseline)",
                    "63.8"
                ],
                [
                    "CoS-E-open-ended",
                    "65.5"
                ],
                [
                    "CAGE-reasoning",
                    "[BOLD] 72.6"
                ]
            ]
        },
        "gold_description": "table 2 shows results that compare a bert baseline that uses only the cqa inputs and the same architecture but trained using inputs that contain explanations from cos - e during training . the bert baseline model reaches 64 % accuracy and adding open - ended human explanations ( cos - e - open - ended ) alongside the questions during training results in a 2 % boost in accuracy . in table 2 , using cage - reasoning at both train and validation resulted in an accuracy of 72 % , but table 4 shows that if cage - reasoning truly captured all information provided in cos - e - openended , performance would be 90 % .",
        "generated_description": "we find that the cos - e model trained with open - ended reasoning outperforms the bert baseline by 1 . 8 % in accuracy . the cage - reasoning model improves upon the baseline by 2 . 8 % ."
    },
    {
        "table_id": "395",
        "table_info": {
            "table_caption": "Table 3: Test accuracy on CQA v1.0. The addition of CoS-E-open-ended during training dramatically improves performance. Replacing CoS-E during training with CAGE reasoning during both training and inference leads to an absolute gain of 10% over the previous state-of-the-art.",
            "table_column_names": [
                "[BOLD] Method",
                "[BOLD] Accuracy (%)"
            ],
            "table_content_values": [
                [
                    "RC (Talmor et al.,  2019 )",
                    "47.7"
                ],
                [
                    "GPT (Talmor et al.,  2019 )",
                    "54.8"
                ],
                [
                    "CoS-E-open-ended",
                    "60.2"
                ],
                [
                    "CAGE-reasoning",
                    "[BOLD] 64.7"
                ],
                [
                    "Human (Talmor et al.,  2019 )",
                    "95.3"
                ]
            ]
        },
        "gold_description": "table 3 shows the results obtained on the cqa test split . we report our two best models that represent using human explanations ( cos - e - openended ) for training only and using language model explanations ( cage - reasoning ) during both train and test .",
        "generated_description": "replacing cos - e during training with cage reasoning during both training and inference leads to an absolute gain of 10 % over the previous state - of - the - art , resulting in a new state of the art of 64 . 7 % accuracy ."
    },
    {
        "table_id": "396",
        "table_info": {
            "table_caption": "Table 4: Oracle results on CQA dev-random-split using different variants of CoS-E for both training and validation. * indicates CoS-E-open-ended used during both training and validation to contrast with CoS-E-open-ended used only during training in Table 2.",
            "table_column_names": [
                "[BOLD] Method",
                "[BOLD] Accuracy (%)"
            ],
            "table_content_values": [
                [
                    "CoS-E-selected w/o ques",
                    "53.0"
                ],
                [
                    "CoS-E-limited-open-ended",
                    "67.6"
                ],
                [
                    "CoS-E-selected",
                    "70.0"
                ],
                [
                    "CoS-E-open-ended w/o ques",
                    "84.5"
                ],
                [
                    "CoS-E-open-ended*",
                    "[BOLD] 89.8"
                ]
            ]
        },
        "gold_description": "table 4 also contains results that use only the explanation and exclude the original question from cqa denoted by ' w / o question ' . these variants also use explanation during both train and validation . we observe that even using these limited kind of explanations improves over the bert baseline in table 4 , which suggests that the explanations are providing useful information beyond just mentioning the correct or incorrect answers . in table 2 , using cage - reasoning at both train and validation resulted in an accuracy of 72 % , but table 4 shows that if cage - reasoning truly captured all information provided in cos - e - openended , performance would be 90 % .",
        "generated_description": "the oracle results on the cqa dev - random - split dataset show that the use of semi - supervised cues from the question generator further boosts the performance of cos - e from 53 % to 67 . 6 % and from 67 % to 70 . 0 % when using the selection mechanism , and from 84 . 5 % to 89 . 8 % when not using any question generator at all ."
    },
    {
        "table_id": "397",
        "table_info": {
            "table_caption": "Table 6: Results for explanation transfer from CQA to out-of-domain SWAG and Sotry Cloze tasks.",
            "table_column_names": [
                "[BOLD] Method",
                "[BOLD] SWAG",
                "[BOLD] Story Cloze"
            ],
            "table_content_values": [
                [
                    "BERT",
                    "84.2",
                    "89.8"
                ],
                [
                    "+ expl transfer",
                    "83.6",
                    "89.5"
                ]
            ]
        },
        "gold_description": "table 6 shows the results obtained by the bert baseline without explanations and using our transferred explanations from cqa to swag and story cloze . we observed that adding explanations led to a very small decrease ( < 0 . 6 % ) in the performance compared to the baseline for both tasks .",
        "generated_description": "sotry cloze . we transfer the bert model trained on swag to the swag and story cloze datasets , and fine - tune it on the in - domain swag dataset . we find that bert ’ s performance drops significantly on both datasets , indicating that the model is not able to transfer well to out - of - domain data . we also find that explanation transfer from cqa is less effective than fine - tuning bert on the story cloze dataset . this may be due to the fact that most of the sentences in the story - cloze dataset are much longer than the ones in swag , making it less suitable for bert to infer the relationships between the entities ."
    },
    {
        "table_id": "398",
        "table_info": {
            "table_caption": "Table 1: F1 and ensembled F1 score for citation needed detection training on the FA split and testing on the LQN split of Redi et al. (2019). The FA split contains statements with citations from featured articles and the LQN split consists of statements which were flagged as not having a citation but needing one. Listed are the mean, standard deviation, and ensembled results across 15 seeds (eP, eR, and eF1). Bold indicates best performance, underline indicates second best. *The reported value is from rerunning their released model on the test dataset. The value in brackets is the value reported in the original paper.",
            "table_column_names": [
                "Method",
                "P",
                "R",
                "F1",
                "eP",
                "eR",
                "eF1"
            ],
            "table_content_values": [
                [
                    "Redi et al.  2019",
                    "0.753",
                    "0.709",
                    "0.730 [0.76]*",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "BERT",
                    "0.788 ± 0.013",
                    "0.837 ± 0.045",
                    "0.810 ± 0.015",
                    "0.790",
                    "0.853",
                    "0.820"
                ],
                [
                    "BERT + PU",
                    "0.788 ± 0.009",
                    "0.843 ± 0.030",
                    "0.814 ± 0.010",
                    "0.790",
                    "0.856",
                    "0.822"
                ],
                [
                    "BERT +  [ITALIC] PUC",
                    "0.784 ± 0.009",
                    "[BOLD] 0.856 ± 0.032",
                    "[BOLD] 0.818 ± 0.010",
                    "0.786",
                    "[BOLD] 0.871",
                    "[BOLD] 0.826"
                ]
            ]
        },
        "gold_description": "our results for citation needed detection are given in table 1 . the vanilla bert model already significantly outperforms the state of the art model from redi et al . ( 2019 ) ( a gru network with global attention ) by 6 f1 points . we saw further gains in performance with pu learning , as well as when using puc . additionally , the models using pu learning had lower variance , indicating more consistent performance across runs . the best performing model we saw was the one trained using puc with an f1 score of 0 . 826 .",
        "generated_description": "redi et al . the fa split contains statements with citations from featured articles and the lqn split consists of statements which were flagged as not having a citation but needing one . the bert model trained on the fa split achieves an f1 score of 0 . 788 , compared to 0 . 753 for the baseline model . our method outperforms the baseline by 0 . 027 in terms of f1 . we found that the pu and puc fine - tuned bert models outperform the bert baseline by approximately 0 . 030 and 0 . 010 f1 points , respectively . the puc model outperforms both the pu model and bert + puc on the f1 and ef1 scores , but not on the recall score ."
    },
    {
        "table_id": "399",
        "table_info": {
            "table_caption": "Table 1: Properties of the training and test set: the number of synsets, the maximum depth of the hierarchy counted from (and including) the top synset of the domain, the number of basic level concepts, and the inter-rater agreement (κ).",
            "table_column_names": [
                "Top-synset",
                "Size",
                "Max.",
                "#basic",
                "[ITALIC] κ"
            ],
            "table_content_values": [
                [
                    "of domain",
                    "#syns.",
                    "depth",
                    "level",
                    "[EMPTY]"
                ],
                [
                    "Hand tool",
                    "157",
                    "6",
                    "30",
                    "0.73"
                ],
                [
                    "Edible fruit",
                    "197",
                    "5",
                    "77",
                    "0.78"
                ],
                [
                    "Musical Instr.",
                    "164",
                    "7",
                    "54",
                    "0.64"
                ],
                [
                    "All",
                    "518",
                    "7",
                    "161",
                    "0.73"
                ]
            ]
        },
        "gold_description": "table 1 lists the properties of the training and test set including the inter - rater agreement ( κ ) . the agreement is substantial , with some variation between the domains : κ is higher for tools and fruit than for the musical domain .",
        "generated_description": "the dataset was split into a training set ( 80 % ) and a test set ( 20 % ) set ( 10 % ) in which the training set was used to select the best performing model , and the test set was split further into a validation set ( 15 % ) to evaluate the performance of the system on the dev and test sets . the evaluation was performed by two independent raters , both native speakers of english ( κ = 0 . 73 ) who were asked to rank the five basic level concepts for each of the five different domains ( hand tool , edible fruit , musical instr . , and musical instr . ) . the inter - rater agreement ( κ ) between the two raters was 0 . 73 for the hand tool , 0 . 78 for the musical instr . and 0 . 64 for the edible fruit , indicating moderate agreement ."
    },
    {
        "table_id": "400",
        "table_info": {
            "table_caption": "Table 2: Features ranked in order of importance.",
            "table_column_names": [
                "Feature",
                "All",
                "Tool",
                "Fruit",
                "Music"
            ],
            "table_content_values": [
                [
                    "depth_in_hierarchy",
                    "1",
                    "1",
                    "1",
                    "3"
                ],
                [
                    "G.Ngrams_2008_max",
                    "2",
                    "2",
                    "5",
                    "2"
                ],
                [
                    "gloss_length",
                    "3",
                    "4",
                    "7",
                    "1"
                ],
                [
                    "polysemy_max",
                    "4",
                    "3",
                    "4",
                    "6"
                ],
                [
                    "word_length_min",
                    "5",
                    "5",
                    "3",
                    "4"
                ],
                [
                    "nr_of_partOfs",
                    "6",
                    "8",
                    "2",
                    "8"
                ],
                [
                    "nr_of_hyponyms",
                    "7",
                    "6",
                    "6",
                    "5"
                ],
                [
                    "nr_of_synonyms",
                    "8",
                    "7",
                    "8",
                    "7"
                ],
                [
                    "nr_of_direct_hypernyms",
                    "9",
                    "9",
                    "9",
                    "9"
                ]
            ]
        },
        "gold_description": "table 2 lists the importance of each variable in the global model and in the three single domain models , where the variable with the highest weight is ranked 1 . the lists are relatively stable , with some marked differences , such as the importance of the gloss length and the number of partof relations for music and fruit , respectively .",
        "generated_description": "feature importance . for each feature , we rank it based on its importance from lowest ( lowest ) to highest ( highest ) importance . we observe that gloss_length is the most important feature for the fruit data , followed by polysemy_max and g . ngrams_2008_max . for the music data , feature depth_in_hierarchy is the second - most important feature , following after the word_length_min feature ."
    },
    {
        "table_id": "401",
        "table_info": {
            "table_caption": "Table 3: Balanced accuracy and κ of predictions made in a new domain, with or without normalization.",
            "table_column_names": [
                "Normalized features: New",
                "Normalized features: Trained",
                "None Bal.",
                "None  [ITALIC] κ",
                "Structural Bal.",
                "Structural  [ITALIC] κ",
                "Lexical Bal.",
                "Lexical  [ITALIC] κ",
                "Frequency Bal.",
                "Frequency  [ITALIC] κ"
            ],
            "table_content_values": [
                [
                    "domain",
                    "on",
                    "Acc.",
                    "[EMPTY]",
                    "Acc.",
                    "[EMPTY]",
                    "Acc.",
                    "[EMPTY]",
                    "Acc.",
                    "[EMPTY]"
                ],
                [
                    "Tools",
                    "Fruit+Music",
                    "0.69",
                    "0.40",
                    "0.84",
                    "0.74",
                    "0.83",
                    "0.68",
                    "0.65",
                    "0.30"
                ],
                [
                    "Fruit",
                    "Tools+Music",
                    "0.66",
                    "0.30",
                    "0.82",
                    "0.62",
                    "0.73",
                    "0.43",
                    "0.66",
                    "0.31"
                ],
                [
                    "Music",
                    "Tools+Fruit",
                    "0.62",
                    "0.27",
                    "0.68",
                    "0.37",
                    "0.73",
                    "0.41",
                    "0.55",
                    "0.12"
                ]
            ]
        },
        "gold_description": "we find that normalization of both structural and lexical features leads to a significant performance gain . normalization of the frequency feature seems to hurt performance ( table 3 )",
        "generated_description": "for each domain , we evaluate the balanced accuracy and κ of the predictions made by the model , with and without normalization , on the test set of the new domain . we observe that normalization improves the performance of the model in all cases , regardless of whether we use the original features or not . the fruits dataset seems to be the most difficult to normalize , with the only exception of the fruits + fruits dataset , where the normalization of the features does not seem to have a significant effect ."
    },
    {
        "table_id": "402",
        "table_info": {
            "table_caption": "Table 1: Distribution of the event mentions per POS per token in all datasets of the EVENTI corpus.",
            "table_column_names": [
                "POS",
                "Training",
                "Dev.",
                "Test"
            ],
            "table_content_values": [
                [
                    "Noun",
                    "6,710",
                    "111",
                    "1,499"
                ],
                [
                    "Verb",
                    "11,269",
                    "193",
                    "2,426"
                ],
                [
                    "Adjective",
                    "610",
                    "9",
                    "118"
                ],
                [
                    "Preposition",
                    "146",
                    "1",
                    "25"
                ],
                [
                    "Overall Event Tokens",
                    "18,735",
                    "314",
                    "4,068"
                ]
            ]
        },
        "gold_description": "tables 1 and 2 report , respectively , the distribution of the events per token part - of speech ( pos ) and per event class . verbs are the largest annotated category , followed by nouns , adjectives , and prepositional phrases .",
        "generated_description": "the distribution of the event mentions per pos per token per token in all datasets of the eventi corpus is shown in table 1 . the pos tags for nouns , verbs , adjectives , and prepositions are distributed evenly across the three datasets , with the exception of the verb , which is distributed differently across the datasets ."
    },
    {
        "table_id": "403",
        "table_info": {
            "table_caption": "Table 2: Distribution of the event mentions per class in all datasets of the EVENTI corpus.",
            "table_column_names": [
                "Class",
                "Training",
                "Dev.",
                "Test"
            ],
            "table_content_values": [
                [
                    "OCCURRENCE",
                    "9,041",
                    "162",
                    "1,949"
                ],
                [
                    "ASPECTUAL",
                    "446",
                    "14",
                    "107"
                ],
                [
                    "I_STATE",
                    "1,599",
                    "29",
                    "355"
                ],
                [
                    "I_ACTION",
                    "1,476",
                    "25",
                    "357"
                ],
                [
                    "PERCEPTION",
                    "162",
                    "2",
                    "37"
                ],
                [
                    "REPORTING",
                    "714",
                    "8",
                    "149"
                ],
                [
                    "STATE",
                    "4,090",
                    "61",
                    "843"
                ],
                [
                    "Overall Events",
                    "17,528",
                    "301",
                    "3,798"
                ]
            ]
        },
        "gold_description": "tables 1 and 2 report , respectively , the distribution of the events per token part - of speech ( pos ) and per event class . as for the classes , occurrence and state represent the large majority of all events , followed by the intensional ones ( i state and action ) , expressing some factual relationship between the target events and their arguments , and finally the others ( reporting , aspectual , and perception ) .",
        "generated_description": "the overall distribution of the event mentions per class in all datasets of the eventi corpus is presented in table 2 . we observe that the occurrence class is the most frequent class , followed by aspectual , i_state , and i_action . the state and perception classes are the least frequent , with only 8 and 2 mentions respectively ."
    },
    {
        "table_id": "404",
        "table_info": {
            "table_caption": "Table 3: Results for Bubtask B Main Task - Event detection and classification.",
            "table_column_names": [
                "Embedding Parameter",
                "Strict Evaluation R",
                "Strict Evaluation P",
                "Strict Evaluation F1",
                "Strict Evaluation F1-class",
                "Relaxed Evaluation R",
                "Relaxed Evaluation P",
                "Relaxed Evaluation F1",
                "Relaxed Evaluation F1-class"
            ],
            "table_content_values": [
                [
                    "Berardi2015_w2v",
                    "0.868",
                    "0.868",
                    "0.868",
                    "0.705",
                    "0.892",
                    "0.892",
                    "0.892",
                    "0.725"
                ],
                [
                    "Berardi2015_Glove",
                    "0.848",
                    "0.872",
                    "0.860",
                    "0.697",
                    "0.870",
                    "0.895",
                    "0.882",
                    "0.714"
                ],
                [
                    "Fastext-It",
                    "[BOLD] 0.897",
                    "0.863",
                    "[BOLD] 0.880",
                    "[BOLD] 0.736",
                    "[BOLD] 0.921",
                    "0.887",
                    "[BOLD] 0.903",
                    "[BOLD] 0.756"
                ],
                [
                    "ILC-ItWack",
                    "0.831",
                    "[BOLD] 0.884",
                    "0.856",
                    "0.702",
                    "0.860",
                    "[BOLD] 0.914",
                    "0.886",
                    "0.725"
                ],
                [
                    "DH-FBK_100",
                    "0.855",
                    "0.859",
                    "0.857",
                    "0.685",
                    "0.881",
                    "0.885",
                    "0.883",
                    "0.705"
                ],
                [
                    "FBK-HLT@EVENTI 2014",
                    "0.850",
                    "[ITALIC] 0.884",
                    "0.867",
                    "0.671",
                    "0.868",
                    "0.902",
                    "0.884",
                    "0.685"
                ]
            ]
        },
        "gold_description": "results for the experiments are illustrated in table 3 . the network obtains the best f1 score , both for detection ( f1 of 0 . 880 for strict evaluation and 0 . 903 for relaxed evaluation with fastext - it embeddings ) and for classification ( f1 - class of 0 . 756 for strict evaluation , and 0 . 751 for relaxed evaluation with fastext - it embeddings ) . although fbkhlt suffers in the classification subtask , it qualifies as a highly competitive system for the detection subtask . by observing the strict f1 scores , fbk - hlt beats three configurations ( dh - fbk100 , ilc - itwack , berardi2015 glove ) 11 , almost equals one ( berardi2015 w2v ) 12 , and it is outperformed only by one ( fastext - it ) 13 . in the relaxed evaluation setting , dh - fbk - 100 is the only configuration that does not beat fbk - hlt ( although the difference is only 0 . 001 point ) . nevertheless , it is remarkable to observe that fbk - hlt has a very high precision ( 0 . 902 , relaxed evaluation mode ) , that is overcome by only one embedding configuration , ilc - itwack . the results also indicates that word embeddings have a major contribution on recall , these results are obtained using a single step approach ,",
        "generated_description": "the results show that fastext - it , ilc - itwack and dh - fbk_100 perform better than the baselines for both the strict evaluation and the relaxed evaluation . this is due to the fact that the fastext - it embeddings are trained on a large amount of unlabeled text , which makes them less sensitive to the noise in the training data . the other baselines perform better for the relaxed evaluation , as they do not suffer from this problem ."
    },
    {
        "table_id": "405",
        "table_info": {
            "table_caption": "Table 1: Performance comparison on the SwitchBoard dataset (P: n-gram precision, R: n-gram recall, A: Average, E: Extrema, G: Greedy, L: average length)",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] BLEU R",
                "[BOLD] BLEU P",
                "[BOLD] BLEU F1",
                "[BOLD] BOW Embedding A",
                "[BOLD] BOW Embedding E",
                "[BOLD] BOW Embedding G",
                "[BOLD] intra-dist dist-1",
                "[BOLD] intra-dist dist-2",
                "[BOLD] inter-dist dist-1",
                "[BOLD] inter-dist dist-2",
                "[BOLD] L"
            ],
            "table_content_values": [
                [
                    "HRED",
                    "0.262",
                    "0.262",
                    "0.262",
                    "0.820",
                    "0.537",
                    "0.832",
                    "0.813",
                    "0.452",
                    "0.081",
                    "0.045",
                    "12.1"
                ],
                [
                    "SeqGAN",
                    "0.282",
                    "[BOLD] 0.282",
                    "0.282",
                    "0.817",
                    "0.515",
                    "0.748",
                    "0.705",
                    "0.521",
                    "0.070",
                    "0.052",
                    "[BOLD] 17.2"
                ],
                [
                    "CVAE",
                    "0.295",
                    "0.258",
                    "0.275",
                    "0.836",
                    "0.572",
                    "0.846",
                    "0.803",
                    "0.415",
                    "0.112",
                    "0.102",
                    "12.4"
                ],
                [
                    "CVAE-BOW",
                    "0.298",
                    "0.272",
                    "0.284",
                    "0.828",
                    "0.555",
                    "0.840",
                    "0.819",
                    "0.493",
                    "0.107",
                    "0.099",
                    "12.5"
                ],
                [
                    "CVAE-CO",
                    "0.299",
                    "0.269",
                    "0.283",
                    "0.839",
                    "0.557",
                    "0.855",
                    "0.863",
                    "0.581",
                    "0.111",
                    "0.110",
                    "10.3"
                ],
                [
                    "VHRED",
                    "0.253",
                    "0.231",
                    "0.242",
                    "0.810",
                    "0.531",
                    "0.844",
                    "[BOLD] 0.881",
                    "0.522",
                    "0.110",
                    "0.092",
                    "8.74"
                ],
                [
                    "VHCR",
                    "0.276",
                    "0.234",
                    "0.254",
                    "0.826",
                    "0.546",
                    "0.851",
                    "0.877",
                    "0.536",
                    "0.130",
                    "0.131",
                    "9.29"
                ],
                [
                    "DialogWAE",
                    "0.394",
                    "0.254",
                    "0.309",
                    "0.897",
                    "0.627",
                    "0.887",
                    "0.713",
                    "0.651",
                    "0.245",
                    "0.413",
                    "15.5"
                ],
                [
                    "DialogWAE-GMP",
                    "[BOLD] 0.420",
                    "0.258",
                    "[BOLD]  0.319",
                    "[BOLD] 0.925",
                    "[BOLD]  0.661",
                    "[BOLD]  0.894",
                    "0.713",
                    "[BOLD]  0.671",
                    "[BOLD] 0.333",
                    "[BOLD]  0.555",
                    "15.2"
                ]
            ]
        },
        "gold_description": "tables 1 and 2 show the performance of dialogwae and baselines on the two datasets . dialogwae outperforms the baselines in the majority of the experiments . in terms of bleu scores , dialogwae ( with a gaussian mixture prior network ) generates more relevant responses , with the average recall of 42 . 0 % and 37 . 2 % on both of the datasets . these are significantly higher than those of the cvae baselines ( 29 . 9 % and 26 . 5 % ) . we observe a similar trend to the bow embedding metrics .",
        "generated_description": "our model outperforms all the baselines in terms of bleu rouge , p , f1 , and the inter - dist dist - 1 and dist - 2 metrics . it achieves the highest bleus on both intra - dist ( dist - 1 : 0 . 836 vs . 0 . 572 for cvae and 0 . 803 for seqgan ) , and the highest laser ( l = 17 . 2 vs . 12 . 1 for hred ) among all the models , which indicates that our model is able to generate more diverse and grammatical responses . our model also outperforms the baseline hred model on the bow - based embeddings ( a , bow embedding , e , and g ) by a large margin , which demonstrates the effectiveness of our model in capturing the semantic information of the responses ."
    },
    {
        "table_id": "406",
        "table_info": {
            "table_caption": "Table 5: Human judgments for models trained on the Dailydialog dataset",
            "table_column_names": [
                "Model",
                "Coherence",
                "Diversity",
                "Informative"
            ],
            "table_content_values": [
                [
                    "CVAE-CO",
                    "14.4%",
                    "19.2%",
                    "24.8%"
                ],
                [
                    "VHCR",
                    "26.8%",
                    "22.4%",
                    "20.4%"
                ],
                [
                    "DialogWAE",
                    "27.6%",
                    "[BOLD] 29.2%",
                    "25.6%"
                ],
                [
                    "DialogWAE-GMP",
                    "[BOLD] 31.6%",
                    "[BOLD] 29.2%",
                    "[BOLD] 29.6%"
                ]
            ]
        },
        "gold_description": "to validate the previous results , we further conduct a human evaluation with amazon mechanical turk . we randomly selected 50 dialogues from the test set of dailydialog . for each dialogue context , we generated 10 responses from each of the four models . responses for each context were inspected by 5 participants who were asked to choose the model which performs the best in regarding to coherence , diversity and informative while being blind to the underlying algorithms . the average percentages that each model was selected as the best to a specific criterion are shown in table 5 .",
        "generated_description": "the results show that dialogwae - gmp outperforms the other models in terms of diversity and informativeness , while dialog wae is slightly better on the coherence score . the reason is that the model is able to generate more diverse and informative responses with the help of the language model ."
    },
    {
        "table_id": "407",
        "table_info": {
            "table_caption": "Table 2: Comparison between our proposed methods and baselines. RL Look-ahead model achieves the highest score for all three aspects: Empathy, Relevance, and Fluency. MultiSeq model achieves highest BLEU score, but not significant.",
            "table_column_names": [
                "[EMPTY]",
                "BLEU",
                "Empathy",
                "Relevance",
                "Fluency"
            ],
            "table_content_values": [
                [
                    "Gold",
                    "-",
                    "3.651",
                    "3.752",
                    "3.718"
                ],
                [
                    "Seq2Seq",
                    "2.29",
                    "3.013",
                    "3.173",
                    "2.967"
                ],
                [
                    "MultiSeq",
                    "[BOLD] 2.45",
                    "2.979",
                    "3.25",
                    "2.952"
                ],
                [
                    "RL Current",
                    "2.31",
                    "3.18",
                    "3.187",
                    "3.14"
                ],
                [
                    "RL Look-ahead",
                    "2.32",
                    "[BOLD] 3.327",
                    "[BOLD] 3.593",
                    "[BOLD] 3.327"
                ]
            ]
        },
        "gold_description": "from the bleu scores in table 2 , we can see that although multiseq has the highest bleu score , all models have similar bleu scores and the difference is not that significant . we can clearly notice from human evaluations shown in table 2 that our model , rl look - ahead , outperforms all of the others in all three evaluated categories .",
        "generated_description": "we can see that our proposed methods outperform the baselines on all three aspects , and the multiseq model achieves the highest score for relevance and fluency . however , the bleu score is not significant . the seq2seq method does not perform as well as the other methods , which might be due to the fact that it does not use any hand - crafted features . our proposed methods , rl current and rl look - ahead , however , outperform other methods on all aspects . the results show that the look - ahead model achieves better performance than the rl current model on all metrics ."
    },
    {
        "table_id": "408",
        "table_info": {
            "table_caption": "Table 1: We report the best performance observed in 5 runs on the development sets of both SParC and CoSQL, since their test sets are not public. We also conduct Wilcoxon signed-rank tests between our method and the baselines, and the bold results show the improvements of our model are significant with p < 0.005.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] SParC Ques.Match",
                "[BOLD] SParC Int.Match",
                "[BOLD] CoSQL Ques.Match",
                "[BOLD] CoSQL Int.Match"
            ],
            "table_content_values": [
                [
                    "SyntaxSQL-con",
                    "18.5",
                    "4.3",
                    "15.1",
                    "2.7"
                ],
                [
                    "CD-Seq2Seq",
                    "21.9",
                    "8.1",
                    "13.8",
                    "2.1"
                ],
                [
                    "EditSQL",
                    "33.0",
                    "16.4",
                    "22.2",
                    "5.8"
                ],
                [
                    "Ours",
                    "[BOLD] 41.8",
                    "[BOLD] 20.6",
                    "[BOLD] 33.5",
                    "[BOLD] 9.6"
                ],
                [
                    "EditSQL + BERT",
                    "47.2",
                    "29.5",
                    "40.0",
                    "11.0"
                ],
                [
                    "Ours + BERT",
                    "[BOLD] 52.6",
                    "[BOLD] 29.9",
                    "[BOLD] 41.0",
                    "[BOLD] 14.0"
                ]
            ]
        },
        "gold_description": "taking concat as a representative , we compare the performance of our model with other models , as shown in table 1 . as illustrated , our model outperforms baselines by a large margin with or without bert , achieving new sota performances on both datasets . compared with the previous sota without bert on sparc , our model improves ques . match and int . match by 10 . 6 and 5 . 4 points , respectively .",
        "generated_description": "we also conduct wilcoxon signed - rank tests between our model and the baselines , and the bold results show the improvements of our model are significant with p < 0 . 005 . we also observe that our model with bert embeddings achieves the best performance on both sparc and cosql datasets ."
    },
    {
        "table_id": "409",
        "table_info": {
            "table_caption": "Table 3: Results on the unsupervised hypernym detection and direction prediction tasks. The first three rows of results are from Roller, Kiela, and Nickel (2018). The HyperbolicCones results were reported by Le et al. (2019). The improvements in LEDS and BLESS benchmark are statistically significant with two-tailed p values being 0.019 and ≤ 0.001 respectively.",
            "table_column_names": [
                "[EMPTY]",
                "Detection (Average Precision) BLESS",
                "Detection (Average Precision) EVAL",
                "Detection (Average Precision) LEDS",
                "Detection (Average Precision) SHWARTZ",
                "Detection (Average Precision) WBLESS",
                "Direction (Average Accuracy) BLESS",
                "Direction (Average Accuracy) WBLESS",
                "Direction (Average Accuracy) BIBLESS"
            ],
            "table_content_values": [
                [
                    "Count based p(x,y)",
                    ".49",
                    ".38",
                    ".71",
                    ".29",
                    ".74",
                    ".46",
                    ".69",
                    ".62"
                ],
                [
                    "ppmi(x,y)",
                    ".45",
                    ".36",
                    ".70",
                    ".28",
                    ".72",
                    ".46",
                    ".68",
                    ".61"
                ],
                [
                    "SVD ppmi(x,y)",
                    ".76",
                    ".48",
                    ".84",
                    ".44",
                    ".96",
                    ".96",
                    ".87",
                    ".85"
                ],
                [
                    "HyperbolicCones",
                    "[BOLD] .81",
                    "[BOLD] .50",
                    ".89",
                    "[BOLD] .50",
                    "[BOLD] .98",
                    ".94",
                    ".90",
                    ". [BOLD] 87"
                ],
                [
                    "Proposed SPON",
                    "[BOLD] .81",
                    "[BOLD] .50",
                    "[BOLD] .91",
                    "[BOLD] .50",
                    "[BOLD] .98",
                    "[BOLD] .97",
                    "[BOLD] .91",
                    "[BOLD] .87"
                ]
            ]
        },
        "gold_description": "table 3 shows the results on the unsupervised tasks of hypernym detection and direction predictions , reporting average precision and average accuracy , respectively . the first row titled count based ( in table 3 ) depicts the performance of a hearst - like pattern system baseline , that uses a frequency based threshold to classify candidate hyponym - hypernym pairs as positive ( i . e . exhibiting hypernymy ) or negative ( i . e . not exhibiting hypernymy ) . the ppmi approach in table 3 builds upon the count based approach by using pointwise mutual information values for classification . svd ppmi approach , the main contribution from roller , kiela , and nickel ( 2018 ) builds low - rank embeddings of the ppmi matrix , which allows to make predictions for unseen pairs as well . hyperboliccones is the sota ( le et al . 2019 ) in both these tasks . the final row reports the application of spon ( on the input provided by svd ppmi ) which is an original contribution of our work .",
        "generated_description": "the hyperboliccones method performs slightly better than the proposed spon method on the eval and leds tasks , but worse on the shwartz and wbless tasks . this may be due to the fact that the hyperbolic features used in this task are very sparse , which makes it more difficult to find the correct clusters . the svd ppmi ( x , y ) method does not perform as well as the other methods on the leds task . this is because the svd counts the pairwise distances between pairs of points in the same cluster , which may not be the best choice for this task ."
    },
    {
        "table_id": "410",
        "table_info": {
            "table_caption": "Table 4: Ablation tests reporting Average Precision values on the unsupervised hypernym detection task, signifying the choice of layers utilized in our proposed SPON model. The first row represents SPON i.e. a RELU layer followed by a Residual connection. The second row removes the Residual connection, whereas the third row substitutes the non-negative activation layer RELU with Tanh that can take negative values.",
            "table_column_names": [
                "[EMPTY]",
                "BLESS",
                "EVAL",
                "LEDS",
                "WBLESS"
            ],
            "table_content_values": [
                [
                    "[ITALIC] RELU+ [ITALIC] Residual",
                    "[BOLD] .81",
                    "[BOLD] .50",
                    "[BOLD] .91",
                    "[BOLD] .98"
                ],
                [
                    "[ITALIC] RELU Only",
                    ".73",
                    ".49",
                    ".82",
                    ".96"
                ],
                [
                    "[ITALIC] Tanh+ [ITALIC] Residual",
                    ".79",
                    ".49",
                    ".90",
                    "[BOLD] .98"
                ]
            ]
        },
        "gold_description": "the analysis in section 4 which shows that our choice of function f satisfies asymmetry and transitive properties , holds true because f satisfies f ( ( cid : 126 ) x ) ≥ ( cid : 126 ) x component - wise . table 4 shows the results for each of these ablation experiments , when evaluated on the unsupervised hypernym detection task across four datasets chosen randomly . removing the residual layer and using relu activation function only , violates the aforementioned component - wise inequality f ( ( cid : 126 ) x ) ≥ ( cid : 126 ) x , and has the worst results out of the three . on the other hand , using residual connections with tanh activations may not violate the aforementioned inequality , since , it depends upon the sign of the activation outputs . this argument is supported by the results in table 4 , wherein using tanh activations instead of relu almost provides identical results , except for the bless dataset . nevertheless , the results in table 4 show that encouraging asymmetry and transitive properties for this task , in fact improves the results as opposed to not doing the same .",
        "generated_description": "tab . the first row represents spon with a relu layer followed by a residual connection . the second row removes the residual connection , while the third row replaces the non - negative activation layer relu with tanh that can take negative values . as can be seen , the proposed spon model with both relu layers outperforms the relu only baseline by a large margin , indicating the benefit of taking into account both spatial and temporal dependencies among the hypernym pairs ."
    },
    {
        "table_id": "411",
        "table_info": {
            "table_caption": "Table 5: Results on the unsupervised hypernym detection task for BLESS dataset. With 13,089 test instances, the improvement in Average Precision values obtained by SPON as compared against Smoothed Box model is statistically significant with two-tailed p value equals 0.00116.",
            "table_column_names": [
                "Method",
                "Average Precision"
            ],
            "table_content_values": [
                [
                    "OE ",
                    "0.761"
                ],
                [
                    "Smoothed Box ",
                    "0.795"
                ],
                [
                    "SPON (Our Approach)",
                    "[BOLD] 0.811"
                ]
            ]
        },
        "gold_description": "furthermore , table 5 illustrates the results on the unsupervised hypernym detection task for bless dataset , wherein we compare our proposed spon model to other supervised sota approaches for hypernym prediction task , namely order embeddings ( oe ) approach as introduced by ( vendrov et al . 2016 ) , and smoothed box model as introduced by ( li et al . 2019 ) .",
        "generated_description": "spon outperforms the oe and the smoothed box model by a significant margin . with 13 , 089 test instances , the improvement in average precision values obtained by spon is statistically significant with two - tailed p value equals 0 . 00116 . note that the spon model is trained on the training set only ."
    },
    {
        "table_id": "412",
        "table_info": {
            "table_caption": "Table 2: Limited length ROUGE recall results on the NYT50 test set.",
            "table_column_names": [
                "Model",
                "R-1",
                "R-2"
            ],
            "table_content_values": [
                [
                    "First sentences",
                    "28.6",
                    "17.3"
                ],
                [
                    "First  [ITALIC] k words",
                    "35.7",
                    "21.6"
                ],
                [
                    "Full ",
                    "42.2",
                    "24.9"
                ],
                [
                    "ML+RL+intra-attn ",
                    "42.94",
                    "26.02"
                ],
                [
                    "Two-Stage + RL (Ours)",
                    "[BOLD] 45.33",
                    "[BOLD] 26.53"
                ]
            ]
        },
        "gold_description": "also we compare performance of our model with two recent models , we see 2 . 39 rouge - 1 improvements compared to the ml + rl with intra - attn approach ( previous sota ) carries over to this dataset , which is a large margin . on rouge - 2 , our model also get an im - provement of 0 . 51 . the experiment proves that our approach can outperform competitive methods on different data distributions .",
        "generated_description": "our rl model outperforms the previous state - of - the - art in both rouge recall scores by a large margin . the rl model trained on the entire nyt50 dataset achieves 45 . 33 and 26 . 53 in terms of recall @ 1 and recall @ 2 , compared to 42 . 2 and 24 . 9 for the full and the rl - only models respectively ."
    },
    {
        "table_id": "413",
        "table_info": {
            "table_caption": "Table 7: Results on SemEval 2018 Domain-specific hypernym discovery task. CRIM is the best system on the domain specific datasets.",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] Music MAP",
                "[BOLD] Music MRR",
                "[BOLD] Music P@5"
            ],
            "table_content_values": [
                [
                    "CRIM",
                    "40.97",
                    "60.93",
                    "41.31"
                ],
                [
                    "SPON",
                    "[BOLD] 54.70",
                    "[BOLD] 71.20",
                    "[BOLD] 56.30"
                ],
                [
                    "[EMPTY]",
                    "[BOLD] Medical",
                    "[BOLD] Medical",
                    "[BOLD] Medical"
                ],
                [
                    "[EMPTY]",
                    "MAP",
                    "MRR",
                    "P@5"
                ],
                [
                    "CRIM",
                    "[BOLD] 34.05",
                    "[BOLD] 54.64",
                    "[BOLD] 36.77"
                ],
                [
                    "SPON",
                    "33.50",
                    "50.60",
                    "35.10"
                ]
            ]
        },
        "gold_description": "similarly , table 7 shows the results on the two domain - specific tasks of music and medical domain corpora . spon outperforms the sota systems in all tasks except for the medical domain in which it achieves comparable results .",
        "generated_description": "we compare crim and spon on the music and medical datasets . crim is the best system on the domain specific datasets . spon outperforms crim on both datasets in terms of map and mrr ."
    },
    {
        "table_id": "414",
        "table_info": {
            "table_caption": "Table 1: Average embedding similarity scores between the output and the target output in terms of Real target output list.",
            "table_column_names": [
                "[BOLD] Length",
                "1-3",
                "4-6",
                "7-10"
            ],
            "table_content_values": [
                [
                    "Real Input",
                    "0.439",
                    "0.518",
                    "0.566"
                ],
                [
                    "Pre-trained Greedy",
                    "0.446",
                    "0.529",
                    "0.559"
                ],
                [
                    "RL Greedy",
                    "0.486",
                    "0.560",
                    "0.588"
                ],
                [
                    "RL BeamSearch(50)",
                    "0.599",
                    "0.678",
                    "0.709"
                ],
                [
                    "RL BeamSearch(200)",
                    "0.621",
                    "0.694",
                    "0.726"
                ]
            ]
        },
        "gold_description": "we calculate these similarity scores for each real targeted output for the real inputs and the inputs found by the proposed model and report the average value in table 1 . according to the table , we observe that even inputting the real inputs , the similarity scores between the outputs and the target outputs are not high . besides , with the crafted inputs from the proposed framework , these similarity scores are significantly improved . for example , for rl beamsearch ( 200 ) , the similarity is improved by 41 . 5 % , 34 . 0 % and 28 . 3 % for the target outputs with length 1 - 3 , 4 - 6 and 7 - 10 , respectively .",
        "generated_description": "we measure the embedding similarity scores between the output and the target output list in terms of the real input and the output list of length 1 - 3 , 4 - 6 , 7 - 10 , and the length of the ground - truth list . the results show that the proposed methods significantly outperform the pre - trained greedy algorithm and rl greedy algorithm when the input length is close to the real output length . however , the difference between the performance of the proposed rl methods and the traditional greedy algorithm is not significant ."
    },
    {
        "table_id": "415",
        "table_info": {
            "table_caption": "Table 1: Test classification accuracy (and the number of parameters used). The bottom part shows our ablation results: SoPa: our full model. SoPams1: running with max-sum semiring (rather than max-product), with the identity function as our encoder E (see Equation 3). sl: self-loops, ϵ: ϵ transitions. The final row is equivalent to a one-layer CNN.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] ROC",
                "[BOLD] SST",
                "[BOLD] Amazon"
            ],
            "table_content_values": [
                [
                    "[BOLD] Hard",
                    "62.2 (4K)",
                    "75.5 (6K)",
                    "88.5 (67K)"
                ],
                [
                    "[BOLD] DAN",
                    "64.3 (91K)",
                    "83.1 (91K)",
                    "85.4 (91K)"
                ],
                [
                    "[BOLD] BiLSTM",
                    "65.2 (844K)",
                    "84.8 (1.5M)",
                    "[BOLD] 90.8 (844K)"
                ],
                [
                    "[BOLD] CNN",
                    "64.3 (155K)",
                    "82.2 (62K)",
                    "90.2 (305K)"
                ],
                [
                    "[BOLD] SoPa",
                    "[BOLD] 66.5 (255K)",
                    "[BOLD] 85.6 (255K)",
                    "90.5 (256K)"
                ],
                [
                    "[BOLD] SoPa [ITALIC] ms1",
                    "64.4",
                    "84.8",
                    "90.0"
                ],
                [
                    "[BOLD] SoPa [ITALIC] ms1∖{ [ITALIC] sl}",
                    "63.2",
                    "84.6",
                    "89.8"
                ],
                [
                    "[BOLD] SoPa [ITALIC] ms1∖{ [ITALIC] ϵ}",
                    "64.3",
                    "83.6",
                    "89.7"
                ],
                [
                    "[BOLD] SoPa [ITALIC] ms1∖{ [ITALIC] sl, [ITALIC] ϵ}",
                    "64.0",
                    "85.0",
                    "89.5"
                ]
            ]
        },
        "gold_description": "table 1 shows our main experimental results . in two of the cases ( sst and roc ) , sopa outperforms all models . on amazon , sopa performs within 0 . 3 points of cnn and bilstm , and outperforms the other two baselines . the table also shows the number of parameters used by each model for each task . sopa performs better or roughly the same as a bilstm , which has 3 – 6 times as many parameters . table 1 also shows an ablation of the differences between sopa and cnn : max - product semiring with sigmoid vs . max - sum semiring with identity , self - loops , and ( cid : 15 ) - transitions . the last line is equivalent to a cnn with multiple window sizes . interestingly , the most notable difference between sopa and cnn is the semiring and encoder function , while ( cid : 15 ) transitions and self - loops have little effect on performance . 1",
        "generated_description": "we can see that sopa consistently outperforms all the baselines on all the three datasets . on the amazon dataset , sopa outperforms bilstm and cnn by a large margin . on sst dataset , the performance of sopa is comparable to that of dan , which is the state - of - the - art model on this dataset ."
    },
    {
        "table_id": "416",
        "table_info": {
            "table_caption": "Table 4: Cohen’s Kappa score (κ) and observed agreement (Ao) for gold standard dialogue",
            "table_column_names": [
                "[BOLD] Annotators",
                "[ITALIC] Ao",
                "[ITALIC] κ"
            ],
            "table_content_values": [
                [
                    "Questions",
                    "0.73",
                    "0.63"
                ],
                [
                    "Features",
                    "0.90",
                    "0.67"
                ],
                [
                    "Answers",
                    "0.59",
                    "0.49"
                ]
            ]
        },
        "gold_description": "to evaluate the annotations , inter - annotator agreement was calculated based on a subset of the gold standard corpus . 4 table 4 illustrates the values of observed agreement ( ao ) and cohen ' s κ ( cohen , 1960 ) obtained for question , feature and answer annotation . the agreement values obtained for question types were over 0 . 6 ( for all annotators combined ) .",
        "generated_description": "we used cohen ’ s kappa ( κ ) to measure the agreement between the annotators for each of the three categories of features , questions , and answers . the features category has the highest observed agreement score ( κ = 0 . 90 ) and the questions and answers categories have the lowest observed agreement ( κ = 0 . 63 and 0 . 49 , respectively ) with respect to the gold standard ."
    },
    {
        "table_id": "417",
        "table_info": {
            "table_caption": "Table 3: Experimental results. The best result for each dataset is indicated in bold, and marked with “†” if it is significantly higher than the second best result (based on a one-tailed Wilcoxon signed-rank test; p<0.05). The results of Benchmark on the arXiv dataset are from the original paper, where the standard deviation values were not reported. All neural models except for Inceptionfixed have larger standard deviation values on arXiv than Wikipedia, which can be explained by the small size of the arXiv test set.",
            "table_column_names": [
                "Wikipedia",
                "Wikipedia",
                "Majority 16.7%",
                "Benchmark 46.7±0.34%",
                "Doc2Vec 23.2±1.41%",
                "Inceptionfixed 43.7±0.51",
                "biLSTM 54.1±0.47%",
                "Inception 57.0±0.63%",
                "Joint  [BOLD] 59.4±0.47%†"
            ],
            "table_content_values": [
                [
                    "arXiv",
                    "cs.ai",
                    "92.2%",
                    "92.6%",
                    "73.3±9.81%",
                    "92.3±0.29",
                    "91.5±1.03%",
                    "92.8±0.79%",
                    "[BOLD] 93.4±1.07%†"
                ],
                [
                    "arXiv",
                    "cs.cl",
                    "68.9%",
                    "75.7%",
                    "66.2±8.38%",
                    "75.0±1.95",
                    "76.2±1.30%",
                    "76.2±2.92%",
                    "[BOLD] 77.1±3.10%"
                ],
                [
                    "arXiv",
                    "cs.lg",
                    "67.9%",
                    "70.7%",
                    "64.7±9.08%",
                    "73.9±1.23",
                    "[BOLD] 81.1±0.83%",
                    "79.3±2.94%",
                    "79.9±2.54%"
                ]
            ]
        },
        "gold_description": "experimental results table 3 shows the performance of the different models over our two datasets , in the form of the average accuracy on the test set ( along with the standard deviation ) over 10 runs , with different random initializations . on wikipedia , we observe that the performance of bilstm , inception , and joint is much better than that of all four baselines . inception achieves 2 . 9 % higher accuracy than bilstm . the performance of joint achieves an accuracy of 59 . 4 % , which is 5 . 3 % higher than using textual features alone ( bilstm ) and 2 . 4 % higher than using visual features alone ( inception ) . based on a one - tailed wilcoxon signed - rank test , the performance of jis sta of - the - art results in combination . for arxiv , baseline methods majority , benchmark , and inceptionfixed outperform bilstm over cs . ai , in large part because of the class imbalance in this dataset ( 90 % of papers are rejected ) . surprisingly , inceptionfixed is better than majority and benchmark over the arxiv cs . lg subset , which verifies the usefulness of visual features , even when only the last layer is fine - tuned . table 3 also shows that inception and bilstm achieve similar performance on arxiv , showing that textual and visual representations are equally discriminative : inception and bilstm are indistinguishable over cs . cl ; bilstm achieves 1 . 8 % higher accuracy over cs . lg , while inception achieves 1 . 3 % higher accuracy over cs . ai . once again , the joint model achieves the highest accuracy on cs . ai and cs . cl by combining textual and visual representations (",
        "generated_description": "we compare our joint model with three baseline models : inception , inceptionfixed , and the memory - augmented lstm ( bilstm ) . we also compare our model with two other document representation models : doc2vec peters et al . for the latter two models , we use the same architecture as inception except that we replace the global average pooling layer with a convolutional layer to extract features for each document . we train these two models on the wikipedia and arxiv datasets , and evaluate them on the other two datasets . for wikipedia , we randomly select 16 . 7 % of the documents as the labeled training set and the rest as the test set . the benchmark model is inception trained on the entire training set of wikipedia , and then tested on the held - out test set of arxiv . the inception fixed model is trained on a subset of the training set only , while the inception on the rest of the data is fine - tuned on the in - domain training set . we use the default hyper - parameters for all the models . the joint model outperforms all the baseline models on all the datasets , with a significant margin . on the arxiv dataset , the joint model improves the accuracies of the baseline model by 1 . 5 % and 2 . 0 % over the majority baseline , respectively . on wikipedia , the improvement is smaller , but still significant ( p < 0 . 001 ) . the improvement is also significant for the cs . cl and cs . lg models . note that the difference between the two models is not statistically significant ."
    },
    {
        "table_id": "418",
        "table_info": {
            "table_caption": "Table 4: Confusion matrix of the Joint model on Wikipedia. Rows are the actual quality classes and columns are the predicted quality classes. The diagonal (gray cells) indicates correct predictions.",
            "table_column_names": [
                "Quality",
                "FA",
                "GA",
                "B",
                "C",
                "Start",
                "Stub"
            ],
            "table_content_values": [
                [
                    "FA",
                    "397",
                    "83",
                    "20",
                    "0",
                    "0",
                    "0"
                ],
                [
                    "GA",
                    "112",
                    "299",
                    "65",
                    "22",
                    "2",
                    "0"
                ],
                [
                    "B",
                    "23",
                    "53",
                    "253",
                    "75",
                    "44",
                    "7"
                ],
                [
                    "C",
                    "5",
                    "33",
                    "193",
                    "124",
                    "100",
                    "12"
                ],
                [
                    "Start",
                    "1",
                    "6",
                    "36",
                    "85",
                    "239",
                    "84"
                ],
                [
                    "Stub",
                    "0",
                    "0",
                    "6",
                    "7",
                    "63",
                    "345"
                ]
            ]
        },
        "gold_description": "table 4 shows the confusion matrix of joint on wikipedia . we can see that more than 50 % of documents for each quality class are correctly classified , except for the class where more documents are misclassified into b .",
        "generated_description": "we can see that the joint model achieves a f1 score of 397 . 7 % on the test set , which is higher than that of the state - of - the - art method ( gorrell et al . , we can also see that most of the misclassification happens between the two quality classes b and c . this is due to the fact that the goal of the joint model is not to distinguish between the classes b , c , and the stub ."
    },
    {
        "table_id": "419",
        "table_info": {
            "table_caption": "Table 1: Large-scale text classification data sets",
            "table_column_names": [
                "Data set",
                "Train",
                "Test",
                "classes",
                "Task"
            ],
            "table_content_values": [
                [
                    "AG news",
                    "120k",
                    "7.6k",
                    "4",
                    "English news categorization"
                ],
                [
                    "AG news",
                    "5k",
                    "7.6k",
                    "4",
                    "English news categorization"
                ],
                [
                    "Sogou news",
                    "450k",
                    "60k",
                    "5",
                    "Chinese news categorization"
                ],
                [
                    "Sogou news",
                    "10k",
                    "60k",
                    "5",
                    "Chinese news categorization"
                ]
            ]
        },
        "gold_description": "we present our results on two freely available large scale datasets introduced by zhang et al . . we also shrink the scale of training samples by randomly picking up the same amount of data in each category ( see table 1 ) . ag news the ag news corpus consists of news articles from the ag ' s corpus of news articles on the web pertaining to the 4 largest classes , which are work , sports , business , sci / tech . the data set contains 30 , 000 training samples for each class , 1 , 900 samples for each class for testing . in this data set , there are three columns which are label , title , description , we treat title as abstract input and description as contents input . sogou news a chinese news data set . this data set is a combination of the sogouca and sogoucs news corpora pertaining to 5 categories , which are sports , finance , entertainment , automobile and technology . it contains 450 , 000 training samples and 60 , 000 samples for testing in total . sogou new also has three columns in data set files , label , title , description , similarly , we treat title as abstract input and description as contents input .",
        "generated_description": "we conduct experiments on two large - scale text classification data sets , namely ag news and sogou news . for the ag news data set , we randomly select 7 . 6k samples from the training set as the development set , and the rest as the test set . the data set is split into two parts , one part is used for training and the other part for testing . the test set is used to evaluate the performance of the model on the classification task . the size of the training and test sets are also the same as that of the development sets . for soguo news , we use 10k samples for training , 60k for testing , and 450k for validation . the training and testing sets are randomly shuffled and shuffled , and then randomly split to train and test on the same set ."
    },
    {
        "table_id": "420",
        "table_info": {
            "table_caption": "Table 2: Testing error of our model and related studies",
            "table_column_names": [
                "Data set",
                "AG",
                "Sogou",
                "AG(5k)",
                "Sogou(10k)"
            ],
            "table_content_values": [
                [
                    "[ITALIC] - our model",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "SeMemNN-ct",
                    "9.29",
                    "4.73",
                    "16.72",
                    "10.82"
                ],
                [
                    "SeMemNN-abs",
                    "9.04",
                    "4.62",
                    "15.32",
                    "9.80"
                ],
                [
                    "B-SeMemNN-ct",
                    "9.01",
                    "4.52",
                    "15.37",
                    "9.37"
                ],
                [
                    "B-SeMemNN-abs",
                    "8.68",
                    "4.19",
                    "14.35",
                    "8.76"
                ],
                [
                    "SAB-SeMemNN-ct",
                    "8.88",
                    "4.33",
                    "14.07",
                    "7.95"
                ],
                [
                    "SAB-SeMemNN-abs",
                    "8.37",
                    "3.67",
                    "13.79",
                    "7.89"
                ],
                [
                    "[ITALIC] - related studies",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Bow ",
                    "11.19",
                    "7.15",
                    "-",
                    "-"
                ],
                [
                    "Bow TFIDF ",
                    "10.36",
                    "6.55",
                    "-",
                    "-"
                ],
                [
                    "ngrams TFIDF ",
                    "7.64",
                    "2.81",
                    "-",
                    "-"
                ],
                [
                    "Bag-of-means ",
                    "16.91",
                    "10.79",
                    "-",
                    "-"
                ],
                [
                    "LSTM ",
                    "13.94",
                    "4.82",
                    "-",
                    "-"
                ],
                [
                    "char-CNN ",
                    "9.51",
                    "4.39",
                    "-",
                    "-"
                ],
                [
                    "VDCNN ",
                    "[BOLD] 8.67",
                    "[BOLD] 3.18",
                    "-",
                    "-"
                ],
                [
                    "VDCNN",
                    "10.64",
                    "6.53",
                    "19.25",
                    "unable"
                ],
                [
                    "XLNet ",
                    "4.49",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "ULMFiT ",
                    "5.01",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "CNN ",
                    "6.57",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "DPCNN ",
                    "6.87",
                    "1.84",
                    "-",
                    "-"
                ]
            ]
        },
        "gold_description": "the experiment results are presented in table 2 . the best performances of our configurations are highlighted in red , which are 8 . 37 , 3 . 67 , 13 . 79 and 7 . 89 for the error rates of our proposed model on ag , sogou , ag ( 5k ) , sogou ( 10k ) respectively . the bold numbers are the officially reported accuracy of vdcnn , to which our proposed model is close . the numbers in blue are the results coming from our comparison experiment by using vdcnn where we set the sequence length to 256 under word level . from these results we can see that our model outperforms vdcnn on ag news for the official error rate , and is very close to vdcnn ' s performance on sogou news . if we set vcdnn with the same input sequence length ( 256 ) in word - level , the performance of our proposed model is obviously better . most of the contributions come from external matrix from the results of table 2 , in the case of training with a large scale dataset , no matter we use simple lstm or more complex bi - directional lstm with self - attention , the testing error rates of different configurations are basically similar to each other . it can be said that such near state - of - the - art performance mainly attributes to the contribution from external memory . using abstract to build the external memory is better than contents from table 2 we can see that the results of using the description to construct the semantics matrix are better than using the abstract . sememnn can still work on a few - shot learning table 2 shows that although we have greatly shrank the scale of the training set , our proposed method can still outperform vdcnn . after shrinking the scale of the data , the performance of vdcnn has been greatly decreased , especially for sogou news , vdcnn",
        "generated_description": "the sememnn - ct and b - sememnn models are trained on the same data set with the same training procedure as in the previous section . we can see that the classification error rates of the two models decrease as the number of training samples increases . this is because the training data size of the ag and sogou data sets increases . the classification error rate of the b - segramnn - abs decreases as the training size increases while that of the sememnn - pt decreases for the ag data set when the training set size increases from 5 , 000 to 10 , 000 samples . the results show that our proposed sab based models outperform the other models in all the cases ."
    },
    {
        "table_id": "421",
        "table_info": {
            "table_caption": "TABLE II: Summary of BLEU scores from Table I.",
            "table_column_names": [
                "[BOLD] Description",
                "[BOLD] Average"
            ],
            "table_content_values": [
                [
                    "All models",
                    "91.51"
                ],
                [
                    "All prefix models",
                    "[BOLD] 94.43"
                ],
                [
                    "All postfix models",
                    "92.37"
                ],
                [
                    "All infix models",
                    "87.72"
                ],
                [
                    "All pre-trained models",
                    "91.06"
                ],
                [
                    "All non-pre-trained models",
                    "91.96"
                ],
                [
                    "All medium (type 1) models",
                    "90.49"
                ],
                [
                    "All small (type 2) models",
                    "92.09"
                ],
                [
                    "All minimal (type 3) models",
                    "91.94"
                ]
            ]
        },
        "gold_description": "table iii provides detailed results of experiment 2 . the numbers are absolute accuracies , i . e . , they correspond to cases where the arithmetic expression generated is 100 % correct , leading to the correct numeric answer . results by , , , are sparse but indicate the scale of success compared to recent past approaches . prefix , postfix , and infix representations in table iii show that network capabilities are changed by how teachable the target data is . while our networks fell short of ai2 testing accuracy , we present state - of - the - art results for the remaining three datasets . the type 2 postfix transformer received the highest testing average of 87 . 2 % . our attempt at language pre - training fell short of our expectations in all but one tested dataset .",
        "generated_description": "the prefix model , the postfix model , all postfix models , and all infix models , as well as all pre - trained and non - pre - trained models are shown to be the most effective in terms of bleu score , with the prefix model having the highest average score . the small ( type 2 ) and minimal ( type 3 ) models , i . e . , the models with the least number of parameters , are also shown to have the highest score ."
    },
    {
        "table_id": "422",
        "table_info": {
            "table_caption": "TABLE III: Test results for Experiment 2 (* denotes averages on present values only).",
            "table_column_names": [
                "[BOLD] (Type) Model",
                "[BOLD] AI2",
                "[BOLD] CC",
                "[BOLD] IL",
                "[BOLD] MAWPS",
                "[BOLD] Average"
            ],
            "table_content_values": [
                [
                    " Hosseini, et.al.",
                    "77.7",
                    "–",
                    "–",
                    "–",
                    "∗77.7"
                ],
                [
                    " Kushman, et.al.",
                    "64.0",
                    "73.7",
                    "2.3",
                    "–",
                    "∗46.7"
                ],
                [
                    " Roy, et.al.",
                    "–",
                    "–",
                    "52.7",
                    "–",
                    "∗52.7"
                ],
                [
                    " Robaidek, et.al.",
                    "–",
                    "–",
                    "–",
                    "62.8",
                    "∗62.8"
                ],
                [
                    " Wang, et.al.",
                    "[BOLD] 78.5",
                    "75.5",
                    "73.3",
                    "–",
                    "∗75.4"
                ],
                [
                    "[ITALIC] Pre-trained",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "(1) Prefix-Transformer",
                    "70.2",
                    "91.1",
                    "95.2",
                    "82.4",
                    "84.7"
                ],
                [
                    "(1) Postfix-Transformer",
                    "68.4",
                    "90.0",
                    "92.9",
                    "82.7",
                    "83.5"
                ],
                [
                    "(1) Infix-Transformer",
                    "75.4",
                    "74.4",
                    "64.3",
                    "56.4",
                    "67.6"
                ],
                [
                    "(2) Prefix-Transformer",
                    "66.7",
                    "91.1",
                    "[BOLD] 96.4",
                    "82.1",
                    "84.1"
                ],
                [
                    "(2) Postfix-Transformer",
                    "73.7",
                    "93.3",
                    "94.1",
                    "82.4",
                    "85.9"
                ],
                [
                    "(2) Infix-Transformer",
                    "75.4",
                    "75.6",
                    "66.7",
                    "59.0",
                    "69.2"
                ],
                [
                    "(3) Prefix-Transformer",
                    "70.2",
                    "91.1",
                    "95.2",
                    "82.4",
                    "84.7"
                ],
                [
                    "(3) Postfix-Transformer",
                    "73.7",
                    "92.2",
                    "94.1",
                    "82.1",
                    "85.5"
                ],
                [
                    "(3) Infix-Transformer",
                    "75.4",
                    "75.6",
                    "64.3",
                    "58.7",
                    "68.5"
                ],
                [
                    "[ITALIC] Non-pre-trained",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "(1) Prefix-Transformer",
                    "71.9",
                    "[BOLD] 94.4",
                    "95.2",
                    "83.4",
                    "86.3"
                ],
                [
                    "(1) Postfix-Transformer",
                    "73.7",
                    "81.1",
                    "92.9",
                    "75.7",
                    "80.8"
                ],
                [
                    "(1) Infix-Transformer",
                    "77.2",
                    "73.3",
                    "61.9",
                    "56.8",
                    "67.3"
                ],
                [
                    "(2) Prefix-Transformer",
                    "71.9",
                    "[BOLD] 94.4",
                    "94.1",
                    "[BOLD] 84.7",
                    "86.3"
                ],
                [
                    "(2) Postfix-Transformer",
                    "77.2",
                    "[BOLD] 94.4",
                    "94.1",
                    "83.1",
                    "[BOLD] 87.2"
                ],
                [
                    "(2) Infix-Transformer",
                    "77.2",
                    "76.7",
                    "66.7",
                    "61.5",
                    "70.5"
                ],
                [
                    "(3) Prefix-Transformer",
                    "71.9",
                    "93.3",
                    "95.2",
                    "84.1",
                    "86.2"
                ],
                [
                    "(3) Postfix-Transformer",
                    "77.2",
                    "94.4",
                    "94.1",
                    "82.4",
                    "87.0"
                ],
                [
                    "(3) Infix-Transformer",
                    "77.2",
                    "76.7",
                    "66.7",
                    "62.4",
                    "70.7"
                ]
            ]
        },
        "gold_description": "the values in the last column of table iii are summarized in table iv . how the models compare with respect to accuracy closely resembles the comparison of bleu scores , presented earlier . thus , bleu scores seem to correlate well with accuracy values in our case .",
        "generated_description": "our proposed model outperforms all the previous methods on all the datasets by a large margin . our model achieves the best performance on ai2 , cc , il , and mawps datasets . on ai2 dataset , our pre - trained model performs better than the previous state - of - the - art by a significant margin . on the other hand , our post - transformer model performs the best on cc and il dataset , but lags behind the previous best by a small margin ."
    },
    {
        "table_id": "423",
        "table_info": {
            "table_caption": "Table 1: Joint goal accuracy on the evaluation dataset of WOZ 2.0 corpus.",
            "table_column_names": [
                "Model",
                "Joint Accuracy"
            ],
            "table_content_values": [
                [
                    "NBT-DNN Mrkšić et al. ( 2017 )",
                    "0.844"
                ],
                [
                    "BT-CNN Ramadan et al. ( 2018 )",
                    "0.855"
                ],
                [
                    "GLAD Zhong et al. ( 2018 )",
                    "0.881"
                ],
                [
                    "GCE Nouri and Hosseini-Asl ( 2018 )",
                    "0.885"
                ],
                [
                    "StateNetPSI Ren et al. ( 2018 )",
                    "0.889"
                ],
                [
                    "BERT+RNN (baseline 1)",
                    "0.892 (±0.011)"
                ],
                [
                    "BERT+RNN+Ontology (baseline 2)",
                    "0.893 (±0.013)"
                ],
                [
                    "Slot-dependent SUMBT (baseline 3)",
                    "0.891 (±0.010)"
                ],
                [
                    "Slot-independent SUMBT (proposed)",
                    "[BOLD] 0.910 (±0.010)"
                ]
            ]
        },
        "gold_description": "the experimental results on woz 2 . 0 corpus are presented in table 1 . the three baseline models , bert + rnn , bert + rnn + ontology , and the slot - dependent sumbt , showed no significant performance differences . on the other hand , the slot - independent sumbt which learned the shared information from all across domains and slots significantly outperformed those baselines , resulting in 91 . 0 % joint accuracy . the proposed model achieved state - of - theart performance in both woz 2 . 0 and multiwoz datasets .",
        "generated_description": "we first evaluate the joint goal accuracy on the evaluation dataset of woz 2 . 0 corpus . for bert + rnn , our proposed model outperforms all the baselines , including the state - of - the - art model glad zhong et al . the proposed model also outperforms the two baselines in terms of the weighted accuracy , which indicates the effectiveness of our proposed method in utilizing the ontology information for improving the performance of slot - dependent and slot - independent slot classification ."
    },
    {
        "table_id": "424",
        "table_info": {
            "table_caption": "Table 2: Joint goal accuracy on the evaluation dataset of MultiWOZ corpus.",
            "table_column_names": [
                "Model",
                "Joint Accuracy"
            ],
            "table_content_values": [
                [
                    "Benchmark baseline",
                    "0.2583"
                ],
                [
                    "GLAD Zhong et al. ( 2018 )",
                    "0.3557"
                ],
                [
                    "GCE Nouri and Hosseini-Asl ( 2018 )",
                    "0.3558"
                ],
                [
                    "SUMBT",
                    "[BOLD] 0.4240 (±0.0187)"
                ]
            ]
        },
        "gold_description": "table 2 shows the experimental results of the slot - independent sumbt model on multiwoz corpus . the sumbt greatly surpassed the performances of previous approaches by yielding 42 . 4 % joint accuracy .",
        "generated_description": "the joint goal accuracy on the evaluation dataset of multiwoz corpus is reported in table 2 . we can see that sumbt outperforms the baseline model , glad zhong et al . , gce nouri and hosseini - asl , and the glad baseline by a large margin ."
    },
    {
        "table_id": "425",
        "table_info": {
            "table_caption": "Table 3: Transfer learning results for GLUE tasks. The source corpus is MNLI. Baseline accuracy is when Transfer BERT, Filler, and Role are all False, equivalent to no transfer. Fine-tuned accuracy is the best accuracy among all possible transfer options.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Target Corpus",
                "[BOLD] Transfer BERT",
                "[BOLD] Transfer Filler",
                "[BOLD] Transfer Role",
                "[BOLD] Baseline Acc. (%)",
                "[BOLD] Fine-tuned Acc. (%)",
                "[BOLD] Gain (%)"
            ],
            "table_content_values": [
                [
                    "BERT",
                    "QNLI",
                    "True",
                    "–",
                    "–",
                    "91.60",
                    "91.27",
                    "– 0.33"
                ],
                [
                    "BERT",
                    "QQP",
                    "True",
                    "–",
                    "–",
                    "91.45",
                    "91.12",
                    "– 0.33"
                ],
                [
                    "BERT",
                    "RTE",
                    "True",
                    "–",
                    "–",
                    "71.12",
                    "73.65",
                    "+ 2.53"
                ],
                [
                    "BERT",
                    "SNLI",
                    "True",
                    "–",
                    "–",
                    "90.45",
                    "90.69",
                    "+ 0.24"
                ],
                [
                    "BERT",
                    "SST",
                    "True",
                    "–",
                    "–",
                    "93.23",
                    "92.78",
                    "– 0.45"
                ],
                [
                    "HUBERT (Transformer)",
                    "QNLI",
                    "True",
                    "True",
                    "False",
                    "90.56",
                    "91.16",
                    "[BOLD] + 0.60"
                ],
                [
                    "HUBERT (Transformer)",
                    "QQP",
                    "False",
                    "False",
                    "True",
                    "90.81",
                    "91.42",
                    "[BOLD] + 0.61"
                ],
                [
                    "HUBERT (Transformer)",
                    "RTE",
                    "True",
                    "True",
                    "True",
                    "61.73",
                    "74.01",
                    "[BOLD] + 12.28"
                ],
                [
                    "HUBERT (Transformer)",
                    "SNLI",
                    "True",
                    "False",
                    "True",
                    "90.66",
                    "91.36",
                    "[BOLD] + 0.70"
                ],
                [
                    "HUBERT (Transformer)",
                    "SST",
                    "True",
                    "False",
                    "True",
                    "91.28",
                    "92.43",
                    "[BOLD] + 1.15"
                ]
            ]
        },
        "gold_description": "table 3 summarizes the results for these transfer learning experiments when the source task is mnli . gain shows the difference between fine - tuned model ' s accuracy and baseline ' s accuracy . for hubert ( transformer ) , we observe substantial gain across all 5 target corpora after transfer . however , for bert we have a drop for qnli , qqp , and sst .",
        "generated_description": "we find that fine - tuning bert on the qqp corpus results in a gain of 0 . 33 % in accuracy compared to using the qnli dataset as the source language . similarly , for the hubert ( transformer ) model , we see an improvement in accuracy by 0 . 6 % in the sst corpus and 0 . 5 % in snli ."
    },
    {
        "table_id": "426",
        "table_info": {
            "table_caption": "Table 4: Transfer learning results for GLUE tasks. The source corpus is QQP. Baseline accuracy is for when Transfer BERT, Filler, and Role are all False, which is equivalent to no transfer. Fine-tuned accuracy is the best accuracy among all possible transfer options.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Target Corpus",
                "[BOLD] Transfer BERT",
                "[BOLD] Transfer Filler",
                "[BOLD] Transfer Role",
                "[BOLD] Baseline Acc. (%)",
                "[BOLD] Fine-tuned Acc. (%)",
                "[BOLD] Gain (%)"
            ],
            "table_content_values": [
                [
                    "BERT",
                    "QNLI",
                    "True",
                    "–",
                    "–",
                    "91.60",
                    "90.96",
                    "– 0.64"
                ],
                [
                    "BERT",
                    "MNLI",
                    "True",
                    "–",
                    "–",
                    "84.15",
                    "84.41",
                    "+ 0.26"
                ],
                [
                    "BERT",
                    "RTE",
                    "True",
                    "–",
                    "–",
                    "71.12",
                    "62.45",
                    "– 8.67"
                ],
                [
                    "BERT",
                    "SNLI",
                    "True",
                    "–",
                    "–",
                    "90.45",
                    "90.88",
                    "+ 0.43"
                ],
                [
                    "BERT",
                    "SST",
                    "True",
                    "–",
                    "–",
                    "93.23",
                    "92.09",
                    "– 1.14"
                ],
                [
                    "HUBERT (Transformer)",
                    "QNLI",
                    "False",
                    "True",
                    "True",
                    "88.32",
                    "90.55",
                    "[BOLD] + 2.23"
                ],
                [
                    "HUBERT (Transformer)",
                    "MNLI",
                    "False",
                    "True",
                    "True",
                    "84.30",
                    "85.24",
                    "[BOLD] + 0.94"
                ],
                [
                    "HUBERT (Transformer)",
                    "RTE",
                    "False",
                    "True",
                    "False",
                    "61.73",
                    "65.70",
                    "[BOLD] + 3.97"
                ],
                [
                    "HUBERT (Transformer)",
                    "SNLI",
                    "False",
                    "False",
                    "True",
                    "90.63",
                    "91.20",
                    "[BOLD] + 0.57"
                ],
                [
                    "HUBERT (Transformer)",
                    "SST",
                    "True",
                    "True",
                    "True",
                    "86.12",
                    "91.06",
                    "[BOLD] + 4.94"
                ]
            ]
        },
        "gold_description": "again transferring roles gives positive results except for rte . filler vectors learned from qqp are more transferable compared to mnli and gives a boost to all tasks except for snli . surprisingly , transferring bert parameters is hurting the results now even when tpr is present .",
        "generated_description": "for bert , we find that fine - tuning the bert model on the snli training set results in an absolute gain of 2 . 23 % in accuracy compared to the baseline accuracy . for hubert ( transformer ) , we find a 1 . 14 % absolute gain in accuracy for the sst corpus . for the qnli and rte datasets , we do not find any significant difference in performance between using the fill - in task or not . for snli and sst , we see a small but consistent gain of 0 . 43 % and 0 . 14 % , respectively . we also find that for the wnli dataset , which is the smallest of the three datasets used for pretraining , the role classification task results in the largest gain ."
    },
    {
        "table_id": "427",
        "table_info": {
            "table_caption": "Table 5: Test set results for HUBERT (Transformer) and BERT. BERT accuracy indicates test results on target corpus (without transfer) for bert-base-uncased which are directly taken from the GLUE leaderboard. Fine-tuned accuracy are the test results for best performing HUBERT (Transformer) model on target dev set after transfer (see Tables 3 and 4).",
            "table_column_names": [
                "[BOLD] Source Corpus",
                "[BOLD] Target Corpus",
                "[BOLD] HUBERT Transfer BERT",
                "[BOLD] HUBERT Transfer Filler",
                "[BOLD] HUBERT Transfer Role",
                "[BOLD] BERT Acc. (%)",
                "[BOLD] HUBERT Acc. (%)"
            ],
            "table_content_values": [
                [
                    "MNLI",
                    "QNLI",
                    "True",
                    "True",
                    "False",
                    "[BOLD] 90.50",
                    "[BOLD] 90.50"
                ],
                [
                    "MNLI",
                    "QQP",
                    "False",
                    "False",
                    "True",
                    "89.20",
                    "[BOLD] 89.30"
                ],
                [
                    "MNLI",
                    "RTE",
                    "True",
                    "True",
                    "True",
                    "66.40",
                    "[BOLD] 69.30"
                ],
                [
                    "MNLI",
                    "SNLI",
                    "True",
                    "False",
                    "True",
                    "89.20",
                    "[BOLD] 90.35"
                ],
                [
                    "MNLI",
                    "SST",
                    "True",
                    "False",
                    "True",
                    "[BOLD] 93.50",
                    "92.60"
                ],
                [
                    "QQP",
                    "QNLI",
                    "False",
                    "True",
                    "True",
                    "90.50",
                    "[BOLD] 90.70"
                ],
                [
                    "QQP",
                    "MNLI",
                    "False",
                    "True",
                    "True",
                    "84.60",
                    "[BOLD] 84.70"
                ],
                [
                    "QQP",
                    "RTE",
                    "False",
                    "True",
                    "False",
                    "[BOLD] 66.40",
                    "63.20"
                ],
                [
                    "QQP",
                    "SNLI",
                    "False",
                    "False",
                    "True",
                    "89.20",
                    "[BOLD] 90.36"
                ],
                [
                    "QQP",
                    "SST",
                    "True",
                    "True",
                    "True",
                    "[BOLD] 93.50",
                    "91.00"
                ]
            ]
        },
        "gold_description": "we also verified that our tpr layer is not hurting the performance by comparing the test set results for hubert ( transformer ) and bert . the results are obtained by submitting models to the glue evaluation server . the results are presented in table 5 .",
        "generated_description": "in this section , we evaluate the transferability of hubert across different nli tasks . we use the mnli , qqp , and snli corpora as the source and target corpora , respectively . for each task , we train a bert devlin et al . model on the source corpus and fine - tune it on the target corpus . then , we transfer the model to the target domain using the fine - tuned bert model . we evaluate the performance of the transferred model using the fill - in task and the role classification task . we find that filling in consistently improves the performance in all cases , except for the sst dataset . we hypothesize that the reason is that sst is a small , medium - sized dataset with a large number of sentences , which makes it less suitable for filling in the gaps between the training and testing sets . we also find that using the squad dataset to fill in the holes in the training set hurts the performance ."
    },
    {
        "table_id": "428",
        "table_info": {
            "table_caption": "Table 1: Model performance results on the tasks of interest. Best values for each metric are bolded.",
            "table_column_names": [
                "Model",
                "Model",
                "Mortality AUPRC",
                "Mortality AUROC",
                "Primary CCS Top-1 Recall",
                "Primary CCS Top-5 Recall",
                "All ICD-9 AUPRC",
                "All ICD-9 AUROC, weighted"
            ],
            "table_content_values": [
                [
                    "No notes",
                    "-",
                    "0.449 (0.006)",
                    "0.869 (0.001)",
                    "0.526 (0.006)",
                    "0.796 (0.003)",
                    "0.305 (0.001)",
                    "0.873 (<0.001)"
                ],
                [
                    "Bag-of-words",
                    "Unigrams (notes only)",
                    "0.383 (0.004)",
                    "0.832 (0.003)",
                    "0.591 (0.004)",
                    "0.849 (0.002)",
                    "0.328 (0.002)",
                    "0.880 (0.001)"
                ],
                [
                    "[EMPTY]",
                    "Unigrams (all features)",
                    "[BOLD] 0.479 (0.008)",
                    "0.880 (0.001)",
                    "0.592 (0.003)",
                    "0.842 (0.003)",
                    "0.331 (0.001)",
                    "0.883 (0.001)"
                ],
                [
                    "[EMPTY]",
                    "Unigrams and bigrams (all features)",
                    "0.460 (0.005)",
                    "0.872 (0.002)",
                    "0.587 (0.008)",
                    "0.829 (0.005)",
                    "0.325 (0.002)",
                    "0.881 (<0.001)"
                ],
                [
                    "Hierarchical (without pretraining)",
                    "Notes only",
                    "0.351 (0.003)",
                    "0.825 (0.003)",
                    "0.606 (0.003)",
                    "0.850 (0.001)",
                    "0.345 (0.005)",
                    "0.887 (0.002)"
                ],
                [
                    "[EMPTY]",
                    "All features",
                    "0.471 (0.006)",
                    "0.876 (0.003)",
                    "0.591 (0.008)",
                    "0.833 (0.006)",
                    "0.301 (0.004)",
                    "0.868 (0.001)"
                ],
                [
                    "SHiP",
                    "Notes only",
                    "0.353 (0.005)",
                    "0.825 (0.004)",
                    "0.667 (0.006)",
                    "[BOLD] 0.897*† (0.003)",
                    "[BOLD] 0.352† (0.001)",
                    "[BOLD] 0.891† (0.001)"
                ],
                [
                    "[EMPTY]",
                    "All features",
                    "[BOLD] 0.479 (0.007)",
                    "[BOLD] 0.882 (0.001)",
                    "[BOLD] 0.671*† (0.004)",
                    "0.890 (0.001)",
                    "0.345 (0.005)",
                    "0.889 (0.002)"
                ]
            ]
        },
        "gold_description": "table 1 compares the performance of all model variants . the ship models significantly improved over the bow baselines on the two diagnosis tasks ( p < 0 . 001 under welch ' s t - test ) : for ccs prediction , the best ship models improved top - 1 recall by 7 . 9 percentage points and top - 5 recall by 4 . 8 percentage points , respectively , over the best bow models ; for icd - 9 prediction , area under the precision - recall curve ( auprc ) increased by 2 . 1 percentage points and weighted area under the roc curve ( auroc ) increased by 0 . 8 percentage points . for mortality prediction , we saw negligible benefit from the ship architecture . the ship models also improved over the corresponding hierarchical models without pretraining . for mortality , pretraining the all - features model increased auprc by 0 . 8 percentage points ( p = 0 . 06 ) and auroc by 0 . 6 percentage points ( p = 0 . 004 ) ; for primary ccs , pretraining the all - feature model increased top - 1 recall by 8 . 0 percentage points ( p < 0 . 001 ) , while pretraining the notes - only model increased top - 5 recall by 4 . 7 percentage points ( p < 0 . 001 ) ; for all icd - 9 , pretraining the notes - only model increased auprc by 0 . 7 percentage points ( p = 0 . 03 ) and weighted auroc by 0 . 4 percentage points ( p = 0 . 01 ) .",
        "generated_description": "we find that the bag - of - words and unigram models perform similarly to each other in terms of auprc and auroc on the primary ccs data , but not on the icd - 9 data . on the other hand , note that the bigram models outperform the unigrams by a large margin on the mortality data . we hypothesize that this is due to the fact that the notes in the mortality notes are more indicative of the clinical status of a patient than those in the medical notes , which makes it easier for the model to localize the correct medical concepts based on the notes ."
    },
    {
        "table_id": "429",
        "table_info": {
            "table_caption": "Table 1: The compression results including model efficiency and accuracy from the GLUE test server, and the MNLI result is evaluated for matched-accuracy (MNLI-m). BERT12 indicates the results of the fine-tuned BERT-base from Devlin et al. (2019) and BERT12-T indicates the results of the fine-tuned BERT-base in our implementation. The results of BERT-PKD are from Sun et al. (2019), the results of DistilBERT4 and TinyBERT4 are from Jiao et al. (2019), and the results of BiLSTMSOFT is from Tang et al. (2019). The number of model parameters includes the embedding size, and the inference time is tested with a batch size of 128 over 50,000 samples. The bold numbers and underlined numbers indicate the best and the second-best performance respectively.",
            "table_column_names": [
                "Method",
                "# Params",
                "Inference",
                "SST-2",
                "MRPC",
                "QQP",
                "MNLI",
                "QNLI",
                "RTE",
                "Average"
            ],
            "table_content_values": [
                [
                    "Method",
                    "# Params",
                    "Speedup",
                    "SST-2",
                    "MRPC",
                    "QQP",
                    "MNLI",
                    "QNLI",
                    "RTE",
                    "Average"
                ],
                [
                    "BERT12",
                    "109M",
                    "1x",
                    "93.5",
                    "88.9",
                    "71.2",
                    "84.6",
                    "90.5",
                    "66.4",
                    "82.5"
                ],
                [
                    "BERT12-T",
                    "109M",
                    "1x",
                    "93.3",
                    "88.7",
                    "71.1",
                    "84.8",
                    "90.4",
                    "66.1",
                    "82.4"
                ],
                [
                    "BERT6-PKD",
                    "67.0M",
                    "1.9x",
                    "92.0",
                    "85.0",
                    "70.7",
                    "81.5",
                    "[BOLD] 89.0",
                    "[BOLD] 65.5",
                    "[BOLD] 80.6"
                ],
                [
                    "BERT3-PKD",
                    "45.7M",
                    "3.7x",
                    "87.5",
                    "80.7",
                    "68.1",
                    "76.7",
                    "84.7",
                    "58.2",
                    "76.0"
                ],
                [
                    "DistilBERT4",
                    "52.2M",
                    "3.0x",
                    "91.4",
                    "82.4",
                    "68.5",
                    "78.9",
                    "85.2",
                    "54.1",
                    "76.8"
                ],
                [
                    "TinyBert4",
                    "14.5M",
                    "9.4x",
                    "[BOLD] 92.6",
                    "[BOLD] 86.4",
                    "[BOLD] 71.3",
                    "[BOLD] 82.5",
                    "87.7",
                    "62.9",
                    "[BOLD] 80.6"
                ],
                [
                    "BiLSTM [ITALIC] SOFT",
                    "10.1M",
                    "7.6x",
                    "90.7",
                    "-",
                    "68.2",
                    "73.0",
                    "-",
                    "-",
                    "-"
                ],
                [
                    "AdaBERT",
                    "[BOLD] 6.4M ∼ 9.5M",
                    "[BOLD] 12.7x ∼ 29.3x",
                    "91.8",
                    "85.1",
                    "70.7",
                    "81.6",
                    "86.8",
                    "64.4",
                    "80.1"
                ]
            ]
        },
        "gold_description": "the compression results on the six adopted datasets , including parameter size , inference speedup and classification accuracy , are summarized in table 1 . overall speaking , on all the evaluated datasets , the proposed adabert method achieves significant efficiency improvement while maintaining comparable performance . compared to the bert12 - t , the compressed models are 11 . 5x to 17 . 0x smaller in parameter size and 12 . 7x to 29 . 3x faster in inference speed with an average performance degradation of 2 . 79 % . comparing structureheterogeneous method , bilstmsof , adabert searches cnn - based models and achieves much another with better improvements , especially on the mnli dataset . comparing with different transformers - based compression baselines , the proposed adabert method is 1 . 35x to 3 . 12x faster than the fastest baseline , tinybert4 , and achieves comparable performance with the two baselines that have the best averaged accuracy , bert6 - pkd and tinybert4 .",
        "generated_description": "the results show that our proposed pkd - based pruning method ( bert6 - pkd ) consistently outperforms other pruning methods in terms of accuracy and speedup . for example , compared with bert12 - t , bert6 yields 1 . 9x speedup on sst - 2 , 3 . 7x speedups on mrpc and qqp , and 1 . 5x on qnli and rte . in addition , the accuracy of our method is comparable with the results of bert3 - pkd , which is the state - of - the - art method for fine - tuning large - scale pre - trained language models . the results indicate that our method can prune more parameters without hurting the performance ."
    },
    {
        "table_id": "430",
        "table_info": {
            "table_caption": "Table 3: Accuracy comparison on the dev sets with the searched compression structures applying to different tasks. For Random, 5-times averaging results with standard deviations are reported.",
            "table_column_names": [
                "StructureTask",
                "SST-2",
                "MRPC",
                "QQP",
                "MNLI",
                "QNLI",
                "RTE"
            ],
            "table_content_values": [
                [
                    "AdaBERT-SST-2",
                    "[BOLD] 91.9",
                    "78.1",
                    "58.6",
                    "64.0",
                    "74.1",
                    "53.8"
                ],
                [
                    "AdaBERT-MRPC",
                    "81.5",
                    "[BOLD] 84.7",
                    "68.9",
                    "75.9",
                    "82.2",
                    "60.3"
                ],
                [
                    "AdaBERT-QQP",
                    "81.9",
                    "84.1",
                    "[BOLD] 70.5",
                    "76.3",
                    "82.5",
                    "60.5"
                ],
                [
                    "AdaBERT-MNLI",
                    "82.1",
                    "81.5",
                    "66.8",
                    "[BOLD] 81.3",
                    "86.1",
                    "63.2"
                ],
                [
                    "AdaBERT-QNLI",
                    "81.6",
                    "82.3",
                    "67.7",
                    "79.2",
                    "[BOLD] 87.2",
                    "62.9"
                ],
                [
                    "AdaBERT-RTE",
                    "82.9",
                    "81.1",
                    "66.5",
                    "79.8",
                    "86.0",
                    "[BOLD] 64.1"
                ],
                [
                    "Random",
                    "80.4 ± 4.3",
                    "79.2 ± 2.8",
                    "61.8 ± 4.9",
                    "69.7 ± 6.7",
                    "78.2 ± 5.5",
                    "55.3 ± 4.1"
                ]
            ]
        },
        "gold_description": "the results of cross - task validation is summarized in table 3 . from table 3 , we can observe that : the searched structures achieve the best performance on their original target tasks compared with other tasks , in other words , the performance numbers along the diagonal line of this table are the best . further , the performance degradation is quite significant across different kinds of tasks ( for example , applying the searched structures of sentiment classification tasks to entailment recognition task , or vice verse ) , while the performance degradations within the same kind of tasks ( for example , mrpc and qqp for semantic equivalence classification ) are relatively small , since they have the same input format ( i . e . , a pair of sentences ) and similar targets . from the last row of table 3 , we can see that the randomly sampled structures perform worse than the searched structures and their performances are not stable .",
        "generated_description": "we find that adabert - sst - 2 , qqp , mnli , qnli , and rte outperform the random baseline by a large margin . we also find that the performance gain is larger for qqqp and mnli than for the other tasks . we hypothesize that this is due to the fact that these two tasks are more closely related to commonsense reasoning than semantic textual entailment , which is why they benefit more from structure - sensitive regularization ."
    },
    {
        "table_id": "431",
        "table_info": {
            "table_caption": "Table 5: The effect of efficiency loss term.",
            "table_column_names": [
                "[EMPTY]",
                "SST-2",
                "MRPC",
                "QNLI",
                "RTE"
            ],
            "table_content_values": [
                [
                    "[ITALIC] β = 0",
                    "91.8",
                    "84.5",
                    "87.1",
                    "63.9"
                ],
                [
                    "[ITALIC] β = 0",
                    "(7.5M)",
                    "(7.8M)",
                    "(8.3M)",
                    "(9.1M)"
                ],
                [
                    "[ITALIC] β = 4",
                    "[BOLD] 91.9",
                    "[BOLD] 84.7",
                    "[BOLD] 87.2",
                    "[BOLD] 64.1"
                ],
                [
                    "[ITALIC] β = 4",
                    "(6.4M)",
                    "(7.5M)",
                    "(7.9M)",
                    "(8.6M)"
                ],
                [
                    "[ITALIC] β = 8",
                    "91.3",
                    "84.2",
                    "86.4",
                    "63.3"
                ],
                [
                    "[ITALIC] β = 8",
                    "(5.3M)",
                    "(6.4M)",
                    "(7.1M)",
                    "(7.8M)"
                ]
            ]
        },
        "gold_description": "the model performance and corresponding model size are reported in table 5 . on the one hand , removing the efficiency - aware loss ( β = 0 ) leads to the increase in model parameter size , on the other hand , a more aggressive efficiency preference ( β = 8 ) results in the small model size but degraded performance , since a large β encourages the compressed model to adopt more lightweight operations such as zero and skip which hurt the performance . a moderate efficiency constraint ( β = 4 ) provides a regularization , guiding the adabert method to achieve a trade - off between the small parameter size and the good performance .",
        "generated_description": "effect of the efficiency loss term . we investigate the effect of the efficiency loss term β in eq . when β = 0 , the model degenerates to bert . as β increases , the performance of the model degrades on all the tasks , which indicates that the model is not able to efficiently learn the task - specific parameters . the optimal setting of β is { 0 , 0 . 5 , 4 , 8 } for sst - 2 , mrpc , qnli , and rte , respectively . we can see that the optimal value of β depends on the dataset . for example , when β = 4 , the accuracy on sst - 2 drops from 91 . 9 % to 84 . 7 % when β is set to 0 , and the accuracy drops from 84 . 5 % to 87 . 2 % when we set β to 0 . the results indicate that the efficiency term plays an important role in bert ’ s performance gain ."
    },
    {
        "table_id": "432",
        "table_info": {
            "table_caption": "Table 4: The effect of knowledge loss terms.",
            "table_column_names": [
                "[EMPTY]",
                "SST-2",
                "MRPC",
                "QNLI",
                "RTE"
            ],
            "table_content_values": [
                [
                    "Base-KD",
                    "86.6",
                    "77.2",
                    "82.0",
                    "56.7"
                ],
                [
                    "+ Probe",
                    "88.4",
                    "78.7",
                    "83.3",
                    "58.1"
                ],
                [
                    "+ DA",
                    "91.4",
                    "83.9",
                    "86.5",
                    "63.2"
                ],
                [
                    "+ L [ITALIC] CE (All)",
                    "91.9",
                    "84.7",
                    "87.2",
                    "64.1"
                ]
            ]
        },
        "gold_description": "the base - kd is a naive knowledge distillation version in which only the logits of the last layer are distilled without considering hidden layer knowledge and supervised label knowledge . by incorporating the probe models , the performance ( line 2 in table 4 ) is consistently improved , indicating the benefits from hierarchically decomposed taskoriented knowledge . we then leverage data augmentation ( da ) to enrich task - oriented knowledge and this technique also improves performance for all tasks , especially for tasks that have a limited scale of data ( i . e . , mrpc and rte ) . da is also adopted in existing kd - based compression studies ( tang et al . , 2019 ; jiao et al . , 2019 ) . when taking the supervised label knowledge ( lce ) into consideration , the performance is further boosted , showing that this term is also important for adabert by providing focused search hints .",
        "generated_description": "sst - 2 , mrpc , qnli , and rte . from the table , we can see that : ( 1 ) adding da and lce consistently improves the performance on all the tasks , which demonstrates the effectiveness of these two knowledge loss terms . ( 2 ) adding probe helps to improve the performance of all tasks , especially on the rte task , which shows the importance of semantic probe . ( 3 ) adding all the knowledge losses ( i . e . , lce ( all ) ) leads to the best performance , which indicates that all knowledge losses are beneficial for our framework ."
    },
    {
        "table_id": "433",
        "table_info": {
            "table_caption": "Table 1: Sentiment prediction results on CMU-MOSI. SOTA1, SOTA2 and SOTA3 refer to the previous best, second best and third best state of the art models respectively. Best results are highlighted in bold and ΔSOTA represents the change in performance of M-BERT model over SOTA1. Our model significantly outperforms the current SOTA across all evaluation metrics.",
            "table_column_names": [
                "Task Metric",
                "BA↑",
                "F1↑",
                "MAE↓",
                "Corr↑"
            ],
            "table_content_values": [
                [
                    "SOTA3",
                    "77.1",
                    "77.0",
                    "0.968",
                    "0.625"
                ],
                [
                    "SOTA2",
                    "77.4",
                    "77.3",
                    "0.965",
                    "0.632"
                ],
                [
                    "SOTA1",
                    "78.4",
                    "78.0",
                    "0.922",
                    "0.681"
                ],
                [
                    "BERT",
                    "83.36",
                    "85.53",
                    "0.736",
                    "0.777"
                ],
                [
                    "M-BERT",
                    "[BOLD] 84.38",
                    "[BOLD] 86.34",
                    "[BOLD] 0.732",
                    "[BOLD] 0.790"
                ],
                [
                    "Δ [ITALIC] SOTA",
                    "↑  [BOLD] 5.98",
                    "↑  [BOLD] 8.34",
                    "↓  [BOLD] 0.19",
                    "↑ [BOLD] 0.11"
                ]
            ]
        },
        "gold_description": "our proposed approach sets a new state of the art of 84 . 38 % binary accuracy on cmu - mosi dataset of multimodal sentiment analysis ; a significant leap from previous state of we compare the performance of m - bert with the following models on the multimodal sentiment analysis task : rmfn ( sota1 ) 1 fuses multimodal information in multiple stages by focusing on a subset of signals in each stage ( liang et al . , 2018 ) . mfn ( sota2 ) synchronizes states of three separate lstms with a multi - view gated memory ( zadeh et al . , 2018a ) . marn ( sota3 ) models view - specific interactions using hybrid lstm memories and cross - modal interactions using a multi - attention block ( mab ) ( zadeh et al . , 2018c ) . we perform two different evaluation tasks on cmu - mosi datset : i ) binary classification , and ii ) regression . we formulate it as a regression problem and report mean - absolute error ( mae ) and the correlation of model predictions with true labels . besides , we convert the regression outputs into categorical values to obtain binary classification accuracy ( ba ) and f1 score . the performances of m - bert and bert are described in table 1 . m - bert model outperforms all the baseline models ( described in sec . 4 . 4 ) on every evaluation metrics with large margin . it sets new state - of - the - art performance for this task and achieves 84 . 38 % accuracy , a 5 . 98 % increase with respect to the sota1 and 1 . 02 % increase with respect to bert ( text - only ) . even bert ( text - only ) model achieves 83 . 36 % accuracy , an increase of 4 . 96 % from the sota1",
        "generated_description": "our model significantly outperforms the current sota across all evaluation metrics . sota1 , sota2 and sota3 refer to the previous best , second best and third best state of the art models respectively . m - bert outperforms bert by 5 . 98 % , 8 . 34 % and 0 . 19 % in ba , f1 , mae and corr , respectively ."
    },
    {
        "table_id": "434",
        "table_info": {
            "table_caption": "Table 1: Inference times in ms",
            "table_column_names": [
                "[BOLD] Length of sentence",
                "[BOLD] Attention",
                "[BOLD] Gaussian Mask only",
                "[BOLD] Gaussian Mask + RL model"
            ],
            "table_content_values": [
                [
                    "4-7",
                    "1.46",
                    "1.13",
                    "1.33"
                ],
                [
                    "8-11",
                    "2.32",
                    "1.96",
                    "2.12"
                ],
                [
                    "12-15",
                    "2.86",
                    "2.43",
                    "2.61"
                ]
            ]
        },
        "gold_description": "we find the inference times are lower in the former case with negligible difference in bleu scores . the inference times are of the various models are mentioned in table 1 .",
        "generated_description": "the inference time is measured in milliseconds ( ms ) for a single nvidia geforce gtx 1080ti gpu . for the gaussian mask only baseline , we report the inference times for a model trained on the training set only . the results show that the rl model significantly outperforms the standard attention model for short sentences ( i . e . , 4 - 7 words ) , while the difference for longer sentences is marginal ."
    },
    {
        "table_id": "435",
        "table_info": {
            "table_caption": "Table 3: Number of images after which the ME Score falls below threshold.",
            "table_column_names": [
                "[BOLD] Score",
                "Omniglot",
                "Omniglot Classifier",
                "Imagenet",
                "Imagenet Classifier"
            ],
            "table_content_values": [
                [
                    "0.2",
                    "24,304",
                    "2,144",
                    "1,280",
                    "2,048"
                ],
                [
                    "0.1",
                    "99,248",
                    "22,912",
                    "8,448",
                    "3,072"
                ],
                [
                    "0.05",
                    "160,608",
                    "43,328",
                    "111,872",
                    "8,960"
                ]
            ]
        },
        "gold_description": "the results are summarized in figure 6 and table 3 . the probability that a new image belongs to an unseen class p ( n | t ) is higher than the me score of the classifier through most of the learning phase . comparing the statistics of the datasets to the inductive biases in the classifiers , the me score for the classifiers is substantially lower than the baseline me measure in the dataset , p ( n | t ) ( table 3 ) . for instance , the imagenet classifier drops its me score below 0 . 05 after about 8 , 960 images , while the approximate me measure for the dataset shows that new classes are encountered at above this rate until at least 111 , 000 images .",
        "generated_description": "the me score ranges from 0 . 1 to 0 . 05 . the threshold for the imagenet classifier is 0 . 2 , whereas for the omniglot dataset the me score is higher for the classifier . these results show that the me score for a larger number of images falls below the threshold for both datasets ."
    },
    {
        "table_id": "436",
        "table_info": {
            "table_caption": "TABLE IV: Success rate (in %) and number of replacements for different methods. NOR represents the mean/median of the normalized Number Of Replacements across all the sentences. The highest Success rate is marked in bold.",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] Method",
                "[BOLD] en-de  [BOLD] Success Rate",
                "[BOLD] en-de  [BOLD] NOR",
                "[BOLD] en-fr  [BOLD] Success Rate",
                "[BOLD] en-fr  [BOLD] NOR"
            ],
            "table_content_values": [
                [
                    "BLSTM",
                    "random + HotFlip",
                    "25.4%",
                    "0.23, 0.21",
                    "28.2%",
                    "0.21, 0.18"
                ],
                [
                    "BLSTM",
                    "Min-Grad + HotFlip",
                    "31.8%",
                    "0.22, 0.19",
                    "40.2%",
                    "0.19, 0.17"
                ],
                [
                    "BLSTM",
                    "random + Soft-Att",
                    "61.2%",
                    "0.58, 0.62",
                    "64.6%",
                    "0.62, 0.67"
                ],
                [
                    "BLSTM",
                    "Min-Grad + Soft-Att",
                    "[BOLD] 67.8%",
                    "0.58, 0.61",
                    "[BOLD] 70.8%",
                    "0.61, 0.66"
                ],
                [
                    "Transformer",
                    "random + HotFlip",
                    "35.0%",
                    "0.26, 0.24",
                    "40.6%",
                    "0.24, 0.21"
                ],
                [
                    "Transformer",
                    "Min-Grad + HotFlip",
                    "45.0%",
                    "0.26, 0.24",
                    "44.0%",
                    "0.23, 0.21"
                ],
                [
                    "Transformer",
                    "random + Soft-Att",
                    "50.2%",
                    "0.40, 0.39",
                    "59.0%",
                    "0.37, 0.35"
                ],
                [
                    "Transformer",
                    "Min-Grad + Soft-Att",
                    "[BOLD] 61.6%",
                    "0.41, 0.42",
                    "[BOLD] 64.8%",
                    "0.36, 0.34"
                ]
            ]
        },
        "gold_description": "table iv shows the success rate and the mean , median of the number of replacements ( normalized by the length of original sentence ) for different methods . as we can see from table iv , for both hotflip and soft - att , min - grad method gives significant improvement in success rate in comparison with random baseline across all the nmt models . the number of replacement for min - grad is comparable with random . table iv shows that transformer is more robust to our proposed method than blstm . this is because our proposed method has less number of replacements and lower success rate in case of transformer than blstm for both the language pairs . interestingly , hotflip has higher success rate and similar number of replacement in case for transformer than blstm . overall , as is evident from table iv , our proposed method ( min - grad + soft - att ) achieves the highest success rate across the nmt models . from table iv , across all the nmt models , we can see that soft - att significantly outperforms hotflip both in terms of success rate and number of replacements .",
        "generated_description": "we can see that both min - grad and hotflip achieve significantly better performance than the random baselines . for both blstm and transformer , the success rate is significantly higher for the non - nor task than for the nor task , and the differences are statistically significant ( p < 0 . 01 ) ."
    },
    {
        "table_id": "437",
        "table_info": {
            "table_caption": "TABLE V: BLEU scores for the original/adversarial sentence (src) and their respective translation by the four NMT models. l1 denotes the model under attack, l2 denotes the other Transformer model. lblstm1,lblstm2 are the BLSTM counterparts of l1 and l2.",
            "table_column_names": [
                "[BOLD] Transformer",
                "[BOLD] Method",
                "src",
                "[ITALIC] l1",
                "[ITALIC] l2",
                "[ITALIC] lblstm1",
                "[ITALIC] lblstm2"
            ],
            "table_content_values": [
                [
                    "[BOLD] en-de",
                    "random + HotFlip",
                    "51.04",
                    "80.49",
                    "47.53",
                    "36.42",
                    "43.66"
                ],
                [
                    "[BOLD] en-de",
                    "Min-Grad + HotFlip",
                    "53.23",
                    "83.13",
                    "49.15",
                    "36.51",
                    "44.76"
                ],
                [
                    "[BOLD] en-de",
                    "random + Soft-Att",
                    "32.01",
                    "84.79",
                    "[BOLD] 29.72",
                    "[BOLD] 20.62",
                    "27.85"
                ],
                [
                    "[BOLD] en-de",
                    "Min-Grad + Soft-Att",
                    "[BOLD] 31.17",
                    "[BOLD] 88.55",
                    "31.09",
                    "20.63",
                    "[BOLD] 27.43"
                ],
                [
                    "[BOLD] en-fr",
                    "random + HotFlip",
                    "55.51",
                    "85.18",
                    "40.35",
                    "52.00",
                    "36.18"
                ],
                [
                    "[BOLD] en-fr",
                    "Min-Grad + HotFlip",
                    "57.92",
                    "88.40",
                    "41.98",
                    "54.39",
                    "37.68"
                ],
                [
                    "[BOLD] en-fr",
                    "random + Soft-Att",
                    "[BOLD] 33.61",
                    "89.77",
                    "[BOLD] 21.59",
                    "[BOLD] 32.37",
                    "[BOLD] 19.09"
                ],
                [
                    "[BOLD] en-fr",
                    "Min-Grad + Soft-Att",
                    "35.40",
                    "[BOLD] 91.99",
                    "23.28",
                    "34.32",
                    "20.29"
                ]
            ]
        },
        "gold_description": "1 2 , lblstm table v shows the bleu scores for the original / adversarial sentence ( src ) and their respective translation by the four nmt models . in table v , l1 denotes the transformer model under attack ( e . g . en - de ) , l2 denotes the other transformer model ( e . g . en - fr ) , and lblstm are the blstm counterparts of l1 and l2 .",
        "generated_description": "min - grad with hotflip outperforms the random baselines by a large margin in l1 , l2 , and lblstm1 , and is comparable to random with soft - att in lblstm2 . this shows that our method is able to benefit from the use of the attention mechanism to better capture the semantic information in the word embeddings ."
    },
    {
        "table_id": "438",
        "table_info": {
            "table_caption": "TABLE VI: BLEU scores for the original/adversarial sentence (src) and their respective translation by the four NMT models. l1 denotes the model under attack, l2 denotes the other BLSTM model. ltrans1,ltrans2 are the Transformer counterparts of l1 and l2.",
            "table_column_names": [
                "[BOLD] BLSTM",
                "[BOLD] Method",
                "src",
                "[ITALIC] l1",
                "[ITALIC] l2",
                "[ITALIC] ltrans1",
                "[ITALIC] ltrans2"
            ],
            "table_content_values": [
                [
                    "[BOLD] en-de",
                    "random + HotFlip",
                    "57.09",
                    "71.35",
                    "48.84",
                    "43.90",
                    "49.42"
                ],
                [
                    "[BOLD] en-de",
                    "Min-Grad + HotFlip",
                    "59.28",
                    "75.55",
                    "50.38",
                    "45.96",
                    "52.26"
                ],
                [
                    "[BOLD] en-de",
                    "random + Soft-Att",
                    "[BOLD] 13.77",
                    "87.14",
                    "[BOLD] 19.20",
                    "[BOLD] 18.36",
                    "[BOLD] 21.62"
                ],
                [
                    "[BOLD] en-de",
                    "Min-Grad + Soft-Att",
                    "14.49",
                    "[BOLD] 89.86",
                    "19.74",
                    "18.51",
                    "21.98"
                ],
                [
                    "[BOLD] en-fr",
                    "random + HotFlip",
                    "60.87",
                    "79.62",
                    "39.28",
                    "58.60",
                    "41.73"
                ],
                [
                    "[BOLD] en-fr",
                    "Min-Grad + HotFlip",
                    "63.97",
                    "84.87",
                    "41.16",
                    "61.80",
                    "44.94"
                ],
                [
                    "[BOLD] en-fr",
                    "random + Soft-Att",
                    "12.99",
                    "92.44",
                    "10.62",
                    "28.34",
                    "12.12"
                ],
                [
                    "[BOLD] en-fr",
                    "Min-Grad + Soft-Att",
                    "[BOLD] 12.66",
                    "[BOLD] 93.87",
                    "[BOLD] 9.95",
                    "[BOLD] 27.21",
                    "[BOLD] 11.92"
                ]
            ]
        },
        "gold_description": "table vi shows the bleu scores for the original / adversarial sentence ( src ) and their respective translation by the four nmt models . in table vi , l1 denotes the blstm model under attack , l2 denotes the other blstm model , and ltrans are the transformer counterparts of l1 and l2 . , ltrans 1 2",
        "generated_description": "we can see that the min - grad method consistently outperforms the random baselines in all cases . this shows that our method is able to learn better representations with the help of the soft - att attention mechanism ."
    },
    {
        "table_id": "439",
        "table_info": {
            "table_caption": "Table 2: SacreBleu degradation as a function of the proportion of bitext data that is noised.",
            "table_column_names": [
                "% noised",
                "SacreBleu Newstest ’12",
                "SacreBleu Newstest ’17"
            ],
            "table_content_values": [
                [
                    "0%",
                    "22.4",
                    "28.1"
                ],
                [
                    "20%",
                    "22.4",
                    "27.9"
                ],
                [
                    "80%",
                    "21.5",
                    "27.0"
                ],
                [
                    "100%",
                    "21.2",
                    "25.6"
                ]
            ]
        },
        "gold_description": "we first show that noising ende bitext sources does not seriously impact the translation quality of the transformer - base baseline . table 2 shows results for various values of p . specifically , it presents the somewhat unexpected finding that even when noising 100 % of the source bitext ( so the model has never seen wellformed english ) , bleu on well - formed test data only drops by 2 . 5 .",
        "generated_description": "we observe that as the amount of bitext data that is noised increases , the degradation in translation quality decreases . however , we do not observe a consistent degradation as we move from 0 % to 100 % noised data . we hypothesize that this is due to the fact that the more data we have to deal with , the more difficult it is for the model to learn the correct distribution of word order ."
    },
    {
        "table_id": "440",
        "table_info": {
            "table_caption": "Table 4: Comparing SacreBleu scores for different flavors of BT for WMT16 EnRo. Previous works’ scores are reported in italics as they use detok.multi-bleu instead of SacreBleu, so are not guaranteed to be comparable. In this case, however, we do see identical Bleu on our systems when we score them with detok.multi-bleu, so we believe it to be a fair comparison.",
            "table_column_names": [
                "a. Forward models (EnRo) Model",
                "a. Forward models (EnRo) dev",
                "a. Forward models (EnRo) test"
            ],
            "table_content_values": [
                [
                    "Gehring et al. ( 2017 )",
                    "[EMPTY]",
                    "[ITALIC] 29.9"
                ],
                [
                    "Sennrich 2016 (BT)",
                    "[ITALIC] 29.3",
                    "[ITALIC] 28.1"
                ],
                [
                    "bitext",
                    "26.5",
                    "28.3"
                ],
                [
                    "BT",
                    "31.6",
                    "32.6"
                ],
                [
                    "NoisedBT",
                    "29.9",
                    "32.0"
                ],
                [
                    "TaggedBT",
                    "30.5",
                    "33.0"
                ],
                [
                    "It.-3 BT",
                    "31.3",
                    "32.8"
                ],
                [
                    "It.-3 NoisedBT",
                    "31.2",
                    "32.6"
                ],
                [
                    "It.-3 TaggedBT",
                    "31.4",
                    "[BOLD] 33.4"
                ],
                [
                    "b. Reverse models (RoEn)",
                    "b. Reverse models (RoEn)",
                    "b. Reverse models (RoEn)"
                ],
                [
                    "Model",
                    "dev",
                    "test"
                ],
                [
                    "bitext",
                    "32.9",
                    "31.9"
                ],
                [
                    "It.-2 BT",
                    "39.5",
                    "[BOLD] 37.3"
                ]
            ]
        },
        "gold_description": "we repeat these experiments for wmt enro ( table 4 ) . in this case , noisedbt is actually harmful , lagging standard bt by - 0 . 6 bleu . taggedbt closes this gap and passes standard bt by + 0 . 4 bleu , for a total gain of + 1 . 0 bleu over noisedbt . we further investigate the effects of taggedbt by performing one round of iterative backtranslation ( cotterell and kreutzer , 2018 ; vu cong duy hoang and cohn , 2018 ; niu et al . , 2018 ) , and find another difference between the different varieties of bt : noisedbt and taggedbt allow the model to bootstrap improvements from an improved reverse model , whereas standard bt does not . sacrebleu scores for all these models are displayed in table 4 . we find that the iteration - 3 bt models improve over their iteration - 1 counterparts only for noisedbt ( + 1 . 0 bleu , dev + test avg ) and taggedbt ( + 0 . 7 bleu , dev + test avg ) , whereas the iteration - 3 bt model shows no improvement over its iteration - 1 counterpart ( - 0 . 1 bleu , dev + test avg ) . iteration - 3 taggedbt ( table 4 ) , our best bleu score of 33 . 4 bleu , obtained using iterative taggedbt , shows a gain of + 3 . 5 bleu over the highest previously published result on this test - set that we are aware of . we furthermore match or out - perform the highest published results we are aware of on wmt ende that use only back - translation , with higher or equal bleu on five of seven test sets .",
        "generated_description": "for the wmt16 enro task , we use the same architecture as in sennrich et al . the forward model is a bidirectional model trained on the source side of the parallel data , while the backward model is an ensemble of the same forward model and the same backward model . for the reverse model , we only use the forward model as the decoder , and the encoder and decoder are the same as the forward models . we observe that both bt and tagged bt improve over the bitext baseline by a large margin . the it . - 3 bt model improves over the bt baseline by 0 . 8 sacrebleu points on the test set . we also observe that the it . - 2 bt model performs the best among the three flavors of bt ."
    },
    {
        "table_id": "441",
        "table_info": {
            "table_caption": "Table 5: Results on WMT15 EnFr, with bitext, BT, NoisedBT, and TaggedBT.",
            "table_column_names": [
                "Model",
                "Avg",
                "2008",
                "2009",
                "2010",
                "2011",
                "2012",
                "2013",
                "2014",
                "2015"
            ],
            "table_content_values": [
                [
                    "Bitext",
                    "32.8",
                    "26.3",
                    "28.8",
                    "32.0",
                    "32.9",
                    "30.1",
                    "33.5",
                    "40.6",
                    "38.4"
                ],
                [
                    "BT",
                    "29.2",
                    "22.2",
                    "27.3",
                    "28.8",
                    "29.3",
                    "27.9",
                    "30.7",
                    "32.6",
                    "34.8"
                ],
                [
                    "NoisedBT",
                    "33.8",
                    "26.8",
                    "29.9",
                    "33.4",
                    "[BOLD] 33.9",
                    "[BOLD] 31.3",
                    "34.3",
                    "42.3",
                    "38.8"
                ],
                [
                    "TaggedBT",
                    "[BOLD] 34.1",
                    "[BOLD] 27.0",
                    "[BOLD] 30.0",
                    "[BOLD] 33.6",
                    "[BOLD] 33.9",
                    "31.2",
                    "[BOLD] 34.4",
                    "[BOLD] 42.7",
                    "[BOLD] 39.8"
                ]
            ]
        },
        "gold_description": "we performed a minimal set of experiments on wmt enfr , which are summarized in table 5 . in this case , we see that bt alone hurts performance compared to the strong bitext baseline , but noisedbt indeed surpasses the bitext model . it is worth noting that our numbers are lower than those reported by edunov et al . ( 2018 ) on the years they report ( 36 . 1 , 43 . 8 , and 40 . 9 on 2013 , 2014 , and 2015 respectively ) . on wmt16 enro , taggedbt improves on vanilla bt by 0 . 4 bleu .",
        "generated_description": "we see that bt and noisedbt both perform worse than bitext , and taggedbt achieves the best average bleu score across all time steps , with an average gain of + 0 . 8 bleus over bt ."
    },
    {
        "table_id": "442",
        "table_info": {
            "table_caption": "Table 6: Attention sink ratio on the first and last token and entropy (at decoder layer 5) for the models in Table 3.a, averaged over all sentences in newstest14. For ASR, data is treated as if it were BT (noised and/or tagged, resp.), whereas for entropy the natural text is used. Outliers discussed in the text are bolded.",
            "table_column_names": [
                "Model",
                "ASR0",
                "ASR| [ITALIC] x|",
                "~H"
            ],
            "table_content_values": [
                [
                    "Bitext baseline",
                    "0.31",
                    "10.21",
                    "0.504"
                ],
                [
                    "BT",
                    "0.28",
                    "10.98",
                    "[BOLD] 0.455"
                ],
                [
                    "P3BT",
                    "0.37",
                    "7.66",
                    "0.558"
                ],
                [
                    "NoisedBT",
                    "1.01",
                    "3.96",
                    "0.619"
                ],
                [
                    "TaggedBT",
                    "[BOLD] 5.31",
                    "5.31",
                    "0.597"
                ],
                [
                    "TaggedNoisedBT",
                    "[BOLD] 7.33",
                    "7.33",
                    "0.491"
                ]
            ]
        },
        "gold_description": "to understand how the model treats the tag and what biases it learns from the data , we investigate the entropy of the attention probability distribution , as well as the attention captured by the tag . for the tagged variants , there is heavy attention on the tag when it is present ( table 6 ) , indicating that the model relies on the information signalled by the tag . table 6 reports the average length - normalized shannon entropy : the entropy of the attention probabilities from the model trained on bt data is the clear outlier .",
        "generated_description": "for asr , we treat the data treated as if it were bt ( noised and / or tagged , resp . ) , whereas for entropy the natural text is used for both bt and noisedbt . we see that bt and p3bt both outperform the bitext baseline , with bt having the largest attention sink ratio ( 0 . 28 vs . 0 . 31 for asr0 and 0 . 28 for bt | x | ) . this is consistent with our hypothesis that bt is better at paying attention to the beginning of the sentence than to the end , as indicated by the higher ~ h . note that for bt , the attention sink is much higher for ~ h than for the baseline , indicating that the model is paying attention more to the ends of the sentences ."
    },
    {
        "table_id": "443",
        "table_info": {
            "table_caption": "Table 7: Comparing standard decoding with decoding as if the input were back-translated data, meaning that it is tagged (for the TaggedBT model) or noised (for the NoisedBT model) .",
            "table_column_names": [
                "Model",
                "Decode type",
                "AVG 13-17",
                "2010",
                "2011",
                "2012",
                "2013",
                "2014",
                "2015",
                "2016",
                "2017"
            ],
            "table_content_values": [
                [
                    "TaggedBT",
                    "standard",
                    "[BOLD] 33.24",
                    "26.5",
                    "[BOLD] 24.2",
                    "[BOLD] 25.2",
                    "[BOLD] 28.7",
                    "[BOLD] 32.8",
                    "[BOLD] 34.5",
                    "[BOLD] 38.1",
                    "[BOLD] 32.4"
                ],
                [
                    "[EMPTY]",
                    "as BT (tagged)",
                    "30.30",
                    "24.3",
                    "22.2",
                    "23.4",
                    "26.6",
                    "30.0",
                    "30.5",
                    "34.2",
                    "30.2"
                ],
                [
                    "NoisedBT",
                    "standard",
                    "33.06",
                    "[BOLD] 26.7",
                    "24.0",
                    "[BOLD] 25.2",
                    "28.6",
                    "32.6",
                    "33.9",
                    "38.0",
                    "32.2"
                ],
                [
                    "[EMPTY]",
                    "as BT (noised)",
                    "10.66",
                    "8.1",
                    "6.5",
                    "7.5",
                    "8.2",
                    "11.1",
                    "10.0",
                    "12.7",
                    "11.3"
                ]
            ]
        },
        "gold_description": "the bleu scores of each decoding method are presented in table 7 . the noised decode – decoding newstest sentences with the noisedbt model after noising the source – yields poor performance . the tagged decode , however , yields only somewhat lower performance than the standard decode on the same model ( - 2 . 9bleu on average ) .",
        "generated_description": "in this section , we compare the performance of our proposed tagging and back - translation models with the baseline transformer model using standard decoding . we report the average bleu scores over the last 5 years ’ development data , averaged over the first 13 - 17 years of our corpus . we find that the standard decoding model outperforms the tagging model by a significant margin across all the years , with an average gain of 1 . 5 - 2 . 0 for tagged bt and 1 . 0 - 1 . 5 bleus for back - translated bt . we note that the gain from the tagging approach is more significant for longer time steps than for shorter ones . we believe that this is due to the fact that the amount of training data available for the long term dependencies in our corpus is much smaller than that available for short term dependencies ."
    },
    {
        "table_id": "444",
        "table_info": {
            "table_caption": "Table 9: Source-target overlap for both back-translated data with decoding newstest as if it were bitext or BT data. Model decodes are averaged over newstest2010-newstest2017.",
            "table_column_names": [
                "Data",
                "src-tgt unigram overlap"
            ],
            "table_content_values": [
                [
                    "TaggedBT (standard decode)",
                    "8.9%"
                ],
                [
                    "TaggedBT (tagged decode)",
                    "10.7%"
                ],
                [
                    "Bitext",
                    "5.9%"
                ],
                [
                    "BT Data",
                    "11.4 %"
                ]
            ]
        },
        "gold_description": "we quantify the copy rate with the unigram overlap between source and target as a percentage of tokens in the target side , and compare those statistics to the bitext and the back - translated data ( table 9 ) .",
        "generated_description": "source - target overlap is defined as the ratio of unigram overlap between the src - tgt and target unigrams in the target sentence . we can see that there is very little difference between the two methods of encoding and decoding newstest as if it were bitext or bt data . however , there is a much larger difference in the case of back - translated bt data than if it was bitext . this suggests that bt data is more similar to bitext than it is to text in general ."
    },
    {
        "table_id": "445",
        "table_info": {
            "table_caption": "TABLE I: Document distribution over the classes of the Reuters-8",
            "table_column_names": [
                "Class",
                "Number of samples"
            ],
            "table_content_values": [
                [
                    "acq",
                    "2292"
                ],
                [
                    "crude",
                    "374"
                ],
                [
                    "earn",
                    "3923"
                ],
                [
                    "grain",
                    "51"
                ],
                [
                    "interest",
                    "271"
                ],
                [
                    "money-fx",
                    "293"
                ],
                [
                    "ship",
                    "144"
                ],
                [
                    "trade",
                    "326"
                ]
            ]
        },
        "gold_description": "we used the reuters - 8 dataset without stop words from aiming at single - label classification , which is a preprocessed format of the reuters - 215782 . words in the texts were considered as they appeared , without performing stemming or typo correction . this database has eight different classes with the number of samples varying from 51 to over 3000 documents , as can be seen in table i .",
        "generated_description": "the reuters - 8 dataset is a collection of 8 newswire documents from the international financial centres ( ifc ) shared task . the documents are divided into eight classes : acq , crude , earn , grain , interest , money - fx , ship , trade , and trade . each document is divided into a training set and a test set . the training set is composed of 80 % of the documents and the test set is the remaining 20 % . the documents were randomly divided into 80 % for training and 20 % for testing . the document distribution over the classes is shown in table ."
    },
    {
        "table_id": "446",
        "table_info": {
            "table_caption": "TABLE II: Results for the text classification experiment on Reuters-8 database",
            "table_column_names": [
                "Method",
                "Feature",
                "Accuracy (%)",
                "Std. Deviation"
            ],
            "table_content_values": [
                [
                    "SA",
                    "w2v",
                    "78.73",
                    "1.56"
                ],
                [
                    "MSM",
                    "w2v",
                    "[BOLD] 90.62",
                    "0.42"
                ],
                [
                    "TF-MSM",
                    "w2v",
                    "[BOLD] 92.01",
                    "0.30"
                ],
                [
                    "MVB",
                    "binBOW",
                    "62.70",
                    "0.69"
                ],
                [
                    "MNB",
                    "tfBOW",
                    "[BOLD] 91.47",
                    "0.37"
                ],
                [
                    "LSA",
                    "w2v",
                    "34.58",
                    "0.40"
                ],
                [
                    "LSA",
                    "binBOW",
                    "86.92",
                    "0.74"
                ],
                [
                    "LSA",
                    "tfBOW",
                    "86.23",
                    "0.96"
                ],
                [
                    "LSA",
                    "tfidfBOW",
                    "86.35",
                    "1.03"
                ],
                [
                    "SVM",
                    "w2v",
                    "26.61",
                    "0.30"
                ],
                [
                    "SVM",
                    "binBOW",
                    "89.23",
                    "0.24"
                ],
                [
                    "SVM",
                    "tfBOW",
                    "89.10",
                    "0.29"
                ],
                [
                    "SVM",
                    "tfidfBOW",
                    "88.78",
                    "0.40"
                ]
            ]
        },
        "gold_description": "in this experiment , we performed text classification among the classes in the reuters - 8 database . the results can be seen in table ii . the simplest baseline , sa with w2v , achieved an accuracy rate of 78 . 73 % . this lsa with bow features was almost 10 % more accurate than sa , where the best results with binary weights were achieved with an approximation with 130 dimensions , with tf weights were achieved with 50 dimensions , and with tfidf weights were achieved with 30 dimensions . svm with bow features was about 3 % more accurate than lsa , with binary weights leading to a higher accuracy rate . among the baselines , the best method was mnb with tfbow features , with an accuracy of 91 . 47 % , msm with w2v had an accuracy rate of 90 . 62 % , with the best results achieved with word subspace dimensions for the training classes ranging from 150 to 181 , and for the query ranging from 3 to 217 . incorporating the frequency information in the subspace modeling resulted in higher accuracy , with tfmsm achieving 92 . 01 % , with dimensions of word subspaces",
        "generated_description": "the results show that the proposed tf - msm method outperforms all the other methods in terms of accuracy , with a standard deviation of only 0 . 42 % . the mvb method has the second best performance with an accuracy of 62 . 70 % , followed by the mnb method with the best performance of 91 . 47 % . for the svm method , the std . deviation is 0 . 29 % ."
    },
    {
        "table_id": "447",
        "table_info": {
            "table_caption": "Table 2: Results of our Transformer-Language Model approach against similar approaches (Bryant and Briscoe, 2018) and state-of-the-art on Grammatical Error Correction. For each of the datasets, we use the corresponding test set, and we do not train our models on the corpora. As BERT, we report the best performing BERT model (12 layers, retaining uppercase characters). In the top part of each dataset, we report the scores of supervised methods and in the bottom the unsupervised ones. † denotes this system won the shared task competition.",
            "table_column_names": [
                "[BOLD] Dataset",
                "[BOLD] System",
                "[BOLD] ERRANT  [BOLD] P",
                "[BOLD] ERRANT  [BOLD] R",
                "[BOLD] ERRANT  [BOLD] F0.5",
                "[BOLD] M2  [BOLD] P",
                "[BOLD] M2  [BOLD] R",
                "[BOLD] M2  [BOLD] F0.5"
            ],
            "table_content_values": [
                [
                    "[BOLD] CoNLL-2014",
                    "Felice et al. ( 2014 ) †",
                    "-",
                    "-",
                    "-",
                    "39.71",
                    "30.10",
                    "37.33"
                ],
                [
                    "[BOLD] CoNLL-2014",
                    "Yannakoudakis et al. ( 2017 )",
                    "-",
                    "-",
                    "-",
                    "58.79",
                    "30.63",
                    "49.66"
                ],
                [
                    "[BOLD] CoNLL-2014",
                    "Chollampatt and Ng ( 2017 )",
                    "-",
                    "-",
                    "-",
                    "62.74",
                    "32.96",
                    "53.14"
                ],
                [
                    "[BOLD] CoNLL-2014",
                    "Chollampatt and Ng ( 2018 )",
                    "-",
                    "-",
                    "-",
                    "65.49",
                    "33.14",
                    "54.79"
                ],
                [
                    "[BOLD] CoNLL-2014",
                    "Ge et al. ( 2018 )",
                    "-",
                    "-",
                    "-",
                    "[BOLD] 74.12",
                    "[BOLD] 36.30",
                    "[BOLD] 61.34"
                ],
                [
                    "[BOLD] CoNLL-2014",
                    "Bryant and Briscoe ( 2018 )",
                    "36.62",
                    "19.93",
                    "31.37",
                    "40.56",
                    "20.81",
                    "34.09"
                ],
                [
                    "[BOLD] CoNLL-2014",
                    "BERT",
                    "33.27",
                    "[BOLD] 27.14",
                    "31.83",
                    "35.69",
                    "[BOLD] 27.99",
                    "33.83"
                ],
                [
                    "[BOLD] CoNLL-2014",
                    "GPT-1",
                    "49.58",
                    "27.06",
                    "42.5",
                    "51.08",
                    "27.45",
                    "43.57"
                ],
                [
                    "[BOLD] CoNLL-2014",
                    "GPT-2",
                    "[BOLD] 57.73",
                    "24.75",
                    "[BOLD] 45.58",
                    "[BOLD] 58.51",
                    "24.9",
                    "[BOLD] 46.08"
                ],
                [
                    "[BOLD] FCE",
                    "Yannakoudakis et al. ( 2017 )",
                    "-",
                    "-",
                    "-",
                    "[BOLD] 65.03",
                    "32.45",
                    "[BOLD] 54.15"
                ],
                [
                    "[BOLD] FCE",
                    "Bryant and Briscoe ( 2018 )",
                    "41.92",
                    "13.62",
                    "29.61",
                    "44.78",
                    "14.12",
                    "31.22"
                ],
                [
                    "[BOLD] FCE",
                    "BERT",
                    "29.56",
                    "[BOLD] 34.67",
                    "30.46",
                    "31.97",
                    "[BOLD] 35.01",
                    "32.53"
                ],
                [
                    "[BOLD] FCE",
                    "GPT-1",
                    "[BOLD] 62.75",
                    "32.19",
                    "52.74",
                    "[BOLD] 64.01",
                    "32.33",
                    "[BOLD] 53.52"
                ],
                [
                    "[BOLD] FCE",
                    "GPT-2",
                    "61.91",
                    "33.47",
                    "[BOLD] 52.92",
                    "62.64",
                    "33.74",
                    "53.48"
                ]
            ]
        },
        "gold_description": "table 2 presents the results of our method comparing them against recent state - of - the - art supervised models and the simple n - gram language model used by bryant and briscoe ( 2018 ) . a key result of table 2 is that transformer language models prove to be more than just a competitive baseline to legitimate grammatical error correction systems on their own . across the board , transformer models are able to outperform the simple n - gram model and even approach the performance of supervised gec systems . we see that their performance is nearly identical with gpt - 2 leading by a small margin in the conll14 dataset . bert surpasses the n - gram baseline overall , it achieves worse performance than the rest in terms of precision and f0 . 5 score .",
        "generated_description": "on the conll - 2014 dataset , our model achieves a new state - of - the - art f0 . 5 score of 62 . 74 on the errant test set and 54 . 79 on the m2 test set , both outperforming the previous state of the art by a large margin . on the semeval - 2015 dataset , the same trend is observed , with our model surpassing the previous sota by a significant margin of 4 . 69 % on errant and 5 . 19 % on m2 ."
    },
    {
        "table_id": "448",
        "table_info": {
            "table_caption": "Table III: Reply classification labels and distribution per source",
            "table_column_names": [
                "[BOLD] Reply Type",
                "[BOLD] Description",
                "[BOLD] Antichat",
                "[BOLD] Hackforums"
            ],
            "table_content_values": [
                [
                    "Buy",
                    "Someone wants to buy or bought a product.",
                    "8%",
                    "12%"
                ],
                [
                    "Sell",
                    "Someone making a sale offer to the original poster of a thread.",
                    "8%",
                    "2%"
                ],
                [
                    "Other",
                    "Anything that didn’t fall into the previous categories.",
                    "84%",
                    "86%"
                ],
                [
                    "TOTAL",
                    "[EMPTY]",
                    "9,992",
                    "5,898"
                ]
            ]
        },
        "gold_description": "we label each reply into three categories : buy , sell and other . the distribution of reply types is highly dependant on the structure and rules of the forum as shown in table iii .",
        "generated_description": "for antichat , there are a total of 9 , 992 messages in the training set and 5 , 898 in the development set . the majority of these messages ( 84 % ) are replies to messages asking for information about products . the second most common type of reply is a purchase message , with 8 % of the messages being bought and the remaining 2 % being sold . there are also a small number of messages where neither the original poster nor the responder respond to the message ( 2 % ) . most of the replies ( 8 % ) are about products that are specifically targeted at specific target customers ( e . g . , a product that is sold for a specific target customer ) . however , there is a small portion of messages in which the replies are anything that is not explicitly mentioned in the message , such as asking about the price of a specific item ."
    },
    {
        "table_id": "449",
        "table_info": {
            "table_caption": "Table IV: Weighted precision, recall and F1 scores of classifiers across datasets and tasks, with stratified k-fold cross-validation",
            "table_column_names": [
                "[EMPTY]",
                "[BOLD] Antichat  [ITALIC] Product",
                "[BOLD] Antichat  [ITALIC] Product",
                "[BOLD] Antichat  [ITALIC] Product",
                "[BOLD] Antichat  [ITALIC] Reply",
                "[BOLD] Antichat  [ITALIC] Reply",
                "[BOLD] Antichat  [ITALIC] Reply",
                "[BOLD] Hack Forums  [ITALIC] Product",
                "[BOLD] Hack Forums  [ITALIC] Product",
                "[BOLD] Hack Forums  [ITALIC] Product",
                "[BOLD] Hack Forums  [ITALIC] Reply",
                "[BOLD] Hack Forums  [ITALIC] Reply",
                "[BOLD] Hack Forums  [ITALIC] Reply"
            ],
            "table_content_values": [
                [
                    "[BOLD] Model",
                    "Prec",
                    "Recall",
                    "F1",
                    "Prec",
                    "Recall",
                    "F1",
                    "Prec",
                    "Recall",
                    "F1",
                    "Prec",
                    "Recall",
                    "F1"
                ],
                [
                    "[BOLD] FastText",
                    "0.824",
                    "0.734",
                    "0.764",
                    "0.823",
                    "0.318",
                    "0.450",
                    "0.722",
                    "0.582",
                    "0.627",
                    "0.800",
                    "0.427",
                    "0.539"
                ],
                [
                    "[BOLD] Logistic Regression",
                    "0.831",
                    "0.718",
                    "0.753",
                    "[BOLD] 0.874",
                    "0.245",
                    "0.381",
                    "0.617",
                    "0.564",
                    "0.617",
                    "[BOLD] 0.852",
                    "0.363",
                    "0.492"
                ],
                [
                    "[BOLD] SVM",
                    "0.817",
                    "0.748",
                    "0.767",
                    "0.654",
                    "0.213",
                    "0.301",
                    "0.716",
                    "0.578",
                    "0.614",
                    "0.812",
                    "0.332",
                    "0.440"
                ],
                [
                    "[BOLD] XGBoost",
                    "[BOLD] 0.824",
                    "0.677",
                    "0.729",
                    "0.713",
                    "0.227",
                    "0.328",
                    "[BOLD] 0.734",
                    "0.577",
                    "0.627",
                    "0.819",
                    "0.352",
                    "0.465"
                ]
            ]
        },
        "gold_description": "similarly a single classifier outperforms the rest in reply classification , as seen in table iv . by our weighted nonother precision metric , logistic regression performed the best across both datasets , providing 0 . 874 precision on antichat and 0 . 852 precision on hack forums .",
        "generated_description": "product and hack forums . for the antichat dataset , the best model for both datasets is the logistic regression model with an f1 - score of 0 . 831 and 0 . 753 for the product and the hack forums datasets respectively . the best score for the hack forums dataset is obtained by the fasttext model ( 0 . 827 ) with an accuracy of 0 . 734 for the product dataset and the logistic regression model with 0 . 722 for the hack forums dataset . we can see that the performance of all the models is significantly better than that of fasttext ."
    },
    {
        "table_id": "450",
        "table_info": {
            "table_caption": "Table 1: Comparison of pooling methods",
            "table_column_names": [
                "[BOLD] Task",
                "[BOLD] [CLS]",
                "[BOLD] Mean",
                "[BOLD] Max",
                "[BOLD] [SEP]"
            ],
            "table_content_values": [
                [
                    "Semantic Similarity",
                    "34.1",
                    "[BOLD] 84.5",
                    "80.7",
                    "13.0"
                ],
                [
                    "Text Classification",
                    "90.7",
                    "[BOLD] 95.4",
                    "89.7",
                    "88.9"
                ],
                [
                    "Entailment",
                    "72.4",
                    "[BOLD] 89.3",
                    "87.1",
                    "66.1"
                ],
                [
                    "Surface Information",
                    "45.6",
                    "[BOLD] 78.9",
                    "47.3",
                    "42.8"
                ],
                [
                    "Syntactic Information",
                    "78.2",
                    "[BOLD] 86.0",
                    "75.7",
                    "72.2"
                ],
                [
                    "Semantic Information",
                    "90.3",
                    "[BOLD] 93.7",
                    "89.5",
                    "86.7"
                ],
                [
                    "Average Score",
                    "68.6",
                    "[BOLD] 88.0",
                    "78.3",
                    "61.6"
                ]
            ]
        },
        "gold_description": "are summarized in table 1 , where the score for each task category is calculated by averaging the normalized values for the tasks within each category . although the activations of [ cls ] token hidden states are often used in fine - tuning bert for classification tasks , mean - pooling of hidden states performs the best in all task categories among all the pooling methods .",
        "generated_description": "it can be seen that the pooling method with the highest average score ( ‘ average score ’ ) outperforms the other pooling methods in all the tasks . the mean pooling has the highest score for the entailment task , and the max pooling performs the best for the text classification task . however , there is no clear winner between the mean , max and septptimal pooling ."
    },
    {
        "table_id": "451",
        "table_info": {
            "table_caption": "Table 3: Results of BERT passage-level embeddings on question-answering datasets",
            "table_column_names": [
                "[BOLD] Dataset / Model  [BOLD] WikiPassageQA",
                "[BOLD] Metrics  [BOLD] MAP",
                "[BOLD] Metrics  [BOLD] P@5",
                "[BOLD] Metrics  [BOLD] P@10"
            ],
            "table_content_values": [
                [
                    "BM25",
                    "53.7",
                    "19.5",
                    "11.5"
                ],
                [
                    "Memory-CNN-LSTM Cohen2018",
                    "56.1",
                    "20.8",
                    "12.3"
                ],
                [
                    "Pre-trained BERT Embedding",
                    "55.0",
                    "21.6",
                    "13.7"
                ],
                [
                    "SNLI Fine-tuned BERT Embedding",
                    "52.5",
                    "20.6",
                    "12.8"
                ],
                [
                    "In-domain Fine-tuned BERT",
                    "[BOLD] 74.9",
                    "[BOLD] 27.2",
                    "[BOLD] 15.2"
                ],
                [
                    "[BOLD] InsuranceQA",
                    "[BOLD] P@1",
                    "[BOLD] P@5",
                    "[BOLD] P@10"
                ],
                [
                    "BM25",
                    "60.2",
                    "19.5",
                    "10.9"
                ],
                [
                    "SUBMULT+NN Wang2016g",
                    "75.6",
                    "-",
                    "-"
                ],
                [
                    "DSSM Huang2013a",
                    "30.3",
                    "-",
                    "-"
                ],
                [
                    "Pre-trained BERT Embedding",
                    "44.9",
                    "17.6",
                    "10.6"
                ],
                [
                    "SNLI Fine-tuned BERT Embedding",
                    "48.0",
                    "18.5",
                    "11.0"
                ],
                [
                    "In-domain Fine-tuned BERT",
                    "[BOLD] 78.3",
                    "[BOLD] 25.4",
                    "[BOLD] 13.7"
                ],
                [
                    "[BOLD] Quasar-t",
                    "[BOLD] R@1",
                    "[BOLD] R@5",
                    "[BOLD] R@10"
                ],
                [
                    "BM25",
                    "38.7",
                    "59.2",
                    "66.0"
                ],
                [
                    "Pre-trained BERT Embedding",
                    "48.6",
                    "66.6",
                    "71.7"
                ],
                [
                    "SNLI Fine-tuned BERT Embedding",
                    "49.3",
                    "66.1",
                    "71.0"
                ],
                [
                    "In-domain Fine-tuned BERT",
                    "[BOLD] 59.5",
                    "[BOLD] 70.9",
                    "[BOLD] 74.6"
                ],
                [
                    "[BOLD] SearchQA",
                    "[BOLD] R@1",
                    "[BOLD] R@5",
                    "[BOLD] R@10"
                ],
                [
                    "BM25",
                    "50.5",
                    "83.3",
                    "90.9"
                ],
                [
                    "Pre-trained BERT Embedding",
                    "66.2",
                    "89.7",
                    "95.0"
                ],
                [
                    "SNLI Fine-tuned BERT Embedding",
                    "66.8",
                    "90.0",
                    "95.1"
                ],
                [
                    "In-domain Fine-tuned BERT",
                    "[BOLD] 76.3",
                    "[BOLD] 93.0",
                    "[BOLD] 96.7"
                ]
            ]
        },
        "gold_description": "the comparison between bert embeddings and other models is presented in table 3 . overall , in - domain fine - tuned bert delivers the best performance . we report new state - of - the - art results on wikipassageqa ( 33 % improvement in map ) and insuranceqa ( version 1 . 0 ) ( 3 . 6 % improvement in p @ 1 ) by supervised fine - tuning bert using pairwise rank hinge loss . when evaluated on non - factoid qa datasets , there is a big gap between bert embeddings and the fully fine - tuned bert , which suggests that deep interactions between questions and answers are critical to the task . however , the gap is much smaller for factoid qa datasets . since non - factoid qa depends more on content matching rather than vocabulary matching , the results are kind of expected . similar to bert for sentence embeddings , mean - pooling and combining the top and bottom layer embeddings lead to better performance , and ( u , v , u ∗ v , | u − v | ) shows the strongest results among other interaction schemes . different from sentence - level embeddings , fine - tuning bert on snli doesn ' t lead to significant improvement , which suggests possible domain mismatch between snli and the qa datasets . mlp layer usually provided a 1 - 2 percent boost in performance compared to the logistic regression layer . for wikipassageqa , bert embeddings perform comparably as bm25 baseline . for insuranceqa , bert embeddings outperform a strong representation - based matching model dssm ( huang et al . , 2013 ) , but still far behind the state - of - the - art interaction - based model submult + nn ( wang and jiang , 2016 ) and fully fine - tuned bert . on",
        "generated_description": "for the wikipassageqa dataset , the in - domain fine - tuned bert model achieves 74 . 9 % in terms of map , 27 . 2 % for p @ 5 and 15 . 2 % , 15 . 1 % for the p @ 10 , which outperforms the previous state - of - the - art result by a large margin . for insuranceqa , our model achieves a p @ 1 score of 73 . 3 % and p @ 2 score of 83 . 8 % , which is also better than the previous best result ( submult + nn wang2016g ) . for the bm25 dataset , our method achieves a map score of 53 . 7 % , 19 . 5 % , and 11 . 5 % compared to the memory - cnn - lstm model cohen2018 . for the bert - based models , we also compare our method with the pre - trained bert embedding model ."
    },
    {
        "table_id": "452",
        "table_info": {
            "table_caption": "Table 3: comparing results of our trained model with others",
            "table_column_names": [
                "[EMPTY]",
                "Arman word",
                "Arman phrase",
                "Peyma word",
                "Peyma phrase"
            ],
            "table_content_values": [
                [
                    "Bokaei and Mahmoudi Bokaei and Mahmoudi ( 2018 )",
                    "81.50",
                    "76.79",
                    "-",
                    "-"
                ],
                [
                    "Shahshahani et al.Shahshahani et al. ( 2018 )",
                    "-",
                    "-",
                    "80.0",
                    "-"
                ],
                [
                    "Beheshti-NER (Our Model)",
                    "[BOLD] 84.03",
                    "[BOLD] 79.93",
                    "[BOLD] 90.59",
                    "[BOLD] 87.62"
                ]
            ]
        },
        "gold_description": "these models are evaluated on two common datasets for ner : peyma and arman . bokaei and mahmoudi ( bokaei and mahmoudi , 2018 ) and shahshahani et al . ( shahshahani et al . , 2018 ) had reported the best results which you can see in table 3 as you see in table 3 in both word and phrase levels , our model outperform other ner approaches for the persian language . dataset . table 3 shows that our results are 10 percent better than shahshahani and colleagues on the same platform . on the other hand bokaei and mahmoudi ( bokaei and mahmoudi , 2018 ) reported their results on arman dataset which is lower than ours in both word and phrase levels according to table 3 .",
        "generated_description": "we compare our results with those of \\ newcitebokaei and mahmoudi and “ arabic ner model ” shahshahani et al . our model outperforms the previous state - of - the - art by a significant margin . the reason is that our model has a better performance on the armani word and peyma phrase datasets than the previous studies ."
    },
    {
        "table_id": "453",
        "table_info": {
            "table_caption": "Table 4: Phrase-level evaluation for subtask A: 3-classes",
            "table_column_names": [
                "Team",
                "Team",
                "Test Data 1 In Domain",
                "Test Data 1 In Domain",
                "Test Data 1 In Domain",
                "Test Data 1 Out Domain",
                "Test Data 1 Out Domain",
                "Test Data 1 Out Domain",
                "Test Data 1 Total",
                "Test Data 1 Total",
                "Test Data 1 Total"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "[EMPTY]",
                    "P",
                    "R",
                    "F1",
                    "P",
                    "R",
                    "F1",
                    "P",
                    "R",
                    "F1"
                ],
                [
                    "1",
                    "MorphoBERT",
                    "88.7",
                    "85.5",
                    "87.1",
                    "86.3",
                    "83.8",
                    "85",
                    "87.3",
                    "84.5",
                    "85.9"
                ],
                [
                    "2",
                    "Beheshti-NER-1",
                    "85.3",
                    "84.4",
                    "84.8",
                    "84.4",
                    "82.6",
                    "83.5",
                    "84.8",
                    "83.3",
                    "84"
                ],
                [
                    "3",
                    "Team-3",
                    "87.4",
                    "77.2",
                    "82",
                    "87.4",
                    "73.4",
                    "79.8",
                    "87.4",
                    "75",
                    "80.7"
                ],
                [
                    "4",
                    "ICTRC-NLPGroup",
                    "87.5",
                    "76",
                    "81.3",
                    "86.2",
                    "69.6",
                    "77",
                    "86.8",
                    "72.3",
                    "78.9"
                ],
                [
                    "5",
                    "UT-NLP-IR",
                    "75.3",
                    "68.9",
                    "72",
                    "72.3",
                    "60.7",
                    "66",
                    "73.6",
                    "64.1",
                    "68.5"
                ],
                [
                    "6",
                    "SpeechTrans",
                    "41.5",
                    "39.5",
                    "40.5",
                    "43.1",
                    "38.7",
                    "40.8",
                    "42.4",
                    "39",
                    "40.6"
                ],
                [
                    "7",
                    "Baseline",
                    "32.2",
                    "45.8",
                    "37.8",
                    "32.8",
                    "39.1",
                    "35.7",
                    "32.5",
                    "41.9",
                    "36.6"
                ]
            ]
        },
        "gold_description": "tables 4 , 5 , 6 , 7 and 8 show the results of evaluation reported by competition for all teams which participated in the challenge . our method is mentioned as beheshti - ner - 1 table 4 and 5 show the results for subtask a . according to the tables , we reached to 84 . 0 % and 87 . 9 % f1 score respectively for phrase and word level evaluations .",
        "generated_description": "the results show that morphobert and beheshti - ner - 1 obtain the best performance in the in - domain test set and the worst performance on the out - of - domain set . this is expected as they are built on top of the pretrained embeddings obtained from the pretraining data of the target domain . however , they do not perform well on the other two test sets as they were not pretrained on ictrc - nlpgroup ."
    },
    {
        "table_id": "454",
        "table_info": {
            "table_caption": "TABLE II: Ranked List of Target Words based on their Ambiguity Scores",
            "table_column_names": [
                "Medical Device Term",
                "Medical Device Score",
                "Medical Robot Term",
                "Medical Robot Score",
                "Sports Rehab Machine Term",
                "Sports Rehab Machine Score"
            ],
            "table_content_values": [
                [
                    "root",
                    "0.8802",
                    "stroke",
                    "0.919",
                    "kingdom",
                    "0.907"
                ],
                [
                    "mouse",
                    "0.8633",
                    "kingdom",
                    "0.893",
                    "stroke",
                    "0.8495"
                ],
                [
                    "kingdom",
                    "0.8383",
                    "vessel",
                    "0.8651",
                    "progressive",
                    "0.8414"
                ],
                [
                    "iron",
                    "0.8381",
                    "thread",
                    "0.8385",
                    "net",
                    "0.8334"
                ],
                [
                    "internal",
                    "0.8043",
                    "floating",
                    "0.8045",
                    "suspension",
                    "0.8322"
                ],
                [
                    "progressive",
                    "0.7957",
                    "strain",
                    "0.8018",
                    "induction",
                    "0.8244"
                ],
                [
                    "agent",
                    "0.7875",
                    "mouse",
                    "0.7997",
                    "thread",
                    "0.8236"
                ],
                [
                    "express",
                    "0.7733",
                    "progressive",
                    "0.7983",
                    "root",
                    "0.8093"
                ],
                [
                    "plasma",
                    "0.7685",
                    "die",
                    "0.787",
                    "transmission",
                    "0.7871"
                ],
                [
                    "net",
                    "0.7678",
                    "secondary",
                    "0.786",
                    "die",
                    "0.7821"
                ],
                [
                    "⋮",
                    "⋮",
                    "⋮",
                    "⋮",
                    "⋮",
                    "⋮"
                ],
                [
                    "argued",
                    "0.1631",
                    "corresponding",
                    "0.1695",
                    "corresponding",
                    "0.196"
                ],
                [
                    "richard",
                    "0.1608",
                    "corresponds",
                    "0.1693",
                    "told",
                    "0.1958"
                ],
                [
                    "authority",
                    "0.1606",
                    "feel",
                    "0.167",
                    "joseph",
                    "0.1956"
                ],
                [
                    "michael",
                    "0.1569",
                    "coating",
                    "0.1666",
                    "understanding",
                    "0.1953"
                ],
                [
                    "required",
                    "0.154",
                    "wife",
                    "0.1603",
                    "love",
                    "0.1902"
                ],
                [
                    "peter",
                    "0.1388",
                    "michael",
                    "0.159",
                    "economic",
                    "0.1902"
                ],
                [
                    "robert",
                    "0.1381",
                    "authority",
                    "0.156",
                    "coating",
                    "0.1892"
                ],
                [
                    "david",
                    "0.1201",
                    "peter",
                    "0.1437",
                    "pay",
                    "0.1856"
                ],
                [
                    "james",
                    "0.1188",
                    "david",
                    "0.1412",
                    "authority",
                    "0.1838"
                ],
                [
                    "charles",
                    "0.1157",
                    "required",
                    "0.1382",
                    "causing",
                    "0.1822"
                ]
            ]
        },
        "gold_description": "in order to study the cases of disagreement between the approaches proposed by this paper and ferrari et al . ( 2018 ) , the top - 5 words with the largest absolute differences between the assigned ranks have been reported for each scenario by table iii . the number of target words for each project scenario have also been mentioned in parenthesis . it can be observed that most of the cases of disagreement have a higher rank , i . e . relatively lower ambiguity score assigned by the linear transformation approach proposed by this paper . most of such cases are proper names such as robert , peter , and daniel .",
        "generated_description": "the medical device term “ stroke ” has the highest score for both the medical robot and the sports rehab machine , with an overall score of 0 . 919 and 0 . 8495 , respectively . the second highest score ( 0 . 893 ) is obtained for the medical robot , and the third highest is for the sports rehab machine . the most frequent terms used in both the terms are “ organization ” , “ network ” and “ semi - instantiation ” . in the case of the medical device , the most frequent term is “ regime ” ( i . e . , the root of the table ) , followed by “ movid ” which is the second - most frequent term , and then “ principal component , secondary component , inductive term . ” the most frequently used terms for the sports repository are also “ automated ” : “ reduction of red blood cells , transfusion , membrane , plasma , and mechanical ventilator , ” with the exception of “ cell_type ” being the second most frequent ."
    },
    {
        "table_id": "455",
        "table_info": {
            "table_caption": "Table 2: In-domain experiments, best values per column are highlighted. For each dataset (column head) we show two scores: Macro-F1 score (left-hand column) and F1 score for claims (right-hand column).",
            "table_column_names": [
                "Target → System ↓ <italic>neural network models</italic>",
                "<bold>MT</bold> <italic>neural network models</italic>",
                "<bold>MT</bold> <italic>neural network models</italic>",
                "<bold>OC</bold> <italic>neural network models</italic>",
                "<bold>OC</bold> <italic>neural network models</italic>",
                "<bold>PE</bold> <italic>neural network models</italic>",
                "<bold>PE</bold> <italic>neural network models</italic>",
                "<bold>VG</bold> <italic>neural network models</italic>",
                "<bold>VG</bold> <italic>neural network models</italic>",
                "<bold>WD</bold> <italic>neural network models</italic>",
                "<bold>WD</bold> <italic>neural network models</italic>",
                "<bold>WTP</bold> <italic>neural network models</italic>",
                "<bold>WTP</bold> <italic>neural network models</italic>",
                "<bold>Average</bold> <italic>neural network models</italic>",
                "<bold>Average</bold> <italic>neural network models</italic>"
            ],
            "table_content_values": [
                [
                    "BiLSTM",
                    "68.8",
                    "41.8",
                    "58.0",
                    "22.4",
                    "73.0",
                    "62.0",
                    "60.9",
                    "37.7",
                    "60.0",
                    "24.5",
                    "57.9",
                    "28.5",
                    "63.1",
                    "36.1"
                ],
                [
                    "CNN:rand",
                    "78.6",
                    "67.3",
                    "<bold>60.5</bold>",
                    "<bold>25.6</bold>",
                    "<bold>73.6</bold>",
                    "61.1",
                    "<bold>65.9</bold>",
                    "<bold>45.0</bold>",
                    "61.1",
                    "25.8",
                    "58.6",
                    "28.9",
                    "66.4",
                    "42.3"
                ],
                [
                    "CNN:w2vec",
                    "73.7",
                    "60.9",
                    "58.2",
                    "23.7",
                    "74.0",
                    "61.7",
                    "63.8",
                    "33.5",
                    "62.6",
                    "<bold>28.9</bold>",
                    "57.3",
                    "24.3",
                    "64.9",
                    "38.8"
                ],
                [
                    "LSTM",
                    "65.2",
                    "48.3",
                    "58.5",
                    "22.3",
                    "71.8",
                    "60.7",
                    "61.3",
                    "40.1",
                    "61.6",
                    "25.9",
                    "58.0",
                    "28.4",
                    "62.7",
                    "37.6"
                ],
                [
                    "LR",
                    "<italic>feature ablation and combination</italic>",
                    "<italic>feature ablation and combination</italic>",
                    "<italic>feature ablation and combination</italic>",
                    "<italic>feature ablation and combination</italic>",
                    "<italic>feature ablation and combination</italic>",
                    "<italic>feature ablation and combination</italic>",
                    "<italic>feature ablation and combination</italic>",
                    "<italic>feature ablation and combination</italic>",
                    "<italic>feature ablation and combination</italic>",
                    "<italic>feature ablation and combination</italic>",
                    "<italic>feature ablation and combination</italic>",
                    "<italic>feature ablation and combination</italic>",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "-Discourse",
                    "73.0",
                    "60.8",
                    "59.9",
                    "22.9",
                    "70.6",
                    "60.6",
                    "62.5",
                    "42.6",
                    "63.7",
                    "23.2",
                    "59.7",
                    "30.2",
                    "64.9",
                    "40.0"
                ],
                [
                    "-Embeddings",
                    "74.6",
                    "62.9",
                    "59.6",
                    "22.6",
                    "70.4",
                    "60.4",
                    "62.9",
                    "43.1",
                    "63.9",
                    "23.5",
                    "59.4",
                    "29.9",
                    "65.1",
                    "40.4"
                ],
                [
                    "-Lexical",
                    "72.1",
                    "59.5",
                    "59.6",
                    "22.5",
                    "65.9",
                    "55.1",
                    "60.8",
                    "40.5",
                    "60.1",
                    "18.5",
                    "57.7",
                    "27.8",
                    "62.7",
                    "37.3"
                ],
                [
                    "-Structure",
                    "74.4",
                    "62.6",
                    "60.0",
                    "23.0",
                    "70.4",
                    "60.4",
                    "62.0",
                    "41.8",
                    "64.2",
                    "23.4",
                    "59.5",
                    "30.0",
                    "65.1",
                    "40.2"
                ],
                [
                    "-Syntax",
                    "<bold>79.8</bold>",
                    "<bold>70.3</bold>",
                    "59.8",
                    "22.9",
                    "72.1",
                    "<bold>62.5</bold>",
                    "63.4",
                    "43.8",
                    "<bold>65.1</bold>",
                    "25.5",
                    "<bold>60.1</bold>",
                    "<bold>30.5</bold>",
                    "<bold>66.7</bold>",
                    "<bold>42.6</bold>"
                ],
                [
                    "All Features",
                    "74.4",
                    "62.7",
                    "59.9",
                    "22.9",
                    "70.6",
                    "60.6",
                    "62.5",
                    "42.6",
                    "63.8",
                    "23.3",
                    "59.7",
                    "30.2",
                    "65.1",
                    "40.4"
                ],
                [
                    "LR",
                    "<italic>single feature groups</italic>",
                    "<italic>single feature groups</italic>",
                    "<italic>single feature groups</italic>",
                    "<italic>single feature groups</italic>",
                    "<italic>single feature groups</italic>",
                    "<italic>single feature groups</italic>",
                    "<italic>single feature groups</italic>",
                    "<italic>single feature groups</italic>",
                    "<italic>single feature groups</italic>",
                    "<italic>single feature groups</italic>",
                    "<italic>single feature groups</italic>",
                    "<italic>single feature groups</italic>",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "+Discourse",
                    "70.0",
                    "56.7",
                    "49.4",
                    "13.8",
                    "50.1",
                    "41.7",
                    "49.6",
                    "30.6",
                    "57.6",
                    "14.9",
                    "49.5",
                    "18.4",
                    "54.4",
                    "29.3"
                ],
                [
                    "+Embeddings",
                    "72.4",
                    "59.8",
                    "58.8",
                    "20.8",
                    "68.2",
                    "57.7",
                    "59.7",
                    "39.3",
                    "64.2",
                    "23.8",
                    "59.0",
                    "28.9",
                    "63.7",
                    "38.4"
                ],
                [
                    "+Lexical",
                    "75.9",
                    "64.7",
                    "59.5",
                    "21.4",
                    "71.8",
                    "62.1",
                    "61.1",
                    "40.5",
                    "64.0",
                    "22.2",
                    "59.0",
                    "27.7",
                    "65.2",
                    "39.8"
                ],
                [
                    "+Structure",
                    "57.1",
                    "42.0",
                    "56.5",
                    "20.0",
                    "54.2",
                    "39.5",
                    "55.4",
                    "33.3",
                    "48.4",
                    "9.0",
                    "55.4",
                    "25.2",
                    "54.5",
                    "28.2"
                ],
                [
                    "+Syntax",
                    "66.7",
                    "52.5",
                    "58.1",
                    "21.0",
                    "64.1",
                    "52.9",
                    "60.7",
                    "40.4",
                    "57.6",
                    "15.5",
                    "57.0",
                    "27.0",
                    "60.7",
                    "34.9"
                ],
                [
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>"
                ],
                [
                    "Majority bsl",
                    "42.9",
                    "0.0",
                    "48.0",
                    "0.0",
                    "41.3",
                    "0.0",
                    "44.5",
                    "0.0",
                    "48.6",
                    "0.0",
                    "46.7",
                    "0.0",
                    "45.3",
                    "0.0"
                ],
                [
                    "Random bsl",
                    "50.7",
                    "33.2",
                    "49.9",
                    "13.5",
                    "50.8",
                    "38.0",
                    "50.4",
                    "28.8",
                    "51.6",
                    "10.8",
                    "48.9",
                    "18.8",
                    "50.4",
                    "23.9"
                ]
            ]
        },
        "gold_description": "the average performances of lr − syntax and cnn : rand are virtually identical , both for macro6described as fscorem in sokolova and lapalme ( 2009 ) . f1 and claim - f1 , with a slight advantage for the feature - based approach , but their difference is not statistically significant ( p ≤ 0 . 05 ) . altogether , these two systems exhibit significantly better average performances than all other models surveyed here , both those relying on and those not relying on hand - crafted features ( p ≤ 0 . 05 ) . the performance of the learners is quite divergent across datasets , with macro - f1 scores6 ranging from 60 % ( wtp ) to 80 % ( mt ) , average 67 % ( see table 2 ) . on all datasets , our best systems clearly outperform both baselines . in isolation , lexical , embedding , and syntax features are most helpful , whereas structural features did not help in most cases . discourse features only contribute significantly on mt . when looking at the performance of the feature - based approaches , the most striking finding is the importance of lexical ( in our setup , unigram ) information .",
        "generated_description": "in this section , we present the experimental results of our proposed model . our model achieves the best performance among all the models on all the four datasets . specifically , our model improves the average f1 score by 2 . 4 % over the strongest baseline ( bilstm ) and 2 . 6 % over bert - base , which demonstrates the effectiveness of our model . we also observe that our model outperforms the bert baseline on most of the datasets ."
    },
    {
        "table_id": "456",
        "table_info": {
            "table_caption": "Table 3: Cross-domain experiments, best values per column are highlighted, in-domain results (for comparison) in italics; results only for selected systems. For each source/target combination we show two scores: Macro-F1 score (left-hand column) and F1 score for claims (right-hand column).",
            "table_column_names": [
                "Target → Source/Sys. ↓",
                "<bold>MT</bold> <italic>CNN:rand</italic>",
                "<bold>MT</bold> <italic>CNN:rand</italic>",
                "<bold>OC</bold> <italic>CNN:rand</italic>",
                "<bold>OC</bold> <italic>CNN:rand</italic>",
                "<bold>PE</bold> <italic>CNN:rand</italic>",
                "<bold>PE</bold> <italic>CNN:rand</italic>",
                "<bold>VG</bold> <italic>CNN:rand</italic>",
                "<bold>VG</bold> <italic>CNN:rand</italic>",
                "<bold>WD</bold> <italic>CNN:rand</italic>",
                "<bold>WD</bold> <italic>CNN:rand</italic>",
                "<bold>WTP</bold> <italic>CNN:rand</italic>",
                "<bold>WTP</bold> <italic>CNN:rand</italic>",
                "<bold>Average</bold>",
                "<bold>Average</bold>"
            ],
            "table_content_values": [
                [
                    "MT",
                    "<italic>78.6</italic>",
                    "<italic>67.3</italic>",
                    "51.0",
                    "7.4",
                    "56.9",
                    "22.1",
                    "57.2",
                    "15.7",
                    "52.4",
                    "9.4",
                    "49.4",
                    "10.9",
                    "53.4",
                    "13.1"
                ],
                [
                    "OC",
                    "57.1",
                    "39.7",
                    "<italic>60.5</italic>",
                    "<italic>25.6</italic>",
                    "56.4",
                    "42.8",
                    "58.9",
                    "37.3",
                    "54.6",
                    "13.2",
                    "<bold>58.4</bold>",
                    "<bold>28.9</bold>",
                    "57.1",
                    "32.4"
                ],
                [
                    "PE",
                    "59.8",
                    "18.0",
                    "54.2",
                    "9.5",
                    "<italic>73.6</italic>",
                    "<italic>61.1</italic>",
                    "57.5",
                    "18.7",
                    "<bold>55.5</bold>",
                    "<bold>15.9</bold>",
                    "54.7",
                    "16.0",
                    "56.3",
                    "15.6"
                ],
                [
                    "VG",
                    "<bold>68.7</bold>",
                    "<bold>51.5</bold>",
                    "55.8",
                    "19.2",
                    "<bold>57.0</bold>",
                    "32.0",
                    "<italic>65.9</italic>",
                    "<italic>45.0</italic>",
                    "51.7",
                    "10.5",
                    "54.7",
                    "22.0",
                    "57.6",
                    "27.0"
                ],
                [
                    "WD",
                    "64.4",
                    "3.5",
                    "51.3",
                    "1.3",
                    "41.3",
                    "0.0",
                    "44.5",
                    "0.0",
                    "<italic>61.1</italic>",
                    "<italic>25.8</italic>",
                    "46.7",
                    "0.0",
                    "49.6",
                    "1.0"
                ],
                [
                    "WTP",
                    "58.5",
                    "26.6",
                    "56.8",
                    "15.4",
                    "56.0",
                    "18.5",
                    "55.3",
                    "19.4",
                    "52.9",
                    "11.6",
                    "<italic>58.6</italic>",
                    "<italic>28.9</italic>",
                    "55.9",
                    "18.3"
                ],
                [
                    "<italic>Average</italic>",
                    "61.7",
                    "27.9",
                    "53.8",
                    "10.6",
                    "53.5",
                    "23.1",
                    "54.7",
                    "18.2",
                    "53.4",
                    "12.1",
                    "52.8",
                    "15.6",
                    "55.0",
                    "17.9"
                ],
                [
                    "[EMPTY]",
                    "<italic>LR All features</italic>",
                    "<italic>LR All features</italic>",
                    "<italic>LR All features</italic>",
                    "<italic>LR All features</italic>",
                    "<italic>LR All features</italic>",
                    "<italic>LR All features</italic>",
                    "<italic>LR All features</italic>",
                    "<italic>LR All features</italic>",
                    "<italic>LR All features</italic>",
                    "<italic>LR All features</italic>",
                    "<italic>LR All features</italic>",
                    "<italic>LR All features</italic>",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "MT",
                    "<italic>74.4</italic>",
                    "<italic>62.7</italic>",
                    "53.9",
                    "17.0",
                    "51.9",
                    "29.5",
                    "56.1",
                    "34.2",
                    "55.1",
                    "14.5",
                    "52.5",
                    "21.2",
                    "53.9",
                    "23.3"
                ],
                [
                    "OC",
                    "60.0",
                    "45.1",
                    "<italic>59.9</italic>",
                    "<italic>22.9</italic>",
                    "56.7",
                    "<bold>47.0</bold>",
                    "58.6",
                    "<bold>38.0</bold>",
                    "54.1",
                    "12.2",
                    "57.7",
                    "27.5",
                    "57.4",
                    "<bold>34.0</bold>"
                ],
                [
                    "PE",
                    "58.1",
                    "36.3",
                    "54.6",
                    "17.3",
                    "<italic>70.6</italic>",
                    "<italic>60.6</italic>",
                    "54.1",
                    "21.4",
                    "54.0",
                    "13.5",
                    "54.4",
                    "20.4",
                    "55.0",
                    "21.8"
                ],
                [
                    "VG",
                    "65.8",
                    "51.4",
                    "<bold>57.3</bold>",
                    "<bold>21.7</bold>",
                    "<bold>57.0</bold>",
                    "45.1",
                    "<italic>62.5</italic>",
                    "<italic>42.6</italic>",
                    "54.5",
                    "13.1",
                    "55.1",
                    "24.8",
                    "<bold>57.9</bold>",
                    "31.2"
                ],
                [
                    "WD",
                    "62.6",
                    "38.5",
                    "55.4",
                    "19.0",
                    "56.0",
                    "30.1",
                    "55.1",
                    "23.3",
                    "<italic>63.8</italic>",
                    "<italic>23.3</italic>",
                    "53.6",
                    "20.9",
                    "56.5",
                    "26.3"
                ],
                [
                    "WTP",
                    "58.0",
                    "41.7",
                    "56.1",
                    "20.3",
                    "56.8",
                    "42.6",
                    "<bold>59.1</bold>",
                    "<bold>38.0</bold>",
                    "52.2",
                    "11.2",
                    "<italic>59.7</italic>",
                    "<italic>30.2</italic>",
                    "56.5",
                    "30.8"
                ],
                [
                    "<italic>Average</italic>",
                    "60.9",
                    "42.6",
                    "55.5",
                    "19.1",
                    "55.7",
                    "38.9",
                    "56.6",
                    "31.0",
                    "54.0",
                    "12.9",
                    "54.7",
                    "23.0",
                    "56.2",
                    "27.9"
                ],
                [
                    "LR",
                    "<italic>single feature groups (averages across all source domains)</italic>",
                    "<italic>single feature groups (averages across all source domains)</italic>",
                    "<italic>single feature groups (averages across all source domains)</italic>",
                    "<italic>single feature groups (averages across all source domains)</italic>",
                    "<italic>single feature groups (averages across all source domains)</italic>",
                    "<italic>single feature groups (averages across all source domains)</italic>",
                    "<italic>single feature groups (averages across all source domains)</italic>",
                    "<italic>single feature groups (averages across all source domains)</italic>",
                    "<italic>single feature groups (averages across all source domains)</italic>",
                    "<italic>single feature groups (averages across all source domains)</italic>",
                    "<italic>single feature groups (averages across all source domains)</italic>",
                    "<italic>single feature groups (averages across all source domains)</italic>",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "+Discourse",
                    "40.2",
                    "15.0",
                    "31.7",
                    "5.8",
                    "30.3",
                    "27.4",
                    "27.7",
                    "19.9",
                    "40.9",
                    "4.5",
                    "25.3",
                    "13.3",
                    "32.7",
                    "14.3"
                ],
                [
                    "+Embeddings",
                    "56.6",
                    "35.2",
                    "51.4",
                    "12.8",
                    "53.6",
                    "30.7",
                    "53.3",
                    "24.3",
                    "54.2",
                    "13.2",
                    "52.9",
                    "19.0",
                    "53.7",
                    "22.5"
                ],
                [
                    "+Lexical",
                    "61.0",
                    "42.2",
                    "55.2",
                    "18.3",
                    "56.2",
                    "38.6",
                    "54.7",
                    "29.1",
                    "53.1",
                    "11.9",
                    "54.9",
                    "23.4",
                    "55.9",
                    "27.2"
                ],
                [
                    "+Structure",
                    "44.2",
                    "22.9",
                    "53.6",
                    "18.5",
                    "52.5",
                    "38.4",
                    "53.6",
                    "32.1",
                    "49.1",
                    "9.0",
                    "53.4",
                    "23.3",
                    "51.1",
                    "24.0"
                ],
                [
                    "+Syntax",
                    "54.8",
                    "37.0",
                    "54.2",
                    "17.5",
                    "54.3",
                    "40.6",
                    "55.7",
                    "32.0",
                    "53.0",
                    "11.8",
                    "53.8",
                    "22.5",
                    "54.3",
                    "26.9"
                ],
                [
                    "[EMPTY]",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "<italic>baselines</italic>",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Majority bsl",
                    "42.9",
                    "0.0",
                    "48.0",
                    "0.0",
                    "41.3",
                    "0.0",
                    "44.5",
                    "0.0",
                    "48.6",
                    "0.0",
                    "46.7",
                    "0.0",
                    "45.3",
                    "0.0"
                ],
                [
                    "Random bsl",
                    "47.5",
                    "30.6",
                    "50.5",
                    "14.0",
                    "51.0",
                    "38.4",
                    "51.0",
                    "29.3",
                    "49.3",
                    "9.3",
                    "50.3",
                    "20.2",
                    "49.9",
                    "23.6"
                ]
            ]
        },
        "gold_description": "table 3 lists the results of the best feature - based ( lr all features ) and deep learning ( cnn : rand ) systems , as well as single feature groups ( averages over all source domains , for the lowest scoring datasets , oc and wtp , the differences are only marginal when trained on a suitable dataset the best feature - based approach outperforms the best deep learning approach in most scenarios . in particular , as opposed to the in - domain experiments , the difference of the claim - f1 measure between the feature - based approaches and the deep learning approaches is striking . in the feature - based approaches , on average , a combination of all features yields the best results for both macro - f1 and claim - f1 . when comparing single features , lexical ones do the best job .",
        "generated_description": "table 2 presents the overall results of our experiments . table 2 shows the average results across all target domains and all strategies . the bold values indicate the best result for each strategy for each source domain and strategy , and the column \" average \" indicates the average over all test domains . from table 2 , we can see that in almost all cases , our method outperforms the baseline , and in some cases by a substantial margin . we can also see that our method generally improves over the baseline in most cases , the only exception is in the case of arabic - turkish ( mt ) , where our method is not as effective as the baseline ."
    },
    {
        "table_id": "457",
        "table_info": {
            "table_caption": "Table 4: Leave-one-domain-out experiments, best values per column are highlighted. For each test dataset (column head) we show two scores: Macro-F1 score (left-hand column) and F1 score for claims (right-hand column).",
            "table_column_names": [
                "Target → System ↓ CNN:rand",
                "<bold>MT</bold> 62.8",
                "<bold>MT</bold> 41.4",
                "<bold>OC</bold> <bold>57.8</bold>",
                "<bold>OC</bold> <bold>22.4</bold>",
                "<bold>PE</bold> <bold>59.7</bold>",
                "<bold>PE</bold> 36.2",
                "<bold>VG</bold> <bold>58.6</bold>",
                "<bold>VG</bold> 28.1",
                "<bold>WD</bold> <bold>54.2</bold>",
                "<bold>WD</bold> <bold>14.1</bold>",
                "<bold>WTP</bold> <bold>56.8</bold>",
                "<bold>WTP</bold> 25.6",
                "<bold>Avg</bold> <bold>58.3</bold>",
                "<bold>Avg</bold> 28.0"
            ],
            "table_content_values": [
                [
                    "All features",
                    "<bold>64.7</bold>",
                    "<bold>49.5</bold>",
                    "56.4",
                    "20.6",
                    "57.8",
                    "<bold>45.8</bold>",
                    "58.2",
                    "<bold>36.4</bold>",
                    "52.3",
                    "11.3",
                    "56.0",
                    "<bold>26.0</bold>",
                    "57.6",
                    "<bold>31.6</bold>"
                ],
                [
                    "Majority bsl",
                    "42.9",
                    "0.0",
                    "48.0",
                    "0.0",
                    "41.3",
                    "0.0",
                    "44.5",
                    "0.0",
                    "48.6",
                    "0.0",
                    "46.7",
                    "0.0",
                    "45.3",
                    "0.0"
                ],
                [
                    "Random bsl",
                    "47.5",
                    "30.6",
                    "50.5",
                    "14.0",
                    "51.0",
                    "38.4",
                    "51.0",
                    "29.3",
                    "49.3",
                    "9.3",
                    "50.3",
                    "20.2",
                    "49.9",
                    "23.6"
                ]
            ]
        },
        "gold_description": "we also performed experiments with mixed sources , the results are shown in table 4 . in this scenario , the neural network systems seem to benefit from the increased amount of training data and thus gave the best results .",
        "generated_description": "we find that the best overall results are achieved by combining all available features from the two systems , with the exception of the avg features , which perform slightly worse than the majority baseline . this is likely due to the fact that the avg feature set , which contains the most diverse set of domain - specific features , is the most effective in this setting , as it is the only feature set that can consistently outperform the baseline in all cases ."
    },
    {
        "table_id": "458",
        "table_info": {
            "table_caption": "Table 2: The accuracy(%) of the ML models for NLU.",
            "table_column_names": [
                "<bold>Model</bold>",
                "<bold>Intent Detection</bold>",
                "<bold>Slot Filling</bold>"
            ],
            "table_content_values": [
                [
                    "Random baseline",
                    "02.67",
                    "07.32"
                ],
                [
                    "Majority baseline",
                    "06.34",
                    "64.96"
                ],
                [
                    "HMM",
                    "-",
                    "87.20"
                ],
                [
                    "SVM",
                    "94.98",
                    "-"
                ],
                [
                    "GolVe-based",
                    "92.22",
                    "98.45"
                ]
            ]
        },
        "gold_description": "first , we represent utterances by their tf - idf representations as feature - vectors . we then supply the vector representation of each utterance to a support vector machine ( svm ) with a linear kernel for domain and intent identification , and to a hidden markov model ( hmm ) for slot filling . second , we encode words in a dialogue utterance by glove , as benchmark pre - trained word embeddings , to include the semantic relationships among words . we compute the average of word embeddings in an utterance to represent the utterance by a vector . table 2 shows the performance of the described models .",
        "generated_description": "for intent detection and slot filling , the golve - based model achieves 92 . 22 % and 98 . 45 % accuracy , respectively . the svm model achieves 94 . 98 % accuracy for intent detection , and the hmm model achieves 87 . 20 % for slot filling . the random baseline is a baseline that randomly assigns a slot to each intent label in the training set . the majority baseline is the majority baseline that always picks the intent label ."
    },
    {
        "table_id": "459",
        "table_info": {
            "table_caption": "Table 4: The output of the general survey.",
            "table_column_names": [
                "[EMPTY]",
                "1 (strongly agree)",
                "2 (agree)",
                "3 (disagree)",
                "4 (strongly disagree)"
            ],
            "table_content_values": [
                [
                    "was able to “understand” my questions",
                    "16.7%",
                    "<bold>50.0%</bold>",
                    "33.3%",
                    "00.0%"
                ],
                [
                    "was able to provide answers to my questions",
                    "00.0%",
                    "<bold>50.0%</bold>",
                    "<bold>50.0%</bold>",
                    "00.0%"
                ],
                [
                    "I was satisfied with the informativeness of the answers provided by",
                    "<bold>33.3%</bold>",
                    "<bold>33.3%</bold>",
                    "00.0%",
                    "<bold>33.3%</bold>"
                ],
                [
                    "I was satisfied with the fluency of the answers provided by",
                    "16.7%",
                    "<bold>50.0%</bold>",
                    "16.7%",
                    "16.7%"
                ],
                [
                    "could respond in a reasonable time",
                    "<bold>50.0%</bold>",
                    "33.3%",
                    "16.7%",
                    "00.0%"
                ],
                [
                    "The GUI of was suitable for reading the provided answers",
                    "<bold>50.0%</bold>",
                    "00.0%",
                    "33.3%",
                    "16.7%"
                ],
                [
                    "reduces my need to google a specific information",
                    "16.7%",
                    "<bold>66.7%</bold>",
                    "00.0%",
                    "16.7%"
                ],
                [
                    "would help me save some time in my work",
                    "<bold>33.3%</bold>",
                    "<bold>33.3%</bold>",
                    "<bold>33.3%</bold>",
                    "00.0%"
                ],
                [
                    "I would like to use in the future on a daily basis",
                    "00.0%",
                    "<bold>66.7%</bold>",
                    "00.0%",
                    "33.3%"
                ],
                [
                    "I will use to plan for my next conference",
                    "16.7%",
                    "16.7%",
                    "<bold>33.3%</bold>",
                    "<bold>33.3%</bold>"
                ]
            ]
        },
        "gold_description": "the results of the survey shows a general sat , confirmisfaction feeling of interactions with ing our motivation that the existence of such an agent helps researchers ( see table 4 ) . 83 % of participants agree that reduces their needs to search through the web ( e . g . using search engines ) to obtain information related to their research ; and in the future . however , 66 % of hu66 % use man judges disagreed on using for planning their schedule for a conference . this observation could be because the current version of mainly retrieves information for users but planning for a conference needs some inferences on such information as well .",
        "generated_description": "the percentage of individuals for which the system was able to provide the correct answer to one of the questions ranged from 16 . 7 % to 33 . 3 % ( strongly agree ) . the percentage for those who were able to “ understand ” their questions was in the range from 0 . 0 % to 1 . 7 % . the majority of the respondents were satisfied with the informativeness and fluency of the answers provided by the system , with a slight preference for the system ’ s outputs in the strongly agree and strongly disagree categories . only a very small percentage ( 0 . 0 % ) of the participants found the answers to be less “ perfect ” in the presence of the gui . in the other three categories , the percentage of people who found the gui of the system to be the most suitable for reading the provided answers was in between the percentages of 100 % and 100 % . in addition , the majority of participants found that the system could respond to the questions in a reasonable time , within a reasonable amount of time , and in a way that was suitable for the subjects to comprehend and respond to their questions . the lowest percentage in each category was found to be 25 % ."
    },
    {
        "table_id": "460",
        "table_info": {
            "table_caption": "Table 2: Accuracies of the different models on the cQA datasets and MAP/MRR on WikiPassageQA. Σ denotes the average accuracy over all cQA datasets.",
            "table_column_names": [
                "<bold>Model</bold>",
                "∑",
                "<bold>InsuranceQA</bold>",
                "<bold>Travel</bold>",
                "<bold>Cooking</bold>",
                "<bold>Academia</bold>",
                "<bold>Apple</bold>",
                "<bold>Aviation</bold>",
                "<bold>WikiPassageQA</bold>"
            ],
            "table_content_values": [
                [
                    "<bold>Unsupervised IR Baselines</bold>",
                    "<bold>Unsupervised IR Baselines</bold>",
                    "<bold>Unsupervised IR Baselines</bold>",
                    "<bold>Unsupervised IR Baselines</bold>",
                    "<bold>Unsupervised IR Baselines</bold>",
                    "<bold>Unsupervised IR Baselines</bold>",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "BM25",
                    "30.3",
                    "24.9",
                    "38.1",
                    "30.9",
                    "29.2",
                    "21.8",
                    "37.0",
                    "53.00 / 61.71"
                ],
                [
                    "TF*IDF",
                    "32.4",
                    "18.7",
                    "39.9",
                    "35.1",
                    "32.2",
                    "26.7",
                    "41.9",
                    "39.92 / 46.38"
                ],
                [
                    "<bold>Semantic Similarity Methods</bold>",
                    "<bold>Semantic Similarity Methods</bold>",
                    "<bold>Semantic Similarity Methods</bold>",
                    "<bold>Semantic Similarity Methods</bold>",
                    "<bold>Semantic Similarity Methods</bold>",
                    "<bold>Semantic Similarity Methods</bold>",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "InferSent",
                    "23.0",
                    "14.8",
                    "27.0",
                    "21.3",
                    "22.5",
                    "22.8",
                    "29.3",
                    "43.62 / 50.53"
                ],
                [
                    "p-mean Embeddings",
                    "25.7",
                    "17.0",
                    "32.1",
                    "29.3",
                    "24.3",
                    "19.6",
                    "31.7",
                    "42.82 / 50.44"
                ],
                [
                    "CNN",
                    "25.9",
                    "24.4",
                    "36.9",
                    "25.9",
                    "22.5",
                    "20.2",
                    "25.3",
                    "27.33 / 31.48"
                ],
                [
                    "BiLSTM",
                    "34.8",
                    "32.4",
                    "45.3",
                    "35.2",
                    "31.5",
                    "27.2",
                    "37.3",
                    "46.16 / 52.89"
                ],
                [
                    "Att.-BiLSTM",
                    "34.5",
                    "37.9",
                    "43.0",
                    "36.2",
                    "31.2",
                    "24.7",
                    "33.9",
                    "47.04 / 54.36"
                ],
                [
                    "AP-BiLSTM",
                    "31.3",
                    "31.9",
                    "38.8",
                    "32.2",
                    "27.3",
                    "22.9",
                    "34.5",
                    "46.98 / 55.20"
                ],
                [
                    "LW-BiLSTM",
                    "34.1",
                    "36.9",
                    "43.2",
                    "32.3",
                    "30.2",
                    "23.4",
                    "38.5",
                    "47.56 / 54.33"
                ],
                [
                    "<bold>Relevance Matching Methods</bold>",
                    "<bold>Relevance Matching Methods</bold>",
                    "<bold>Relevance Matching Methods</bold>",
                    "<bold>Relevance Matching Methods</bold>",
                    "<bold>Relevance Matching Methods</bold>",
                    "<bold>Relevance Matching Methods</bold>",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Bigrams",
                    "18.3",
                    "19.4",
                    "19.3",
                    "16.7",
                    "19.8",
                    "13.0",
                    "21.5",
                    "39.84 / 47.55"
                ],
                [
                    "CA-Wang",
                    "39.1",
                    "37.0",
                    "46.5",
                    "39.4",
                    "36.1",
                    "29.2",
                    "46.5",
                    "48.71 / 56.11"
                ],
                [
                    "COALA",
                    "43.6",
                    "38.0",
                    "53.8",
                    "47.3",
                    "42.2",
                    "32.0",
                    "48.4",
                    "<bold>60.58</bold> / <bold>69.40</bold>"
                ],
                [
                    "COALA p-means",
                    "<bold>45.2</bold>",
                    "<bold>39.9</bold>",
                    "53.4",
                    "46.5",
                    "<bold>44.2</bold>",
                    "<bold>34.5</bold>",
                    "<bold>52.9</bold>",
                    "59.29 / 68.48"
                ],
                [
                    "COALA syntax-aware",
                    "44.3",
                    "39.5",
                    "<bold>54.1</bold>",
                    "<bold>47.8</bold>",
                    "43.5",
                    "32.7",
                    "48.3",
                    "60.48 / 68.75"
                ]
            ]
        },
        "gold_description": "we compare all approaches across the insuranceqa and wikipassageqa benchmarks as well as the five stackexchange datasets in table 2 . for the cqa answer selection datasets we measure the accuracy , which is the ratio of correctly selected answers , and for the passage retrieval in wikipassageqa we report map / mrr . the results show that coala substantially outperforms all other relevance matching and semantic similarity approaches on all seven datasets . for instance , on the cqa datasets coala improves by 4 . 5pp over ca - wang and by 8 . 8pp over the best semantic similarity method on average . our extended approach coala p - means improves the performance of coala on these datasets by an additional 1 . 6pp . the proposed power mean aggregation achieves a strong improvement on four datasets and results in a small performance decrease in the remaining three cases . the results in table 2 show that our proposed syntax - aware extension coala syntax - aware , which incorporates syntactic roles of word sequences to learn syntax - aware aspect representations , improves the results in five out of seven cases . it thereby achieves an an average improvement of 0 . 7pp over coala in our cqa datasets .",
        "generated_description": "we compare our approach with several unsupervised and semi - supervised ir methods on the insuranceqa , academia , apple , and wikipassageqa datasets . we also compare with several state - of - the - art semantic similarity methods , including tf * idf and bm25 . we observe that our approach significantly outperforms all the baselines on all the datasets . for example , our approach improves the bleu score of bm25 from 30 . 3 to 38 . 1 and from 24 . 9 to 29 . 2 on the two largest datasets , which demonstrates the effectiveness of our approach ."
    },
    {
        "table_id": "461",
        "table_info": {
            "table_caption": "Table 3: Thematic ranker evaluation, incl. random ranker (RND) and upper bound (UB); bold - best result over syntactic rankers, underlined - best result over thematic rankers",
            "table_column_names": [
                "[EMPTY]",
                "synt",
                "glob",
                "pair",
                "loc",
                "RND",
                "UB"
            ],
            "table_content_values": [
                [
                    "EN",
                    "SE1",
                    ".869",
                    ".887",
                    ".867",
                    ".509",
                    ".927"
                ],
                [
                    "EN",
                    "SE2",
                    "<bold>.930</bold>",
                    "<bold>.929</bold>",
                    "<bold>.913</bold>",
                    ".500",
                    "<bold>.932</bold>"
                ],
                [
                    "DE",
                    "SD1",
                    ".655",
                    ".726",
                    ".637",
                    ".471",
                    ".818"
                ],
                [
                    "DE",
                    "SD2",
                    "<bold>.790</bold>",
                    "<bold>.820</bold>",
                    "<bold>.820</bold>",
                    ".456",
                    "<bold>.920</bold>"
                ]
            ]
        },
        "gold_description": "we first compare the performance of thematic rankers with respect to syntactic rankers and available datasets . the results of this comparison are summarized in table 3 and show that syntactic rankers positioning the object second in the hierarchy ( se2 and sd2 ) lead to better alignment on both datasets and have a higher upper bound . for english the global hierarchy - based ranker approaches the upper bound , closely followed by the pairwise ranker . the accuracy on german data is lower and the pairwise and local rankers outperform the global hierarchy - based ranker .",
        "generated_description": "thematic ranker evaluation . we evaluate the syntactic ranker by comparing it to a random ranker ( rnd ) and an upper bound ( ub ) , as well as the two best performing thematic rankers from \\ newcitedblp : journals / corr / abs - 1907 - 00686 and \\ newciteneelakantan - etal : 2014 : acl - ijcnlp . for each of these rankers , we compare it to two different language pairs : english ( se1 ) and german ( sd1 ) from the conll - 2012 shared task , and vice versa . for comparison , we also evaluate the ranking produced by a randomly - selected global ranker , which we refer to as the “ globoid ” ranker . overall , we find that thematic rankers perform slightly better than the purely syntactic ones , with the exception of the sd2 ranker in the en - de direction , where the difference is not statistically significant . the difference in performance between the two syntactic and the thematic ones is less pronounced in the german case ."
    },
    {
        "table_id": "462",
        "table_info": {
            "table_caption": "Table 4: Induced hierarchies",
            "table_column_names": [
                "EN",
                "Agent ≺ Cause/Instrument/Experiencer ≺ Pivot ≺ Theme ≺ Patient ≺ Material/Source/Asset ≺ Product ≺ Recipient/Beneficiary/Destination/Location ≺ Value/Stimulus/Topic/Result/Predicate/Goal/InitialLocation/Attribute/Extent"
            ],
            "table_content_values": [
                [
                    "DE",
                    "Agent ≺ Experiencer ≺ Stimulus/Pivot ≺ Cause ≺ Theme ≺ Patient ≺ Topic ≺ Instrument ≺ Beneficiary/InitialLocation ≺ Result ≺ Product/Goal ≺ Destination/Attribute ≺ Recipient ≺ Value/Time/CoAgent/Locus/Manner/Source/Trajectory/Location/Duration/Path/Extent"
                ]
            ]
        },
        "gold_description": "table 4 shows full rankings extracted for english and german data . while some correspondence to the hierarchies proposed for english agent in literature is evident ( e . g . ≺ instrument ≺ theme , similar to ( fillmore , 1968 ) ) , a direct comparison is impossible due to the differences in role definitions and underlying syntactic formalisms . notice the high number of ties : some roles never co - occur ( either by chance or by design ) or occur on the same syntactic rank ( e . g . oblique ) so there is no evidence for preference even if we enforce transitivity .",
        "generated_description": "in this section , we introduce the hierarchy hierarchy learning ( hcl ) approach . in hcl , each sub - relation is induced based on the hierarchical structure of the training data . in this approach , we start from the top layer and gradually move down the hierarchy by mapping each relation from the highest to the lowest layer . for example , the first layer in the second layer is created by mapping the span “ experiencer ” to “ pivot ” , and the next layer is built by mapping “ event ” and “ reason ” . the rest of the hierarchical layers are then mapped to the lower level “ domain ” or “ time ” using the hierarchical embedding language model ( hlm ) . we can see that the hcl approach can induce hierarchical hierarchies based on different types of relations such as “ title ” ( e . g . , ed ) , “ composite ” for ed , “ year ” in eq . the reason behind this is that these relations are semantically very similar to each other , and thus can be induced using the hierarchical approach ."
    },
    {
        "table_id": "463",
        "table_info": {
            "table_caption": "Table 5: Cross-lingual evaluation, global ranker",
            "table_column_names": [
                "[EMPTY]",
                "EN-test",
                "DE-test"
            ],
            "table_content_values": [
                [
                    "UB",
                    ".932",
                    ".920"
                ],
                [
                    "EN-train",
                    ".930",
                    ".787"
                ],
                [
                    "DE-train",
                    ".852",
                    ".790"
                ],
                [
                    "RND",
                    ".500",
                    ".456"
                ]
            ]
        },
        "gold_description": "table 5 contrasts the performance of ths induced from english and german training data , and evaluated on german and english test data respectively . while the cross - lingual performance is expectedly lower than the monolingual performance , it outperforms the random baseline by a large margin , suggesting the potential for crosslingual hierarchy induction .",
        "generated_description": "for this cross - lingual evaluation , we trained a rankmerger model for each of the three languages , and evaluated it on the en and de test sets . we can see that the performance is very close to the performance of the global ranker , and the difference is not statistically significant . the same procedure was also used for the rnd dataset ."
    },
    {
        "table_id": "464",
        "table_info": {
            "table_caption": "Table 3: Test Scores Document Ranking",
            "table_column_names": [
                "<bold>Test</bold>",
                "<bold>Metric</bold>",
                "<bold>tf-idf</bold>",
                "<bold>bm25</bold>",
                "<bold>emb</bold>",
                "<bold>feat</bold>",
                "<bold>auto/ cosine</bold>",
                "<bold>auto- rank</bold>",
                "<bold>auto- rank + bm25</bold>",
                "<bold>auto- rank + feat</bold>"
            ],
            "table_content_values": [
                [
                    "EGFR",
                    "MAP",
                    "0.289",
                    "0.632",
                    "0.310",
                    "0.575",
                    "0.054",
                    "0.545",
                    "0.588",
                    "<bold>0.699</bold>"
                ],
                [
                    "EGFR",
                    "nDCG",
                    "0.424",
                    "0.728",
                    "0.460",
                    "0.695",
                    "0.129",
                    "0.653",
                    "0.716",
                    "<bold>0.810</bold>"
                ],
                [
                    "KRAS",
                    "MAP",
                    "0.327",
                    "0.610",
                    "0.466",
                    "0.609",
                    "0.058",
                    "0.575",
                    "0.774",
                    "<bold>0.820</bold>"
                ],
                [
                    "KRAS",
                    "nDCG",
                    "0.456",
                    "0.723",
                    "0.592",
                    "0.712",
                    "0.145",
                    "0.688",
                    "0.867",
                    "<bold>0.914</bold>"
                ],
                [
                    "BRAF",
                    "MAP",
                    "0.342",
                    "0.656",
                    "0.427",
                    "0.704",
                    "0.063",
                    "0.563",
                    "0.702",
                    "<bold>0.812</bold>"
                ],
                [
                    "BRAF",
                    "nDCG",
                    "0.480",
                    "0.751",
                    "0.572",
                    "0.802",
                    "0.163.",
                    "0.671",
                    "0.820",
                    "<bold>0.901</bold>"
                ],
                [
                    "PIK3CA",
                    "MAP",
                    "0.341",
                    "0.633",
                    "0.486",
                    "0.625",
                    "0.079",
                    "0.541",
                    "0.779",
                    "<bold>0.810</bold>"
                ],
                [
                    "PIK3CA",
                    "nDCG",
                    "0.473",
                    "0.729",
                    "0.617",
                    "0.718",
                    "0.171",
                    "0.656",
                    "0.859",
                    "<bold>0.895</bold>"
                ]
            ]
        },
        "gold_description": "in table 3 we have listed the average map and ndcg scores of the test sets . the tf - idf model is outperformed by most of the other models . however , bm25 , which additionally takes the length of a document into account , performs very tf - idf and bm25 have the major benefit of well . fast computation . the feat model slightly outperforms the auto auto - rank + feat model is slightly better than the auto - rank + bm25 model , both of which have the overall best performance . this shows , that the auto - encoder learns something orthogonal to term frequency and document length . the best model with respect to document ranking is the auto - rank + feat model . in figure 3 we show the correlation between the different models . interestingly , the bm25 and the feat strongly correlate . however , the scores of bm25 do not correlate with the scores of the combination of auto - rank and bm25 . this indicates , that the model does not primarily learn to use the bm25 score but also focuses on the the auto - encoded representation . this underlines the hypothesis that the auto - encoder is able to represent latent features of the relationship of the query terms in the document . rank model . the distance features are a strong indicator for the semantic dependency between entities . these relationships need to be learned in the auto - rank model . the cosine similarity of a query and a document ( auto / cos ) does not yield a good result . this shows that the auto - encoder has learned many features , most of which do not correlate with our task . we also find that emb does not yield an equal performance to auto - rank . the combination of the",
        "generated_description": "for the kras dataset , the ndcg and map results are slightly better than for the tf - idf baseline . for the egfr and kras datasets , the best performance is achieved by the combination of auto - rank and feat . this is consistent with the results reported in the previous literature for this dataset ."
    },
    {
        "table_id": "465",
        "table_info": {
            "table_caption": "Table 1: Individual macro-F1 scores following Schulz et al. (2019a) for each of the epistemic activities. The BiLSTM uses FastText embeddings Bojanowski et al. (2017). This architecture is equal to Flair when only using FastText embeddings. UB reports the human upper bound (inter-annotator agreement) indicating room for improvement.",
            "table_column_names": [
                "<bold>Med</bold>",
                "BiLSTM",
                "EG 71.60",
                "EE 80.20",
                "HG 69.28",
                "DC 65.32"
            ],
            "table_content_values": [
                [
                    "<bold>Med</bold>",
                    "UB",
                    "85.61",
                    "90.25",
                    "86.37",
                    "85.58"
                ],
                [
                    "<bold>TEd</bold>",
                    "BiLSTM",
                    "78.53",
                    "78.87",
                    "57.16",
                    "61.77"
                ],
                [
                    "<bold>TEd</bold>",
                    "UB",
                    "93.29",
                    "90.71",
                    "81.77",
                    "82.11"
                ]
            ]
        },
        "gold_description": "in table 1 , we report the performance of the bilstm implementation for predicting epistemic activities in the med and ted data . as we can see , the difficulty of predicting the classes varies between different activities . despite some room for improvement with respect to the human upper bound ( ub ) based on inter - rater agreement , the interactive nature of famulus helps in succeeding in this attempt by continually improving the model when new data is available . we conduct similar experiments for the prediction of fine - grained diagnostic entities , but omit a comprehensive discussion due to space limitations .",
        "generated_description": "we report macro - f1 scores for each of the activities following schulz et al . we also report the human upper - bound ( inter - annotator agreement ) indicating room for improvement . we observe that the overall performance is similar to flair when only using fasttext embeddings ."
    },
    {
        "table_id": "466",
        "table_info": {
            "table_caption": "Table 2: SLC experiments on different feature sets",
            "table_column_names": [
                "<bold>Features</bold>",
                "<bold>Model</bold>",
                "<bold>Development</bold> P",
                "<bold>Development</bold> R",
                "<bold>Development</bold> F"
            ],
            "table_content_values": [
                [
                    "text",
                    "BERT",
                    "0.69",
                    "0.55",
                    "0.61"
                ],
                [
                    "<bold>text</bold>",
                    "<bold>BERT*</bold>",
                    "<bold>0.57</bold>",
                    "<bold>0.79</bold>",
                    "<bold>0.66</bold>"
                ],
                [
                    "context",
                    "BERT",
                    "0.70",
                    "0.53",
                    "0.60"
                ],
                [
                    "context",
                    "BERT*",
                    "0.63",
                    "0.67",
                    "0.65"
                ],
                [
                    "BERT logits + handcrafted**",
                    "LR",
                    "0.70",
                    "0.56",
                    "0.61"
                ],
                [
                    "BERT logits + handcrafted**",
                    "LR*",
                    "0.60",
                    "0.71",
                    "0.65"
                ],
                [
                    "BERT logits + tagged spans",
                    "LR",
                    "0.70",
                    "0.53",
                    "0.60"
                ],
                [
                    "BERT logits + tagged spans",
                    "LR*",
                    "0.61",
                    "0.71",
                    "0.66"
                ],
                [
                    "BERT logits + all",
                    "LR",
                    "0.71",
                    "0.52",
                    "0.60"
                ],
                [
                    "BERT logits + all",
                    "LR*",
                    "0.61",
                    "0.71",
                    "0.66"
                ]
            ]
        },
        "gold_description": "the final model used the finetuned bert model mentioned above with a condition to predict non - propaganda only if the prediction probability is above 0 . 70 for the nonpropaganda class . otherwise the prediction of the sentence will be propaganda even if the majority of the prediction probability mass was for the non - propaganda class . this was a way to handle the unbalance in the training data without having to discard part of the data . the 0 . 70 threshold was chosen after elaborate experiments on both the local and the shared - task ' s development sets . this condition consistently provided an improvement of around 5 points in f1 score of the propaganda class on all experiments using different sets of features as shown in table 2 . in slc , we ran multiple experiments using bert with and without additional features as shown in table 2 . the features include using the text passed as is to bert without any preprocessing . also , we experimented with adding the context which includes the two sentences that come before and after the target sentence . context sentences were concatenated and passed as the second bert input , while the target sentence was passed as the first bert input . in addition , we experimented with using bert logits ( i . e . , the probability predictions per class ) as features in a logistic regression ( lr ) classifier concatenated with handcrafted features ( e . g . , liwc , quotes , questions ) , and with predictions of our flc classifier ( tagged spans : whether the sentence has a propaganda fragment or not ) . however , none of these features added any statistically significant improvements . therefore , we used bert predictions for our final model with a condition to predict the majority class non - propaganda only if its prediction probability is more than 0 . 70 as shown in table 3 . this is a modified threshold as opposed to 0 . 80 in the experiments shown in table 2 to",
        "generated_description": "we report precision , recall , and f1 scores for the development and the test sets separately . the best performing model on the development set is a logistic regression classifier with bert embeddings ( 0 . 71 f1 score ) , followed by a bert * model with the context features . the model with all features achieves the best performance on the test set , outperforming the previous state - of - the - art by a significant margin of 4 . 1 points ."
    },
    {
        "table_id": "467",
        "table_info": {
            "table_caption": "Table 5: Precision, recall and F1 scores of the FLC task on the development and test sets of the shared task.",
            "table_column_names": [
                "<bold>Propaganda</bold> <bold>Technique</bold>",
                "<bold>Development</bold> <bold>P</bold>",
                "<bold>Development</bold> <bold>R</bold>",
                "<bold>Development</bold> <bold>F</bold>",
                "<bold>Test</bold> <bold>F</bold>"
            ],
            "table_content_values": [
                [
                    "Appeal to Authority",
                    "0",
                    "0",
                    "0",
                    "0.212"
                ],
                [
                    "Appeal to Fear/Prejudice",
                    "0.285",
                    "0.006",
                    "0.011",
                    "0"
                ],
                [
                    "Bandwagon",
                    "0",
                    "0",
                    "0",
                    "0"
                ],
                [
                    "Black-and-White Fallacy",
                    "0",
                    "0",
                    "0",
                    "0"
                ],
                [
                    "Causal Oversimplification",
                    "0",
                    "0",
                    "0",
                    "0"
                ],
                [
                    "Doubt",
                    "0.007",
                    "0.001",
                    "0.002",
                    "0"
                ],
                [
                    "Exaggeration,Minimisation",
                    "0.833",
                    "0.085",
                    "0.154",
                    "0"
                ],
                [
                    "Flag-Waving",
                    "0.534",
                    "0.102",
                    "0.171",
                    "0.195"
                ],
                [
                    "Loaded Language",
                    "0.471",
                    "0.160",
                    "0.237",
                    "0.130"
                ],
                [
                    "Name Calling,Labeling",
                    "0.270",
                    "0.112",
                    "0.158",
                    "0.150"
                ],
                [
                    "O,IV,C",
                    "0",
                    "0",
                    "0",
                    "0"
                ],
                [
                    "Red Herring",
                    "0",
                    "0",
                    "0",
                    "0"
                ],
                [
                    "Reductio ad hitlerum",
                    "0.318",
                    "0.069",
                    "0.113",
                    "0"
                ],
                [
                    "Repetition",
                    "0",
                    "0",
                    "0",
                    "0"
                ],
                [
                    "Slogans",
                    "0.221",
                    "0.034",
                    "0.059",
                    "0.003"
                ],
                [
                    "Straw Men",
                    "0",
                    "0",
                    "0",
                    "0"
                ],
                [
                    "Thought-terminating Cliches",
                    "0",
                    "0",
                    "0",
                    "0"
                ],
                [
                    "Whataboutism",
                    "0",
                    "0",
                    "0",
                    "0"
                ],
                [
                    "<bold>Overall</bold>",
                    "0.365",
                    "0.073",
                    "0.122",
                    "0.131∗"
                ]
            ]
        },
        "gold_description": "we also experimented with stacking bert embeddings with all or some of the embeddings mentioned above . however , this resulted on lower 2https : / / www . urbandictionary . com / 3https : / / data . world / jaredfern / urban - dictionary embedding in flc , we only show the results of our best model in table 5 to focus more on the differences between propaganda techniques . a more elaborate study of performance of different models should follow in future work . the best model is a bilstm - crf with flair and urban glove embed as we can see in table 5 , we can divide the propaganda techniques into three groups according to the model ' s performance on the development and test sets . the first group includes techniques with non - zero f1 scores on both datasets : flag - waving , loaded language , name calling , labeling and slogans . this group has techniques that appear frequently in the data and / or techniques with strong lexical signals ( e . g . \" american people \" in flag - waving ) or punctuation signals ( e . g . quotes in slogans ) . the second group has the techniques with a nonzero f1 score on only one of the datasets but not the other , such as : appeal to authority , appeal to fear , doubt , reduction , and exaggeration , minimisation . two out of these five techniques ( appeal to fear and doubt ) have very small non - zero f1 on the development set which indicates that they are generally challenging on our model and were only tagged due to minor differences between the two datasets . however , the remaining three types show significant drops from development to test sets or vice - versa . this requires further analysis to understand why the model was able to do well on one dataset but get zero on the other dataset , which we leave for future work .",
        "generated_description": "the f1 - scores on the development set and the test set are 0 . 212 and 0 . 195 , respectively . propaganda is the most frequently detected category in both the development and test sets , followed by the technique category with an f1 score of 0 . 347 . the least frequently detected categories are the appeal to authority , bandwagon , black - and - white fallacy , and doubt , with f1 scores 0 . 011 , 0 . 002 respectively . the most frequently seen categories in both sets are the flag - waving , loaded language and name calling , labeling ."
    },
    {
        "table_id": "468",
        "table_info": {
            "table_caption": "Table 4: Ranked Entity Scores for KRAS Validation and PIK3CA Testing",
            "table_column_names": [
                "<bold>Metrics</bold>",
                "<bold>rocchio</bold>",
                "<bold>relevance model</bold>",
                "<bold>auto-ref</bold>",
                "<bold>rocchio + relevance</bold>",
                "<bold>auto-ref + rocchio + relevance</bold>"
            ],
            "table_content_values": [
                [
                    "nDCG@10",
                    "0.232",
                    "0.274",
                    "0.195",
                    "0.341",
                    "<bold>0.464</bold>"
                ],
                [
                    "nDCG@100",
                    "0.360",
                    "0.397",
                    "0.329",
                    "0.439",
                    "<bold>0.536</bold>"
                ],
                [
                    "MAP",
                    "0.182",
                    "0.223",
                    "0.156",
                    "0.270",
                    "<bold>0.386</bold>"
                ]
            ]
        },
        "gold_description": "to evaluate the ranking of entity terms we have computed ndcg @ 10 , ndcg @ 100 and map , see table 4 for the results . we also compute recall @ k of relevant documents for automatically refined queries using the 1st , 2nd and 3rd ranked entities . the scores can be found in table 5 . tables 4 and 5 show that the relevance model outperforms the rocchio algorithm in every aspect . both models outperform the auto - encoder approach ( auto - ref ) . we suspect that summing over the encodings distorts the individual features too much for a correct extraction of relevant entities to be possible . the combination of all three models ( auto - ref + rocchio + relevance ) outperforms the other models in most cases . especially the performance for ranking of entity terms is increased using the autoencoded features . however , it is interesting to see that the rocchio + relevance model outperforms the recall for second and third best terms . this indicates that for user - evaluated term suggestions , the inclusion of the auto - encoded features is advisable . for automatic query refinement however , in average , this is not the case .",
        "generated_description": "for both kras and pik3ca , the rocchio and relevance models were trained on the full training set , while the auto - ref model was trained on a subset of the training set that was used for hyper - parameter tuning . for each of the evaluation metrics , the best performing model in terms of ndcg @ 10 ( “ auto - ref ” ) was ranked first for 10 , 20 , 30 , and 100 entities , and the best model for 100 entities was ranked second for 20 , 25 , and 30 . for the map metric , “ map ” was used to measure the mean absolute difference between the predicted and ground truth entities for each query ."
    },
    {
        "table_id": "469",
        "table_info": {
            "table_caption": "Table 1: Features of previous evaluation applications compared to Ours (Linspector Web). #Lang: Number of supported languages, #Task-Type: Number and type of the tasks, where WST: Word similarity tasks, DT: Downstream Tasks, PT: Probing Tasks. Static: Static word embeddings and Models: Pretrained downstream models.",
            "table_column_names": [
                "[EMPTY]",
                "#Lang",
                "#Task-Type",
                "Web",
                "Offline",
                "Static",
                "Models",
                "Layers",
                "Epochs"
            ],
            "table_content_values": [
                [
                    "Faruqui and Dyer (<ref id='bib-bib7'>2014a</ref>)",
                    "4",
                    "10-WST",
                    "×",
                    "×",
                    "×",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Nayak et al. (<ref id='bib-bib14'>2016</ref>)",
                    "1",
                    "7-DT",
                    "×",
                    "×",
                    "×",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Köhn (<ref id='bib-bib10'>2015</ref>)",
                    "7",
                    "7-PT",
                    "[EMPTY]",
                    "×",
                    "×",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Ours",
                    "28",
                    "16-PT",
                    "×",
                    "×",
                    "×",
                    "×",
                    "×",
                    "×"
                ]
            ]
        },
        "gold_description": "a now retired evaluation suite for word embeddings was wordvectors . org ( faruqui and dyer , 2014a ) . veceval ( nayak et al . , 2016 ) is another web based suite for static english word embeddings that perform evaluation on a set of downstream tasks which may take several hours . k ¨ ohn ( 2015 ) introduced an offline , multilingual probing suite for static embeddings limited in terms of the languages and the probing tasks . a comparison of the system features of previous studies is given in table 1 .",
        "generated_description": "we compare our approach with several previous works in the field of machine learning on baidu ’ s news feed ( nayak et al . , we use the same experimental setup as faruqui and dyer \\ shortcitefaruqui - dyer2014a and köhn \\ shortcitewainwright - köhn - etal - 2015 - task for evaluating the performance of the proposed approach . the only difference between our approach and theirs is that we use a pretrained language model to perform the task - type tasks , instead of using static word embeddings . our approach outperforms the previous state - of - the - art by a significant margin ."
    },
    {
        "table_id": "470",
        "table_info": {
            "table_caption": "Table 6: Refinement Terms for Query {PIK3CA}",
            "table_column_names": [
                "<bold>Variants</bold>",
                "<bold>Diseases</bold>",
                "<bold>Drugs</bold>"
            ],
            "table_content_values": [
                [
                    "H1047R",
                    "Color. Neop.",
                    "Lapatinib"
                ],
                [
                    "V600E",
                    "Liposarcoma",
                    "Mitomycin"
                ],
                [
                    "T790M",
                    "Adenocarcin.",
                    "Linsitinib"
                ],
                [
                    "E545K",
                    "Glioblastoma",
                    "Dactolisib"
                ],
                [
                    "E542K",
                    "Stomach Neop.",
                    "Pictrelisib"
                ]
            ]
        },
        "gold_description": "in table 6 we show the top ranked entities of type variants , diseases and drugs for the query { pik3ca } . while the diseases and the drugs are all relevant , v600e and t790m are in fact not variants of the gene pik3ca . however , when refining the query { pik3ca , v600e , braf , h1047r , dabrafenib } , the top ranked diseases are [ melanoma , neoplasms , carcinoma non small cell lung ( cnscl ) , thyroid neoplasms , colorectal neoplasms ] . using melanoma for refinement , retrieves the top ranked paper ( falchook et al . , 2013 ) which perfectly includes all these entities in a biomarker relationship .",
        "generated_description": "for the query { pik3ca } , we use the clinical notes in the ppik - 3 database of drugs and provide a list of drugs that have been used in clinical trials in the literature . this list includes a wide range of drugs , some of which have been studied in literature for years and some that have not been studied at all . some of these drugs , like liposarcoma and linsitinib , have been investigated in literature as a drug class that has been shown to be highly effective in many clinical trials . for example , the drug h1047r has been used as a candidate for several clinical trials for multiple diseases . the drug v600e has been associated with multiple types of cancer and has a wide variety of clinical notes , including colorectal cancer , mantle cell carcinoma , polyps and ulcerative colitis . the other drug e545k is associated with the disease glioblastoma ."
    },
    {
        "table_id": "471",
        "table_info": {
            "table_caption": "Table 1: Results of the difficulty prediction approaches. SVM (original) has been taken from Beinborn (2016)",
            "table_column_names": [
                "Model",
                "<bold>Original data</bold> <italic>ρ</italic>",
                "<bold>Original data</bold> rmse",
                "<bold>Original data</bold> qw<italic>κ</italic>",
                "<bold>New data</bold> <italic>ρ</italic>",
                "<bold>New data</bold> rmse",
                "<bold>New data</bold> qw<italic>κ</italic>"
            ],
            "table_content_values": [
                [
                    "SVM (original)",
                    ".50",
                    ".23",
                    ".44",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "SVM (reproduced)",
                    ".49",
                    ".24",
                    ".47",
                    ".50",
                    ".21",
                    ".39"
                ],
                [
                    "MLP",
                    ".42",
                    ".25",
                    ".31",
                    ".41",
                    ".22",
                    ".25"
                ],
                [
                    "BiLSTM",
                    ".49",
                    ".24",
                    ".35",
                    ".39",
                    ".24",
                    ".27"
                ]
            ]
        },
        "gold_description": "the right - hand side of table 1 shows the performance of our svm and the two neural methods . the results indicate that the svm setup is well suited for the difficulty prediction task and that it successfully generalizes to new data .",
        "generated_description": "the svm ( original ) results are taken from beinborn et al . the original svm results are slightly better than the ones we have used in the original paper , but we did not reproduce the results of the svm with the original hyperparameters in our original paper . therefore , we have modified the results slightly to make them more comparable to the original ones . the mlp and bilstm models have been trained on the original training set and evaluated on the new training set . the best accuracy is achieved by the bilstm model ."
    },
    {
        "table_id": "472",
        "table_info": {
            "table_caption": "Table 2: rmse for both strategies on each corpora with randomly sampled target difficulties τ",
            "table_column_names": [
                "Strategy",
                "Brown",
                "Reuters",
                "Gutenberg"
            ],
            "table_content_values": [
                [
                    "SEL",
                    ".11",
                    ".12",
                    ".10"
                ],
                [
                    "SIZE",
                    ".13",
                    ".15",
                    ".12"
                ]
            ]
        },
        "gold_description": "table 2 shows the results for our three corpora . throughout all three corpora , both manipulation strategies perform well . sel consistently outperforms size , which matches our observations from the previous experiment .",
        "generated_description": "next , we compare the performance of sel and size on each corpus with randomly sampled target difficulties τ . we observe that sel outperforms size in terms of rmse on all three corpora , and that size performs slightly better than sel on the gutenberg corpus . on the other hand , on the reuters corpus , sel performs slightly worse than size ."
    },
    {
        "table_id": "473",
        "table_info": {
            "table_caption": "Table 3: Mean error rates e(T) per text and strategy. Results marked with ∗ deviate significantly from DEF",
            "table_column_names": [
                "[EMPTY]",
                "easy (dec) SEL",
                "easy (dec) SIZE",
                "default DEF",
                "hard (inc) SEL",
                "hard (inc) SIZE"
            ],
            "table_content_values": [
                [
                    "<italic>T</italic>1",
                    "–",
                    "–",
                    ".30",
                    "–",
                    "–"
                ],
                [
                    "<italic>T</italic>2",
                    ".17∗",
                    ".11∗",
                    ".34",
                    ".66∗",
                    ".44∗"
                ],
                [
                    "<italic>T</italic>3",
                    ".16∗",
                    ".10∗",
                    ".27",
                    ".52∗",
                    ".43∗"
                ],
                [
                    "<italic>T</italic>4",
                    ".28",
                    ".09∗",
                    ".30",
                    ".43∗",
                    ".45∗"
                ],
                [
                    "Average",
                    ".20∗",
                    ".10∗",
                    ".30",
                    ".53∗",
                    ".44∗"
                ]
            ]
        },
        "gold_description": "table 3 shows the error rates per c - test and strategy . both sel and size are overall able to significantly ( p < 0 . 025 ) increase and decrease the test ' s difficulty over def , and with the exception of sel , dec , the effect is also statistically significant 4 for all individual text and strategy pairs .",
        "generated_description": "for both the easy and hard datasets , the sel and size strategies significantly outperform the default def strategy . for the easy dataset , the average error rate e ( t ) for sel is . 10 and . 30 , respectively , while for the hard dataset it is . 53 and . 44 , respectively . we note that the size of the data used for def differs between the two datasets . for both datasets , there is no significant difference in the mean error rates across the three text types ."
    },
    {
        "table_id": "474",
        "table_info": {
            "table_caption": "Table 3: FrameId results (in %) on English (upper) and German (lower) with and without using the lexicon. Reported are accuracy and F1-macro, both also for ambiguous predicates (mean scores over ten runs). Models: (a) Data, Lexicon, and Data-Lexicon Baselines. (b) Previous models for English. (c) Ours: unimodal our-uni, multimodal on top of our-uni – our-mm – with Imagined embeddings (and synset visual embeddings for English). Best results highlighted in bold. The best run’s results for English were: our_uni: acc: 89.35 ; acc_amb: 76.45 ; F1-m: 76.95 ; F1-m_amb: 54.02 (with lexicon) our_mm (im, synsV): acc: 89.09 ; acc_amb: 75.86 ; F1-m: 78.17 ; F1-m_amb: 57.48 (with lexicon)",
            "table_column_names": [
                "[EMPTY]",
                "<bold>model</bold>",
                "<bold>with lexicon</bold> <bold>acc</bold>",
                "<bold>with lexicon</bold> <bold>acc_amb</bold>",
                "<bold>with lexicon</bold> <bold>F1-m</bold>",
                "<bold>with lexicon</bold> <bold>F1-m_amb</bold> 28.452756pt",
                "<bold>without lexicon</bold> <bold>acc</bold>",
                "<bold>without lexicon</bold> <bold>acc_amb</bold>",
                "<bold>without lexicon</bold> <bold>F1-m</bold>",
                "<bold>without lexicon</bold> <bold>F1-m_amb</bold>"
            ],
            "table_content_values": [
                [
                    "FrameNet",
                    "Data Baseline",
                    "79.06",
                    "69.73",
                    "33.00",
                    "37.42",
                    "79.06",
                    "69.73",
                    "33.00",
                    "37.42"
                ],
                [
                    "FrameNet",
                    "Lexicon Baseline",
                    "79.89",
                    "55.52",
                    "65.61",
                    "30.95",
                    "–",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "FrameNet",
                    "<bold>Data-Lexicon Baseline</bold>",
                    "86.32",
                    "69.73",
                    "64.54",
                    "37.42",
                    "–",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "FrameNet",
                    "hermann2014semantic",
                    "88.41",
                    "73.10",
                    "–",
                    "– 28.452756pt",
                    "–",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "FrameNet",
                    "Hartmann2017OOD",
                    "87.63",
                    "73.80",
                    "–",
                    "– 28.452756pt",
                    "77.49",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "FrameNet",
                    "<bold>our</bold>_uni",
                    "88.66",
                    "74.92",
                    "76.65",
                    "53.86",
                    "79.96",
                    "71.70",
                    "57.07",
                    "47.40"
                ],
                [
                    "FrameNet",
                    "<bold>our</bold>_mm (im, synsV)",
                    "88.82",
                    "75.28",
                    "76.77",
                    "54.80",
                    "81.21",
                    "72.51",
                    "57.81",
                    "49.38"
                ],
                [
                    "SALSA",
                    "Data Baseline",
                    "77.00",
                    "70.51",
                    "37.40",
                    "28.87",
                    "77.00",
                    "70.51",
                    "37.40",
                    "28.87"
                ],
                [
                    "SALSA",
                    "Lexicon Baseline",
                    "61.57",
                    "52.5",
                    "19.36",
                    "15.68",
                    "–",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "SALSA",
                    "<bold>Data-Lexicon Baseline</bold>",
                    "77.16",
                    "70.51",
                    "38.48",
                    "28.87",
                    "–",
                    "–",
                    "–",
                    "–"
                ],
                [
                    "SALSA",
                    "<bold>our</bold>_uni",
                    "80.76",
                    "75.59",
                    "48.42",
                    "41.38",
                    "80.59",
                    "75.52",
                    "47.64",
                    "41.17"
                ],
                [
                    "SALSA",
                    "<bold>our</bold>_mm (im)",
                    "80.71",
                    "75.58",
                    "48.29",
                    "41.19",
                    "80.51",
                    "75.51",
                    "47.36",
                    "40.93"
                ]
            ]
        },
        "gold_description": "first , we report our results on english data ( see table 3 , top ) we compare against german data ( see table 3 , bottom ) . our new strong data - lexicon baseline reaches a considerable accuracy of 86 . 32 % , which is hard to beat by trained models . even the most recent state of the art only beats it by about two points : 88 . 41 % ( hermann et al . , 2014 ) . however , the accuracy of the baseline drops for ambiguous predicates ( 69 . 73 % ) and the f1 - macro score reveals its weakness toward minority classes ( drop from 64 . 54 % to 37 . 42 % ) . our unimodal system trained and evaluated on english data slightly exceeds the accuracy of the previous state of the art ( 88 . 66 % on average versus 88 . 41 % for hermann et al . , 2014 ) ; our best run ' s accuracy is 89 . 35 % . table 3 : frameid results ( in % ) on english ( upper ) and german ( lower ) with and without using the lexicon . reported are accuracy and f1 - macro , both also for ambiguous predicates ( mean scores over ten runs ) . models : ( a ) data , lexicon , and data - lexicon baselines . ( b ) previous models for english . ( c ) ours : unimodal our - uni , multimodal on top of our - uni – our - mm – with imagined embeddings ( and synset visual embeddings for english ) . best results highlighted in bold . the best run ' s results for english were : our uni : acc : 89 . 35 ; acc amb : 76 . 45 ; f1 - m : 76 . 95 ; f1 - m amb : 54 . 02 ( with lexicon ) our mm ( im , synsv ) : acc : 89 . 09 ; acc amb",
        "generated_description": "the data - lexicon baseline is the baseline that we used for our data - adaptation experiments . for framenet with lexicon , we used the data - lexicon baseline for training , and for framenet without lexicon we used our own lexicon for training . the f1 - m_amb score is 28 . 452756pt , which is significantly lower than the f1 score obtained with the lexicon baseline . this shows that our lexicon is helpful in improving the performance of our framenet model ."
    },
    {
        "table_id": "475",
        "table_info": {
            "table_caption": "Table 1. The performances of various models on MSCOCO Karpathy split",
            "table_column_names": [
                "Method",
                "<bold>BLEU-1</bold>",
                "<bold>BLEU-2</bold>",
                "<bold>BLEU-3</bold>",
                "<bold>BLEU-4</bold>",
                "<bold>METEOR</bold>",
                "<bold>ROUGE</bold>",
                "<bold>CIDEr</bold>"
            ],
            "table_content_values": [
                [
                    "Soft-Attention (xu2015show)",
                    "70.7",
                    "49.2",
                    "34.4",
                    "24.3",
                    "23.9",
                    "-",
                    "-"
                ],
                [
                    "CNN+Att (aneja2018convolutional)",
                    "71.1",
                    "53.8",
                    "39.4",
                    "28.7",
                    "24.4",
                    "52.2",
                    "91.2"
                ],
                [
                    "SCST (rennie2017self)",
                    "77.4",
                    "60.9",
                    "46.0",
                    "34.1",
                    "26.7",
                    "55.7",
                    "114.0"
                ],
                [
                    "Adaptive (lu2017knowing)",
                    "74.2",
                    "58.0",
                    "43.9",
                    "33.2",
                    "26.6",
                    "54.9",
                    "108.5"
                ],
                [
                    "GroupCap (chen2018groupcap)",
                    "74.4",
                    "58.1",
                    "44.3",
                    "33.8",
                    "26.2",
                    "-",
                    "-"
                ],
                [
                    "NBT (lu2018neural)",
                    "75.5",
                    "-",
                    "-",
                    "34.7",
                    "27.1",
                    "-",
                    "107.2"
                ],
                [
                    "StackCap (gu2018stack)",
                    "78.4",
                    "62.5",
                    "47.9",
                    "36.1",
                    "27.4",
                    "56.9",
                    "120.4"
                ],
                [
                    "Up-Down (anderson2018bottom)",
                    "79.8",
                    "63.4",
                    "48.4",
                    "36.3",
                    "27.7",
                    "56.9",
                    "120.1"
                ],
                [
                    "UGRIC",
                    "81.3",
                    "65.2",
                    "50.3",
                    "38.2",
                    "28.4",
                    "58.6",
                    "123.5"
                ],
                [
                    "UGRIC w/o copying",
                    "80.8",
                    "64.6",
                    "49.6",
                    "37.7",
                    "28.1",
                    "58.2",
                    "122.7"
                ],
                [
                    "UGRIC w/o discriminator",
                    "80.5",
                    "64.2",
                    "49.1",
                    "37.3",
                    "27.9",
                    "57.9",
                    "122.3"
                ]
            ]
        },
        "gold_description": "the automatic evaluation results on the test set of mscoco are shown in table 1 . our model outperforms all the compared approaches on all automatic evaluation metrics . in particular , by benefiting from the retrieved captions , our model gets the highest cider score of 123 . 5 , suggesting that the captions generated by our model are informative .",
        "generated_description": "we compare our model with the state - of - the - art methods in terms of bleu - 1 , 2 , 3 , 4 , meteor , rouge , and cider scores . our model outperforms the previous best method by a large margin , i . e . , scst ( rennie2017self ) and adaptive ( lu2017knowing ) on all the metrics , which demonstrates the effectiveness of our approach ."
    },
    {
        "table_id": "476",
        "table_info": {
            "table_caption": "Table 1: Fraction of incorrect summaries produced by recent summarization systems on the CNN-DM test set, evaluated on a subset of 100 summaries. ROUGE scores (on full test set) and average summary length for reference.",
            "table_column_names": [
                "<bold>Model</bold>",
                "<bold>Incorrect</bold>",
                "<bold>ROUGE-1</bold>",
                "<bold>ROUGE-2</bold>",
                "<bold>ROUGE-L</bold>",
                "<bold>Length</bold>"
            ],
            "table_content_values": [
                [
                    "PGC See17",
                    "8%",
                    "39.49%",
                    "17.24%",
                    "36.35%",
                    "59.7"
                ],
                [
                    "FAS Chen18",
                    "26%",
                    "40.88%",
                    "17.80%",
                    "38.53%",
                    "72.1"
                ],
                [
                    "BUS Gehrmann18",
                    "25%",
                    "41.52%",
                    "18.76%",
                    "38.60%",
                    "54.4"
                ]
            ]
        },
        "gold_description": "table 1 shows the evaluation results . in line with the findings for sentence summarization ( cao et al . , 2018 ; li et al . , 2018 ) , we observe that factual errors are also a frequent problem for document summarization . interestingly , the fraction of incorrect summaries is substantially higher for fas and bus compared to pgc . the length of the generated summaries appears to be unrelated to the number of errors . instead , the higher abstractiveness of summaries produced by fas and bus , as analyzed in their respective papers , seems to also increase the chance of introducing errors . in addition , we also observe that among the three systems correctness and rouge scores do not correlate , emphasizing one more time that a rouge based evaluation alone is far too limited to account for the full scope of the summarization task .",
        "generated_description": "we evaluate the quality of the summaries produced by recent summarization systems on the cnn - dm test set using rouge fas chen18 , pgc see17 , and bus gehrmann18 . we use a subset of 100 randomly sampled summaries from the test set to evaluate the performance of these systems . we find that the pgc and fas systems produce significantly more incorrect summaries than the bus system , with 25 % and 26 % of the samples being deemed inadmissible . the bus system produces significantly longer summaries , with an average length of 54 . 4 words , compared to 36 . 35 words for the fas system and 72 . 1 words for pgc ."
    },
    {
        "table_id": "477",
        "table_info": {
            "table_caption": "Table 2: Fraction of incorrect summaries at first position after reranking with different NLI models. ↑ and ↓ show the absolute number of improved (incorrect replaced by correct) and worsened (vice versa) instances.",
            "table_column_names": [
                "<bold>Split</bold>",
                "<bold>NLI Model</bold>",
                "<bold>Incor.</bold>",
                "Δ",
                "↑",
                "↓"
            ],
            "table_content_values": [
                [
                    "Val",
                    "<italic>Original</italic>",
                    "42.1%",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Val",
                    "Random",
                    "50.7%",
                    "+8.6",
                    "16",
                    "26"
                ],
                [
                    "Val",
                    "DA",
                    "51.4%",
                    "+9.3",
                    "13",
                    "23"
                ],
                [
                    "Val",
                    "SSE",
                    "45.8%",
                    "+3.7",
                    "18",
                    "22"
                ],
                [
                    "Val",
                    "ESIM",
                    "39.3%",
                    "-2.8",
                    "23",
                    "20"
                ],
                [
                    "Val",
                    "InferSent",
                    "38.3%",
                    "-3.8",
                    "24",
                    "20"
                ],
                [
                    "[EMPTY]",
                    "BERT",
                    "28.0%",
                    "-14.1",
                    "25",
                    "10"
                ],
                [
                    "Test",
                    "<italic>Original</italic>",
                    "26.0%",
                    "[EMPTY]",
                    "[EMPTY]",
                    "[EMPTY]"
                ],
                [
                    "Test",
                    "ESIM",
                    "29.0%",
                    "+3.0",
                    "11",
                    "14"
                ]
            ]
        },
        "gold_description": "for 107 out of the 200 documents , an incorrect and correct summary is among the 5 alternatives . table 2 shows that in this sample from the validation data , the fraction of incorrect summaries at first position , when the 5 alternatives are ranked as during beam search , is at 42 . 1 % . using entailment probabilities of esim and infersent , we can slightly improve upon that and reduce incorrect summaries . however , with da and sse , more incorrect summaries end up in the first position . note that these results are not in line with the model ' s nli accuracies , underlining that performance on nli does not directly transfer to our task . only for bert , which outperforms the other models on nli by a large margin , we also see substantially better reranking performance . but even for this powerful model , more than half of the errors still remain in the summaries . 5 interestingly , we also find that for esim and infersent , reranking hurts in many cases , leaving just a few cases of net improvement . given the validation results , we then applied reranking to the cnn - dm test data followed by a post - hoc correctness evaluation as in section 4 . we used the esim model and reranked all 10 beam hypotheses generated by fas . 6 in contrast to the validation sample , the fraction of incorrect summaries increases from 26 % to 29 % ( table 2 ) , demonstrating that the slight improvement on the validation data does not transfer to the test set .",
        "generated_description": "for each model , we report the absolute difference in f1 - scores on the validation and test sets , as well as the corresponding δ on the incorpus . for each split , we also report the percentage of sentences that differ by at least one word from the original sentence ( i . e . , δ = 1 for infersent , sse , esim , and da ) . for bert and elmo , the difference is typically much smaller ."
    },
    {
        "table_id": "478",
        "table_info": {
            "table_caption": "Table 2: French contraction rules.",
            "table_column_names": [
                "à le → au",
                "de lequel → duquel"
            ],
            "table_content_values": [
                [
                    "à les → aux",
                    "de lesquels → desquels"
                ],
                [
                    "à lequel → auquel",
                    "de lesquelles → desquelles"
                ],
                [
                    "à lesquels → auxquels",
                    "en les → ès"
                ],
                [
                    "à lesquelles → auxquelles",
                    "vois ci → voici"
                ],
                [
                    "de le → du",
                    "vois là → voilà"
                ],
                [
                    "de les → des",
                    "[EMPTY]"
                ]
            ]
        },
        "gold_description": "the two best - performing approaches in the task of generating sentences from dependency trees have been feature - based incremental text generation ( bohnet et al . , 2010 ; liu et al . , 2015 ; puduppully et al . , 2016 ; king and white , 2018 ) and 2http : / / universaldependencies . org / techniques performing more global input - output mapping ( castro ferreira et al . , 2018 ; elder and hokamp , 2018 ) . each of these approaches has their advantages and limitations ( table 2 ) .",
        "generated_description": "french contraction rules are defined as follows . the first rule is the contraction of auxquels to auxquelles ( “ de les quelles ” ) . the second rule is similar to the second rule , but the third rule is a modification of the first rule by adding the suffix “ de lequel ” , which means that the second contraction rule should be identical to the previous rule . the rest of the rules are the same as those defined in the previous paragraph except for the final rule which ensures that all the languages have the same number of contraction rules ."
    },
    {
        "table_id": "479",
        "table_info": {
            "table_caption": "Table 1: Accuracy of postle models on *BLESS datasets, for two different sets of English distributional vectors: Skip-Gram (SG) and GloVe (GL). lear reports highest scores on *BLESS datasets in the literature.",
            "table_column_names": [
                "[EMPTY]",
                "Setup: Full DBLESS",
                "Setup: Full DBLESS",
                "Setup: Full WBLESS",
                "Setup: Full WBLESS",
                "Setup: Full BIBLESS",
                "Setup: Full BIBLESS",
                "Setup: Disjoint DBLESS",
                "Setup: Disjoint DBLESS",
                "Setup: Disjoint WBLESS",
                "Setup: Disjoint WBLESS",
                "Setup: Disjoint BIBLESS",
                "Setup: Disjoint BIBLESS"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "SG",
                    "GL",
                    "SG",
                    "GL",
                    "SG",
                    "GL",
                    "SG",
                    "GL",
                    "SG",
                    "GL",
                    "SG",
                    "GL"
                ],
                [
                    "lear [Vulic:2018naaclps]",
                    ".957",
                    ".955",
                    ".905",
                    ".910",
                    ".872",
                    ".875",
                    ".528",
                    ".531",
                    ".555",
                    ".529",
                    ".381",
                    ".389"
                ],
                [
                    "postle dffn",
                    ".957",
                    ".955",
                    ".905",
                    ".910",
                    ".872",
                    ".875",
                    ".898",
                    ".825",
                    ".754",
                    ".746",
                    ".696",
                    ".677"
                ],
                [
                    "postle adv",
                    ".957",
                    ".955",
                    ".905",
                    ".910",
                    ".872",
                    ".875",
                    "<bold>.942</bold>",
                    "<bold>.888</bold>",
                    "<bold>.832</bold>",
                    "<bold>.766</bold>",
                    "<bold>.757</bold>",
                    "<bold>.690</bold>"
                ]
            ]
        },
        "gold_description": "the accuracy scores on * bless test sets are provided in table 1 . 8 our postle models display exactly the same performance as lear in the full setting : this is simply because all words found in * bless datasets are covered by the lexical constraints , and postle does not generalize the initial lear transformation to unseen test words . in the disjoint setting , however , lear is left \" blind \" as it has not seen a single test word in the constraints : it leaves distributional vectors of * bless test words identical . in this setting , lear performance is equivalent to the original distributional space . in contrast , learning to generalize the le specialization function from lear - specializations of other words , postle models are able to successfully le - specialize vectors of test * bless words . as in the graded le , the adversarial postle architecture outperforms the simpler dffn model .",
        "generated_description": "in the full - dbless setup , our system outperforms the previous state - of - the - art system lear [ vulic : 2018naaclps ] by a large margin . in the disjoint setup , we outperform the previous best system lear by . 957 with sg sg and . 955 with gl sg with sg and gl ."
    },
    {
        "table_id": "480",
        "table_info": {
            "table_caption": "Table 2: Average precision (AP) of postle models in cross-lingual transfer. Results are shown for both postle models (dffn and adv), two target languages (Spanish and French) and three methods for inducing bilingual vector spaces: Ar [Artetxe:2018acl], Co [Conneau:2018iclr], and Sm [Smith:2017iclr].",
            "table_column_names": [
                "<bold>Random</bold>",
                "Target: Spanish .498",
                "Target: Spanish .498",
                "Target: Spanish .498",
                "Target: French .515",
                "Target: French .515",
                "Target: French .515"
            ],
            "table_content_values": [
                [
                    "<bold>Distributional</bold>",
                    ".362",
                    ".362",
                    ".362",
                    ".387",
                    ".387",
                    ".387"
                ],
                [
                    "[EMPTY]",
                    "Ar",
                    "Co",
                    "Sm",
                    "Ar",
                    "Co",
                    "Sm"
                ],
                [
                    "postle dffn",
                    "<bold>.798</bold>",
                    ".740",
                    ".728",
                    ".688",
                    ".735",
                    ".742"
                ],
                [
                    "postle adv",
                    ".768",
                    "<bold>.790</bold>",
                    "<bold>.782</bold>",
                    "<bold>.746</bold>",
                    "<bold>.770</bold>",
                    "<bold>.786</bold>"
                ]
            ]
        },
        "gold_description": "the average precision ( ap ) ranking scores achieved via cross - lingual transfer of postle are shown in table 2 . we report ap scores using three methods for cross - lingual word embedding induction , and compare their performance to two baselines : 1 ) random word pair scoring , and 2 ) the original ( fasttext ) vectors . the results uncover the inability of distributional vectors to capture le – they yield lower performance than the random baseline , which strongly emphasizes the need for the le - specialization . the transferred postle yields an immense improve",
        "generated_description": "we observe that both postle models , dffn and adv , outperform the distributional method by a wide margin , with adv obtaining the best results for both languages and the two target languages . interestingly , we observe that dffn performs better than adv even when the target language is the same as the source language , as in cross - lingual transfer . we hypothesize that this is due to the fact that adv is able to exploit the shared information between the two languages to better exploit the information between them , which leads to better generalization ."
    },
    {
        "table_id": "481",
        "table_info": {
            "table_caption": "Table 4: Evaluations based on maximum span, MINA, and head spans on the CoNLL-2012 test set and WikiCoref. The ranking of corresponding scores is specified in parentheses. Rankings which are different based on maximum vs. MINA spans are highlighted.",
            "table_column_names": [
                "[EMPTY]",
                "CoNLL max",
                "CoNLL MINA",
                "CoNLL head",
                "LEA max",
                "LEA MINA",
                "LEA head"
            ],
            "table_content_values": [
                [
                    "[EMPTY]",
                    "CoNLL-2012 test set",
                    "CoNLL-2012 test set",
                    "CoNLL-2012 test set",
                    "CoNLL-2012 test set",
                    "CoNLL-2012 test set",
                    "CoNLL-2012 test set"
                ],
                [
                    "Stanford rule-based",
                    "55.60 (8)",
                    "57.55 (8)",
                    "57.38 (8)",
                    "47.31 (8)",
                    "49.65 (8)",
                    "49.44 (8)"
                ],
                [
                    "cort",
                    "63.03 (7)",
                    "64.60 (6)",
                    "64.51 (6)",
                    "56.10 (6)",
                    "58.05 (6)",
                    "57.93 (6)"
                ],
                [
                    "Peng et al.",
                    "63.05 (6)",
                    "63.50 (7)",
                    "63.54 (7)",
                    "55.22 (7)",
                    "55.76 (7)",
                    "55.80 (7)"
                ],
                [
                    "deep-coref ranking",
                    "65.59 (5)",
                    "67.29 (5)",
                    "67.09 (5)",
                    "59.58 (5)",
                    "61.70 (5)",
                    "61.43 (5)"
                ],
                [
                    "deep-coref RL",
                    "65.81 (4)",
                    "67.50 (4)",
                    "67.36 (4)",
                    "59.76 (4)",
                    "61.84 (4)",
                    "61.64 (4)"
                ],
                [
                    "Lee et al. 2017 single",
                    "67.23 (3)",
                    "68.55 (3)",
                    "68.53 (3)",
                    "61.24 (3)",
                    "62.87 (3)",
                    "62.82 (3)"
                ],
                [
                    "Lee et al. 2017 ensemble",
                    "68.87 (2)",
                    "70.12 (2)",
                    "70.05 (2)",
                    "63.19 (2)",
                    "64.76 (2)",
                    "64.64 (2)"
                ],
                [
                    "Lee et al. 2018",
                    "72.96 (1)",
                    "74.26 (1)",
                    "75.29 (1)",
                    "67.73 (1)",
                    "69.32 (1)",
                    "70.40 (1)"
                ],
                [
                    "[EMPTY]",
                    "WikiCoref",
                    "WikiCoref",
                    "WikiCoref",
                    "WikiCoref",
                    "WikiCoref",
                    "WikiCoref"
                ],
                [
                    "Stanford rule-based",
                    "51.78 (4)",
                    "53.79 (5)",
                    "57.10 (4)",
                    "43.28 (5)",
                    "45.48 (6)",
                    "49.28 (4)"
                ],
                [
                    "deep-coref ranking",
                    "52.90 (3)",
                    "55.16 (2)",
                    "57.13 (3)",
                    "44.40 (3)",
                    "46.98 (3)",
                    "49.05 (5)"
                ],
                [
                    "deep-coref RL",
                    "50.73 (5)",
                    "54.26 (4)",
                    "57.16 (2)",
                    "41.98 (6)",
                    "46.02 (4)",
                    "49.29 (3)"
                ],
                [
                    "Lee et al. 2017 single",
                    "50.38 (6)",
                    "52.16 (6)",
                    "54.02 (6)",
                    "43.86 (4)",
                    "45.75 (5)",
                    "47.69 (6)"
                ],
                [
                    "Lee et al. 2017 ensemble",
                    "53.63 (2)",
                    "55.03 (3)",
                    "56.80 (5)",
                    "47.50 (2)",
                    "48.98 (2)",
                    "50.87 (2)"
                ],
                [
                    "Lee et al. 2018",
                    "57.89 (1)",
                    "59.90 (1)",
                    "61.33 (1)",
                    "52.42 (1)",
                    "54.63 (1)",
                    "56.19 (1)"
                ]
            ]
        },
        "gold_description": "the reinforcement learning model of deep - coref , i . e . , deep - coref rl , has the most significant difference when it is evaluated based on maximum vs . minimum spans ( about 4 points ) . the ensemble model of e2e - coref , on the other hand , has the least difference between maximum and minimum span scores ( 1 . 4 points ) , which indicates it better recognizes maximum span boundaries in out - of - domain data . the ranking of systems is very different by using maximum vs . min table 4 shows the maximum vs . minimum span evaluations of several recent coreference resolvers on the conll - 2012 test set and the wikicoref dataset . the examined coreference resolvers are as follows : the stanford rule - based system ( lee et al . , 2013 ) , the coreference resolver of peng et al . ( 2015 ) , the ranking model of cort ( martschat and strube , 2015 ) , the ranking and reinforcement learning models of deep - coref ( clark and manning , 2016a , b ) , the single and ensemble models of lee et al . ( 2017 ) , and the current stateof - the - art system by lee et al . ( 2018 ) . the coreference resolver of peng et al . ( 2015 ) has the smallest difference between its maximum and minimum span evaluation scores . based on maximum spans , peng et al . ( 2015 ) performs on - par with cort while cort outperforms it by about one percent when they are evaluated based on minimum spans .",
        "generated_description": "we observe that the deep - coref ranking model achieves the best performance on the conll - 2012 test set , while the stanford rule - based baseline is the best on the lea test set . both of our models outperform peng et al . ’ s model on the max and mina settings , but not the head setting ."
    },
    {
        "table_id": "482",
        "table_info": {
            "table_caption": "Table 1: Quality of the regression model’s predictions on the test set.",
            "table_column_names": [
                "[EMPTY]",
                "MSE",
                "R2"
            ],
            "table_content_values": [
                [
                    "Experiment 1",
                    "0.03448",
                    "0.12238"
                ],
                [
                    "Experiment 2",
                    "0.03068",
                    "0.17576"
                ],
                [
                    "Experiment 3, random regression",
                    "0.17112",
                    "-3.39857"
                ]
            ]
        },
        "gold_description": "table 1 shows and compares mse and r2 reported from these experiments . the results show that in experiment 2 , the mean squared error is reduced and the r2 score is increased .",
        "generated_description": "in order to evaluate the quality of the regression model ’ s predictions on the test set , we trained and evaluated the model in three separate experiments . the mse of the random regression model was worse than that of the other two , indicating that the model did not overfit to the training set . the r2 score for the random model was larger than that for the regression models in experiment 1 and 2 , which indicates that the models were overfitted to the train set . in the third and final experiment , we used a random split of the data for training and testing , which resulted in a slightly worse mse than that in the first experiment ."
    },
    {
        "table_id": "483",
        "table_info": {
            "table_caption": "TABLE III: The Accuracy of Different Syntactic Representations",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] CCAT10",
                "[BOLD] CCAT50",
                "[BOLD] BLOGS10",
                "[BOLD] BLOGS50"
            ],
            "table_content_values": [
                [
                    "ST-CNN",
                    "22.8",
                    "10.08",
                    "48.64",
                    "42.91"
                ],
                [
                    "POS-CNN",
                    "61.40",
                    "40.98",
                    "68.26",
                    "54.85"
                ],
                [
                    "POS-HAN",
                    "[BOLD] 63.14",
                    "[BOLD] 41.30",
                    "[BOLD] 69.32",
                    "[BOLD] 57.76"
                ]
            ]
        },
        "gold_description": "table iii reports the accuracy of different syntactic representations for all the benchmark datasets . in st encoding , the the corresponding paper . the experimental results demon strate that our proposed syntactic representation ( pos - cnn outperforms the previously proposed method ( st - cnn ) by the benchmark datasets ( 38 . 6 % in a large margin in all ccat10 , 30 . 80 % in ccat50 , 19 . 62 % in blogs10 , 11 . 94 % in blogs50 ) . this improvement in performance can be due syntactic representations are kept identical . according to table iii , pos - han outperforms pos - cnn model consistently across all the benchmark datasets ( 1 . 74 % in ccat10 , 0 . 32 % in ccat50 , 1 . 06 % in blogs10 , 2 . 91 % in blogs50 ) . this",
        "generated_description": "the pos - han outperforms the pos - cnn and st - cnn by a large margin on both ccat10 and blogs50 datasets , which demonstrates the effectiveness of the proposed hierarchical attention network . it is worth noting that the pos representations are more discriminative than the traditional convolutional neural networks , which can be attributed to two reasons . first , the pos embeddings are trained on a large amount of unlabeled data , which may not be suitable for the task of sentiment analysis . second , the representations learned by the pos encoders are better than the representations learnt by the traditional neural networks ."
    },
    {
        "table_id": "484",
        "table_info": {
            "table_caption": "TABLE IV: The Accuracy of Syntactic (Syntactic-HAN), Lexical (Lexical-HAN),and combined (Style-HAN) Models",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] CCAT10",
                "[BOLD] CCAT50",
                "[BOLD] BLOGS10",
                "[BOLD] BLOGS50"
            ],
            "table_content_values": [
                [
                    "Syntactic-HAN",
                    "63.14",
                    "41.30",
                    "69.32",
                    "57.76"
                ],
                [
                    "Lexical-HAN",
                    "86.04",
                    "79.50",
                    "70.81",
                    "59.77"
                ],
                [
                    "Style-HAN",
                    "[BOLD] 90.58",
                    "[BOLD] 82.35",
                    "[BOLD] 72.83",
                    "[BOLD] 61.19"
                ]
            ]
        },
        "gold_description": "the table , lexical model consistently outperforms the syntactic model across all the benchmark datasets . moreover , combining the two representations further improves the performance results . based on the observation , we realize that even if syntactic - han achieves a comparable performance results combining it with lexical - han , slightly improves the overall performance ( style - han ) . as shown in table iv , the performance improvement in terms of accuracy is consistent across all the benchmark datasets ( 4 . 54 % in ccat10 , 2 . 85 % in ccat50 , 2 . 02 % in blogs10 , 1 . 42 % in blogs50 )",
        "generated_description": "we can see that the style - han model outperforms the syntactic , lexical , and combined models for all the three datasets . for example , on ccat10 dataset , the accuracies of the lexical and style - hannual models are all above 80 % , and the combined model achieves the highest accuracy of 90 . 58 % ."
    },
    {
        "table_id": "485",
        "table_info": {
            "table_caption": "TABLE V: The accuracy of Different Fusion Approaches",
            "table_column_names": [
                "[BOLD] Dataset",
                "[BOLD] Combined",
                "[BOLD] Parallel"
            ],
            "table_content_values": [
                [
                    "CCAT10",
                    "88.36",
                    "90.58"
                ],
                [
                    "CCAT50",
                    "81.21",
                    "82.35"
                ],
                [
                    "BLOG10",
                    "67.38",
                    "72.83"
                ],
                [
                    "BLOG50",
                    "58.81",
                    "61.19"
                ]
            ]
        },
        "gold_description": "table v reports the accuracy of the combined and the parallel fusion approaches . according to these results , training two parallel networks for lexical and syntax encoding achieves higher accuracy when compared to training the same network with combined embeddings .",
        "generated_description": "in this section , we compare the performance of different fusion approaches in terms of the accuracy achieved by different fusion methods . the results are shown in tab . as can be seen , the combined approach achieves higher accuracy than the separate one for both the ccat10 and blog10 datasets . the reason is that the two datasets are highly imbalanced , which results in a higher overlap between the positive and negative classes . in addition , the blog50 dataset is more imbalanced than the citeseer dataset , which may result in a lower accuracy of the hybrid approach ."
    },
    {
        "table_id": "486",
        "table_info": {
            "table_caption": "TABLE VI: Test Accuracy of models for each dataset",
            "table_column_names": [
                "[BOLD] Model",
                "[BOLD] CCAT10",
                "[BOLD] CCAT50",
                "[BOLD] BLOGS10",
                "[BOLD] BLOGS50"
            ],
            "table_content_values": [
                [
                    "SVM-affix-punctuation 3-grams",
                    "78.8",
                    "69.3",
                    "#",
                    "#"
                ],
                [
                    "CNN-char",
                    "#",
                    "#",
                    "61.2",
                    "49.4"
                ],
                [
                    "Continuous n-gram",
                    "74.8",
                    "72.6",
                    "61.34",
                    "52.82"
                ],
                [
                    "N-gram CNN",
                    "86.8",
                    "76.5",
                    "63.74",
                    "53.09"
                ],
                [
                    "Syntax-CNN",
                    "88.20",
                    "81.00",
                    "64.10",
                    "56.73"
                ],
                [
                    "Style-HAN",
                    "[BOLD] 90.58",
                    "[BOLD] 82.35",
                    "[BOLD] 72.83",
                    "[BOLD] 61.19"
                ]
            ]
        },
        "gold_description": "table vi reports the accuracy of the models on the four benchmark datasets . all the results are bold . it shows that style - han outperforms the baselines by 2 . 38 % , 1 . 35 % , 8 . 73 % , and 4 . 46 % over the ccat10 , ccat50 , blogs10 , and blogs50 datasets , respectively .",
        "generated_description": "for the ccat10 and blogs50 datasets , style - han outperforms all the other models by a significant margin . for both datasets , the accuracy of the n - gram cnn model is significantly higher than the cnn - char model and the svm - affix - punctuation 3 - gram model . this is due to the fact that the use of punctuation does not improve the performance of the cnn model on this dataset ."
    },
    {
        "table_id": "487",
        "table_info": {
            "table_caption": "Table 2: Experimental results for the discussion forum dataset (bold are best scores)",
            "table_column_names": [
                "Experiment",
                "[ITALIC] S P",
                "[ITALIC] S R",
                "[ITALIC] S F1",
                "[ITALIC] NS P",
                "[ITALIC] NS R",
                "[ITALIC] NS F1"
            ],
            "table_content_values": [
                [
                    "SVM [ITALIC] rbl",
                    "65.55",
                    "66.67",
                    "66.10",
                    "66.10",
                    "64.96",
                    "65.52"
                ],
                [
                    "SVM [ITALIC] c+ [ITALIC] rbl",
                    "63.32",
                    "61.97",
                    "62.63",
                    "62.77",
                    "64.10",
                    "63.5"
                ],
                [
                    "LSTM [ITALIC] r",
                    "67.90",
                    "66.23",
                    "67.1",
                    "67.08",
                    "[BOLD] 68.80",
                    "67.93"
                ],
                [
                    "LSTM [ITALIC] c+LSTM [ITALIC] r",
                    "66.19",
                    "79.49",
                    "72.23",
                    "74.33",
                    "59.40",
                    "66.03"
                ],
                [
                    "LSTM [ITALIC] conditional",
                    "[BOLD] 70.03",
                    "76.92",
                    "[BOLD] 73.32",
                    "74.41",
                    "67.10",
                    "[BOLD] 70.56"
                ],
                [
                    "LSTM [ITALIC] ras",
                    "69.45",
                    "70.94",
                    "70.19",
                    "70.30",
                    "68.80",
                    "69.45"
                ],
                [
                    "LSTM [ITALIC] cas+LSTM [ITALIC] ras",
                    "66.90",
                    "[BOLD] 82.05",
                    "[BOLD] 73.70",
                    "[BOLD] 76.80",
                    "59.40",
                    "66.99"
                ],
                [
                    "LSTM [ITALIC] caw+ [ITALIC] s+LSTM [ITALIC] raw+ [ITALIC] s",
                    "65.90",
                    "74.35",
                    "69.88",
                    "70.59",
                    "61.53",
                    "65.75"
                ]
            ]
        },
        "gold_description": "table 2 shows the classification results on the discussion forum dataset . although a vast majority of the context posts contain 3 - 4 sentences , around 100 context posts have more than ten sentences and thus we set a cutoff to a maximum of ten sentences for context modeling . for the reply r we considered the entire reply . the sv mbl models that are based on discrete features did not perform very well , and adding context actually hurt the performance . regarding the performance of the neural network models , we observe that modeling context improves the performance using all types of lstm architectures that read both context ( c ) and reply ( r ) the highest performance when considering both the s and s classes is achieved by the lstmconditional model ( 73 . 32 % f1 for s class and 70 . 56 % f1 for s , showing a 6 % and 3 % improvement over lstmr for s and s classes , respectively ) . the lstm model with sentence - level attentions on both context and reply ( lstmcas + lstmras ) gives the best f1 score of 73 . 7 % for the s class . for the s class , while we notice an improvement in precision we notice a drop in recall when compared to the lstm model with sentence level attention only on reply ( lstmras ) . we observe the performance ( 69 . 88 % f1 for s category ) deteriorates , probably due to the lack of enough training data .",
        "generated_description": "we observe that the lstm models perform better than the simple svm and svm models for both s and ns , with the conditional model performing slightly better for s . the best overall results are achieved by combining the conditional and recurrent lstms , with an f1 - score of 73 . 32 % for s and 74 . 41 % for ns . the model with the best overall performance for s is the conditional one , where the model that uses the last hidden state of the recurrent network ( lstmr ) performs the best ."
    },
    {
        "table_id": "488",
        "table_info": {
            "table_caption": "Table 3: Experimental results for Twitter dataset (bold are best scores)",
            "table_column_names": [
                "Experiment",
                "[ITALIC] S P",
                "[ITALIC] S R",
                "[ITALIC] S F1",
                "[ITALIC] NS P",
                "[ITALIC] NS R",
                "[ITALIC] NS F1"
            ],
            "table_content_values": [
                [
                    "SVM [ITALIC] rbl",
                    "64.20",
                    "64.95",
                    "64.57",
                    "69.0",
                    "68.30",
                    "68.7"
                ],
                [
                    "SVM [ITALIC] c+ [ITALIC] rbl",
                    "65.64",
                    "65.86",
                    "65.75",
                    "70.11",
                    "69.91",
                    "70.0"
                ],
                [
                    "LSTM [ITALIC] r",
                    "73.25",
                    "58.72",
                    "65.19",
                    "61.47",
                    "75.44",
                    "67.74"
                ],
                [
                    "LSTM [ITALIC] c+LSTM [ITALIC] r",
                    "70.89",
                    "67.95",
                    "69.39",
                    "64.94",
                    "68.03",
                    "66.45"
                ],
                [
                    "LSTM [ITALIC] conditional",
                    "76.08",
                    "[BOLD] 76.53",
                    "[BOLD] 76.30",
                    "[BOLD] 72.93",
                    "72.44",
                    "[BOLD] 72.68"
                ],
                [
                    "LSTM [ITALIC] ras",
                    "76.00",
                    "73.18",
                    "74.56",
                    "70.52",
                    "73.52",
                    "71.9"
                ],
                [
                    "LSTM [ITALIC] cas+LSTM [ITALIC] ras",
                    "[BOLD] 77.25",
                    "75.51",
                    "[BOLD] 76.36",
                    "72.65",
                    "[BOLD] 74.52",
                    "[BOLD] 73.57"
                ],
                [
                    "LSTM [ITALIC] caw+LSTM [ITALIC] raw",
                    "76.74",
                    "69.77",
                    "73.09",
                    "68.63",
                    "75.77",
                    "72.02"
                ],
                [
                    "LSTM [ITALIC] caw+ [ITALIC] s+LSTM [ITALIC] raw+ [ITALIC] s",
                    "76.42",
                    "71.37",
                    "73.81",
                    "69.50",
                    "74.77",
                    "72.04"
                ]
            ]
        },
        "gold_description": "table 3 shows the results on the twitter dataset . as for discussion forums , adding context using the svm models does not show a statistically significant improvement . for the neural networks model , similar to the results on discussion forums , the lstm models that read both context and reply outperform the lstm model that reads only the reply ( lstmr ) . the best performing architectures are again the lstmconditional and lstm with sentence - level attentions ( lstmcas + lstmras ) . lstmconditional model shows an improvement of 11 % f1 on the s class and 4 - 5 % f1 on the s class , compared to lstmr . for the attentionbased models , the improvement using context is smaller ( ∼ 2 % f1 ) .",
        "generated_description": "first , we observe that the conditional model performs the best on both s and ns , followed by the lstm conditioned model . the conditional model outperforms all the other models on s , but underperforms on ns . this may be due to the fact that the amount of training data in s is smaller than that in ns , which makes it easier for the model to overfit to the training data . second , the best performing model on s is the one that combines the svm with the contextual word features ( svmc + rbl ) , while the best performance on ns is achieved by the model that only uses the context word features , svmrbl . finally , we see that the best overall performance is achieved when the model is trained on the concatenation of the last hidden states of the two lstms ( lstmras ) ."
    },
    {
        "table_id": "489",
        "table_info": {
            "table_caption": "Table 2: Speaker-dependent setup. All results are averaged across five folds where each fold present weighted F-score across both sarcastic and non-sarcastic classes.",
            "table_column_names": [
                "Algorithm",
                "Modality",
                "Precision",
                "Recall",
                "F-Score"
            ],
            "table_content_values": [
                [
                    "Majority",
                    "-",
                    "25.0",
                    "50.0",
                    "33.3"
                ],
                [
                    "Random",
                    "-",
                    "49.5",
                    "49.5",
                    "49.8"
                ],
                [
                    "SVM",
                    "T",
                    "65.1",
                    "64.6",
                    "64.6"
                ],
                [
                    "SVM",
                    "A",
                    "65.9",
                    "64.6",
                    "64.6"
                ],
                [
                    "SVM",
                    "V",
                    "68.1",
                    "67.4",
                    "67.4"
                ],
                [
                    "SVM",
                    "T+A",
                    "66.6",
                    "66.2",
                    "66.2"
                ],
                [
                    "SVM",
                    "T+V",
                    "[BOLD] 72.0",
                    "[BOLD] 71.6",
                    "[BOLD] 71.6"
                ],
                [
                    "SVM",
                    "A+V",
                    "66.2",
                    "65.7",
                    "65.7"
                ],
                [
                    "SVM",
                    "T+A+V",
                    "71.9",
                    "71.4",
                    "71.5"
                ],
                [
                    "Δ [ITALIC] multi− [ITALIC] unimodal",
                    "[EMPTY]",
                    "↑3.9%",
                    "↑4.2%",
                    "↑4.2%"
                ],
                [
                    "Error rate reduction",
                    "[EMPTY]",
                    "↑12.2%",
                    "↑12.9%",
                    "↑12.9%"
                ]
            ]
        },
        "gold_description": "table 2 presents the classification results for sarcasm prediction in the speaker - dependent setup . the lowest performance is obtained with the majority baseline which achieves 33 . 3 % weighted fscore ( 66 . 7 % f - score for non - sarcastic class and 0 % for sarcastic ) . the pre - trained features for the visual modality provide the best performance among the unimodal variants . the addition of textual features through concatenation improves the unimodal baseline and achieves the best performance . the tri - modal variant is unable to achieve the best score due to a slightly sub - optimal performance from the audio modality . overall , the combination of visual and textual signals significantly improves over the unimodal variants , with a relative error rate reduction of up to 12 . 9 % . in multiple evaluations , the multimodal variants were shown to significantly outperform their unimodal counterparts , with relative error rate reductions of up to 12 . 9 % .",
        "generated_description": "we observe that the multimodal combination of visual and acoustic features ( i . e . , t , a , and v ) improves the performance of the svm classifier by 4 . 2 % in terms of f - score , and that the best performance is achieved when all modalities are combined . we also observe that svm with visual and audio modalities outperforms the random baseline by a large margin ."
    },
    {
        "table_id": "490",
        "table_info": {
            "table_caption": "Table 3: Multimodal sarcasm classification. Evaluated using an speaker-independent setup. Note: T=text, A=audio, V=video.",
            "table_column_names": [
                "Algorithm",
                "Modality",
                "Precision",
                "Recall",
                "F-Score"
            ],
            "table_content_values": [
                [
                    "Majority",
                    "-",
                    "32.8",
                    "57.3",
                    "41.7"
                ],
                [
                    "Random",
                    "-",
                    "51.1",
                    "50.2",
                    "50.4"
                ],
                [
                    "SVM",
                    "T",
                    "60.9",
                    "59.6",
                    "59.8"
                ],
                [
                    "SVM",
                    "A",
                    "[BOLD] 65.1",
                    "62.6",
                    "62.7"
                ],
                [
                    "SVM",
                    "V",
                    "54.9",
                    "53.4",
                    "53.6"
                ],
                [
                    "SVM",
                    "T+A",
                    "64.7",
                    "[BOLD] 62.9",
                    "[BOLD] 63.1"
                ],
                [
                    "SVM",
                    "T+V",
                    "62.2",
                    "61.5",
                    "61.7"
                ],
                [
                    "SVM",
                    "A+V",
                    "64.1",
                    "61.8",
                    "61.9"
                ],
                [
                    "SVM",
                    "T+A+V",
                    "64.3",
                    "62.6",
                    "62.8"
                ],
                [
                    "Δ [ITALIC] multi− [ITALIC] unimodal",
                    "[EMPTY]",
                    "↓0.4%",
                    "↑0.3%",
                    "↑0.4%"
                ],
                [
                    "Error rate reduction",
                    "[EMPTY]",
                    "↓1.1%",
                    "↑0.8%",
                    "↑1.1%"
                ]
            ]
        },
        "gold_description": "table 3 presents the performance of our baselines in the speaker - independent setup . in this case , the multimodal variants do not greatly outperform the unimodal counterparts . unlike table 2 , the audio channel plays a more important role , and it is slightly improved by adding text . in multiple evaluations , the multimodal variants were shown to significantly outperform their unimodal counterparts , with relative error rate reductions of up to 12 . 9 % .",
        "generated_description": "we observe that the combination of visual and audio modalities ( a , t , and v ) improves the performance of the svm classifier by a significant margin ( δmulti − unimodal = 0 . 4 % in f - score ) . the best performance is achieved when all modalities are used together ( i . e . , t + a and t + v ) , yielding an f - score of 63 . 1 % and an error rate reduction of 0 . 4 % . we also observe that combining visual and acoustic modalities leads to an improvement in the error rate by a small margin ( 0 . 3 % ) ."
    },
    {
        "table_id": "491",
        "table_info": {
            "table_caption": "Table 4: Role of context and utterance’s speaker. Note: T=text, A=audio, V=video.",
            "table_column_names": [
                "Setup",
                "Features",
                "Precision",
                "Recall",
                "F-Score"
            ],
            "table_content_values": [
                [
                    "Speaker Dependent",
                    "T",
                    "65.1",
                    "64.6",
                    "64.6"
                ],
                [
                    "Speaker Dependent",
                    "+ context",
                    "65.5",
                    "65.1",
                    "65.0"
                ],
                [
                    "Speaker Dependent",
                    "+ speaker",
                    "[BOLD] 67.7",
                    "[BOLD] 67.2",
                    "[BOLD] 67.3"
                ],
                [
                    "Speaker Dependent",
                    "Best (T + V)",
                    "72.0",
                    "71.6",
                    "[BOLD] 71.8"
                ],
                [
                    "Speaker Dependent",
                    "+ context",
                    "71.9",
                    "71.4",
                    "71.5"
                ],
                [
                    "Speaker Dependent",
                    "+ speaker",
                    "[BOLD] 72.1",
                    "[BOLD] 71.7",
                    "[BOLD] 71.8"
                ],
                [
                    "Speaker Independent",
                    "T",
                    "[BOLD] 60.9",
                    "59.6",
                    "59.8"
                ],
                [
                    "Speaker Independent",
                    "+ context",
                    "57.9",
                    "54.5",
                    "54.1"
                ],
                [
                    "Speaker Independent",
                    "+ speaker",
                    "60.7",
                    "[BOLD] 60.7",
                    "[BOLD] 60.7"
                ],
                [
                    "Speaker Independent",
                    "Best (T + A)",
                    "64.7",
                    "[BOLD] 62.9",
                    "[BOLD] 63.1"
                ],
                [
                    "Speaker Independent",
                    "+ context",
                    "[BOLD] 65.2",
                    "[BOLD] 62.9",
                    "63.0"
                ],
                [
                    "Speaker Independent",
                    "+ speaker",
                    "64.7",
                    "[BOLD] 62.9",
                    "[BOLD] 63.1"
                ]
            ]
        },
        "gold_description": "table 4 shows the results for both evaluation settings for the textual baseline and the best multimodal variant . for the context features , we see a slight improvement in the best variant of the speaker independent setup ( text plus audio ) ; however , in other models , there is no improvement .",
        "generated_description": "the first two columns show the results for the speaker - dependent and the independent setups , respectively . the third and fourth columns present the scores for the best individual feature sets , and the fifth and sixth columns report the scores using the best feature sets from the previous experiment . we can see that the speaker information is helpful for both independent and dependent setups , with the independent setup giving the best results in terms of precision , recall and f - score . however , in the speaker dependent setup , the context features do not improve the performance over the baseline . this is probably due to the small size of the training data , which makes it hard for the network to learn sufficient features to generalize to unseen speakers ."
    }
]